{
  "name": "HumanEval_130_tri",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpkdrvzbar.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpkdrvzbar.java:57: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(1L + (n / 2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(1L + (n / 2));\n        result.add(1L + (n / 2) + (n / 2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3b47dh7h.java:57)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhwomg_p.java:59)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpcnn9g2mu.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpcnn9g2mu.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpd2nu8ns9.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpd2nu8ns9.java:55: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpuc08io2a.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpuc08io2a.java:55: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2) + tri(n - 1).get(3));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxgqrr3d9.java:70)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n % 2 == 0) {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n            return result;\n        }\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpsl0976v7.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                    ^\n/tmp/tmpsl0976v7.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                        ^\n/tmp/tmpsl0976v7.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                                            ^\n/tmp/tmpsl0976v7.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                ^\n/tmp/tmpsl0976v7.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                    ^\n/tmp/tmpsl0976v7.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                        ^\n/tmp/tmpsl0976v7.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmp7kgzui06.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp7kgzui06.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        for (int i = 3; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbuv8srhn.java:62)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        result.add(1L);\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "/tmp/tmpt8vazi26.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmplpdkqlu7.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmplpdkqlu7.java:57: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(n / 2);\n            result.add(1L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(1L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "/tmp/tmpcq5s2e1h.java:63: error: not a statement\n            result.add\n                  ^\n/tmp/tmpcq5s2e1h.java:63: error: ';' expected\n            result.add\n                      ^\n/tmp/tmpcq5s2e1h.java:65: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L + (n / 2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxf25d9ru.java:60)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhwomg_p.java:59)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpusqmfmjj.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpusqmfmjj.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n        } else {\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n            result.add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmp_fnkxc81.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                    ^\n/tmp/tmp_fnkxc81.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                            ^\n/tmp/tmp_fnkxc81.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                                                    ^\n/tmp/tmp_fnkxc81.java:36: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                    ^\n/tmp/tmp_fnkxc81.java:36: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                            ^\n/tmp/tmp_fnkxc81.java:36: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                                                    ^\n/tmp/tmp_fnkxc81.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n                                    ^\n/tmp/tmp_fnkxc81.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n                                                        ^\n/tmp/tmp_fnkxc81.java:37: error: incompatible types: possible lossy conversion from long to ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.tri(tmpf6sruqp1.java:43)\n\tat Problem.tri(tmpf6sruqp1.java:50)\n\tat Problem.main(tmpf6sruqp1.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "/tmp/tmpvb4j1sef.java:87: error: illegal start of expression\n    }\n    ^\n/tmp/tmpvb4j1sef.java:88: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "/tmp/tmp254eaacz.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpplezr4r6.java:60: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n));\n                                    ^\n/tmp/tmpplezr4r6.java:60: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n));\n                                                        ^\n/tmp/tmpplezr4r6.java:60: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n));\n                                                                          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmppdudzufx.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmppdudzufx.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n % 2 == 0) {\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n            return result;\n        }\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmplftypexx.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                    ^\n/tmp/tmplftypexx.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                                        ^\n/tmp/tmplftypexx.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                                                          ^\n/tmp/tmplftypexx.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n));\n                                ^\n/tmp/tmplftypexx.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n));\n                                                    ^\n/tmp/tmplftypexx.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n));\n                                                                      ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n == 3) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n            return result;\n        }\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpiur3_gjv.java:44: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                    ^\n/tmp/tmpiur3_gjv.java:44: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                                        ^\n/tmp/tmpiur3_gjv.java:44: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                                                            ^\n/tmp/tmpiur3_gjv.java:47: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                ^\n/tmp/tmpiur3_gjv.java:47: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                                    ^\n/tmp/tmpiur3_gjv.java:47: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                                                        ^\n/tmp/tmpiur3_gjv.java:48: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                ^\n/tmp/tmpiur3_gjv.java:48: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                                    ^\n/tmp/tmpiur3_gjv.java:48: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_xe8v0w.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n        } else {\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n            result.add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpeh5skx14.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                    ^\n/tmp/tmpeh5skx14.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                            ^\n/tmp/tmpeh5skx14.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                                                    ^\n/tmp/tmpeh5skx14.java:39: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                    ^\n/tmp/tmpeh5skx14.java:39: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                            ^\n/tmp/tmpeh5skx14.java:39: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                                                    ^\n/tmp/tmpeh5skx14.java:40: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n                                    ^\n/tmp/tmpeh5skx14.java:40: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n                                                        ^\n/tmp/tmpeh5skx14.java:40: error: incompatible types: possible lossy conversion from long to ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpoa787_bd.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpoa787_bd.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmppdudzufx.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmppdudzufx.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        for (int i = 3; i < n; i += 2) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.tri(tmpq69nd961.java:49)\n\tat Problem.main(tmpq69nd961.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(n / 2);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmprgx6097_.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5prs1ds.java:59)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmplfkd44ej.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(n / 2);\n            result.add(1L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpvivbvirn.java:49: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpvivbvirn.java:53: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpegnafczq.java:87: error: ')' expected\n            result.add(2\n                        ^\n/tmp/tmpegnafczq.java:89: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            n = n / 2;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            n = (n - 1) / 2;\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(result.get(i) + result.get(i + 1) + result.get(i + 2));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6z85p8a.java:57)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpixqo1gi1.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpixqo1gi1.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_xe8v0w.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpw4moy_jp.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpw4moy_jp.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpaxpq58uy.java:84: error: not a statement\n            result\n            ^\n/tmp/tmpaxpq58uy.java:84: error: ';' expected\n            result\n                  ^\n/tmp/tmpaxpq58uy.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpcumg5g0z.java:85: error: <identifier> expected\n            result.\n                   ^\n/tmp/tmpcumg5g0z.java:85: error: not a statement\n            result.\n                  ^\n/tmp/tmpcumg5g0z.java:87: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmplpdkqlu7.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmplpdkqlu7.java:57: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n            return result;\n        }\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp6aqrgvwq.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                    ^\n/tmp/tmp6aqrgvwq.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                        ^\n/tmp/tmp6aqrgvwq.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                                            ^\n/tmp/tmp6aqrgvwq.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                ^\n/tmp/tmp6aqrgvwq.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                    ^\n/tmp/tmp6aqrgvwq.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                        ^\n/tmp/tmp6aqrgvwq.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        for (int i = 3; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplw61vsae.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n < 1) {\n            return result;\n        }\n        result.add(1L);\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpc7dl_f9m.java:84: error: not a statement\n            result\n            ^\n/tmp/tmpc7dl_f9m.java:84: error: ';' expected\n            result\n                  ^\n/tmp/tmpc7dl_f9m.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmplpdkqlu7.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmplpdkqlu7.java:57: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp004bqzfo.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpd2nu8ns9.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpd2nu8ns9.java:55: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp9v9cmeey.java:63: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        result.add(1L);\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpf2nl02d7.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2) + tri(n - 1).get(0) + tri(n - 1).get(1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 2 out of bounds for length 2\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.tri(tmpjl8non2r.java:55)\n\tat Problem.main(tmpjl8non2r.java:59)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n        result.add(tri(n - 3).get(0) + tri(n - 3).get(1) + tri(n - 3).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.tri(tmpww4jcikr.java:43)\n\tat Problem.tri(tmpww4jcikr.java:50)\n\tat Problem.main(tmpww4jcikr.java:56)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpy0fvrv2g.java:84: error: not a statement\n            result\n            ^\n/tmp/tmpy0fvrv2g.java:84: error: ';' expected\n            result\n                  ^\n/tmp/tmpy0fvrv2g.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp5ewukri5.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp5ewukri5.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpixqo1gi1.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpixqo1gi1.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            result.add(0L);\n            result.add(1L);\n            result.add(2L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(0L);\n            result.add(1L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(0L);\n        result.add(1L);\n        result.add(2L);\n        result.add(8L);\n        result.add(3L);\n        result.add(5L);\n        result.add(4L);\n        result.add(7L);\n        result.add(6L);\n        result.add(9L);\n        result.add(8L);\n        result.add(11L);\n        result.add(10L);\n        result.add(13L);\n        result.add(12L);\n        result.add(15L);\n        result.add(14L);\n        result.add(17L);\n        result.add(16L);\n        result.add(19L);\n        result.add(18L);\n        result.add(21L);\n        result.add(20L);\n        result.add(23L);\n        result.add(22L);\n        result.add(25L);\n        result.add(24L);\n        result.add(27L);\n        result.add(26L);\n        result.add(29L);\n        result.add(28L);\n        result.add(31L);\n        result.add(30L);\n        result.add(33L);\n        result.add(32L);\n        result.add(35L);\n        result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpoopcxnrp.java:85: error: not a statement\n        result\n        ^\n/tmp/tmpoopcxnrp.java:85: error: ';' expected\n        result\n              ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(5L);\n            result.add(8L);\n            result.add(13L);\n            result.add(21L);\n            result.add(34L);\n            result.add(55L);\n            result.add(89L);\n            result.add(144L);\n            result.add(233L);\n            result.add(377L);\n            result.add(610L);\n            result.add(987L);\n            result.add(1597L);\n            result.add(2584L);\n            result.add(4181L);\n            result.add(6765L);\n            result.add(10946L);\n            result.add(17711L);\n            result.add(28657L);\n            result.add(46368L);\n            result.add(75025L);\n            result.add(121393L);\n            result.add(196418L);\n            result.add(317811L);\n            result.add(514229L);\n            result.add(832040L);\n            result.add(1346269L);\n            result.add(2178309L);\n            result.add(3524578L);\n            result.add(5702887L);\n            result.add(9227465L);\n            result.add(14930352L);\n            result.add(24157817L);\n            result.add(39088169L);\n            result.add\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmpmnudqgx3.java:81: error: not a statement\n            result.add\n                  ^\n/tmp/tmpmnudqgx3.java:81: error: ';' expected\n            result.add\n                      ^\n/tmp/tmpmnudqgx3.java:83: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp4qx9bq5n.java:94: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5prs1ds.java:59)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpusqmfmjj.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpusqmfmjj.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n        } else {\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n - 1) + result.get(n));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmpiib5ze3b.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                    ^\n/tmp/tmpiib5ze3b.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                                        ^\n/tmp/tmpiib5ze3b.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                                                          ^\n/tmp/tmpiib5ze3b.java:40: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n - 1) + result.get(n));\n                                    ^\n/tmp/tmpiib5ze3b.java:40: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n - 1) + result.get(n));\n                                                        ^\n/tmp/tmpiib5ze3b.java:40: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n - 1) + result.get(n));\n                                                                            ^\n/tmp/tmpiib5ze3b.java:40: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n - 1) + result.get(n));\n                                                                                              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5vbp_d8.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpoa787_bd.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpoa787_bd.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n < 1) {\n            return result;\n        }\n        result.add(1L);\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmpqft7qc_n.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp4gz0ibkj.java:82: error: illegal start of expression\n    }\n    ^\n/tmp/tmp4gz0ibkj.java:83: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6w_m7epd.java:60)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp1ydtijo9.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp1ydtijo9.java:57: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpaxpq58uy.java:84: error: not a statement\n            result\n            ^\n/tmp/tmpaxpq58uy.java:84: error: ';' expected\n            result\n                  ^\n/tmp/tmpaxpq58uy.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.tri(tmp763pp4m4.java:49)\n\tat Problem.main(tmp763pp4m4.java:65)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpw4moy_jp.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpw4moy_jp.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpcnn9g2mu.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpcnn9g2mu.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpegnafczq.java:87: error: ')' expected\n            result.add(2\n                        ^\n/tmp/tmpegnafczq.java:89: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp7ea6sya3.java:85: error: not a statement\n            result\n            ^\n/tmp/tmp7ea6sya3.java:85: error: ';' expected\n            result\n                  ^\n/tmp/tmp7ea6sya3.java:87: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmppdudzufx.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmppdudzufx.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpusqmfmjj.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpusqmfmjj.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmpx495fqrc.java:56: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                ^\n/tmp/tmpx495fqrc.java:56: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                                    ^\n/tmp/tmpx495fqrc.java:56: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n                                                                        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhwomg_p.java:59)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(n / 2);\n            result.add(result.get(result.size() - 1) + result.get(result.size() - 2));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(result.get(result.size() - 1) + result.get(result.size() - 2));\n            result.add(result.get(result.size() - 1) + result.get(result.size() - 2) + result.get(result.size() - 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt5t_bhkt.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5zo6ijh9.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n == 2) return result;\n        if (n % 2 == 0) {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n            return result;\n        } else {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmpv20mbe7_.java:35: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                    ^\n/tmp/tmpv20mbe7_.java:35: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                        ^\n/tmp/tmpv20mbe7_.java:35: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                                            ^\n/tmp/tmpv20mbe7_.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                    ^\n/tmp/tmpv20mbe7_.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                        ^\n/tmp/tmpv20mbe7_.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                            ^\n/tmp/tmpv20mbe7_.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                                                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp4qx9bq5n.java:94: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmpa_gweqa5.java:85: error: <identifier> expected\n            result.\n                   ^\n/tmp/tmpa_gweqa5.java:85: error: not a statement\n            result.\n                  ^\n/tmp/tmpa_gweqa5.java:87: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpixqo1gi1.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpixqo1gi1.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmp7kgzui06.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp7kgzui06.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 2 out of bounds for length 2\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.tri(tmpvrg9uokz.java:55)\n\tat Problem.main(tmpvrg9uokz.java:60)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n % 2 == 0) {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n            return result;\n        } else {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmpu6sv6jr5.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                    ^\n/tmp/tmpu6sv6jr5.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                        ^\n/tmp/tmpu6sv6jr5.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                                            ^\n/tmp/tmpu6sv6jr5.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                    ^\n/tmp/tmpu6sv6jr5.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                        ^\n/tmp/tmpu6sv6jr5.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                            ^\n/tmp/tmpu6sv6jr5.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                                                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpoa787_bd.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpoa787_bd.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2) + tri(n - 2).get(3));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2) + tri(n - 1).get(3));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2w52fhvv.java:69)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(n / 2);\n            result.add(1L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(1L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp4hhhdoys.java:63: error: <identifier> expected\n            result.\n                   ^\n/tmp/tmp4hhhdoys.java:63: error: not a statement\n            result.\n                  ^\n/tmp/tmp4hhhdoys.java:65: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n == 2) return result;\n        if (n % 2 == 0) {\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n            return result;\n        }\n        result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n        result.add(result.get(n - 1) + result.get(n));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmpfnyky481.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                    ^\n/tmp/tmpfnyky481.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                                        ^\n/tmp/tmpfnyky481.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                                                          ^\n/tmp/tmpfnyky481.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                ^\n/tmp/tmpfnyky481.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                                    ^\n/tmp/tmpfnyky481.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 2) + result.get(n - 1) + result.get(n));\n                                                                      ^\n/tmp/tmpfnyky481.java:38: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n));\n                                ^\n/tmp/tmpfnyky481.java:38: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n));\n                                                  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmprd9f_cem.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmprd9f_cem.java:57: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpd2nu8ns9.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpd2nu8ns9.java:55: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpcnn9g2mu.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpcnn9g2mu.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmppdudzufx.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmppdudzufx.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpusqmfmjj.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpusqmfmjj.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(3L);\n            result.add(1L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(6L);\n        result.add(5L);\n        result.add(4L);\n        result.add(3L);\n        result.add(2L);\n        result.add(1L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbmx40j3e.java:56)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnway6903.java:65)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmp3_1ml4vs.java:85: error: <identifier> expected\n        result.\n               ^\n/tmp/tmp3_1ml4vs.java:85: error: not a statement\n        result.\n              ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpcumg5g0z.java:85: error: <identifier> expected\n            result.\n                   ^\n/tmp/tmpcumg5g0z.java:85: error: not a statement\n            result.\n                  ^\n/tmp/tmpcumg5g0z.java:87: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxoc73v6.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L + n / 2);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp90cl95vs.java:68)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpusqmfmjj.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpusqmfmjj.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(1L + (n / 2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(1L + (n / 2));\n        result.add(1L + (n / 2) + (n / 2));\n        result.add(1L + (n / 2) + (n / 2) + (n / 2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gzuirdl.java:58)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxoc73v6.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxoc73v6.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpg702g15t.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpg702g15t.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmp4yntmdjw.java:85: error: not a statement\n            result\n            ^\n/tmp/tmp4yntmdjw.java:85: error: ';' expected\n            result\n                  ^\n/tmp/tmp4yntmdjw.java:87: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(8L);\n            result.add(5L);\n            result.add(4L);\n            result.add(7L);\n            result.add(6L);\n            result.add(9L);\n            result.add(10L);\n            result.add(12L);\n            result.add(11L);\n            result.add(14L);\n            result.add(13L);\n            result.add(16L);\n            result.add(15L);\n            result.add(18L);\n            result.add(17L);\n            result.add(20L);\n            result.add(19L);\n            result.add(22L);\n            result.add(21L);\n            result.add(24L);\n            result.add(23L);\n            result.add(26L);\n            result.add(25L);\n            result.add(28L);\n            result.add(27L);\n            result.add(30L);\n            result.add(29L);\n            result.add(32L);\n            result.add(31L);\n            result.add(34L);\n            result.add(33L);\n            result.add(36L);\n            result.add(35L);\n            result.add(38L);\n            result.add(37L);\n            result.add(40L);\n            result.add(39L);\n            result.add(42L);\n            result.add(41L);\n            result.add(44L);\n            result.add(43L);\n            result.add(46L);\n            result.add(45L);\n            result.add(48L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmpiiq5rx7g.java:84: error: not a statement\n            result\n            ^\n/tmp/tmpiiq5rx7g.java:84: error: ';' expected\n            result\n                  ^\n/tmp/tmpiiq5rx7g.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpg702g15t.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpg702g15t.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3555stb.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zpr5fqu.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        for (int i = 3; i <= n; i += 2) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpe1pyh5.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        for (int i = 3; i < n; i += 2) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvp6wby9f.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpo8htxxtf.java:86: error: not a statement\n        result.add\n              ^\n/tmp/tmpo8htxxtf.java:86: error: ';' expected\n        result.add\n                  ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        for (int i = 3; i < n; i += 2) {\n            result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv81ggvot.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n            return result;\n        }\n        result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2));\n        result.add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpmvggnc0g.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                    ^\n/tmp/tmpmvggnc0g.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                            ^\n/tmp/tmpmvggnc0g.java:37: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                                                    ^\n/tmp/tmpmvggnc0g.java:40: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2));\n                                ^\n/tmp/tmpmvggnc0g.java:40: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2));\n                                                        ^\n/tmp/tmpmvggnc0g.java:40: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2));\n                                                                            ^\n/tmp/tmpmvggnc0g.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n                                ^\n/tmp/tmpmvggnc0g.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n                                                    ^\n/tmp/tmpmvggnc0g.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n / 2) + result.get(n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp5ewukri5.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp5ewukri5.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            result.add(0L);\n            result.add(1L);\n            result.add(1L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n            return result;\n        }\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n - 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpjhb3wziz.java:43: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n                                    ^\n/tmp/tmpjhb3wziz.java:43: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n                                                        ^\n/tmp/tmpjhb3wziz.java:43: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n                                                                            ^\n/tmp/tmpjhb3wziz.java:46: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n - 1));\n                                ^\n/tmp/tmpjhb3wziz.java:46: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n - 1));\n                                                    ^\n/tmp/tmpjhb3wziz.java:46: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n - 1));\n                                                                        ^\n/tmp/tmpjhb3wziz.java:46: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n - 1));\n                                                                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpcnn9g2mu.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpcnn9g2mu.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp5ewukri5.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp5ewukri5.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp5ewukri5.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp5ewukri5.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n < 1) {\n            return result;\n        }\n        result.add(1L);\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n        } else {\n            result.add(3L);\n            result.add(1L);\n            result.add(2L);\n            for (int i = 2; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg72ifmld.java:52)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpcnn9g2mu.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpcnn9g2mu.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        for (int i = 3; i < n + 1; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaiwxcwpk.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpqhmpg1_2.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpqhmpg1_2.java:57: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L + n / 2);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptlihke16.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpcnn9g2mu.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpcnn9g2mu.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8j8zqqj.java:66)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmppdudzufx.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmppdudzufx.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmppdudzufx.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmppdudzufx.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(n / 2);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpo443i5lh.java:45: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpo443i5lh.java:49: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhwomg_p.java:59)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n % 2 == 0) {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n            return result;\n        }\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpd3gzh_lu.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                    ^\n/tmp/tmpd3gzh_lu.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                        ^\n/tmp/tmpd3gzh_lu.java:34: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                                            ^\n/tmp/tmpd3gzh_lu.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n                                ^\n/tmp/tmpd3gzh_lu.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n                                                    ^\n/tmp/tmpd3gzh_lu.java:37: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n                                                                        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(5L);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(5L);\n            result.add(4L);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(5L);\n            result.add(4L);\n            result.add(3L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(5L);\n            result.add(4L);\n            result.add(3L);\n            result.add(8L);\n            result.add(7L);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(5L);\n            result.add(4L);\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmp6p4wpgyu.java:92: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpusqmfmjj.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpusqmfmjj.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "/tmp/tmp254eaacz.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp5ewukri5.java:48: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp5ewukri5.java:55: error: bad operand types for binary operator '+'\n        result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n < 1) {\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpk7q0l0r1.java:84: error: not a statement\n            result\n            ^\n/tmp/tmpk7q0l0r1.java:84: error: ';' expected\n            result\n                  ^\n/tmp/tmpk7q0l0r1.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i < n; i += 2) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        for (int i = 3; i < n; i += 2) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6i7897kk.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L + n / 2);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ed82pud.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(1L + (n / 2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(1L + (n / 2));\n        result.add(1L + (n / 2) + (n / 2));\n        result.add(1L + (n / 2) + (n / 2) + (n / 2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gzuirdl.java:58)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpaxpq58uy.java:84: error: not a statement\n            result\n            ^\n/tmp/tmpaxpq58uy.java:84: error: ';' expected\n            result\n                  ^\n/tmp/tmpaxpq58uy.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(3L);\n            result.add(2\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpf35jk_zc.java:86: error: ')' expected\n            result.add(2\n                        ^\n/tmp/tmpf35jk_zc.java:88: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L + n / 2);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgbs0h8lj.java:68)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result.add(1L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "/tmp/tmpp1ziyhgt.java:84: error: not a statement\n            result\n            ^\n/tmp/tmpp1ziyhgt.java:84: error: ';' expected\n            result\n                  ^\n/tmp/tmpp1ziyhgt.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            result.add(2L);\n            result.add(3L);\n            result.add(8L);\n            result.add(1L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmp93drb4h3.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpkdrvzbar.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpkdrvzbar.java:57: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(5L);\n            result.add(8L);\n            result.add(13L);\n            result.add(21L);\n            result.add(34L);\n            result.add(55L);\n            result.add(89L);\n            result.add(144L);\n            result.add(233L);\n            result.add(377L);\n            result.add(610L);\n            result.add(987L);\n            result.add(1597L);\n            result.add(2584L);\n            result.add(4181L);\n            result.add(6765L);\n            result.add(10946L);\n            result.add(17711L);\n            result.add(28657L);\n            result.add(46368L);\n            result.add(75025L);\n            result.add(121393L);\n            result.add(196418L);\n            result.add(317811L);\n            result.add(514229L);\n            result.add(832040L);\n            result.add(1346269L);\n            result.add(2178309L);\n            result.add(3524578L);\n            result.add(5702887L);\n            result.add(9227465L);\n            result.add(14930352L);\n            result.add(24157817L);\n            result.add(39088169L);\n            result.add(63245986L);\n            result.add(102334155L);\n            result.add(165580141L);\n            result.add(267914296L);\n            result.add(433494437L);\n            result.add(701\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "/tmp/tmpzfee4iwi.java:78: error: ')' expected\n            result.add(701\n                          ^\n/tmp/tmpzfee4iwi.java:80: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.tri(tmp9xsxpq73.java:43)\n\tat Problem.tri(tmp9xsxpq73.java:50)\n\tat Problem.main(tmp9xsxpq73.java:54)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "/tmp/tmpqhmpg1_2.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpqhmpg1_2.java:57: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "/tmp/tmpixqo1gi1.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpixqo1gi1.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "/tmp/tmp254eaacz.java:86: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpy02yv4za.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpy02yv4za.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n % 2 == 0) {\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n            return result;\n        }\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "/tmp/tmpiq2qbev5.java:33: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                    ^\n/tmp/tmpiq2qbev5.java:33: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                            ^\n/tmp/tmpiq2qbev5.java:33: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n                                                                                    ^\n/tmp/tmpiq2qbev5.java:36: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                ^\n/tmp/tmpiq2qbev5.java:36: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                    ^\n/tmp/tmpiq2qbev5.java:36: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                                        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmp3_1ml4vs.java:85: error: <identifier> expected\n        result.\n               ^\n/tmp/tmp3_1ml4vs.java:85: error: not a statement\n        result.\n              ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2).get(0) + tri(n - 2).get(1) + tri(n - 2).get(2));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1).get(0) + tri(n - 1).get(1) + tri(n - 1).get(2));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhwomg_p.java:59)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmp4yntmdjw.java:85: error: not a statement\n            result\n            ^\n/tmp/tmp4yntmdjw.java:85: error: ';' expected\n            result\n                  ^\n/tmp/tmp4yntmdjw.java:87: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i9jnsy3.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(1L);\n            result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "/tmp/tmp4yntmdjw.java:85: error: not a statement\n            result\n            ^\n/tmp/tmp4yntmdjw.java:85: error: ';' expected\n            result\n                  ^\n/tmp/tmp4yntmdjw.java:87: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            }\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxoc73v6.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5zo6ijh9.java:67)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp4qx9bq5n.java:94: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n            return result;\n        }\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "/tmp/tmp6aqrgvwq.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                    ^\n/tmp/tmp6aqrgvwq.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                        ^\n/tmp/tmp6aqrgvwq.java:38: error: incompatible types: possible lossy conversion from long to int\n            result.add(result.get(n - 1) + result.get(n - 2) + result.get(n + 1));\n                                                                            ^\n/tmp/tmp6aqrgvwq.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                ^\n/tmp/tmp6aqrgvwq.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                    ^\n/tmp/tmp6aqrgvwq.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                        ^\n/tmp/tmp6aqrgvwq.java:41: error: incompatible types: possible lossy conversion from long to int\n        result.add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1) + result.get(n + 1));\n                                                                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            n = n / 2;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            n = (n - 1) / 2;\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(result.get(i) + result.get(i + 1) + result.get(i + 2));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6z85p8a.java:57)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(n / 2);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        }\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "/tmp/tmp7qquz0bj.java:45: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp7qquz0bj.java:48: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpegzl46te.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpegzl46te.java:50: error: bad operand types for binary operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n            return result;\n        } else {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "/tmp/tmpusqmfmjj.java:43: error: bad operand types for binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpusqmfmjj.java:50: error: bad operand types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return an array array list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri(3)\n    // [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.add(1L);\n            result.add(3L);\n            result.add(2L);\n            result.add(8L);\n            return result;\n        }\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result.add(1L);\n        result.add(3L);\n        result.add(2L);\n        result.add(8L);\n        result\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "/tmp/tmp49nc6zrb.java:85: error: not a statement\n        result\n        ^\n/tmp/tmp49nc6zrb.java:85: error: ';' expected\n        result\n              ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}