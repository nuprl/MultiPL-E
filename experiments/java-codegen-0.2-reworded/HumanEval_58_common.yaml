name: HumanEval_58_common
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return sorted unique common elements for two array lists.\n\
  \    // >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    //\
  \ [1, 5, 653]\n    // >>> common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    public\
  \ static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l,\
  \ (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l,\
  \ (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n\
  \    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l,\
  \ (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> common = new ArrayList<Long>();\n        for\
    \ (Long i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (l1.size()\
    \ == 0 || l2.size() == 0) return result;\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            hs.add(i);\n        }\n        for (Long i : hs) {\n\
    \            result.add(i);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> l = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    l.add(i);\n            }\n        }\n        return l;", "        ArrayList<Long>\
    \ common = new ArrayList<Long>();\n        for (Long i : l1) {\n            if\
    \ (l2.contains(i)) {\n                common.add(i);\n            }\n        }\n\
    \        return common;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        HashSet<Long> hs = new HashSet<Long>();\n \
    \       for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            hs.add(i);\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (Long i : hs) {\n            result.add(i);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                result.add(i);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        return common;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (l1.size() == 0 || l2.size() == 0) {\n            return result;\n      \
    \  }\n        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1)\
    \ {\n            hs.add(i);\n        }\n        for (Long i : l2) {\n        \
    \    hs.add(i);\n        }\n        result.addAll(hs);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        return common;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        HashSet<Long> hs\
    \ = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n \
    \       ArrayList<Long> l = new ArrayList<Long>();\n        l.addAll(hs);\n  \
    \      Collections.sort(l);\n        return l;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        HashSet<Long> hs\
    \ = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n \
    \       ArrayList<Long> res = new ArrayList<Long>();\n        for (Long i : hs)\
    \ {\n            res.add(i);\n        }\n        Collections.sort(res);\n    \
    \    return res;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        return common;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long> set\
    \ = new HashSet<Long>();\n        for (Long i : l1) {\n            set.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (set.contains(i)) {\n\
    \                result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ set = new HashSet<Long>();\n        for (Long i : l1) {\n            set.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (set.contains(i)) {\n\
    \                result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                result.add(i);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        HashSet<Long> hs = new HashSet<>();\n        for\
    \ (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long i : l2)\
    \ {\n            if (hs.contains(i)) {\n                result.add(i);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (l1.size() == 0 || l2.size() == 0) return result;\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n \
    \       for (Long i : hs) {\n            result.add(i);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        HashSet<Long> hs\
    \ = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ hs) {\n            result.add(i);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            set.add(i);\n        }\n        for (Long i : l2) {\n           \
    \ if (set.contains(i)) {\n                result.add(i);\n            }\n    \
    \    }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        return common;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        HashSet<Long> set =\
    \ new HashSet<>();\n        for (Long i : l1) {\n            set.add(i);\n   \
    \     }\n        for (Long i : l2) {\n            if (set.contains(i)) {\n   \
    \             result.add(i);\n            }\n        }\n        return result;",
  "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            ret.add(i);\n        }\n        return ret;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (l1.size()\
    \ == 0 || l2.size() == 0) {\n            return result;\n        }\n        HashSet<Long>\
    \ hs1 = new HashSet<Long>();\n        HashSet<Long> hs2 = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs1.add(i);\n        }\n        for\
    \ (Long i : l2) {\n            hs2.add(i);\n        }\n        for (Long i : hs1)\
    \ {\n            if (hs2.contains(i)) {\n                result.add(i);\n    \
    \        }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long\
    \ i : l1) {\n            hs.add(i);\n        }\n        for (Long i : l2) {\n\
    \            hs.add(i);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : hs) {\n            result.add(i);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> l = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j\
    \ < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n       \
    \             l.add(l1.get(i));\n                    break;\n                }\n\
    \            }\n        }\n        Collections.sort(l);\n        return l;", " \
    \       ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        return common;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        HashSet<Long> hs\
    \ = new HashSet<>();\n        for (Long i : l1) {\n            hs.add(i);\n  \
    \      }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n   \
    \     ArrayList<Long> ret = new ArrayList<>();\n        for (Long i : hs) {\n\
    \            ret.add(i);\n        }\n        return ret;", "        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n \
    \       ArrayList<Long> res = new ArrayList<Long>();\n        for (Long i : hs)\
    \ {\n            res.add(i);\n        }\n        return res;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        HashSet<Long> set = new HashSet<>();\n       \
    \ for (Long i : l1) {\n            set.add(i);\n        }\n        for (Long i\
    \ : l2) {\n            if (set.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        Collections.sort(common);\n        return common;",
  "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            res.add(i);\n        }\n        Collections.sort(res);\n\
    \        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        return common;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        if (l1.size() ==\
    \ 0 || l2.size() == 0) {\n            return result;\n        }\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n \
    \       for (Long i : hs) {\n            result.add(i);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l1) {\n    \
    \        set.add(i);\n        }\n        for (Long i : l2) {\n            if (set.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> l = new ArrayList<Long>();\n        for (Long\
    \ i : l1) {\n            if (l2.contains(i)) {\n                l.add(i);\n  \
    \          }\n        }\n        return l;", "        ArrayList<Long> common =\
    \ new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long\
    \ i : l1) {\n            hs.add(i);\n        }\n        for (Long i : l2) {\n\
    \            hs.add(i);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : hs) {\n            result.add(i);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l1) {\n    \
    \        set.add(i);\n        }\n        for (Long i : l2) {\n            if (set.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long\
    \ i : l1) {\n            hs.add(i);\n        }\n        for (Long i : l2) {\n\
    \            hs.add(i);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : hs) {\n            result.add(i);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        HashSet<Long> hs = new HashSet<Long>();\n \
    \       for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            hs.add(i);\n        }\n        ArrayList<Long> res =\
    \ new ArrayList<Long>();\n        for (Long i : hs) {\n            res.add(i);\n\
    \        }\n        return res;", "        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            hs.add(i);\n        }\n        ArrayList<Long> l = new\
    \ ArrayList<Long>();\n        l.addAll(hs);\n        Collections.sort(l);\n  \
    \      return l;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> l = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    l.add(i);\n            }\n        }\n        Collections.sort(l);\n     \
    \   return l;", "        ArrayList<Long> common = new ArrayList<Long>();\n   \
    \     for (Long i : l1) {\n            if (l2.contains(i)) {\n               \
    \ common.add(i);\n            }\n        }\n        return common;", "       \
    \ HashSet<Long> hs = new HashSet<>();\n        for (Long i : l1) {\n         \
    \   hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> ret = new ArrayList<>();\n        for (Long\
    \ i : hs) {\n            ret.add(i);\n        }\n        return ret;", "     \
    \   HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n   \
    \         hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            result.add(i);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                common.add(i);\n     \
    \       }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        return common;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        return common;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> set = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            set.add(i);\n        }\n        for\
    \ (Long i : l2) {\n            if (set.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        HashSet<Long> hs = new HashSet<>();\n        for (Long i : l1) {\n    \
    \        hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (Long\
    \ i : hs) {\n            result.add(i);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        HashSet<Long> hs = new HashSet<Long>();\n \
    \       for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            hs.add(i);\n        }\n        ArrayList<Long> ret =\
    \ new ArrayList<Long>();\n        for (Long i : hs) {\n            ret.add(i);\n\
    \        }\n        return ret;", "        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            hs.add(i);\n        }\n        ArrayList<Long> res =\
    \ new ArrayList<Long>();\n        for (Long i : hs) {\n            res.add(i);\n\
    \        }\n        return res;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            set.add(i);\n        }\n        for (Long i : l2) {\n           \
    \ if (set.contains(i)) {\n                result.add(i);\n            }\n    \
    \    }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            set.add(i);\n        }\n        for (Long i : l2) {\n           \
    \ if (set.contains(i)) {\n                result.add(i);\n            }\n    \
    \    }\n        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                common.add(i);\n     \
    \       }\n        }\n        Collections.sort(common);\n        return common;",
  "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            res.add(i);\n        }\n        return res;", " \
    \       HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            ret.add(i);\n        }\n        return ret;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        HashSet<Long> hs = new HashSet<>();\n        for\
    \ (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long i : l2)\
    \ {\n            if (hs.contains(i)) {\n                result.add(i);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> set = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            set.add(i);\n        }\n        for\
    \ (Long i : l2) {\n            if (set.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        return common;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (l1.size() == 0 || l2.size() == 0) return result;\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n \
    \       for (Long i : hs) {\n            result.add(i);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n     \
    \       hs.add(i);\n        }\n        for (Long i : l2) {\n            if (hs.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n     \
    \       hs.add(i);\n        }\n        for (Long i : l2) {\n            if (hs.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n     \
    \       hs.add(i);\n        }\n        for (Long i : l2) {\n            if (hs.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long\
    \ i : l1) {\n            hs.add(i);\n        }\n        for (Long i : l2) {\n\
    \            hs.add(i);\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (Long i : hs) {\n            res.add(i);\n        }\n        return\
    \ res;", "        ArrayList<Long> common = new ArrayList<Long>();\n        for\
    \ (Long i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ set = new HashSet<Long>();\n        for (Long i : l1) {\n            set.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (set.contains(i)) {\n\
    \                result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        return common;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (l1.size() == 0 || l2.size() == 0) {\n\
    \            return result;\n        }\n        HashSet<Long> set = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            set.add(i);\n        }\n        for\
    \ (Long i : l2) {\n            set.add(i);\n        }\n        for (Long i : set)\
    \ {\n            result.add(i);\n        }\n        return result;", "       \
    \ ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i : l1) {\n\
    \            if (l2.contains(i)) {\n                common.add(i);\n         \
    \   }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                result.add(i);\n     \
    \       }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            result.add(i);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                common.add(i);\n     \
    \       }\n        }\n        return common;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> set = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            set.add(i);\n        }\n        for\
    \ (Long i : l2) {\n            if (set.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (l1.size() == 0 || l2.size() == 0) return result;\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n \
    \       result.addAll(hs);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long\
    \ i : l1) {\n            hs.add(i);\n        }\n        for (Long i : l2) {\n\
    \            hs.add(i);\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (Long i : hs) {\n            res.add(i);\n        }\n        return\
    \ res;", "        ArrayList<Long> common = new ArrayList<Long>();\n        for\
    \ (Long i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        return common;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l1) {\n    \
    \        set.add(i);\n        }\n        for (Long i : l2) {\n            if (set.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ for (Long i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> set = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            set.add(i);\n        }\n        for\
    \ (Long i : l2) {\n            if (set.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (l1.size() == 0 || l2.size() == 0) {\n            return result;\n      \
    \  }\n        HashSet<Long> set = new HashSet<Long>();\n        for (Long i :\
    \ l1) {\n            set.add(i);\n        }\n        for (Long i : l2) {\n   \
    \         set.add(i);\n        }\n        for (Long i : set) {\n            result.add(i);\n\
    \        }\n        return result;", "        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            hs.add(i);\n        }\n        ArrayList<Long> ret =\
    \ new ArrayList<Long>();\n        for (Long i : hs) {\n            ret.add(i);\n\
    \        }\n        return ret;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (l1.size() > l2.size()) {\n            for (Long i : l1) {\n     \
    \           if (l2.contains(i)) {\n                    result.add(i);\n      \
    \          }\n            }\n        } else {\n            for (Long i : l2) {\n\
    \                if (l1.contains(i)) {\n                    result.add(i);\n \
    \               }\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n  \
    \          hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            result.add(i);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            ret.add(i);\n        }\n        return ret;", " \
    \       ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long>\
    \ set = new HashSet<Long>();\n        for (Long i : l1) {\n            set.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (set.contains(i)) {\n\
    \                result.add(i);\n            }\n        }\n        return result;",
  "        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            result.add(i);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            set.add(i);\n        }\n        for (Long i : l2) {\n           \
    \ if (set.contains(i)) {\n                result.add(i);\n            }\n    \
    \    }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashSet<Long> hs = new HashSet<>();\n        for (Long i : l1) {\n  \
    \          hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            hs.add(i);\n        }\n        for (Long i : l2) {\n            if\
    \ (hs.contains(i)) {\n                result.add(i);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        return common;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        HashSet<Long> set =\
    \ new HashSet<>();\n        for (Long i : l1) {\n            set.add(i);\n   \
    \     }\n        for (Long i : l2) {\n            if (set.contains(i)) {\n   \
    \             result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        Collections.sort(common);\n        return common;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n \
    \           }\n        }\n        return common;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            if (hs.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashSet<Long> set = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            set.add(i);\n        }\n        for\
    \ (Long i : l2) {\n            if (set.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    result.add(i);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        if (l1.size() ==\
    \ 0 || l2.size() == 0) {\n            return result;\n        }\n        HashSet<Long>\
    \ hs = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            hs.add(i);\n        }\n \
    \       result.addAll(hs);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        HashSet<Long> set = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            set.add(i);\n        }\n        for\
    \ (Long i : l2) {\n            if (set.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        HashSet<Long> hs = new HashSet<Long>();\n \
    \       for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            hs.add(i);\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (Long i : hs) {\n            result.add(i);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    HashSet<Long> hs = new HashSet<Long>();\n        for (Long i : l1) {\n  \
    \          hs.add(i);\n        }\n        for (Long i : l2) {\n            hs.add(i);\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long i : hs) {\n            result.add(i);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            set.add(i);\n        }\n        for (Long i : l2) {\n           \
    \ if (set.contains(i)) {\n                result.add(i);\n            }\n    \
    \    }\n        return result;", "        HashSet<Long> hs = new HashSet<Long>();\n\
    \        for (Long i : l1) {\n            hs.add(i);\n        }\n        for (Long\
    \ i : l2) {\n            hs.add(i);\n        }\n        ArrayList<Long> res =\
    \ new ArrayList<Long>();\n        for (Long i : hs) {\n            res.add(i);\n\
    \        }\n        return res;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common.add(i);\n            }\n        }\n        return common;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        HashSet<Long> hs\
    \ = new HashSet<Long>();\n        for (Long i : l1) {\n            hs.add(i);\n\
    \        }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n \
    \               result.add(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashSet<Long> hs =\
    \ new HashSet<>();\n        for (Long i : l1) {\n            hs.add(i);\n    \
    \    }\n        for (Long i : l2) {\n            if (hs.contains(i)) {\n     \
    \           result.add(i);\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
