name: HumanEval_21_rescale_to_unit
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given array list of numbers (of at least two elements),\
  \ apply a linear transform to that array list,\n    // such that the smallest number\
  \ will become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0,\
  \ 2.0, 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
  \ rescaleToUnit(ArrayList<Float> numbers) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
  \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
  \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
  \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
  \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
  \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
  \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
  \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
  \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
  \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)12.0f,\
  \ (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f,\
  \ (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
completions: ["        ArrayList<Float> res = new ArrayList<>();\n        float min\
    \ = numbers.get(0);\n        float max = numbers.get(0);\n        for(float num\
    \ : numbers) {\n            if(num < min) {\n                min = num;\n    \
    \        }\n            if(num > max) {\n                max = num;\n        \
    \    }\n        }\n        for(float num : numbers) {\n            res.add((num\
    \ - min) / (max - min));\n        }\n        return res;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (float i : numbers)\
    \ {\n            result.add(i - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        float min = Collections.min(numbers);\n   \
    \     float max = Collections.max(numbers);\n        float scale = (max - min)\
    \ / (1 - min);\n        ArrayList<Float> scaled = new ArrayList<Float>();\n  \
    \      for (Float f : numbers) {\n            scaled.add(f - min);\n        }\n\
    \        for (int i = 0; i < scaled.size(); i++) {\n            scaled.set(i,\
    \ scaled.get(i) * scale);\n        }\n        scaled.add(1.0f);\n        return\
    \ scaled;", "        ArrayList<Float> result = new ArrayList<>();\n        float\
    \ min = numbers.stream().min(Comparator.naturalOrder()).get();\n        float\
    \ max = numbers.stream().max(Comparator.naturalOrder()).get();\n        for (float\
    \ number : numbers) {\n            result.add(number / max);\n        }\n    \
    \    result.add(0.0f);\n        result.add(1.0f);\n        return result;", " \
    \       ArrayList<Float> result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for(float num : numbers)\
    \ {\n            result.add(num - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        ArrayList<Float> res = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n     \
    \       res.add((numbers.get(i) - min) / (max - min));\n        }\n        return\
    \ res;", "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (Float number : numbers) {\n          \
    \  result.add(number * scale);\n        }\n        return result;", "        float\
    \ min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (float number : numbers) {\n          \
    \  result.add(number - min);\n        }\n        for (int i = 0; i < result.size();\
    \ i++) {\n            result.set(i, result.get(i) * scale);\n        }\n     \
    \   return result;", "        ArrayList<Float> result = new ArrayList<Float>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n     \
    \       result.add((numbers.get(i) - min) / (max - min));\n        }\n       \
    \ return result;", "        float min = numbers.get(0);\n        float max = numbers.get(0);\n\
    \        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        ArrayList<Float> result = new ArrayList<>();\n   \
    \     for (int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (float i : numbers) {\n            result.add(i - min);\n       \
    \ }\n        result.add(max - min);\n        return result;", "        float min\
    \ = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = (max - min) / (1 - min);\n        ArrayList<Float> result\
    \ = new ArrayList<>();\n        for (float number : numbers) {\n            result.add(number\
    \ - min);\n        }\n        for (int i = 0; i < result.size(); i++) {\n    \
    \        result.set(i, result.get(i) * scale + min);\n        }\n        return\
    \ result;", "        ArrayList<Float> result = new ArrayList<>();\n        float\
    \ min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n        float\
    \ max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n        for\
    \ (Float number : numbers) {\n            result.add(number / (max - min));\n\
    \        }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n     \
    \       result.add((numbers.get(i) - min) / (max - min));\n        }\n       \
    \ return result;", "        ArrayList<Float> result = new ArrayList<>();\n   \
    \     float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for(float i : numbers) {\n            result.add((i - min) / (max - min));\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<>();\n        for (float i : numbers) {\n            result.add(i\
    \ - min);\n        }\n        result.add(max - min);\n        return result;",
  "        ArrayList<Float> result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for(float number : numbers)\
    \ {\n            result.add(number - min);\n        }\n        result.add(max\
    \ - min);\n        return result;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        ArrayList<Float> result = new ArrayList<>();\n      \
    \  for (float i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i)\
    \ - min);\n        }\n        for (int i = 0; i < result.size(); i++) {\n    \
    \        result.set(i, result.get(i) / (max - min));\n        }\n        return\
    \ result;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for (float i =\
    \ min; i <= max; i += (max - min) / 10) {\n            result.add(i);\n      \
    \  }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        for (float i : numbers) {\n            result.add(i / max);\n       \
    \ }\n        result.set(0, 0.0f);\n        result.set(result.size() - 1, 1.0f);\n\
    \        return result;", "        float min = Collections.min(numbers);\n   \
    \     float max = Collections.max(numbers);\n        for(int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n\
    \        }\n        return numbers;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for(float i : numbers)\
    \ {\n            result.add(i - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        float scale = (max - min) / (max - min);\n        ArrayList<Float>\
    \ result = new ArrayList<>();\n        for (Float f : numbers) {\n           \
    \ result.add(f * scale);\n        }\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        for (float number : numbers) {\n            result.add(number\
    \ / (max - min));\n        }\n        return result;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for(float i : numbers)\
    \ {\n            result.add(i - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        float min = Collections.min(numbers);\n   \
    \     float max = Collections.max(numbers);\n        float scale = (max - min)\
    \ / (numbers.size() - 1);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i,\
    \ result.get(i) / scale);\n        }\n        return result;", "        float\
    \ min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / range);\n      \
    \  }\n        return numbers;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for(float num : numbers) {\n            if(num < min) {\n             \
    \   min = num;\n            }\n            if(num > max) {\n                max\
    \ = num;\n            }\n        }\n        for(float num : numbers) {\n     \
    \       result.add((num - min) / (max - min));\n        }\n        return result;",
  "        float min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n\
    \        float max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for (float x :\
    \ numbers) {\n            result.add(x - min);\n        }\n        result.add(max\
    \ - min);\n        return result;", "        float min = numbers.stream().mapToFloat(x\
    \ -> x).min().getAsFloat();\n        float max = numbers.stream().mapToFloat(x\
    \ -> x).max().getAsFloat();\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (float i = min; i <= max; i += (max - min) / 10) {\n            result.add(i);\n\
    \        }\n        return result;", "        float min = numbers.stream().min(Comparator.comparing(Float::floatValue)).get();\n\
    \        float max = numbers.stream().max(Comparator.comparing(Float::floatValue)).get();\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for (float i =\
    \ min; i <= max; i += (max - min) / 10) {\n            result.add(i);\n      \
    \  }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        for (Float number : numbers) {\n            result.add(number / max);\n\
    \        }\n        result.set(0, 0.0f);\n        result.set(result.size() - 1,\
    \ 1.0f);\n        return result;", "        ArrayList<Float> res = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for(float num : numbers) {\n            if(num < min) {\n             \
    \   min = num;\n            }\n            if(num > max) {\n                max\
    \ = num;\n            }\n        }\n        for(float num : numbers) {\n     \
    \       res.add(num - min);\n        }\n        for(int i = 0; i < res.size();\
    \ i++) {\n            res.set(i, res.get(i) / (max - min));\n        }\n     \
    \   return res;", "        float min = Collections.min(numbers);\n        float\
    \ max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n\
    \        }\n        return numbers;", "        float min = numbers.get(0);\n \
    \       float max = numbers.get(0);\n        for(int i = 1; i < numbers.size();\
    \ i++) {\n            if(numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if(numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float scale = 1.0f / (max\
    \ - min);\n        for(int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) * scale);\n\
    \        }\n        return numbers;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float range = max - min;\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ (numbers.get(i) - min) / range);\n        }\n        return numbers;", "   \
    \     float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i,\
    \ numbers.get(i) * scale);\n        }\n        return numbers;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        for (Float number : numbers) {\n            result.add(scale\
    \ * (number - min));\n        }\n        return result;", "        float min =\
    \ numbers.stream().min(Comparator.comparing(x -> x)).get();\n        float max\
    \ = numbers.stream().max(Comparator.comparing(x -> x)).get();\n        ArrayList<Float>\
    \ result = new ArrayList<>();\n        for (float number : numbers) {\n      \
    \      result.add(number / (max - min));\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;",
  "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n  \
    \      float max = numbers.stream().max(Comparator.naturalOrder()).get();\n  \
    \      float scale = 1.0f / (max - min);\n        return numbers.stream().map(x\
    \ -> (x - min) * scale).collect(Collectors.toCollection(ArrayList::new));", " \
    \       float min = numbers.stream().min(Comparator.naturalOrder()).get();\n \
    \       float max = numbers.stream().max(Comparator.naturalOrder()).get();\n \
    \       ArrayList<Float> result = new ArrayList<>();\n        for(float f : numbers)\
    \ {\n            result.add(f - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (float number : numbers) {\n            if (number < min) {\n     \
    \           min = number;\n            }\n            if (number > max) {\n  \
    \              max = number;\n            }\n        }\n        for (float number\
    \ : numbers) {\n            result.add(number / (max - min));\n        }\n   \
    \     return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        result.add(max - min);\n        return result;", "       \
    \ float min = numbers.stream().min(Float::compare).get();\n        float max =\
    \ numbers.stream().max(Float::compare).get();\n        float scale = 1.0f / (max\
    \ - min);\n        ArrayList<Float> result = new ArrayList<>();\n        for (Float\
    \ number : numbers) {\n            result.add(number - min);\n        }\n    \
    \    for (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i)\
    \ * scale);\n        }\n        return result;", "        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float scale = 1.0f / (max\
    \ - min);\n        ArrayList<Float> result = new ArrayList<>();\n        for (int\
    \ i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i) - min);\n\
    \            result.add(numbers.get(i) - min);\n        }\n        for (int i\
    \ = 0; i < result.size(); i += 2) {\n            result.set(i, result.get(i) *\
    \ scale);\n        }\n        return result;", "        ArrayList<Float> result\
    \ = new ArrayList<>();\n        float min = Collections.min(numbers);\n      \
    \  float max = Collections.max(numbers);\n        for(float num : numbers) {\n\
    \            result.add((num - min) / (max - min));\n        }\n        return\
    \ result;", "        float min = Collections.min(numbers);\n        float max\
    \ = Collections.max(numbers);\n        float scale = 1.0f / (max - min);\n   \
    \     ArrayList<Float> scaled = new ArrayList<>();\n        for (Float number\
    \ : numbers) {\n            scaled.add(number - min);\n        }\n        for\
    \ (int i = 0; i < scaled.size(); i++) {\n            scaled.set(i, scaled.get(i)\
    \ * scale);\n        }\n        return scaled;", "        ArrayList<Float> result\
    \ = new ArrayList<>();\n        float min = numbers.get(0);\n        float max\
    \ = numbers.get(0);\n        for(int i = 0; i < numbers.size(); i++) {\n     \
    \       if(numbers.get(i) < min) {\n                min = numbers.get(i);\n  \
    \          }\n            if(numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n        }\n        for(int i = 0; i < numbers.size(); i++) {\n\
    \            result.add((numbers.get(i) - min) / (max - min));\n        }\n  \
    \      return result;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        float scale = 1.0f / (max - min);\n        ArrayList<Float>\
    \ result = new ArrayList<>();\n        for (Float number : numbers) {\n      \
    \      result.add(number * scale);\n        }\n        return result;", "    \
    \    ArrayList<Float> result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (float number : numbers)\
    \ {\n            result.add(number - min);\n        }\n        result.add(max\
    \ - min);\n        return result;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        ArrayList<Float> result = new ArrayList<>();\n      \
    \  for (float x : numbers) {\n            result.add(x - min);\n        }\n  \
    \      result.add(max - min);\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<>();\n        for (float i : numbers) {\n            result.add((i\
    \ - min) / (max - min));\n        }\n        return result;", "        float min\
    \ = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        for (Float number : numbers) {\n            result.add(number\
    \ * scale);\n        }\n        return result;", "        ArrayList<Float> result\
    \ = new ArrayList<>();\n        float min = Collections.min(numbers);\n      \
    \  float max = Collections.max(numbers);\n        for (float number : numbers)\
    \ {\n            result.add((number - min) / (max - min));\n        }\n      \
    \  return result;", "        float min = Collections.min(numbers);\n        float\
    \ max = Collections.max(numbers);\n        float scale = 1.0f / (max - min);\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for (float number\
    \ : numbers) {\n            result.add(number - min);\n        }\n        for\
    \ (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i)\
    \ * scale);\n        }\n        return result;", "        float min = numbers.stream().mapToFloat(x\
    \ -> x).min().getAsFloat();\n        float max = numbers.stream().mapToFloat(x\
    \ -> x).max().getAsFloat();\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (float x : numbers) {\n            result.add(x - min);\n       \
    \ }\n        result.add(max - min);\n        return result;", "        float min\
    \ = numbers.stream().mapToFloat(x -> x).min().getAsFloat();\n        float max\
    \ = numbers.stream().mapToFloat(x -> x).max().getAsFloat();\n        numbers.stream().forEach(x\
    \ -> x = (x - min) / (max - min));\n        return numbers;", "        float min\
    \ = numbers.stream().min(Comparator.comparing(x -> x)).get();\n        float max\
    \ = numbers.stream().max(Comparator.comparing(x -> x)).get();\n        for (int\
    \ i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i)\
    \ - min);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n   \
    \         numbers.set(i, numbers.get(i) / (max - min));\n        }\n        numbers.set(0,\
    \ 0.0f);\n        numbers.set(1, 1.0f);\n        return numbers;", "        float\
    \ min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i,\
    \ numbers.get(i) * scale);\n        }\n        return numbers;", "        float\
    \ min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = (max - min) / (1 - min);\n        ArrayList<Float> result\
    \ = new ArrayList<>();\n        for (float number : numbers) {\n            result.add(number\
    \ - min);\n        }\n        for (int i = 0; i < result.size(); i++) {\n    \
    \        result.set(i, result.get(i) * scale);\n        }\n        result.set(0,\
    \ 0.0f);\n        result.set(result.size() - 1, 1.0f);\n        return result;",
  "        ArrayList<Float> result = new ArrayList<>();\n        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (float number : numbers) {\n            result.add((number - min)\
    \ / (max - min));\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float scale = (max - min)\
    \ / (numbers.size() - 1);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i)\
    \ - min);\n        }\n        for (int i = 0; i < result.size(); i++) {\n    \
    \        result.set(i, result.get(i) * scale);\n        }\n        result.set(0,\
    \ 0.0f);\n        result.set(result.size() - 1, 1.0f);\n        return result;",
  "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n  \
    \      float max = numbers.stream().max(Comparator.naturalOrder()).get();\n  \
    \      float scale = 1.0f / (max - min);\n        ArrayList<Float> result = new\
    \ ArrayList<>();\n        for (float number : numbers) {\n            result.add(number\
    \ * scale);\n        }\n        return result;", "        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float scale = 1.0f / (max\
    \ - min);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) * scale);\n\
    \        }\n        return numbers;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float scale = 1.0f / (max\
    \ - min);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) * scale);\n\
    \        }\n        return numbers;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        for(float i : numbers) {\n            result.add(i - min);\n        }\n\
    \        result.add(max - min);\n        return result;", "        float min =\
    \ Collections.min(numbers);\n        float max = Collections.max(numbers);\n \
    \       float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i,\
    \ numbers.get(i) * scale);\n        }\n        return numbers;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (float number : numbers)\
    \ {\n            result.add(number - min);\n        }\n        result.add(max\
    \ - min);\n        return result;", "        float min = numbers.get(0);\n   \
    \     float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float scale = 1.0f / (max\
    \ - min);\n        ArrayList<Float> result = new ArrayList<>();\n        for (int\
    \ i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i) - min);\n\
    \        }\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i,\
    \ result.get(i) * scale);\n        }\n        return result;", "        float\
    \ min = numbers.get(0);\n        float max = numbers.get(0);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n\
    \                min = numbers.get(i);\n            }\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n        }\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) / (max - min));\n        }\n\
    \        numbers.set(0, 0.0f);\n        numbers.set(1, 1.0f);\n        return\
    \ numbers;", "        ArrayList<Float> result = new ArrayList<>();\n        float\
    \ min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        result.add(max - min);\n        return result;", "       \
    \ ArrayList<Float> result = new ArrayList<Float>();\n        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for(int i = 0; i < numbers.size();\
    \ i++) {\n            if(numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if(numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for(int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        for (Float number : numbers) {\n            result.add(number\
    \ * scale);\n        }\n        return result;", "        ArrayList<Float> result\
    \ = new ArrayList<>();\n        float min = numbers.get(0);\n        float max\
    \ = numbers.get(0);\n        for(float number : numbers) {\n            if(number\
    \ < min) {\n                min = number;\n            }\n            if(number\
    \ > max) {\n                max = number;\n            }\n        }\n        for(float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        for(float i : numbers) {\n            result.add(i - min);\n        }\n\
    \        result.add(max - min);\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for(float number : numbers) {\n            if(number\
    \ < min) {\n                min = number;\n            }\n            if(number\
    \ > max) {\n                max = number;\n            }\n        }\n        for(float\
    \ number : numbers) {\n            result.add(number - min);\n        }\n    \
    \    result.set(0, 0.0f);\n        result.set(result.size() - 1, 1.0f);\n    \
    \    return result;", "        float min = numbers.stream().min(Float::compare).get();\n\
    \        float max = numbers.stream().max(Float::compare).get();\n        float\
    \ scale = 1.0f / (max - min);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (Float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i,\
    \ result.get(i) * scale);\n        }\n        return result;", "        float\
    \ min = numbers.get(0);\n        float max = numbers.get(0);\n        for (int\
    \ i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n\
    \                min = numbers.get(i);\n            }\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n        }\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i,\
    \ numbers.get(i) * scale);\n        }\n        return numbers;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for(float number : numbers) {\n            if(number < min) {\n       \
    \         min = number;\n            }\n            if(number > max) {\n     \
    \           max = number;\n            }\n        }\n        for(float number\
    \ : numbers) {\n            result.add(number / (max - min));\n        }\n   \
    \     return result;", "        float min = Collections.min(numbers);\n      \
    \  float max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n\
    \        }\n        return numbers;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        for (float number : numbers) {\n            result.add(number\
    \ - min);\n        }\n        for (int i = 0; i < result.size(); i++) {\n    \
    \        result.set(i, result.get(i) * scale);\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> scaled =\
    \ new ArrayList<>();\n        for (Float num : numbers) {\n            scaled.add(num\
    \ - min);\n        }\n        for (int i = 0; i < scaled.size(); i++) {\n    \
    \        scaled.set(i, scaled.get(i) * scale);\n        }\n        return scaled;",
  "        float min = numbers.get(0);\n        float max = numbers.get(0);\n    \
    \    for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i)\
    \ - min);\n            numbers.set(i, numbers.get(i) * scale);\n        }\n  \
    \      return numbers;", "        float min = numbers.stream().mapToFloat(x ->\
    \ x).min().getAsFloat();\n        float max = numbers.stream().mapToFloat(x ->\
    \ x).max().getAsFloat();\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (float i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return result;", "        float min\
    \ = numbers.stream().min(Comparator.naturalOrder()).get();\n        float max\
    \ = numbers.stream().max(Comparator.naturalOrder()).get();\n        float scale\
    \ = 1.0f / (max - min);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i,\
    \ result.get(i) * scale);\n        }\n        return result;", "        float\
    \ min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        for (Float number : numbers) {\n            result.add(number\
    \ * scale);\n        }\n        return result;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        ArrayList<Float> result = new ArrayList<>();\n      \
    \  for (float i = min; i <= max; i += (max - min) / 10) {\n            result.add(i);\n\
    \        }\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) / (max - min));\n        }\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) * (max - min) + min);\n        }\n        return result;", " \
    \       ArrayList<Float> result = new ArrayList<Float>();\n        float min =\
    \ numbers.get(0);\n        float max = numbers.get(0);\n        for(int i = 0;\
    \ i < numbers.size(); i++) {\n            if(numbers.get(i) < min) {\n       \
    \         min = numbers.get(i);\n            }\n            if(numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n        }\n\
    \        for(int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return result;", "        float min\
    \ = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        for (Float number : numbers) {\n            result.add(number\
    \ - min);\n        }\n        for (int i = 0; i < result.size(); i++) {\n    \
    \        result.set(i, result.get(i) * scale);\n        }\n        return result;",
  "        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float range = max - min;\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / range);\n      \
    \  }\n        return numbers;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for(Float number : numbers) {\n            if(number < min) {\n       \
    \         min = number;\n            }\n            if(number > max) {\n     \
    \           max = number;\n            }\n        }\n        for(Float number\
    \ : numbers) {\n            result.add((number - min) / (max - min));\n      \
    \  }\n        return result;", "        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float scale = 1.0f / (max\
    \ - min);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) * scale);\n\
    \        }\n        return numbers;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        float scale = 1.0f / (max - min);\n        ArrayList<Float>\
    \ result = new ArrayList<>();\n        for (float number : numbers) {\n      \
    \      result.add(number * scale);\n        }\n        return result;", "    \
    \    float min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n \
    \       float max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for (float i =\
    \ min; i <= max; i += (max - min) / 10) {\n            result.add(i);\n      \
    \  }\n        result.add(max);\n        return result;", "        float min =\
    \ Collections.min(numbers);\n        float max = Collections.max(numbers);\n \
    \       for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;",
  "        ArrayList<Float> result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (float number : numbers)\
    \ {\n            result.add(number - min);\n        }\n        result.add(max\
    \ - min);\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float scale = 1.0f / (max\
    \ - min);\n        for(int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) * scale);\n\
    \        }\n        return numbers;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n     \
    \       result.add((numbers.get(i) - min) / (max - min));\n        }\n       \
    \ return result;", "        ArrayList<Float> res = new ArrayList<>();\n      \
    \  float min = numbers.get(0);\n        float max = numbers.get(0);\n        for(float\
    \ num : numbers) {\n            if(num < min) {\n                min = num;\n\
    \            }\n            if(num > max) {\n                max = num;\n    \
    \        }\n        }\n        for(float num : numbers) {\n            res.add(num\
    \ / (max - min));\n        }\n        return res;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float scale = 1.0f / (max\
    \ - min);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) * scale);\n\
    \        }\n        return numbers;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for(int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n\
    \        }\n        return numbers;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        float scale = 1.0f / (max - min);\n        return numbers.stream().map(x\
    \ -> (x - min) * scale).collect(Collectors.toCollection(ArrayList::new));", " \
    \       float min = numbers.stream().min(Comparator.naturalOrder()).get();\n \
    \       float max = numbers.stream().max(Comparator.naturalOrder()).get();\n \
    \       float scale = 1.0f / (max - min);\n        ArrayList<Float> result = new\
    \ ArrayList<>();\n        for (Float number : numbers) {\n            result.add(number\
    \ - min);\n        }\n        result.stream().forEach(x -> x *= scale);\n    \
    \    return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        result.add(max - min);\n        return result;", "       \
    \ float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i,\
    \ numbers.get(i) * scale);\n        }\n        return numbers;", "        float\
    \ min = numbers.stream().min(Comparator.naturalOrder()).get();\n        float\
    \ max = numbers.stream().max(Comparator.naturalOrder()).get();\n        float\
    \ scale = 1.0f / (max - min);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (float number : numbers) {\n            result.add(scale * (number\
    \ - min));\n        }\n        return result;", "        ArrayList<Float> result\
    \ = new ArrayList<>();\n        float min = Collections.min(numbers);\n      \
    \  float max = Collections.max(numbers);\n        for (float number : numbers)\
    \ {\n            result.add(number - min);\n        }\n        result.add(max\
    \ - min);\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<>();\n        for (float number : numbers) {\n            result.add(number\
    \ - min);\n        }\n        result.add(max - min);\n        return result;",
  "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n  \
    \      float max = numbers.stream().max(Comparator.naturalOrder()).get();\n  \
    \      ArrayList<Float> result = new ArrayList<>();\n        for(float f : numbers)\
    \ {\n            result.add(f - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for(float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        result.add(max - min);\n        return result;", "       \
    \ float min = numbers.stream().min(Comparator.naturalOrder()).get();\n       \
    \ float max = numbers.stream().max(Comparator.naturalOrder()).get();\n       \
    \ float scale = 1.0f / (max - min);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (Float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i,\
    \ result.get(i) * scale);\n        }\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        for (float number : numbers) {\n            result.add(number / max);\n\
    \        }\n        result.add(1.0f);\n        return result;", "        float\
    \ min = numbers.stream().min(Comparator.naturalOrder()).get();\n        float\
    \ max = numbers.stream().max(Comparator.naturalOrder()).get();\n        float\
    \ scale = 1.0f / (max - min);\n        return numbers.stream().map(x -> (x - min)\
    \ * scale).collect(Collectors.toCollection(ArrayList::new));", "        float\
    \ min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i\
    \ = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i) - min);\n\
    \        }\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i,\
    \ result.get(i) / (max - min));\n        }\n        return result;", "       \
    \ float min = numbers.stream().min(Comparator.naturalOrder()).get();\n       \
    \ float max = numbers.stream().max(Comparator.naturalOrder()).get();\n       \
    \ float scale = 1.0f / (max - min);\n        ArrayList<Float> scaled = new ArrayList<>();\n\
    \        for (Float f : numbers) {\n            scaled.add(f - min);\n       \
    \ }\n        for (int i = 0; i < scaled.size(); i++) {\n            scaled.set(i,\
    \ scaled.get(i) * scale);\n        }\n        return scaled;", "        float\
    \ min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n        float\
    \ max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n        for\
    \ (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i)\
    \ - min);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n   \
    \         numbers.set(i, numbers.get(i) / (max - min));\n        }\n        numbers.set(0,\
    \ 0.0f);\n        numbers.set(1, 1.0f);\n        return numbers;", "        float\
    \ min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n        float\
    \ max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n        float\
    \ scale = max - min;\n        ArrayList<Float> result = new ArrayList<>();\n \
    \       for (Float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        return result;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        ArrayList<Float> result = new ArrayList<>();\n      \
    \  for(float i = min; i <= max; i += 0.25) {\n            result.add(i);\n   \
    \     }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n\
    \        }\n        return numbers;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float scale = 1.0f / (max\
    \ - min);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) * scale);\n\
    \        }\n        return numbers;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        float scale = 1.0f / (max - min);\n        ArrayList<Float>\
    \ result = new ArrayList<>();\n        for (Float number : numbers) {\n      \
    \      result.add(number * scale);\n        }\n        return result;", "    \
    \    float min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n \
    \       float max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n\
    \        numbers.forEach(x -> x = (x - min) / (max - min));\n        return numbers;",
  "        ArrayList<Float> result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for(float i : numbers)\
    \ {\n            result.add(i - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for(float num : numbers) {\n            result.add(num - min);\n    \
    \    }\n        result.add(max - min);\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (float i : numbers)\
    \ {\n            result.add((i - min) / (max - min));\n        }\n        return\
    \ result;", "        ArrayList<Float> result = new ArrayList<>();\n        float\
    \ min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n        float\
    \ max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n        for\
    \ (float i = min; i <= max; i++) {\n            result.add(i / max);\n       \
    \ }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        for(float i : numbers) {\n            result.add(i - min);\n        }\n\
    \        result.add(max - min);\n        return result;", "        float min =\
    \ numbers.stream().min(Comparator.comparing(x -> x)).get();\n        float max\
    \ = numbers.stream().max(Comparator.comparing(x -> x)).get();\n        float scale\
    \ = 1.0f / (max - min);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (Float f : numbers) {\n            result.add(f - min);\n       \
    \ }\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i,\
    \ result.get(i) * scale);\n        }\n        return result;", "        float\
    \ min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n        float\
    \ max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n        for\
    \ (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return numbers;", "        float\
    \ min = numbers.stream().mapToFloat(x -> x).min().getAsFloat();\n        float\
    \ max = numbers.stream().mapToFloat(x -> x).max().getAsFloat();\n        float\
    \ scale = 1.0f / (max - min);\n        return numbers.stream().map(x -> (x - min)\
    \ * scale).collect(Collectors.toCollection(ArrayList::new));", "        float\
    \ min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n        float\
    \ max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n        float\
    \ scale = 1.0f / (max - min);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (Float number : numbers) {\n            result.add(number * scale);\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<>();\n        for(float number : numbers) {\n            result.add(number\
    \ - min);\n        }\n        result.add(max - min);\n        return result;",
  "        float min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n\
    \        float max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n\
    \        float scale = 1.0f / (max - min);\n        return numbers.stream().map(x\
    \ -> (x - min) * scale).collect(Collectors.toCollection(ArrayList::new));", " \
    \       float min = numbers.stream().min(Comparator.naturalOrder()).get();\n \
    \       float max = numbers.stream().max(Comparator.naturalOrder()).get();\n \
    \       ArrayList<Float> result = new ArrayList<>();\n        for (float i = min;\
    \ i <= max; i++) {\n            result.add(i / max);\n        }\n        return\
    \ result;", "        float min = Collections.min(numbers);\n        float max\
    \ = Collections.max(numbers);\n        float scale = 1.0f / (max - min);\n   \
    \     ArrayList<Float> scaled = new ArrayList<>();\n        for (Float f : numbers)\
    \ {\n            scaled.add(f - min);\n        }\n        for (int i = 0; i <\
    \ scaled.size(); i++) {\n            scaled.set(i, scaled.get(i) * scale);\n \
    \       }\n        return scaled;", "        float min = numbers.get(0);\n   \
    \     float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float scale = 1.0f / (max\
    \ - min);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) * scale);\n\
    \        }\n        return numbers;", "        float min = numbers.stream().min(Float::compare).get();\n\
    \        float max = numbers.stream().max(Float::compare).get();\n        ArrayList<Float>\
    \ result = new ArrayList<>();\n        for (float number : numbers) {\n      \
    \      result.add((number - min) / (max - min));\n        }\n        return result;",
  "        float min = numbers.stream().min(Comparator.comparing(Float::floatValue)).get();\n\
    \        float max = numbers.stream().max(Comparator.comparing(Float::floatValue)).get();\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for(float i = 0;\
    \ i <= 1.0; i += 0.25) {\n            result.add(i * (max - min) + min);\n   \
    \     }\n        return result;", "        float min = numbers.get(0);\n     \
    \   float max = numbers.get(0);\n        for(int i = 1; i < numbers.size(); i++)\
    \ {\n            if(numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if(numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        float scale = 1.0f / (max\
    \ - min);\n        ArrayList<Float> result = new ArrayList<>();\n        for(int\
    \ i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i) - min);\n\
    \            result.add(numbers.get(i) - min);\n        }\n        for(int i =\
    \ 0; i < result.size(); i += 2) {\n            result.set(i, result.get(i) * scale);\n\
    \        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float scale = (max - min)\
    \ / (numbers.size() - 1);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i)\
    \ - min);\n        }\n        for (int i = 0; i < result.size(); i++) {\n    \
    \        result.set(i, result.get(i) * scale);\n        }\n        result.set(0,\
    \ 0.0f);\n        result.set(result.size() - 1, 1.0f);\n        return result;",
  "        ArrayList<Float> result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for(float f : numbers)\
    \ {\n            result.add(f - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        ArrayList<Float> res = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for(int i = 0; i < numbers.size(); i++) {\n            if(numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if(numbers.get(i) > max) {\n                max = numbers.get(i);\n        \
    \    }\n        }\n        for(int i = 0; i < numbers.size(); i++) {\n       \
    \     res.add((numbers.get(i) - min) / (max - min));\n        }\n        return\
    \ res;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        float scale = 1.0f / (max - min);\n        return numbers.stream().map(x\
    \ -> (x - min) * scale).collect(Collectors.toCollection(ArrayList::new));", " \
    \       ArrayList<Float> result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for(float i : numbers)\
    \ {\n            result.add(i - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (Float number : numbers) {\n            if (number < min) {\n     \
    \           min = number;\n            }\n            if (number > max) {\n  \
    \              max = number;\n            }\n        }\n        for (Float number\
    \ : numbers) {\n            result.add((number - min) / (max - min));\n      \
    \  }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        for (float number : numbers) {\n            result.add(number / max);\n\
    \        }\n        result.add(0.0f);\n        result.add(1.0f);\n        return\
    \ result;", "        ArrayList<Float> result = new ArrayList<>();\n        float\
    \ min = numbers.get(0);\n        float max = numbers.get(0);\n        for (int\
    \ i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n\
    \                min = numbers.get(i);\n            }\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n        }\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        float min = numbers.get(0);\n    \
    \    float max = numbers.get(0);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        for (float i : numbers) {\n            result.add(i - min);\n       \
    \ }\n        result.add(max - min);\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n     \
    \       result.add((numbers.get(i) - min) / (max - min));\n        }\n       \
    \ return result;", "        float min = numbers.get(0);\n        float max = numbers.get(0);\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n     \
    \       numbers.set(i, numbers.get(i) - min);\n        }\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) / (max\
    \ - min));\n        }\n        numbers.set(0, 0.0f);\n        numbers.set(1, 1.0f);\n\
    \        return numbers;", "        float min = Collections.min(numbers);\n  \
    \      float max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n\
    \        }\n        return numbers;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (float number : numbers) {\n            if (number < min) {\n     \
    \           min = number;\n            }\n            if (number > max) {\n  \
    \              max = number;\n            }\n        }\n        for (float number\
    \ : numbers) {\n            result.add((number - min) / (max - min));\n      \
    \  }\n        return result;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        for (Float number : numbers) {\n            result.add(number\
    \ - min);\n        }\n        for (int i = 0; i < result.size(); i++) {\n    \
    \        result.set(i, result.get(i) * scale);\n        }\n        return result;",
  "        ArrayList<Float> result = new ArrayList<>();\n        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        numbers.forEach(x -> x = (x - min) / (max - min));\n\
    \        return numbers;", "        float min = Collections.min(numbers);\n  \
    \      float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<>();\n        for (float i = min; i <= max; i += 1.0f) {\n \
    \           result.add(i);\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n        }\n     \
    \   for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i)\
    \ / (max - min));\n        }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n        }\n     \
    \   for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i)\
    \ / (max - min));\n        }\n        numbers.set(0, 0.0f);\n        numbers.set(1,\
    \ 1.0f);\n        return numbers;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n     \
    \       result.add((numbers.get(i) - min) / (max - min));\n        }\n       \
    \ return result;", "        ArrayList<Float> result = new ArrayList<>();\n   \
    \     float min = numbers.get(0);\n        float max = numbers.get(0);\n     \
    \   for(int i = 0; i < numbers.size(); i++) {\n            if(numbers.get(i) <\
    \ min) {\n                min = numbers.get(i);\n            }\n            if(numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n        }\n\
    \        for(int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return result;", "        float min\
    \ = numbers.stream().min(Comparator.naturalOrder()).get();\n        float max\
    \ = numbers.stream().max(Comparator.naturalOrder()).get();\n        ArrayList<Float>\
    \ result = new ArrayList<>();\n        for (float number : numbers) {\n      \
    \      result.add(number / (max - min));\n        }\n        return result;",
  "        ArrayList<Float> result = new ArrayList<>();\n        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        for (float number : numbers) {\n            result.add((number\
    \ - min) / (max - min));\n        }\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (float number : numbers) {\n            if (number < min) {\n     \
    \           min = number;\n            }\n            if (number > max) {\n  \
    \              max = number;\n            }\n        }\n        for (float number\
    \ : numbers) {\n            result.add((number - min) / (max - min));\n      \
    \  }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n\
    \        }\n        return numbers;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<>();\n        for(float i = min; i <= max; i += (max - min))\
    \ {\n            result.add(i);\n        }\n        for(int i = 0; i < numbers.size();\
    \ i++) {\n            result.set(numbers.get(i) - min, result.get(numbers.get(i)\
    \ - min) + 1);\n        }\n        return result;", "        ArrayList<Float>\
    \ result = new ArrayList<>();\n        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for(int i = 0; i < numbers.size(); i++) {\n \
    \           if(numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if(numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for(int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float scale = 1.0f / (max\
    \ - min);\n        ArrayList<Float> result = new ArrayList<>();\n        for (float\
    \ number : numbers) {\n            result.add(number * scale);\n        }\n  \
    \      return result;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        for(int i = 0; i < numbers.size(); i++) {\n         \
    \   numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n       \
    \ return numbers;", "        float min = numbers.stream().min(Float::compare).get();\n\
    \        float max = numbers.stream().max(Float::compare).get();\n        float\
    \ scale = 1.0f / (max - min);\n        ArrayList<Float> result = new ArrayList<>();\n\
    \        for (float number : numbers) {\n            result.add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for (float i :\
    \ numbers) {\n            result.add(i - min);\n        }\n        for (int i\
    \ = 0; i < result.size(); i++) {\n            result.set(i, result.get(i) / (max\
    \ - min));\n        }\n        return result;", "        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n        }\n     \
    \   for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i)\
    \ / (max - min));\n        }\n        numbers.set(0, 0.0f);\n        numbers.set(numbers.size()\
    \ - 1, 1.0f);\n        return numbers;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n\
    \        }\n        return numbers;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.stream().min(Comparator.comparing(x -> x)).get();\n\
    \        float max = numbers.stream().max(Comparator.comparing(x -> x)).get();\n\
    \        for (float number : numbers) {\n            result.add(number / (max\
    \ - min));\n        }\n        return result;", "        ArrayList<Float> result\
    \ = new ArrayList<>();\n        float min = Collections.min(numbers);\n      \
    \  float max = Collections.max(numbers);\n        for(float f : numbers) {\n \
    \           result.add(f - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        float scale = 1.0f / (max - min);\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        for (Float number : numbers) {\n            result.add(number\
    \ * scale);\n        }\n        return result;", "        ArrayList<Float> result\
    \ = new ArrayList<>();\n        float min = numbers.get(0);\n        float max\
    \ = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        ArrayList<Float> result\
    \ = new ArrayList<>();\n        for (float i : numbers) {\n            result.add(i\
    \ - min);\n        }\n        result.add(max - min);\n        return result;",
  "        ArrayList<Float> result = new ArrayList<>();\n        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for(float num : numbers) {\n   \
    \         if(num < min) {\n                min = num;\n            }\n       \
    \     if(num > max) {\n                max = num;\n            }\n        }\n\
    \        for(float num : numbers) {\n            result.add((num - min) / (max\
    \ - min));\n        }\n        return result;", "        ArrayList<Float> result\
    \ = new ArrayList<>();\n        float min = numbers.get(0);\n        float max\
    \ = numbers.get(0);\n        for(float number : numbers) {\n            if(number\
    \ < min) {\n                min = number;\n            }\n            if(number\
    \ > max) {\n                max = number;\n            }\n        }\n        for(float\
    \ number : numbers) {\n            result.add((number - min) / (max - min));\n\
    \        }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        result.add(max - min);\n        return result;", "       \
    \ ArrayList<Float> result = new ArrayList<>();\n        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n    \
    \    }\n        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = numbers.get(0);\n        float max = numbers.get(0);\n  \
    \      for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < min) {\n                min = numbers.get(i);\n            }\n           \
    \ if (numbers.get(i) > max) {\n                max = numbers.get(i);\n       \
    \     }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n     \
    \       result.add((numbers.get(i) - min) / (max - min));\n        }\n       \
    \ return result;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        numbers.forEach(x -> x = (x - min) / (max - min));\n\
    \        return numbers;", "        float min = numbers.get(0);\n        float\
    \ max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > max) {\n                max =\
    \ numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n        }\n     \
    \   for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i)\
    \ / (max - min));\n        }\n        numbers.set(0, 0.0f);\n        numbers.set(numbers.size()\
    \ - 1, 1.0f);\n        return numbers;", "        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for(float i : numbers)\
    \ {\n            result.add(i - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        float min = Collections.min(numbers);\n   \
    \     float max = Collections.max(numbers);\n        float scale = 1.0f / (max\
    \ - min);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) * scale);\n\
    \        }\n        return numbers;", "        float min = numbers.stream().min(Comparator.comparing(x\
    \ -> x)).get();\n        float max = numbers.stream().max(Comparator.comparing(x\
    \ -> x)).get();\n        float scale = 1.0f / (max - min);\n        ArrayList<Float>\
    \ result = new ArrayList<>();\n        for (Float x : numbers) {\n           \
    \ result.add(x * scale);\n        }\n        return result;", "        float min\
    \ = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        ArrayList<Float> result = new ArrayList<>();\n        for(float i : numbers)\
    \ {\n            result.add(i - min);\n        }\n        result.add(max - min);\n\
    \        return result;", "        ArrayList<Float> result = new ArrayList<>();\n\
    \        float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (float number : numbers) {\n            result.add(number - min);\n\
    \        }\n        result.add(max - min);\n        return result;", "       \
    \ float min = numbers.get(0);\n        float max = numbers.get(0);\n        for\
    \ (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min)\
    \ {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n        }\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i,\
    \ numbers.get(i) * scale);\n        }\n        return numbers;", "        float\
    \ min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i,\
    \ (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;",
  "        ArrayList<Float> result = new ArrayList<>();\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        for (float number : numbers)\
    \ {\n            result.add(number - min);\n        }\n        result.add(max\
    \ - min);\n        return result;"]
stop_tokens:
- "\n    }\n"
