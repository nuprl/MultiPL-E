name: HumanEval_10_make_palindrome
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Find the shortest palindrome that begins with a supplied\
  \ string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of\
  \ supplied string that is a palindrome.\n    // - Append to the end of the string\
  \ reverse of a string prefix that comes before the palindromic suffix.\n    // >>>\
  \ make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n\
  \    // >>> make_palindrome('cata')\n    // 'catac'\n    public static String makePalindrome(String\
  \ string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        int len =\
    \ string.length();\n        for (int i = 0; i < len; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        int i = 0;\n        while (i < len)\
    \ {\n            if (sb.charAt(i) == string.charAt(i)) {\n                i++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if (i == len) {\n            return string;\n        }\n        sb.append(string.substring(i));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < reverse.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.toString();",
  "        String reverse = \"\";\n        int length = string.length();\n       \
    \ for (int i = 0; i < length; i++) {\n            reverse = string.charAt(i) +\
    \ reverse;\n        }\n        String prefix = \"\";\n        for (int i = 0;\
    \ i < length; i++) {\n            prefix = string.charAt(i) + prefix;\n      \
    \  }\n        return prefix + reverse;", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        sb.append(string.substring(i, len));\n        sb.append(string.substring(0,\
    \ j));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        for (int i = 0; i < len; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        return sb.toString();", "        String reverse = \"\";\n\
    \        for (int i = string.length() - 1; i >= 0; i--) {\n            reverse\
    \ = reverse + string.charAt(i);\n        }\n        return string + reverse;",
  "        StringBuilder sb = new StringBuilder(string);\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (sb.charAt(i) != sb.charAt(j)) {\n                break;\n        \
    \    }\n            i++;\n            j--;\n        }\n        if (i == j) {\n\
    \            return string;\n        }\n        StringBuilder sb2 = new StringBuilder(string);\n\
    \        sb2.append(sb.substring(i, len));\n        sb2.reverse();\n        sb2.append(sb.substring(0,\
    \ i));\n        return sb2.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        sb.append(string.substring(i, len));\n        sb.append(string.substring(0,\
    \ j));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        if (i == j) {\n            sb.append(string);\n        } else\
    \ {\n            sb.append(string.substring(i, len));\n            sb.append(string.substring(0,\
    \ j + 1));\n        }\n        return sb.toString();", "        if (string.length()\
    \ == 0) return string;\n        StringBuilder sb = new StringBuilder();\n    \
    \    int len = string.length();\n        for (int i = 0; i < len; i++) {\n   \
    \         sb.append(string.charAt(i));\n        }\n        sb.reverse();\n   \
    \     int i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        int len = string.length();\n        for (int\
    \ i = 0; i < len; i++) {\n            sb.append(string.charAt(len - 1 - i));\n\
    \        }\n        return sb.reverse().toString();", "        String reverse\
    \ = \"\";\n        for (int i = string.length() - 1; i >= 0; i--) {\n        \
    \    reverse = reverse + string.charAt(i);\n        }\n        return string +\
    \ reverse;", "        StringBuilder sb = new StringBuilder();\n        int len\
    \ = string.length();\n        int i = 0;\n        int j = len - 1;\n        while\
    \ (i < j) {\n            while (i < j && string.charAt(i) == string.charAt(j))\
    \ {\n                i++;\n                j--;\n            }\n            if\
    \ (i < j) {\n                sb.append(string.charAt(i));\n                sb.append(string.charAt(j));\n\
    \                i++;\n                j--;\n            }\n        }\n      \
    \  return sb.toString();", "        int len = string.length();\n        int max_len\
    \ = 0;\n        int max_start = 0;\n        for (int i = 0; i < len; i++) {\n\
    \            int j = i;\n            while (j < len && string.charAt(j) == string.charAt(i))\
    \ {\n                j++;\n            }\n            if (j - i > max_len) {\n\
    \                max_len = j - i;\n                max_start = i;\n          \
    \  }\n        }\n        StringBuilder sb = new StringBuilder(string);\n     \
    \   for (int i = 0; i < max_len; i++) {\n            sb.append(string.charAt(max_start\
    \ + i));\n        }\n        sb.append(string.substring(0, max_start));\n    \
    \    sb.reverse();\n        return sb.toString();", "        StringBuilder sb\
    \ = new StringBuilder(string);\n        int len = string.length();\n        int\
    \ i = 0;\n        int j = len - 1;\n        while (i < j) {\n            if (string.charAt(i)\
    \ != string.charAt(j)) {\n                break;\n            }\n            i++;\n\
    \            j--;\n        }\n        if (i == j) {\n            return string;\n\
    \        }\n        sb.append(string.substring(i, len));\n        sb.reverse();\n\
    \        sb.append(string.substring(0, i));\n        return sb.toString();", " \
    \       StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        sb.append(string.substring(i,\
    \ len));\n        sb.append(string.substring(0, j + 1));\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        while (i < len) {\n            int j = i + 1;\n \
    \           while (j < len && string.charAt(i) == string.charAt(j)) {\n      \
    \          j++;\n            }\n            if (j - i > 1) {\n               \
    \ sb.append(string.substring(i, j - 1));\n            }\n            i = j;\n\
    \        }\n        sb.append(string.substring(i));\n        return sb.reverse().toString();",
  "        if (string.length() == 0) return string;\n        String longestPalindrome\
    \ = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            String\
    \ postfix = string.substring(i);\n            if (isPalindrome(postfix)) {\n \
    \               longestPalindrome = postfix;\n            }\n        }\n     \
    \   if (longestPalindrome.length() == 0) return string;\n        String prefix\
    \ = string.substring(0, string.length() - longestPalindrome.length());\n     \
    \   return prefix + longestPalindrome + reverse(longestPalindrome);", "      \
    \  int len = string.length();\n        int max_len = 0;\n        int max_index\
    \ = 0;\n        for (int i = 0; i < len; i++) {\n            if (isPalindrome(string,\
    \ i, i)) {\n                max_len = i + 1;\n                max_index = i;\n\
    \            }\n        }\n        if (max_len == 0) {\n            return string;\n\
    \        }\n        return string.substring(0, max_index) + reverse(string.substring(max_index,\
    \ max_len)) + string.substring(max_len);", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        int i = 0;\n   \
    \     while (i < len) {\n            int j = i + 1;\n            while (j < len\
    \ && string.charAt(i) == string.charAt(j)) {\n                j++;\n         \
    \   }\n            if (j - i > 1) {\n                sb.append(string.substring(i,\
    \ j - 1));\n            }\n            i = j;\n        }\n        return sb.reverse().toString();",
  "        String reverse = string.substring(string.length() - 1, string.length()\
    \ - 1);\n        reverse = reverse.concat(reverse.substring(0, reverse.length()\
    \ - 1));\n        return string.concat(reverse);", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        int i = 0;\n        while (i < string.length()) {\n            if (isPalindrome(sb.substring(i,\
    \ i + string.length()))) {\n                return sb.substring(i, i + string.length());\n\
    \            }\n            i++;\n        }\n        return \"\";", "        String\
    \ reverse = string.substring(string.length() - 1, string.length() - 1);\n    \
    \    reverse = reverse.concat(reverse.substring(0, reverse.length() - 1));\n \
    \       return string.concat(reverse);", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            sb.append(string.charAt(i));\n            i++;\n        }\n \
    \       i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        return sb.reverse().toString();", "    \
    \    int len = string.length();\n        StringBuilder sb = new StringBuilder(len);\n\
    \        for (int i = 0; i < len; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        int start = 0;\n        int end = len\
    \ - 1;\n        while (start < end) {\n            if (sb.charAt(start) == sb.charAt(end))\
    \ {\n                start++;\n                end--;\n            } else {\n\
    \                break;\n            }\n        }\n        sb.append(sb.substring(start,\
    \ end + 1));\n        return sb.toString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n    \
    \        sb.append(string.charAt(i));\n        }\n        String reverse = sb.reverse().toString();\n\
    \        StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            sb2.append(reverse.charAt(i));\n      \
    \  }\n        return sb2.toString();", "        if (string.length() == 0) {\n\
    \            return string;\n        }\n        String longestPalindrome = \"\"\
    ;\n        for (int i = 0; i < string.length(); i++) {\n            String postfix\
    \ = string.substring(i);\n            if (isPalindrome(postfix)) {\n         \
    \       longestPalindrome = postfix;\n                break;\n            }\n\
    \        }\n        String prefix = string.substring(0, longestPalindrome.length());\n\
    \        return prefix + reverse(longestPalindrome);", "        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        sb.append(string.substring(0, i));\n    \
    \    sb.append(string.substring(j, len));\n        sb.reverse();\n        return\
    \ sb.toString();", "        StringBuilder sb = new StringBuilder();\n        int\
    \ len = string.length();\n        int i = 0;\n        int j = len - 1;\n     \
    \   while (i < j) {\n            if (string.charAt(i) == string.charAt(j)) {\n\
    \                i++;\n                j--;\n            } else {\n          \
    \      break;\n            }\n        }\n        sb.append(string.substring(i,\
    \ len));\n        sb.append(string.substring(0, j));\n        return sb.toString();",
  "        String reverse = string.substring(0, string.length() - 1);\n        reverse\
    \ = reverse.substring(0, reverse.length() / 2) + reverse.substring(reverse.length()\
    \ / 2);\n        return string + reverse;", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            int j = i + 1;\n            while (j < len && string.charAt(i)\
    \ == string.charAt(j)) {\n                j++;\n            }\n            if\
    \ (j - i > 1) {\n                sb.append(string.substring(i, j - 1));\n    \
    \        }\n            i = j;\n        }\n        sb.append(string.substring(i,\
    \ len));\n        return sb.reverse().toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        int len = string.length();\n        int max\
    \ = 0;\n        for (int i = 0; i < len; i++) {\n            if (isPalindrome(string,\
    \ i, i)) {\n                max = i;\n                break;\n            }\n\
    \        }\n        sb.append(string.substring(0, max));\n        sb.append(reverse(string.substring(max)));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < reverse.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.toString();",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        i = 0;\n        while (i < len) {\n    \
    \        sb.append(string.charAt(len - 1 - i));\n            i++;\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(len - 1 - i));\n        }\n        sb.reverse();\n\
    \        sb.append(string.substring(0, len - 1));\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder(string);\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        if (i ==\
    \ j) {\n            return string;\n        }\n        StringBuilder sb2 = new\
    \ StringBuilder(string.substring(0, i));\n        sb2.append(string.substring(j));\n\
    \        return sb2.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        int i = len - 1;\n\
    \        while (i >= 0) {\n            sb.append(string.charAt(i));\n        \
    \    i--;\n        }\n        return sb.reverse().toString();", "        if (string\
    \ == null || string.length() == 0) {\n            return string;\n        }\n\
    \        StringBuilder sb = new StringBuilder(string);\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        if (i ==\
    \ j) {\n            return string;\n        }\n        StringBuilder sb2 = new\
    \ StringBuilder(string);\n        sb2.append(sb.substring(i, len));\n        sb2.reverse();\n\
    \        sb2.append(sb.substring(0, i));\n        return sb2.toString();", " \
    \       StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        i = 0;\n        while (i < len) {\n    \
    \        sb.append(string.charAt(len - 1 - i));\n            i++;\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(len - 1 - i));\n        }\n        sb.reverse();\n\
    \        return sb.toString() + string;", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int max = 0;\n        for (int i\
    \ = 0; i < len; i++) {\n            if (isPalindrome(string, i, i)) {\n      \
    \          max = i;\n                break;\n            }\n        }\n      \
    \  sb.append(string.substring(0, max + 1));\n        sb.append(reverse(string.substring(max\
    \ + 1, len)));\n        return sb.toString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        int len = string.length();\n        for (int i = 0;\
    \ i < len; i++) {\n            sb.append(string.charAt(i));\n        }\n     \
    \   sb.reverse();\n        int i = 0;\n        while (i < len) {\n           \
    \ if (sb.charAt(i) == string.charAt(i)) {\n                i++;\n            }\
    \ else {\n                break;\n            }\n        }\n        if (i == len)\
    \ {\n            return string;\n        }\n        sb.append(string.substring(i));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        int i = 0;\n        int j = string.length() - 1;\n       \
    \ while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n \
    \               break;\n            }\n            i++;\n            j--;\n  \
    \      }\n        if (i == j) {\n            return string;\n        }\n     \
    \   sb.append(string.substring(i, j + 1));\n        sb.reverse();\n        return\
    \ sb.toString();", "        StringBuilder sb = new StringBuilder();\n        int\
    \ len = string.length();\n        for (int i = 0; i < len; i++) {\n          \
    \  sb.append(string.charAt(len - 1 - i));\n        }\n        String reverse =\
    \ new StringBuilder(sb).reverse().toString();\n        return string + reverse;",
  "        StringBuilder sb = new StringBuilder(string);\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        if (i ==\
    \ j) {\n            return string;\n        }\n        StringBuilder sb2 = new\
    \ StringBuilder(string);\n        sb2.append(sb.substring(i, len));\n        sb2.reverse();\n\
    \        sb2.append(sb.substring(0, i));\n        return sb2.toString();", " \
    \       StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) == string.charAt(j)) {\n                i++;\n  \
    \              j--;\n            } else {\n                break;\n          \
    \  }\n        }\n        sb.append(string.substring(i, len));\n        sb.append(string.substring(0,\
    \ j));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.toString();",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        for (int i = 0; i < len; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        int i = 0;\n        int j = len - 1;\n\
    \        while (i < j) {\n            if (sb.charAt(i) != sb.charAt(j)) {\n  \
    \              break;\n            }\n            i++;\n            j--;\n   \
    \     }\n        sb.append(sb.substring(0, i));\n        sb.append(sb.substring(j\
    \ + 1, len));\n        return sb.toString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n    \
    \        sb.append(string.charAt(i));\n        }\n        sb.reverse();\n    \
    \    String reverse = sb.toString();\n        int i = 0;\n        int j = string.length()\
    \ - 1;\n        while (i < j) {\n            if (reverse.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        return string.substring(0, i) + string.substring(j + 1);",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        i = 0;\n        while (i < len) {\n    \
    \        sb.append(string.charAt(len - 1 - i));\n            i++;\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        String reverse =\
    \ reverse(sb.toString());\n        sb.append(reverse);\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        String\
    \ reverse = new StringBuilder(sb).reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder(reverse);\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb2.append(string.charAt(i));\n        }\n        return\
    \ sb2.toString();", "        StringBuilder sb = new StringBuilder();\n       \
    \ int len = string.length();\n        int i = 0;\n        while (i < len) {\n\
    \            sb.append(string.charAt(i));\n            i++;\n        }\n     \
    \   i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        return sb.toString();", "        String\
    \ reverse = string.substring(0, string.length() - 1);\n        reverse = reverse.substring(reverse.length()\
    \ - 1, reverse.length());\n        return string + reverse;", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            sb.append(string.charAt(i));\n        }\n        int i = 0;\n\
    \        int j = string.length() - 1;\n        while (i < j) {\n            if\
    \ (string.charAt(i) != string.charAt(j)) {\n                break;\n         \
    \   }\n            i++;\n            j--;\n        }\n        if (i == j) {\n\
    \            return string;\n        }\n        sb.append(string.substring(i,\
    \ j + 1));\n        sb.reverse();\n        sb.append(string.substring(0, i));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        int len = sb.length();\n        for\
    \ (int i = 0; i < len; i++) {\n            sb.append(sb.charAt(i));\n        }\n\
    \        return sb.toString();", "        int len = string.length();\n       \
    \ if (len == 0) return string;\n        int max_len = 0;\n        int max_i =\
    \ -1;\n        for (int i = 0; i < len; i++) {\n            if (isPalindrome(string,\
    \ i, i)) {\n                max_len = i + 1;\n                max_i = i;\n   \
    \         }\n        }\n        if (max_len == 0) return string;\n        return\
    \ string.substring(0, max_len) + reverse(string.substring(max_i + 1, len));",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        String\
    \ reverse = sb.reverse().toString();\n        return string + reverse.substring(0,\
    \ reverse.length() - 1);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < reverse.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.toString();",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        i = 0;\n        while (i < len) {\n    \
    \        sb.append(string.charAt(len - i - 1));\n            i++;\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            sb.append(string.charAt(i));\n            i++;\n        }\n \
    \       while (i > 0) {\n            sb.append(string.charAt(i - 1));\n      \
    \      i--;\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        int len = string.length();\n        int i\
    \ = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        i = 0;\n        while (i < len) {\n    \
    \        sb.append(string.charAt(len - i - 1));\n            i++;\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        String prefix = sb.substring(0, len / 2);\n        String suffix = sb.substring(len\
    \ / 2);\n        return prefix + suffix;", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        sb.append(string.substring(i, len));\n        sb.append(string.substring(0,\
    \ j));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (sb.charAt(i) != sb.charAt(j)) {\n\
    \                break;\n            }\n            i++;\n            j--;\n \
    \       }\n        if (i == j) {\n            return string;\n        }\n    \
    \    StringBuilder sb2 = new StringBuilder(string);\n        sb2.append(sb.substring(i,\
    \ len));\n        sb2.reverse();\n        sb2.append(sb.substring(0, i));\n  \
    \      return sb2.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        sb.append(reverse.substring(0,\
    \ reverse.length() - 1));\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            sb.append(string.charAt(i));\n        }\n        String reverse\
    \ = sb.reverse().toString();\n        sb.append(reverse.substring(0, reverse.length()\
    \ - 1));\n        return sb.toString();", "        int len = string.length();\n\
    \        StringBuilder sb = new StringBuilder(len);\n        for (int i = 0; i\
    \ < len; i++) {\n            sb.append(string.charAt(len - 1 - i));\n        }\n\
    \        return sb.reverse().toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        if (i == j) {\n            return string;\n        }\n   \
    \     StringBuilder sb2 = new StringBuilder(string);\n        sb2.append(string.substring(i,\
    \ len));\n        sb2.reverse();\n        sb.append(sb2.substring(0, i));\n  \
    \      return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        int start = 0;\n        int end = len - 1;\n        while (start < end)\
    \ {\n            if (sb.charAt(start) != sb.charAt(end)) {\n                break;\n\
    \            }\n            start++;\n            end--;\n        }\n        sb.append(sb.substring(0,\
    \ start));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        int i =\
    \ 0;\n        while (i < reverse.length()) {\n            sb.append(reverse.substring(i,\
    \ reverse.length()));\n            i += reverse.length();\n        }\n       \
    \ return sb.toString();", "        StringBuilder sb = new StringBuilder();\n \
    \       int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        sb.append(string.substring(i, len));\n        sb.append(reverse(string.substring(0,\
    \ i)));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        String reverse = sb.toString();\n \
    \       int i = 0;\n        int j = string.length() - 1;\n        while (i < j)\
    \ {\n            if (reverse.charAt(i) != string.charAt(j)) {\n              \
    \  break;\n            }\n            i++;\n            j--;\n        }\n    \
    \    if (i == j) {\n            return string;\n        }\n        return string.substring(0,\
    \ i) + string.substring(j + 1);", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        int i = 0;\n   \
    \     int j = len - 1;\n        while (i < j) {\n            if (sb.charAt(i)\
    \ != sb.charAt(j)) {\n                break;\n            }\n            i++;\n\
    \            j--;\n        }\n        String prefix = string.substring(0, i);\n\
    \        String postfix = string.substring(j + 1);\n        sb.append(postfix);\n\
    \        sb.reverse();\n        sb.append(prefix);\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        sb.append(string.substring(i,\
    \ len));\n        sb.append(string.substring(0, j));\n        return sb.toString();",
  "        int len = string.length();\n        int max_len = 0;\n        for (int\
    \ i = 0; i < len; i++) {\n            if (isPalindrome(string, i, i)) {\n    \
    \            max_len = i + 1;\n            }\n        }\n        for (int i =\
    \ 0; i < max_len; i++) {\n            for (int j = i + 1; j < len; j++) {\n  \
    \              if (isPalindrome(string, i, j)) {\n                    string =\
    \ string.substring(0, i) + string.substring(j, len);\n                    return\
    \ string;\n                }\n            }\n        }\n        return string;",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        String\
    \ reverse = sb.reverse().toString();\n        StringBuilder sb2 = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb2.append(reverse.charAt(i));\n\
    \        }\n        return sb2.toString();", "        if (string.length() == 0)\
    \ {\n            return string;\n        }\n        String reverse = string.substring(string.length()\
    \ - 1, string.length());\n        reverse = reverse.concat(reverse.substring(0,\
    \ reverse.length() - 1));\n        return string.concat(reverse);", "        int\
    \ len = string.length();\n        int i = 0;\n        int j = len - 1;\n     \
    \   while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n\
    \                break;\n            }\n            i++;\n            j--;\n \
    \       }\n        StringBuilder sb = new StringBuilder(len);\n        sb.append(string.substring(i,\
    \ len));\n        sb.reverse();\n        sb.append(string.substring(0, i));\n\
    \        return sb.toString();", "        if (string.length() == 0) {\n      \
    \      return string;\n        }\n        String longestPalindrome = \"\";\n \
    \       for (int i = 0; i < string.length(); i++) {\n            String postfix\
    \ = string.substring(i);\n            if (isPalindrome(postfix)) {\n         \
    \       longestPalindrome = postfix;\n            }\n        }\n        String\
    \ prefix = string.substring(0, longestPalindrome.length());\n        return prefix\
    \ + longestPalindrome.substring(0, longestPalindrome.length() - 1) + reverse(longestPalindrome);",
  "        if (string.length() == 0) {\n            return string;\n        }\n  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        int i = 0;\n        while (i < string.length())\
    \ {\n            int j = i;\n            while (j < string.length() && string.charAt(i)\
    \ == string.charAt(j)) {\n                j++;\n            }\n            if\
    \ (j - i > 1) {\n                sb.append(string.substring(i, j));\n        \
    \    }\n            i = j;\n        }\n        return sb.toString();", "     \
    \   StringBuilder sb = new StringBuilder(string);\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (sb.charAt(i) != sb.charAt(j)) {\n                break;\n        \
    \    }\n            i++;\n            j--;\n        }\n        if (i == j) {\n\
    \            return string;\n        }\n        StringBuilder sb2 = new StringBuilder(len);\n\
    \        while (i < j) {\n            sb2.append(sb.charAt(i));\n            i++;\n\
    \        }\n        sb2.append(sb.reverse().substring(0, j - i + 1));\n      \
    \  return sb2.toString();", "        String reverse = string.substring(string.length()\
    \ - 1, string.length() - 1);\n        reverse = reverse.concat(reverse.substring(0,\
    \ reverse.length() - 1));\n        return string.concat(reverse);", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            sb.append(string.charAt(i));\n        }\n        int len = sb.length();\n\
    \        int start = 0;\n        int end = len - 1;\n        while (start < end)\
    \ {\n            if (sb.charAt(start) == sb.charAt(end)) {\n                start++;\n\
    \                end--;\n            } else {\n                break;\n      \
    \      }\n        }\n        sb.append(sb.substring(start, end));\n        sb.reverse();\n\
    \        return sb.toString();", "        if (string.length() == 0) {\n      \
    \      return string;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(string.length()\
    \ - 1 - i));\n        }\n        sb.reverse();\n        sb.append(string.substring(0,\
    \ string.length() - 1));\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        int len = string.length();\n        int i\
    \ = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        i = 0;\n        while (i < len) {\n    \
    \        sb.append(string.charAt(len - 1 - i));\n            i++;\n        }\n\
    \        return sb.toString();", "        String reverse = string.substring(string.length()\
    \ - 1, string.length() - 1);\n        reverse = reverse.concat(reverse.substring(0,\
    \ reverse.length() - 1));\n        return string.concat(reverse);", "        StringBuilder\
    \ sb = new StringBuilder();\n        int len = string.length();\n        int i\
    \ = 0;\n        int j = len - 1;\n        while (i < j) {\n            if (string.charAt(i)\
    \ != string.charAt(j)) {\n                break;\n            }\n            sb.append(string.charAt(i));\n\
    \            i++;\n            j--;\n        }\n        if (i == j) {\n      \
    \      sb.append(string.charAt(i));\n        }\n        else {\n            sb.append(string.substring(i,\
    \ j + 1).reverse());\n        }\n        return sb.toString();", "        String\
    \ reverse = string.substring(string.length() - 1, string.length() - 1);\n    \
    \    reverse = reverse.concat(reverse.substring(0, reverse.length() - 1));\n \
    \       return string.concat(reverse);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        return\
    \ string + reverse.substring(0, reverse.length() - 1);", "        int length =\
    \ string.length();\n        int max_length = 0;\n        int max_index = 0;\n\
    \        for (int i = 0; i < length; i++) {\n            String postfix = string.substring(i);\n\
    \            if (isPalindrome(postfix)) {\n                if (postfix.length()\
    \ > max_length) {\n                    max_length = postfix.length();\n      \
    \              max_index = i;\n                }\n            }\n        }\n \
    \       String prefix = string.substring(0, max_index);\n        String result\
    \ = prefix + reverse(string.substring(max_index, length));\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        sb.append(string.substring(i,\
    \ len));\n        sb.append(string.substring(0, j));\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       while (i < j && string.charAt(i) == string.charAt(j)) {\n            \
    \    i++;\n                j--;\n            }\n            if (i < j) {\n   \
    \             sb.append(string.charAt(j));\n                sb.append(string.charAt(i));\n\
    \                i++;\n                j--;\n            }\n        }\n      \
    \  return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int max = 0;\n        for (int i\
    \ = 0; i < len; i++) {\n            if (isPalindrome(string, i, i)) {\n      \
    \          max = i;\n                break;\n            }\n        }\n      \
    \  for (int i = 0; i < max; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        for (int i = max; i < len; i++) {\n            sb.append(string.charAt(len\
    \ - 1 - i));\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        int len = string.length();\n        int i\
    \ = 0;\n        int j = len - 1;\n        while (i < j) {\n            if (string.charAt(i)\
    \ != string.charAt(j)) {\n                break;\n            }\n            i++;\n\
    \            j--;\n        }\n        sb.append(string.substring(i, len));\n \
    \       sb.append(string.substring(0, j));\n        return sb.toString();", " \
    \       StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int max = 0;\n        for (int i = 0; i < len; i++) {\n            char\
    \ c = string.charAt(i);\n            if (isPalindrome(c)) {\n                sb.append(c);\n\
    \                max = Math.max(max, i);\n            }\n        }\n        if\
    \ (max == 0) {\n            return \"\";\n        }\n        sb.append(string.substring(max,\
    \ len));\n        sb.reverse();\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        int len = string.length();\n      \
    \  int i = 0;\n        int j = len - 1;\n        while (i < j) {\n           \
    \ if (string.charAt(i) != string.charAt(j)) {\n                break;\n      \
    \      }\n            i++;\n            j--;\n        }\n        if (i == j) {\n\
    \            return string;\n        }\n        sb.append(string.substring(i,\
    \ len));\n        sb.reverse();\n        sb.append(string.substring(0, i));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            int j = i;\n            while (j < len && string.charAt(j) ==\
    \ string.charAt(i)) {\n                j++;\n            }\n            if (j\
    \ - i > 1) {\n                sb.append(string.substring(i, j));\n           \
    \ }\n            i = j;\n        }\n        if (sb.length() == 0) {\n        \
    \    return string;\n        }\n        sb.append(string.substring(i));\n    \
    \    return sb.reverse().toString();", "        if (string.length() == 0) {\n\
    \            return string;\n        }\n        int max_len = 0;\n        String\
    \ longest_palindrome = \"\";\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            String postfix = string.substring(i);\n            if (isPalindrome(postfix))\
    \ {\n                if (postfix.length() > max_len) {\n                    max_len\
    \ = postfix.length();\n                    longest_palindrome = postfix;\n   \
    \             }\n            }\n        }\n        String prefix = string.substring(0,\
    \ max_len);\n        return prefix + longest_palindrome + reverse(prefix);", " \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        String reverse = sb.toString();\n        int i = 0;\n        while (i\
    \ < string.length() && reverse.charAt(i) == string.charAt(i)) {\n            i++;\n\
    \        }\n        return string.substring(0, i) + reverse.substring(i);", " \
    \       StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        while (i < len) {\n            int j = i;\n     \
    \       while (j < len && string.charAt(j) == string.charAt(i)) {\n          \
    \      j++;\n            }\n            sb.append(string.substring(i, j));\n \
    \           i = j;\n            sb.append(string.substring(i, len));\n       \
    \ }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        sb.append(reverse.substring(0,\
    \ reverse.length() - 1));\n        return sb.toString();", "        int len =\
    \ string.length();\n        if (len == 0) return string;\n        int max_len\
    \ = 0;\n        for (int i = 0; i < len; i++) {\n            if (isPalindrome(string,\
    \ i, i)) {\n                max_len = i + 1;\n            }\n        }\n     \
    \   if (max_len == 0) return string;\n        int min_len = max_len;\n       \
    \ for (int i = 0; i < len; i++) {\n            if (isPalindrome(string, i, i))\
    \ {\n                min_len = i + 1;\n            }\n        }\n        if (min_len\
    \ == 0) return string;\n        StringBuilder sb = new StringBuilder();\n    \
    \    sb.append(string.substring(0, min_len));\n        sb.append(string.substring(max_len\
    \ - min_len));\n        return sb.toString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        int len = string.length();\n        for (int i = 0;\
    \ i < len; i++) {\n            sb.append(string.charAt(i));\n        }\n     \
    \   int i = 0;\n        int j = len - 1;\n        while (i < j) {\n          \
    \  if (sb.charAt(i) != sb.charAt(j)) {\n                break;\n            }\n\
    \            i++;\n            j--;\n        }\n        if (i < j) {\n       \
    \     sb.append(sb.substring(i, j + 1).reverse());\n        }\n        return\
    \ sb.toString();", "        int len = string.length();\n        int max_len =\
    \ 0;\n        String max_prefix = \"\";\n        for (int i = 0; i < len; i++)\
    \ {\n            String prefix = string.substring(0, i + 1);\n            String\
    \ postfix = string.substring(i + 1, len);\n            if (isPalindrome(postfix))\
    \ {\n                if (prefix.length() > max_len) {\n                    max_len\
    \ = prefix.length();\n                    max_prefix = prefix;\n             \
    \   }\n            }\n        }\n        return string.substring(0, len - max_len)\
    \ + max_prefix;", "        StringBuilder sb = new StringBuilder();\n        int\
    \ len = string.length();\n        for (int i = 0; i < len; i++) {\n          \
    \  sb.append(string.charAt(i));\n        }\n        sb.reverse();\n        int\
    \ i = 0;\n        while (i < len) {\n            if (sb.charAt(i) == sb.charAt(len\
    \ - i - 1)) {\n                i++;\n            } else {\n                break;\n\
    \            }\n        }\n        sb.append(string.substring(i));\n        return\
    \ sb.toString();", "        StringBuilder sb = new StringBuilder();\n        int\
    \ len = string.length();\n        int i = 0;\n        int j = len - 1;\n     \
    \   while (i < j) {\n            while (i < j && string.charAt(i) == string.charAt(j))\
    \ {\n                i++;\n                j--;\n            }\n            if\
    \ (i < j) {\n                sb.append(string.charAt(i));\n                sb.append(string.charAt(j));\n\
    \                i++;\n                j--;\n            }\n        }\n      \
    \  return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < reverse.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.reverse().toString();",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        i = 0;\n        while (i < len) {\n    \
    \        sb.append(string.charAt(len - i - 1));\n            i++;\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        int len = sb.length();\n        int\
    \ start = 0;\n        int end = len - 1;\n        while (start < end) {\n    \
    \        if (sb.charAt(start) != sb.charAt(end)) {\n                break;\n \
    \           }\n            start++;\n            end--;\n        }\n        sb.append(sb.substring(start,\
    \ len));\n        return sb.toString();", "        int len = string.length();\n\
    \        if (len == 0) {\n            return string;\n        }\n        int max_len\
    \ = 0;\n        for (int i = 0; i < len; i++) {\n            if (isPalindrome(string,\
    \ i, i)) {\n                max_len = i + 1;\n            }\n        }\n     \
    \   if (max_len == 0) {\n            return string;\n        }\n        StringBuilder\
    \ sb = new StringBuilder(string);\n        for (int i = 0; i < max_len; i++) {\n\
    \            sb.append(string.charAt(len - i - 1));\n        }\n        return\
    \ sb.toString();", "        if (string.length() == 0) return string;\n       \
    \ String longestPalindrome = \"\";\n        for (int i = 0; i < string.length();\
    \ i++) {\n            String postfix = string.substring(i);\n            if (isPalindrome(postfix))\
    \ {\n                longestPalindrome = postfix;\n            }\n        }\n\
    \        return string + longestPalindrome.substring(0, longestPalindrome.length()\
    \ / 2);", "        StringBuilder sb = new StringBuilder();\n        int len =\
    \ string.length();\n        int i = 0;\n        while (i < len) {\n          \
    \  sb.append(string.charAt(i));\n            i++;\n        }\n        i = 0;\n\
    \        while (i < len) {\n            sb.append(string.charAt(len - i - 1));\n\
    \            i++;\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        int len = string.length();\n        for (int\
    \ i = 0; i < len; i++) {\n            sb.append(string.charAt(i));\n        }\n\
    \        sb.reverse();\n        int i = 0;\n        int j = len - 1;\n       \
    \ while (i < j) {\n            if (sb.charAt(i) != sb.charAt(j)) {\n         \
    \       break;\n            }\n            i++;\n            j--;\n        }\n\
    \        if (i == j) {\n            return sb.toString();\n        }\n       \
    \ sb.append(sb.substring(0, i));\n        sb.append(sb.substring(j + 1));\n  \
    \      return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int max = 0;\n        for (int i\
    \ = 0; i < len; i++) {\n            if (isPalindrome(string, i, i)) {\n      \
    \          max = i;\n                break;\n            }\n        }\n      \
    \  sb.append(string.substring(0, max));\n        sb.append(reverse(string.substring(max)));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        int i = 0;\n        while (i < sb.length()) {\n          \
    \  int j = i + 1;\n            while (j < sb.length() && sb.charAt(i) == sb.charAt(j))\
    \ {\n                j++;\n            }\n            if (j - i > 2) {\n     \
    \           sb.insert(i + 1, sb.substring(i, j - 1).reverse());\n            \
    \    i = j - 1;\n            } else {\n                i++;\n            }\n \
    \       }\n        return sb.toString();", "        String reverse = string.substring(0,\
    \ string.length() - 1);\n        reverse = reverse.substring(0, reverse.length()\
    \ - 1);\n        reverse = reverse.concat(reverse);\n        return string.concat(reverse);",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        sb.append(string.substring(i,\
    \ len));\n        sb.append(string.substring(0, j));\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) == string.charAt(j)) {\n                sb.append(string.charAt(i));\n\
    \                i++;\n                j--;\n            } else {\n          \
    \      break;\n            }\n        }\n        if (i == j) {\n            sb.append(string.charAt(i));\n\
    \        } else {\n            sb.append(string.substring(i, j + 1).reverse());\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            int j = len - 1;\n            while (i < j && string.charAt(i)\
    \ == string.charAt(j)) {\n                i++;\n                j--;\n       \
    \     }\n            if (i < j) {\n                sb.append(string.charAt(j));\n\
    \                sb.append(string.charAt(i));\n            }\n            i++;\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < reverse.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.reverse().toString()\
    \ + sb.toString();", "        int len = string.length();\n        StringBuilder\
    \ sb = new StringBuilder(len);\n        for (int i = 0; i < len; i++) {\n    \
    \        sb.append(string.charAt(len - 1 - i));\n        }\n        String reverse\
    \ = sb.reverse().toString();\n        return string + reverse;", "        StringBuilder\
    \ sb = new StringBuilder();\n        int len = string.length();\n        int i\
    \ = 0;\n        int j = len - 1;\n        while (i < j) {\n            while (i\
    \ < len && !isPalindrome(string, i, j)) {\n                i++;\n            }\n\
    \            while (j >= 0 && !isPalindrome(string, i, j)) {\n               \
    \ j--;\n            }\n            if (i < j) {\n                sb.append(string.charAt(i));\n\
    \                sb.append(string.charAt(j));\n                i++;\n        \
    \        j--;\n            }\n        }\n        return sb.toString();", "   \
    \     String reverse = string.substring(string.length() - 1, string.length());\n\
    \        reverse = reverse.concat(reverse.substring(0, reverse.length() - 1));\n\
    \        return string.concat(reverse);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < reverse.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.reverse().toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        String\
    \ reverse = sb.reverse().toString();\n        return string + reverse.substring(0,\
    \ reverse.length() - 1);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < reverse.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.reverse().toString();",
  "        if (string.length() == 0) {\n            return string;\n        }\n  \
    \      StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            sb.append(string.charAt(i));\n            i++;\n \
    \           j--;\n        }\n        if (i == j) {\n            return string;\n\
    \        }\n        sb.append(string.substring(i, j + 1));\n        sb.reverse();\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        sb.append(string.substring(i, len));\n        sb.append(string.substring(0,\
    \ j));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        sb.append(string.substring(i, len));\n        sb.append(string.substring(0,\
    \ j));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(len - 1 - i));\n        }\n        sb.reverse();\n\
    \        return sb.toString() + string;", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            int j = i;\n            while (j < len && string.charAt(j) ==\
    \ string.charAt(i)) {\n                j++;\n            }\n            if (j\
    \ - i > 1) {\n                sb.append(string.substring(i, j));\n           \
    \ }\n            i = j;\n        }\n        return sb.reverse().toString() + string;",
  "        String reverse = string.substring(string.length() - 1, string.length()\
    \ - 1);\n        reverse = reverse.concat(reverse.substring(0, reverse.length()\
    \ - 1));\n        return string.concat(reverse);", "        StringBuilder sb =\
    \ new StringBuilder();\n        int len = string.length();\n        for (int i\
    \ = 0; i < len; i++) {\n            sb.append(string.charAt(i));\n        }\n\
    \        sb.reverse();\n        int i = 0;\n        while (i < len) {\n      \
    \      if (sb.charAt(i) == string.charAt(i)) {\n                i++;\n       \
    \     } else {\n                break;\n            }\n        }\n        sb.append(string.substring(i));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            sb.append(string.substring(i, len));\n            i = len - 1;\n\
    \            while (i >= 0 && string.charAt(i) == string.charAt(i + 1)) {\n  \
    \              i--;\n            }\n            sb.append(string.substring(i +\
    \ 1, len));\n            len = i + 1;\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        String\
    \ reverse = sb.reverse().toString();\n        StringBuilder sb2 = new StringBuilder();\n\
    \        for (int i = 0; i < reverse.length(); i++) {\n            sb2.append(reverse.charAt(i));\n\
    \        }\n        return sb2.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j))\
    \ {\n                i++;\n                j--;\n            } else {\n      \
    \          break;\n            }\n        }\n        sb.append(string.substring(i,\
    \ len));\n        sb.append(string.substring(0, j));\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        int i =\
    \ 0;\n        int j = string.length() - 1;\n        while (i < j) {\n        \
    \    if (string.charAt(i) != string.charAt(j)) {\n                break;\n   \
    \         }\n            i++;\n            j--;\n        }\n        sb.append(string.substring(i,\
    \ j + 1).reverse());\n        return sb.toString();", "        String reverse\
    \ = string.substring(0, string.length() - 1);\n        reverse = reverse.substring(reverse.length()\
    \ - 1, reverse.length());\n        return string + reverse;", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        int len = string.length();\n      \
    \  int i = 0;\n        while (i < len) {\n            int j = len - 1;\n     \
    \       while (i < j && string.charAt(i) == string.charAt(j)) {\n            \
    \    i++;\n                j--;\n            }\n            if (i < j) {\n   \
    \             sb.append(string.substring(i, j + 1));\n                sb.reverse();\n\
    \                i = j + 1;\n            }\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            sb2.append(string.charAt(i));\n       \
    \ }\n        sb2.reverse();\n        StringBuilder sb3 = new StringBuilder();\n\
    \        for (int i = 0; i < sb.length(); i++) {\n            sb3.append(sb.charAt(i));\n\
    \        }\n        sb3.reverse();\n        return sb3.toString();", "       \
    \ StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int max = 0;\n        for (int i = 0; i < len; i++) {\n            if\
    \ (isPalindrome(string, i, i)) {\n                max = i;\n                break;\n\
    \            }\n        }\n        for (int i = 0; i < max; i++) {\n         \
    \   sb.append(string.charAt(i));\n        }\n        sb.append(reverse(string,\
    \ 0, max - 1));\n        return sb.toString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        int len = string.length();\n        for (int i = 0;\
    \ i < len; i++) {\n            sb.append(string.charAt(i));\n        }\n     \
    \   int start = 0;\n        int end = len - 1;\n        while (start < end) {\n\
    \            if (isPalindrome(sb.substring(start, end + 1))) {\n             \
    \   return sb.substring(start, end + 1);\n            }\n            start++;\n\
    \            end--;\n        }\n        return \"\";", "        StringBuilder\
    \ sb = new StringBuilder();\n        int len = string.length();\n        for (int\
    \ i = 0; i < len; i++) {\n            sb.append(string.charAt(i));\n        }\n\
    \        sb.reverse();\n        int i = 0;\n        int j = len - 1;\n       \
    \ while (i < j) {\n            if (sb.charAt(i) != sb.charAt(j)) {\n         \
    \       break;\n            }\n            i++;\n            j--;\n        }\n\
    \        sb.append(sb.substring(i, len));\n        return sb.toString();", " \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        String\
    \ reverse = sb.reverse().toString();\n        StringBuilder sb2 = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb2.append(reverse.charAt(i));\n\
    \        }\n        return sb2.toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        if (i == j) {\n            return string;\n        }\n   \
    \     sb.append(string.substring(i, len));\n        sb.reverse();\n        sb.append(string.substring(0,\
    \ i));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.toString();",
  "        String reverse = new StringBuilder(string).reverse().toString();\n    \
    \    int len = reverse.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            int j = i + 1;\n            while (j < len && reverse.charAt(i)\
    \ == reverse.charAt(j)) {\n                j++;\n            }\n            if\
    \ (j - i > 1) {\n                string = string.substring(0, i) + reverse.substring(i,\
    \ j) + string.substring(j);\n                i = j;\n            } else {\n  \
    \              i++;\n            }\n        }\n        return string;", "    \
    \    int len = string.length();\n        int max_len = 0;\n        for (int i\
    \ = 0; i < len; i++) {\n            if (isPalindrome(string, i, i)) {\n      \
    \          max_len = i + 1;\n            }\n        }\n        if (max_len ==\
    \ 0) {\n            return string;\n        }\n        StringBuilder sb = new\
    \ StringBuilder(string);\n        for (int i = 0; i < max_len; i++) {\n      \
    \      sb.append(string.charAt(i));\n        }\n        sb.reverse();\n      \
    \  for (int i = 0; i < max_len; i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        String reverse =\
    \ reverse(sb.toString());\n        sb.append(reverse);\n        return sb.toString();",
  "        String reverse = \"\";\n        for (int i = string.length() - 1; i >=\
    \ 0; i--) {\n            reverse = reverse + string.charAt(i);\n        }\n  \
    \      return string + reverse;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = new StringBuilder(sb).reverse().toString();\n\
    \        StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            sb2.append(reverse.charAt(i));\n      \
    \  }\n        return sb2.toString();", "        StringBuilder sb = new StringBuilder(string);\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (sb.charAt(i) != sb.charAt(j)) {\n\
    \                break;\n            }\n            i++;\n            j--;\n \
    \       }\n        sb.append(sb.substring(i, len));\n        sb.reverse();\n \
    \       return sb.toString();", "        String reverse = string.substring(string.length()\
    \ - 1, string.length() - 1);\n        reverse = reverse.concat(reverse.substring(0,\
    \ reverse.length() - 1));\n        return string.concat(reverse);", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            sb.append(string.charAt(i));\n        }\n        String reverse\
    \ = sb.reverse().toString();\n        sb.append(reverse.substring(0, reverse.length()\
    \ - 1));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        sb.append(string.substring(i, len));\n        sb.append(string.substring(0,\
    \ j));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = new StringBuilder(sb).reverse().toString();\n\
    \        int i = 0;\n        int j = string.length() - 1;\n        while (i <\
    \ j) {\n            if (reverse.charAt(i) != string.charAt(j)) {\n           \
    \     break;\n            }\n            i++;\n            j--;\n        }\n \
    \       return string.substring(0, i) + reverse.substring(i, string.length());",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        i = 0;\n        while (i < len) {\n    \
    \        sb.append(string.charAt(i));\n            i++;\n        }\n        return\
    \ sb.reverse().toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        int i = 0;\n        while (i < len) {\n            if (sb.charAt(i) !=\
    \ string.charAt(i)) {\n                break;\n            }\n            i++;\n\
    \        }\n        sb.append(string.substring(i));\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        int len\
    \ = sb.length();\n        int i = 0;\n        while (i < len) {\n            int\
    \ j = i;\n            while (j < len && sb.charAt(j) == sb.charAt(i)) {\n    \
    \            j++;\n            }\n            if (j - i < 2) {\n             \
    \   i++;\n            } else {\n                sb.insert(i, sb.substring(i, j));\n\
    \                sb.delete(i, j);\n                i = i - (j - i);\n        \
    \    }\n        }\n        return sb.toString();", "        StringBuilder sb =\
    \ new StringBuilder();\n        int len = string.length();\n        int i = 0;\n\
    \        while (i < len) {\n            sb.append(string.substring(i, i + 1));\n\
    \            i++;\n        }\n        sb.reverse();\n        sb.append(string.substring(0,\
    \ len - 1));\n        return sb.toString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        int len = string.length();\n        for (int i = 0;\
    \ i < len; i++) {\n            sb.append(string.charAt(i));\n        }\n     \
    \   sb.reverse();\n        int i = 0;\n        while (i < len) {\n           \
    \ sb.append(string.charAt(i));\n            i++;\n        }\n        return sb.toString();",
  "        int len = string.length();\n        if (len == 0) return string;\n    \
    \    int max_len = 0;\n        for (int i = 0; i < len; i++) {\n            if\
    \ (isPalindrome(string, i, i)) {\n                max_len = i + 1;\n         \
    \   }\n        }\n        if (max_len == 0) return string;\n        StringBuilder\
    \ sb = new StringBuilder(len);\n        sb.append(string.substring(0, max_len));\n\
    \        sb.append(reverse(string.substring(max_len)));\n        return sb.toString();",
  "        String reverse = string.substring(string.length() - 1, string.length()).concat(string.substring(0,\
    \ string.length() - 1));\n        return string.concat(reverse);", "        if\
    \ (string.length() == 0) return string;\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        StringBuilder\
    \ sb = new StringBuilder(string);\n        sb.append(string.substring(i, len));\n\
    \        sb.reverse();\n        sb.append(string.substring(0, i));\n        return\
    \ sb.toString();", "        if (string.length() == 0) return string;\n       \
    \ StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        while (i < len) {\n            sb.append(string.charAt(i));\n\
    \            i++;\n        }\n        i = 0;\n        while (i < len) {\n    \
    \        sb.append(string.charAt(len - 1 - i));\n            i++;\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        int i =\
    \ 0;\n        while (i < string.length()) {\n            sb.append(reverse.substring(i,\
    \ i + reverse.length()));\n            i += reverse.length();\n        }\n   \
    \     return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        sb.append(string.substring(i, len));\n        sb.append(string.substring(0,\
    \ j));\n        return sb.toString();", "        int len = string.length();\n\
    \        StringBuilder sb = new StringBuilder(len);\n        for (int i = 0; i\
    \ < len; i++) {\n            sb.append(string.charAt(i));\n        }\n       \
    \ String reverse = sb.reverse().toString();\n        int i = 0;\n        while\
    \ (i < len) {\n            int j = len - 1;\n            while (i < len && j >=\
    \ 0 && string.charAt(i) == reverse.charAt(j)) {\n                i++;\n      \
    \          j--;\n            }\n            sb.append(reverse.substring(i, j +\
    \ 1));\n            i = j + 1;\n        }\n        return sb.toString();", " \
    \       StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        sb.append(string.substring(i,\
    \ len));\n        sb.append(string.substring(0, j + 1));\n        return sb.toString();",
  "        int len = string.length();\n        int i = 0;\n        int j = len - 1;\n\
    \        StringBuilder sb = new StringBuilder();\n        while (i < j) {\n  \
    \          if (string.charAt(i) == string.charAt(j)) {\n                i++;\n\
    \                j--;\n            } else {\n                break;\n        \
    \    }\n        }\n        sb.append(string.substring(i, len));\n        sb.append(string.substring(0,\
    \ j));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        int i = 0;\n   \
    \     int j = len - 1;\n        while (i < j) {\n            if (sb.charAt(i)\
    \ != sb.charAt(j)) {\n                break;\n            }\n            i++;\n\
    \            j--;\n        }\n        String prefix = string.substring(0, i);\n\
    \        String postfix = string.substring(j + 1);\n        sb.append(postfix.substring(0,\
    \ postfix.length() / 2));\n        sb.append(prefix.substring(0, prefix.length()\
    \ / 2));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        String reverse = sb.reverse().toString();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < reverse.length(); i++)\
    \ {\n            sb2.append(reverse.charAt(i));\n        }\n        return sb2.toString();",
  "        StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int max_len = 0;\n        for (int i = 0; i < len; i++) {\n         \
    \   if (isPalindrome(string.substring(i, i + 1))) {\n                max_len =\
    \ i + 1;\n            }\n        }\n        for (int i = max_len - 1; i >= 0;\
    \ i--) {\n            sb.append(string.substring(i, i + 1));\n        }\n    \
    \    sb.reverse();\n        return sb.toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        int len = string.length();\n        for (int\
    \ i = 0; i < len; i++) {\n            sb.append(string.charAt(i));\n        }\n\
    \        sb.reverse();\n        int i = 0;\n        while (i < len) {\n      \
    \      if (sb.charAt(i) == sb.charAt(len - 1 - i)) {\n                i++;\n \
    \           } else {\n                break;\n            }\n        }\n     \
    \   if (i == len) {\n            return string;\n        }\n        sb.append(sb.substring(0,\
    \ len - i));\n        return sb.toString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        int len = string.length();\n        int i = 0;\n \
    \       int j = len - 1;\n        while (i < j) {\n            if (string.charAt(i)\
    \ != string.charAt(j)) {\n                break;\n            }\n            sb.append(string.charAt(i));\n\
    \            i++;\n            j--;\n        }\n        if (i == j) {\n      \
    \      return string;\n        }\n        sb.append(string.substring(i, j + 1));\n\
    \        sb.reverse();\n        return sb.toString();", "        if (string.length()\
    \ == 0) {\n            return string;\n        }\n        StringBuilder sb = new\
    \ StringBuilder(string);\n        int i = 0;\n        while (i < sb.length())\
    \ {\n            int j = i + 1;\n            while (j < sb.length() && sb.charAt(i)\
    \ == sb.charAt(j)) {\n                j++;\n            }\n            if (j -\
    \ i > 1) {\n                sb.insert(i, sb.substring(i, j - 1).reverse());\n\
    \                i = j;\n            } else {\n                i++;\n        \
    \    }\n        }\n        return sb.toString();", "        StringBuilder sb =\
    \ new StringBuilder();\n        int len = string.length();\n        for (int i\
    \ = 0; i < len; i++) {\n            sb.append(string.charAt(i));\n        }\n\
    \        String reverse = new StringBuilder(sb).reverse().toString();\n      \
    \  int i = 0;\n        int j = len - 1;\n        while (i < j) {\n           \
    \ if (reverse.charAt(i) != string.charAt(j)) {\n                break;\n     \
    \       }\n            i++;\n            j--;\n        }\n        return string.substring(0,\
    \ i) + reverse.substring(i, len) + string.substring(j + 1, len);", "        StringBuilder\
    \ sb = new StringBuilder();\n        int len = string.length();\n        int i\
    \ = 0;\n        int j = len - 1;\n        while (i < j) {\n            while (i\
    \ < len && !isPalindrome(string, i, j)) {\n                i++;\n            }\n\
    \            while (j >= 0 && !isPalindrome(string, i, j)) {\n               \
    \ j--;\n            }\n            if (i < j) {\n                sb.append(string.charAt(i));\n\
    \                sb.append(string.charAt(j));\n                i++;\n        \
    \        j--;\n            }\n        }\n        return sb.toString();", "   \
    \     StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) == string.charAt(j)) {\n                sb.append(string.charAt(i));\n\
    \                i++;\n                j--;\n            } else {\n          \
    \      break;\n            }\n        }\n        if (i == j) {\n            sb.append(string.charAt(i));\n\
    \        } else {\n            sb.append(string.substring(i, j + 1).reverse());\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        String reverse = sb.substring(0, sb.length()\
    \ / 2);\n        return reverse + string;", "        StringBuilder sb = new StringBuilder(string);\n\
    \        int len = string.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            int j = len - 1;\n            while (i < j && string.charAt(i)\
    \ == string.charAt(j)) {\n                i++;\n                j--;\n       \
    \     }\n            if (i < j) {\n                sb.append(string.substring(i,\
    \ j + 1));\n                sb.reverse();\n                sb.append(string.substring(i,\
    \ j + 1));\n                i = j + 1;\n            }\n        }\n        return\
    \ sb.toString();", "        StringBuilder sb = new StringBuilder();\n        int\
    \ len = string.length();\n        int i = 0;\n        int j = len - 1;\n     \
    \   while (i < j) {\n            while (i < len && !isPalindrome(string, i, j))\
    \ {\n                i++;\n            }\n            while (j >= 0 && !isPalindrome(string,\
    \ i, j)) {\n                j--;\n            }\n            if (i < j) {\n  \
    \              sb.append(string.charAt(i));\n                sb.append(string.charAt(j));\n\
    \                i++;\n                j--;\n            }\n        }\n      \
    \  return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int max_len = 0;\n        for (int\
    \ i = 0; i < len; i++) {\n            if (isPalindrome(string, i, i)) {\n    \
    \            max_len = i + 1;\n            }\n        }\n        for (int i =\
    \ 0; i < max_len; i++) {\n            sb.append(string.charAt(i));\n        }\n\
    \        sb.append(string.substring(0, max_len).reverse());\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        String\
    \ reverse = sb.reverse().toString();\n        StringBuilder sb2 = new StringBuilder();\n\
    \        for (int i = 0; i < reverse.length(); i++) {\n            sb2.append(reverse.charAt(i));\n\
    \        }\n        return sb2.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        while (i < len)\
    \ {\n            sb.append(string.charAt(i));\n            i++;\n        }\n \
    \       i = 0;\n        while (i < len) {\n            sb.append(string.charAt(len\
    \ - 1 - i));\n            i++;\n        }\n        return sb.toString();", " \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            sb.append(string.charAt(i));\n        }\n        String\
    \ reverse = sb.reverse().toString();\n        int i = 0;\n        while (i < reverse.length())\
    \ {\n            sb.append(reverse.substring(i, i + reverse.length()));\n    \
    \        i += reverse.length();\n        }\n        return sb.toString();", " \
    \       StringBuilder sb = new StringBuilder();\n        int len = string.length();\n\
    \        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n     \
    \       if (string.charAt(i) != string.charAt(j)) {\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n        sb.append(string.substring(i,\
    \ len));\n        sb.append(string.substring(0, j));\n        return sb.toString();",
  "        String reverse = \"\";\n        for (int i = string.length() - 1; i >=\
    \ 0; i--) {\n            reverse += string.charAt(i);\n        }\n        return\
    \ string + reverse.substring(0, reverse.length() - 1);", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        int i = 0;\n        while (i < sb.length() && sb.charAt(i) == sb.charAt(sb.length()\
    \ - 1 - i)) {\n            i++;\n        }\n        sb.append(sb.substring(0,\
    \ i));\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        String reverse =\
    \ sb.reverse().toString();\n        StringBuilder sb2 = new StringBuilder();\n\
    \        sb2.append(reverse.substring(0, len / 2));\n        sb2.append(reverse.substring(len\
    \ / 2));\n        return sb2.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        sb.reverse();\n\
    \        int i = 0;\n        while (i < len) {\n            if (sb.charAt(i) ==\
    \ string.charAt(i)) {\n                i++;\n            } else {\n          \
    \      break;\n            }\n        }\n        sb.append(string.substring(i));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            while (i < j && string.charAt(i) ==\
    \ string.charAt(j)) {\n                i++;\n                j--;\n          \
    \  }\n            if (i < j) {\n                sb.append(string.charAt(j));\n\
    \                j--;\n            }\n            if (i < j) {\n             \
    \   sb.append(string.charAt(i));\n                i++;\n            }\n      \
    \  }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(i));\n        }\n        String reverse =\
    \ sb.reverse().toString();\n        int i = 0;\n        while (i < len) {\n  \
    \          sb.append(reverse.substring(i, len));\n            i = len - 1;\n \
    \       }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int len = string.length();\n        for (int i = 0; i < len; i++) {\n\
    \            sb.append(string.charAt(len - 1 - i));\n        }\n        return\
    \ sb.reverse().toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n\
    \        }\n        sb.reverse();\n        String reverse = sb.toString();\n \
    \       StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            sb2.append(reverse.charAt(i));\n      \
    \  }\n        return sb2.toString();", "        int len = string.length();\n \
    \       int i = 0;\n        int j = len - 1;\n        while (i < j) {\n      \
    \      if (string.charAt(i) != string.charAt(j)) {\n                break;\n \
    \           }\n            i++;\n            j--;\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        sb.append(string.substring(i, len));\n  \
    \      sb.append(string.substring(0, j));\n        return sb.toString();", " \
    \       if (string.length() == 0) {\n            return string;\n        }\n \
    \       String longestPalindrome = \"\";\n        for (int i = 0; i < string.length();\
    \ i++) {\n            String postfix = string.substring(i);\n            if (isPalindrome(postfix))\
    \ {\n                longestPalindrome = postfix;\n                break;\n  \
    \          }\n        }\n        if (longestPalindrome.length() == 0) {\n    \
    \        return \"\";\n        }\n        String prefix = string.substring(0,\
    \ string.length() - longestPalindrome.length());\n        return prefix + longestPalindrome\
    \ + reverse(longestPalindrome);", "        StringBuilder sb = new StringBuilder(string);\n\
    \        int len = string.length();\n        int i = 0;\n        int j = len -\
    \ 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j))\
    \ {\n                break;\n            }\n            i++;\n            j--;\n\
    \        }\n        if (i == j) {\n            return string;\n        }\n   \
    \     StringBuilder sb2 = new StringBuilder(string);\n        sb2.append(sb.substring(i,\
    \ len));\n        sb2.reverse();\n        sb2.append(sb.substring(0, i));\n  \
    \      return sb2.toString();"]
stop_tokens:
- "\n    }\n"
