name: HumanEval_27_flip_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n \
  \   public static String flipCase(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
  \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
  \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n \
    \           if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toString((char) (i + 32)))\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .map(Character::toUpperCase)\n     \
    \       .map(Character::toLowerCase)\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  '        return string.chars().mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(Collectors.joining());', "        return string.chars()\n\
    \            .mapToObj(i -> Character.toString((char) (i + 32)))\n           \
    \ .collect(Collectors.joining());", "        return string.chars()\n         \
    \   .mapToObj(i -> Character.toUpperCase(i) + \"\")\n            .collect(Collectors.joining());",
  "        return string.chars()\n            .mapToObj(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  '        return string.chars().map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(StringBuilder::new, StringBuilder::appendCodePoint,
    StringBuilder::append).toString();', "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", '        return string.chars().map(Character::toUpperCase).collect(Collectors.joining());',
  "        return string.chars()\n            .mapToObj(i -> Character.isLowerCase(i)\
    \ ? Character.toUpperCase(i) : Character.toLowerCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .map(Character::toUpperCase)\n     \
    \       .map(Character::toLowerCase)\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .mapToObj(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) :\
    \ Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .mapToObj(i -> Character.toUpperCase(i)\
    \ + \"\")\n            .collect(Collectors.joining());", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", '        return string.replaceAll("(?<=\\p{Lower})",
    String.valueOf(Character.toUpperCase(string.charAt(0))));', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", '        return string.chars().map(Character::toUpperCase).collect(Collectors.joining());',
  "        return string.chars()\n            .mapToObj(i -> Character.toString((char)\
    \ (i + 32)))\n            .collect(Collectors.joining());", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.replaceAll("(.)",
    (a, b) -> b.toUpperCase() + a.toLowerCase());', "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .mapToObj(i -> Character.isLowerCase(i)\
    \ ? Character.toUpperCase(i) : Character.toLowerCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .mapToObj(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .map(Character::toUpperCase)\n            .map(Character::toLowerCase)\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toString((char) (i + 32)))\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.replaceAll("(?=\\p{Upper})",
    "").toLowerCase();', "        return string.chars()\n            .mapToObj(i ->\
    \ Character.toUpperCase(i))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", '        return string.replaceAll("(.)",
    (a, b) -> b.toUpperCase());', "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.isLowerCase(i) ? Character.toUpperCase(i)\
    \ : Character.toLowerCase(i))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.chars().map(Character::toUpperCase).collect(Collectors.joining());',
  "        return string.chars()\n            .mapToObj(i -> Character.toLowerCase(i))\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        return string.chars()\n            .mapToObj(i\
    \ -> Character.toString((char) (i + 32)))\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toLowerCase(i) + Character.toUpperCase(i))\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        return string.chars()\n            .mapToObj(i\
    \ -> Character.toLowerCase(i))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", '        return string.chars().map(Character::toUpperCase).collect(StringBuilder::new,
    StringBuilder::appendCodePoint, StringBuilder::append).toString();', "       \
    \ return string.chars()\n            .mapToObj(i -> Character.toUpperCase(i))\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        return string.chars()\n            .mapToObj(i\
    \ -> Character.toUpperCase(i) == Character.toLowerCase(i) ? Character.toLowerCase(i)\
    \ : Character.toUpperCase(i))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toUpperCase(i) + \"\")\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .map(Character::toUpperCase)\n            .map(Character::toLowerCase)\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        return string.chars()\n            .mapToObj(i\
    \ -> Character.toString((char) ((i + 32) % 128)))\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if(Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toString((char) (i + 32)))\n            .collect(Collectors.joining());",
  "        return string.chars()\n            .mapToObj(i -> Character.toString((char)\
    \ (i + 32)))\n            .collect(Collectors.joining());", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", '        return string.chars().map(Character::toUpperCase).collect(StringBuilder::new,
    StringBuilder::appendCodePoint, StringBuilder::append).toString();', '        return
    string.replaceAll("([a-z])", "\\1").toUpperCase();', "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.replaceAll("[a-z]",
    String.valueOf(Character.toUpperCase(string.charAt(0))).concat(String.valueOf(Character.toLowerCase(string.charAt(1)))));',
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.replaceAll("([a-z])([A-Z])",
    "$1$2").toLowerCase();', "        return string.chars()\n            .mapToObj(i\
    \ -> Character.toLowerCase(i) + Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  '        return string.chars().map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(StringBuilder::new, StringBuilder::appendCodePoint,
    StringBuilder::append).toString();', "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  '        return string.chars().map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(Collectors.joining());', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.chars().mapToObj(c
    -> Character.toUpperCase(c)).collect(Collectors.joining());', "        return\
    \ string.chars()\n            .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        return string.chars()\n\
    \            .map(Character::toUpperCase)\n            .map(Character::toLowerCase)\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        return string.chars()\n            .map(Character::toUpperCase)\n\
    \            .map(Character::toLowerCase)\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .mapToObj(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .map(Character::toUpperCase)\n     \
    \       .map(Character::toLowerCase)\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  '        return string.replaceAll("(?=\\p{Upper})", "").toLowerCase();', "     \
    \   StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .map(Character::toUpperCase)\n            .map(Character::toLowerCase)\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .mapToObj(i -> Character.toString((char)i).toUpperCase())\n\
    \            .collect(Collectors.joining());", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        return string.chars()\n            .map(Character::toUpperCase)\n     \
    \       .map(Character::toLowerCase)\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", '        return string.chars().map(c
    -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(StringBuilder::new,
    StringBuilder::appendCodePoint, StringBuilder::append).toString();', "       \
    \ StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toString((char) ((i + 32) % 128)))\n   \
    \         .collect(Collectors.joining());", "        return string.chars()\n \
    \           .map(Character::toUpperCase)\n            .map(Character::toLowerCase)\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toString((char) (i + 32)))\n           \
    \ .collect(Collectors.joining());", "        return string.chars()\n         \
    \   .mapToObj(i -> Character.toString((char) (i + 32)))\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.chars().map(Character::toUpperCase).collect(StringBuilder::new,
    StringBuilder::appendCodePoint, StringBuilder::append).toString();', "       \
    \ StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .map(Character::toUpperCase)\n            .map(Character::toLowerCase)\n\
    \            .collect(Collectors.joining());", "        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n    \
    \        char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .map(Character::toUpperCase)\n            .map(Character::toLowerCase)\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        return string.chars()\n            .mapToObj(i\
    \ -> Character.toUpperCase(i) + Character.toLowerCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.replaceAll(\"\
    (.)\", (x, y) -> {\n            if (x.equals(\"a\")) {\n                return\
    \ \"A\";\n            } else if (x.equals(\"b\")) {\n                return \"\
    B\";\n            } else if (x.equals(\"c\")) {\n                return \"C\"\
    ;\n            } else if (x.equals(\"d\")) {\n                return \"D\";\n\
    \            } else if (x.equals(\"e\")) {\n                return \"E\";\n  \
    \          } else if (x.equals(\"f\")) {\n                return \"F\";\n    \
    \        } else if (x.equals(\"g\")) {\n                return \"G\";\n      \
    \      } else if (x.equals(\"h\")) {\n                return \"H\";\n        \
    \    } else if (x.equals(\"i\")) {\n                return \"I\";\n          \
    \  } else if (x.equals(\"j\")) {\n                return \"J\";\n            }\
    \ else if (x.equals(\"k\")) {\n                return \"K\";\n            } else\
    \ if (x.equals(\"l\")) {\n                return \"L\";\n            } else if\
    \ (x.equals(\"m\")) {\n                return \"M\";\n            } else if (x.equals(\"\
    n\")) {\n                return \"N\";\n            } else if (x.equals(\"o\"\
    )) {\n                return \"O\";\n            } else if (x.equals(\"p\")) {\n\
    \                return \"P\";\n            } else if (x.equals(\"q\")) {\n  \
    \              return \"Q\";\n            } else if (x.equals(\"r\")) {\n    \
    \            return \"R\";\n            } else if (x.equals(\"s\")) {\n      \
    \          return \"S\";\n            } else if (x.equals(\"t\")) {\n        \
    \        return \"T\";\n            } else if (x.equals(\"u\")) {\n          \
    \      return \"U\";\n            } else if (x.equals(\"v\")) {\n            \
    \    return \"V\";\n            } else if (x.equals(\"w\")) {\n              \
    \  return \"W\";\n            } else if (x.equals(\"x\")) {\n                return\
    \ \"X\";\n            } else if (x.equals(\"y\")) {\n                return",
  '        return string.chars().map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(StringBuilder::new, StringBuilder::appendCodePoint,
    StringBuilder::append).toString();', "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toUpperCase(i) + \"\")\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", '        return string.chars().map(c
    -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());',
  "        return string.chars()\n            .mapToObj(i -> Character.toString((char)\
    \ (i + 32)))\n            .collect(Collectors.joining());", "        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if(Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.chars().map(Character::toUpperCase).collect(Collectors.joining());',
  '        return string.replaceAll("(.)", Character.toUpperCase(Character.toLowerCase(String.valueOf(Character.toUpperCase(string.charAt(1))))));',
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toUpperCase(i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  '        return string.chars().map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(StringBuilder::new, StringBuilder::appendCodePoint,
    StringBuilder::append).toString();', '        return string.chars().map(Character::toUpperCase).map(Character::toLowerCase).collect(Collectors.joining());',
  "        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if(Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \            .mapToObj(i -> Character.toString((char) (i + 32)))\n           \
    \ .collect(Collectors.joining());", "        return string.chars()\n         \
    \   .mapToObj(i -> Character.toLowerCase((char) i))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        return string.chars()\n    \
    \        .mapToObj(i -> Character.toString((char)i).toUpperCase())\n         \
    \   .collect(Collectors.joining());", "        return string.chars()\n       \
    \     .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        return string.chars()\n            .mapToObj(i\
    \ -> Character.toString((char) (i + 32)))\n            .collect(Collectors.joining());",
  "        return string.chars()\n            .mapToObj(i -> Character.toUpperCase(i)\
    \ + \"\")\n            .collect(Collectors.joining());", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return string.replaceAll("(.)",
    (x, y) -> y.toUpperCase() + y.toLowerCase());']
stop_tokens:
- "\n    }\n"
