{
  "name": "HumanEval_115_max_fill",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // >>> max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\n    // 6\n    // Example 2:\n    // >>> max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\n    // 5\n    // Example 3:\n    // >>> max_fill([[0,0,0], [0,0,0]], 5)\n    // 0\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l)) == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l)) == (2l));\n    }\n\n}\n",
  "completions": [
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        long max = 0;\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(i).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] == 1) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                for(int k = 0; k < grid.size(); k++) {\n                    for(int l = 0; l < grid.get(0).size(); l++) {\n                        if(grid.get(k).get(l) == 1) {\n                            dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                for (int k = 0; k < grid.size(); k++) {\n                    for (int l = 0; l < grid.get(0).size(); l++) {\n                        if (grid.get(k).get(l) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = Long.MAX_VALUE;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 0) {\n                                dp[k][l] = Math.min(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                }\n            }\n        }\n        return dp[n - 1][m - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                for (int k = 0; k < cols; k++) {\n                    if (grid.get(i).get(j) == 1 && grid.get(i).get(k) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                for (int k = 0; k < grid.size(); k++) {\n                    for (int l = 0; l < grid.get(0).size(); l++) {\n                        if (grid.get(k).get(l) == 1 && dp[i][j] + 1 < dp[k][l]) {\n                            dp[k][l] = dp[i][j] + 1;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[] dp = new int[rows];\n        for(int i = 0; i < rows; i++) {\n            dp[i] = 1;\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i] = Math.max(dp[i], dp[i-1] + 1);\n                }\n            }\n        }\n        return dp[rows-1] - 1;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = dp[i][j] + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j] + 1);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    max = Math.max(max, dp[i][j]);\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(i).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    ArrayList<Long> list = new ArrayList<Long>();\n                    list.add(i);\n                    list.add(j);\n                    max = Math.max(max, maxFill(list, capacity));\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 0) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < m; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (i + 1 < grid.size() && grid.get(i + 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (j + 1 < grid.get(0).size() && grid.get(i).get(j + 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - k >= 0 && dp[i - k][j] != 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - k][j] + 1);\n                        }\n                        if(j - k >= 0 && dp[i][j - k] != 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                for(int k = 1; k <= capacity; k++) {\n                    if(i - k >= 0 && j - k >= 0 && dp[i - k][j - k] != 0) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i - k][j - k] + 1);\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = dp[i][j] + 1;\n                }\n                if (i > 0 && grid.get(i).get(j) == 1 && grid.get(i - 1).get(j) == 0) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                }\n                if (j > 0 && grid.get(i).get(j) == 1 && grid.get(i).get(j - 1) == 0) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    max = Math.max(max, dp[i][j]);\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (dp[i][j] + k > dp[i][j + 1]) {\n                            dp[i][j + 1] = dp[i][j] + k;\n                        }\n                        if (dp[i][j] + k > dp[i + 1][j]) {\n                            dp[i + 1][j] = dp[i][j] + k;\n                        }\n                        if (dp[i][j] + k > dp[i][j - 1]) {\n                            dp[i][j - 1] = dp[i][j] + k;\n                        }\n                        if (dp[i][j] + k > dp[i - 1][j]) {\n                            dp[i - 1][j] = dp[i][j] + k;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                    for(int k = j + 1; k < grid.get(0).size(); k++) {\n                        if(grid.get(i).get(k) == 1) {\n                            dp[i][k] = 1;\n                        }\n                    }\n                }\n            }\n        }\n        return dfs(grid, dp, 0, 0, capacity);",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[] row = new int[rows];\n        int[] col = new int[cols];\n        for (int i = 0; i < rows; i++) {\n            row[i] = 0;\n        }\n        for (int i = 0; i < cols; i++) {\n            col[i] = 0;\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    row[i]++;\n                    col[j]++;\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (row[i] > 0 && col[j] > 0) {\n                    if (row[i] > col[j]) {\n                        row[i] -= col[j];\n                        col[j] = 0;\n                    } else {\n                        col[j] -= row[i];\n                        row[i] = 0;\n                    }\n                }\n                if (row[i] > 0) {\n                    max = Math.max(max, row[i]);\n                }\n                if (col[j] > 0) {\n                    max = Math.max(max, col[j]);\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(dp[i][j] == 1) {\n                    for(int k = 0; k < cols; k++) {\n                        if(grid.get(i).get(k) == 0 && dp[i][k] == 1) {\n                            dp[i][k] = dp[i][j] + 1;\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                for (int k = 1; k <= capacity; k++) {\n                    if (i - k >= 0 && dp[i - k][j] > dp[i][j]) {\n                        dp[i][j] = dp[i - k][j] + 1;\n                    }\n                    if (j - k >= 0 && dp[i][j - k] > dp[i][j]) {\n                        dp[i][j] = dp[i][j - k] + 1;\n                    }\n                    if (i + k < grid.size() && dp[i + k][j] > dp[i][j]) {\n                        dp[i][j] = dp[i + k][j] + 1;\n                    }\n                    if (j + k < grid.get(0).size() && dp[i][j + k] > dp[i][j]) {\n                        dp[i][j] = dp[i][j + k] + 1;\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 1; i < grid.size(); i++) {\n            for(int j = 1; j < grid.get(0).size(); j++) {\n                dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n                else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < cols; k++) {\n                        if(grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + 1);\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + 1);\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + 1);\n                }\n            }\n        }\n        return dp[grid.size()-1][grid.get(0).size()-1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = dp[i][j] + maxFill(grid, i, j, capacity);\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && dp[i - 1][j] == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && dp[i][j - 1] == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (i + 1 < rows && dp[i + 1][j] == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if (j + 1 < cols && dp[i][j + 1] == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                for(int k = 0; k < 4; k++) {\n                    int nr = i + dp[i][j];\n                    int nc = j + dp[i][j];\n                    if(nr >= 0 && nc >= 0 && nr < rows && nc < cols && grid.get(nr).get(nc) == 0) {\n                        dp[nr][nc] = Math.max(dp[nr][nc], dp[i][j] + 1);\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][j - 1], Math.min(dp[i - 1][j], dp[i - 1][j - 1])));\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                for (int k = 1; k <= capacity; k++) {\n                    if (grid.get(i).get(j) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        int n = grid.size();\n        long[][] dp = new long[n][capacity + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < capacity + 1; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][0] = 1;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                for (int k = 0; k < capacity + 1; k++) {\n                    if (grid.get(i).get(j) == 1) {\n                        dp[i][k] = Math.max(dp[i][k], dp[i][k - 1]);\n                    }\n                }\n            }\n        }\n        return dp[n - 1][capacity];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if(i - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && j - 1 >= 0 && grid.get(i - 1).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] == 1) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 1; i < grid.size(); i++) {\n            for(int j = 1; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i-1][j] + 1);\n                }\n            }\n        }\n        for(int i = 1; i < grid.size(); i++) {\n            for(int j = 1; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j-1] + 1);\n                }\n            }\n        }\n        for(int i = 1; i < grid.size(); i++) {\n            for(int j = 1; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i-1][j-1] + 1);\n                }\n            }\n        }\n        return dp[grid.size()-1][grid.get(0).size()-1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && j - 1 >= 0 && grid.get(i - 1).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                for (int k = 1; k <= capacity; k++) {\n                    if (grid.get(i).get(j) == 1 && dp[i][j] < k) {\n                        dp[i][j] = k;\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if (i - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(i + 1 < rows && grid.get(i + 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if(j + 1 < cols && grid.get(i).get(j + 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][col",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 0) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && j - 1 >= 0 && dp[i - 1][j - 1] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if(i - 1 >= 0 && dp[i - 1][j] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && dp[i][j - 1] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(k <= dp[i][j]) {\n                            dp[i][j] = k;\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    max = Math.max(max, dp[i][j]);\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if (i - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (i + 1 < n && grid.get(i + 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (j + 1 < m && grid.get(i).get(j + 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < m; k++) {\n                        if (grid.get(i).get(k) == 0) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - k >= 0 && j - k >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - k][j - k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < m; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    ans = Math.max(ans, dp[i][j]);\n                }\n            }\n        }\n        return ans;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = dp[i][j] + 1;\n                }\n                if(dp[i][j] > capacity) {\n                    dp[i][j] = capacity;\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        return maxFill(dp, 0, 0, capacity);",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], capacity);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                }\n            }\n        }\n        return dp[n - 1][m - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                for(int k = 0; k < grid.size(); k++) {\n                    for(int l = 0; l < grid.get(0).size(); l++) {\n                        if(grid.get(k).get(l) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if(i + 1 < grid.size() && grid.get(i + 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if(j + 1 < grid.get(0).size() && grid.get(i).get(j + 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 1; i < grid.size(); i++) {\n            for(int j = 1; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n                }\n            }\n        }\n        return dp[grid.size()-1][grid.get(0).size()-1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1])));\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                for (int k = 1; k <= capacity; k++) {\n                    if (i - k >= 0 && dp[i - k][j] > dp[i][j]) {\n                        dp[i][j] = dp[i - k][j] + 1;\n                    }\n                    if (i + k < grid.size() && dp[i + k][j] > dp[i][j]) {\n                        dp[i][j] = dp[i + k][j] + 1;\n                    }\n                    if (j - k >= 0 && dp[i][j - k] > dp[i][j]) {\n                        dp[i][j] = dp[i][j - k] + 1;\n                    }\n                    if (j + k < grid.get(0).size() && dp[i][j + k] > dp[i][j]) {\n                        dp[i][j] = dp[i][j + k] + 1;\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                for (int k = 0; k < grid.get(0).size(); k++) {\n                    if (grid.get(i).get(j) == 1 && grid.get(i).get(k) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && j - 1 >= 0 && dp[i - 1][j - 1] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if(i - 1 >= 0 && dp[i - 1][j] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && dp[i][j - 1] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && dp[i - 1][j] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && dp[i][j - 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (i + 1 < grid.size() && dp[i + 1][j] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if (j + 1 < grid.get(0).size() && dp[i][j + 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                for(int k = 1; k <= capacity; k++) {\n                    if(i - k >= 0 && dp[i - k][j] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i - k][j] + 1);\n                    }\n                    if(j - k >= 0 && dp[i][j - k] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - k] + 1);\n                    }\n                    if(i + k < rows && dp[i + k][j] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i + k][j] + 1);\n                    }\n                    if(j + k < cols && dp[i][j + k] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j + k] + 1);\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < rows; k++) {\n                        for (int l = 0; l < cols; l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(k > dp[i][j]) {\n                            dp[i][j] = k;\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    max = Math.max(max, dp[i][j]);\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                for(int k = 1; k <= capacity; k++) {\n                    if(i - k >= 0 && dp[i - k][j] > dp[i][j]) {\n                        dp[i][j] = dp[i - k][j] + 1;\n                    }\n                    if(j - k >= 0 && dp[i][j - k] > dp[i][j]) {\n                        dp[i][j] = dp[i][j - k] + 1;\n                    }\n                    if(i + k < grid.size() && dp[i + k][j] > dp[i][j]) {\n                        dp[i][j] = dp[i + k][j] + 1;\n                    }\n                    if(j + k < grid.get(0).size() && dp[i][j + k] > dp[i][j]) {\n                        dp[i][j] = dp[i][j + k] + 1;\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];\n    }",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && j - 1 >= 0 && grid.get(i - 1).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if (i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(grid.size() - 1).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                for (int k = 1; k <= capacity; k++) {\n                    if (grid.get(i).get(j) == 1 && dp[i][j] + k <= capacity) {\n                        dp[i][j] += k;\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        int n = grid.size();\n        long[][] dp = new long[n][capacity + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < capacity + 1; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < capacity + 1; j++) {\n                for (int k = 0; k < n; k++) {\n                    if (grid.get(k).get(j) == 1) {\n                        dp[k][j] = Math.max(dp[k][j], dp[k][j - 1]);\n                    }\n                }\n            }\n        }\n        return dp[n - 1][capacity];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - k >= 0 && j - k >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - k][j - k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    continue;\n                }\n                for (int k = 0; k < 4; k++) {\n                    int nr = i + dp[i][j] * k;\n                    int nc = j + dp[i][j] * k;\n                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {\n                        dp[nr][nc] = Math.max(dp[nr][nc], dp[i][j] + 1);\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                for(int k = 0; k < grid.size(); k++) {\n                    for(int l = 0; l < grid.get(0).size(); l++) {\n                        if(grid.get(k).get(l) == 1) {\n                            dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                for(int k = 0; k < grid.size(); k++) {\n                    for(int l = 0; l < grid.get(0).size(); l++) {\n                        if(grid.get(k).get(l) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && j - 1 >= 0 && grid.get(i - 1).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1])));\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < cols; k++) {\n                        if(grid.get(i).get(k) == 0) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - k >= 0 && j - k >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - k][j - k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 1; i < grid.size(); i++) {\n            for(int j = 1; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]) + 1;\n                }\n            }\n        }\n        return dp[grid.size()-1][grid.get(0).size()-1];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < m; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n                for(int k = 0; k < grid.size(); k++) {\n                    for(int l = 0; l < grid.get(0).size(); l++) {\n                        if(grid.get(k).get(l) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][l] + dp[k][j]);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = Math.min(Math.min(dp[i][j], dp[i][j - 1]), dp[i - 1][j]) + 1;\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && dp[i - 1][j] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && dp[i][j - 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (i - 1 >= 0 && j - 1 >= 0 && dp[i - 1][j - 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                for (int k = 0; k < grid.size(); k++) {\n                    for (int l = 0; l < grid.get(0).size(); l++) {\n                        if (grid.get(k).get(l) == 1 && dp[i][j] < dp[i][l] + dp[k][l]) {\n                            dp[i][j] = dp[i][l] + dp[k][l];\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 0) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (grid.get(i).get(k) == 0) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        int n = grid.size();\n        long[][] dp = new long[n][capacity + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < capacity + 1; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][0] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                for (int k = 0; k < capacity + 1; k++) {\n                    if (grid.get(i).get(j) == 1) {\n                        dp[i][k] = Math.max(dp[i][k], dp[i][k - 1]);\n                    }\n                }\n            }\n        }\n        return dp[n - 1][capacity];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < rows; k++) {\n                        for (int l = 0; l < cols; l++) {\n                            if (grid.get(k).get(l) == 0) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1] + 1);\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    for(int k = 0; k < m; k++) {\n                        if(dp[i][k] == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        int n = grid.size();\n        long[][] dp = new long[n][capacity + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][0] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < capacity + 1; j++) {\n                for (int k = 0; k < n; k++) {\n                    if (grid.get(k).get(j) == 1) {\n                        dp[k][j] = Math.max(dp[k][j], dp[k][j - 1]);\n                    }\n                }\n            }\n        }\n        return dp[n - 1][capacity];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                for (int k = 0; k < m; k++) {\n                    if (grid.get(i).get(k) == 0) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                for(int k = 0; k < grid.size(); k++) {\n                    for(int l = 0; l < grid.get(0).size(); l++) {\n                        if(grid.get(k).get(l) == 1 && dp[i][j] + 1 > dp[k][l]) {\n                            dp[i][j] = dp[k][l] + 1;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = dp[i][j] + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j + 1] + 1);\n                    dp[i][j] = Math.min(dp[i][j], dp[i + 1][j] + 1);\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(dp[i][j] == 1) {\n                    for(int k = 0; k < 4; k++) {\n                        int nr = i + d[k][0];\n                        int nc = j + d[k][1];\n                        if(nr >= 0 && nr < rows && nc >= 0 && nc < cols && grid.get(nr).get(nc) == 0) {\n                            dp[nr][nc] = Math.max(dp[nr][nc], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && dp[i - 1][j] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && dp[i][j - 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (i + 1 < grid.size() && dp[i + 1][j] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if (j + 1 < grid.get(0).size() && dp[i][j + 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (grid.get(i).get(k) == 0) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && dp[i - 1][j] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (i + 1 < grid.size() && dp[i + 1][j] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && dp[i][j - 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (j + 1 < grid.get(0).size() && dp[i][j + 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && dp[i - 1][j] == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (i + 1 < n && dp[i + 1][j] == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && dp[i][j - 1] == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (j + 1 < m && dp[i][j + 1] == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[n - 1][m - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(j - k >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = grid.get(i).get(j) == 1 ? 1 : 0;\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int n = grid.size();\n        long[][] dp = new long[n][capacity + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < capacity + 1; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][0] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < capacity + 1; j++) {\n                for (int k = 0; k < grid.get(i).size(); k++) {\n                    if (grid.get(i).get(k) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - grid.get(i).get(k)] + 1);\n                    }\n                }\n            }\n        }\n        return dp[n - 1][capacity];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[] row_max = new int[rows];\n        int[] col_max = new int[cols];\n        int[] row_sum = new int[rows];\n        int[] col_sum = new int[cols];\n        int[] row_cnt = new int[rows];\n        int[] col_cnt = new int[cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                row_max[i] = Math.max(row_max[i], grid.get(i).get(j));\n                col_max[j] = Math.max(col_max[j], grid.get(i).get(j));\n                row_sum[i] += grid.get(i).get(j);\n                col_sum[j] += grid.get(i).get(j);\n                row_cnt[i]++;\n                col_cnt[j]++;\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (row_sum[i] < capacity && col_sum[j] < capacity) {\n                    ans++;\n                }\n            }\n        }\n        return ans;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (j - k >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(k > dp[i][j]) {\n                            dp[i][j] = k;\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    max = Math.max(max, dp[i][j]);\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 0; k < m; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(i + 1 < grid.size() && grid.get(i + 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if(j + 1 < grid.get(0).size() && grid.get(i).get(j + 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (i + 1 < grid.size() && grid.get(i + 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (j + 1 < grid.get(0).size() && grid.get(i).get(j + 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        return maxFill(dp, 0, 0, capacity);",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                for(int k = 1; k <= capacity; k++) {\n                    if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                    }\n                    if(i + 1 < grid.size() && grid.get(i + 1).get(j) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                    }\n                    if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    }\n                    if(j + 1 < grid.get(0).size() && grid.get(i).get(j + 1) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                    }\n                }\n",
    "        int n = grid.size();\n        long[][] dp = new long[n][capacity + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < capacity + 1; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][0] = 1;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        dp[i][k] = Math.max(dp[i][k], dp[i][k - 1]);\n                    }\n                }\n            }\n        }\n        return dp[n - 1][capacity];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(k).size(); l++) {\n                            if (grid.get(k).get(l) == 0) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = dp[i][j] + 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] > capacity) {\n                    dp[i][j] = dp[i][j] - 1;\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (dp[i][j] + k <= capacity) {\n                            dp[i][j] += k;\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (dp[i][j] + k <= capacity) {\n                            dp[i][j] += k;\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, dp[i][j]);\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if(i - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 1; i < grid.size(); i++) {\n            for (int j = 1; j < grid.get(0).size(); j++) {\n                dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 1; i < grid.size(); i++) {\n            for (int j = 1; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = dp[i - 1][j];\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], Math.max(dp[i][j - 1], dp[i - 1][j - 1]) + 1);\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(k).size(); l++) {\n                            if (grid.get(k).get(l) == 0) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                for(int k = 1; k <= capacity; k++) {\n                    if(grid.get(i).get(j) == 1 && k >= dp[i][j]) {\n                        dp[i][j] = k;\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1 && dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < m; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    ans = Math.max(ans, dp[i][j]);\n                }\n            }\n        }\n        return ans;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        return maxFill(dp, 0, 0, capacity);",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && j - 1 >= 0 && dp[i - 1][j - 1] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if (i - 1 >= 0 && dp[i - 1][j] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (i - 1 >= 0 && j + 1 < grid.get(0).size() && dp[i - 1][j + 1] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j + 1] + 1);\n                        }\n                        if (j - 1 >= 0 && dp[i][j - 1] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (j + 1 < grid.get(0).size() && dp[i][j + 1] + 1 <= k) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < m; k++) {\n                        if (k < j) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                for (int k = 1; k <= capacity; k++) {\n                    if (i - 1 >= 0 && dp[i - 1][j] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                    }\n                    if (i + 1 < rows && dp[i + 1][j] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                    }\n                    if (j - 1 >= 0 && dp[i][j - 1] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    }\n                    if (j + 1 < cols && dp[i][j + 1] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                for(int k = 0; k < grid.size(); k++) {\n                    for(int l = 0; l < grid.get(0).size(); l++) {\n                        if(grid.get(k).get(l) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                for (int k = 1; k <= capacity; k++) {\n                    if (i - 1 >= 0 && dp[i - 1][j] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                    }\n                    if (j - 1 >= 0 && dp[i][j - 1] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    }\n                    if (i + 1 < n && dp[i + 1][j] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                    }\n                    if (j + 1 < m && dp[i][j + 1] == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                    }\n                }\n            }\n        }\n        return dp[n - 1][m - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(k).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, dp[i][j]);\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 1) {\n                                dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < m; k++) {\n                        if (grid.get(i).get(k) == 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (dp[i][j] + k < dp[i][j + 1]) {\n                            dp[i][j + 1] = dp[i][j] + k;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < m; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[n - 1][m - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                for (int k = 0; k < grid.size(); k++) {\n                    for (int l = 0; l < grid.get(k).size(); l++) {\n                        if (grid.get(k).get(l) == 1 && dp[i][j] + 1 > dp[k][l]) {\n                            dp[i][j] = dp[k][l] + 1;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (i + 1 < rows && grid.get(i + 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if (j + 1 < cols && grid.get(i).get(j + 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < rows; k++) {\n                        for (int l = 0; l < cols; l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - k >= 0 && j - k >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - k][j - k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                for(int k = 0; k < grid.size(); k++) {\n                    for(int l = 0; l < grid.get(0).size(); l++) {\n                        if(grid.get(k).get(l) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && dp[i - 1][j] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0 && dp[i][j - 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        if(i + 1 < grid.size() && dp[i + 1][j] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                        }\n                        if(j + 1 < grid.get(0).size() && dp[i][j + 1] > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1])));\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        return maxFill(dp, rows, cols, capacity);",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                for(int k = 0; k < m; k++) {\n                    if(grid.get(i).get(j) == 1 && grid.get(i).get(k) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                for (int k = 0; k < grid.size(); k++) {\n                    for (int l = 0; l < grid.get(0).size(); l++) {\n                        if (grid.get(k).get(l) == 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    for(int k = 0; k < grid.size(); k++) {\n                        for(int l = 0; l < grid.get(0).size(); l++) {\n                            if(grid.get(k).get(l) == 1) {\n                                dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        return maxFill(dp, 0, 0, capacity);",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                for(int k = 0; k < grid.size(); k++) {\n                    for(int l = 0; l < grid.get(0).size(); l++) {\n                        if(grid.get(k).get(l) == 1 && dp[i][j] + 1 > dp[k][l]) {\n                            dp[k][l] = dp[i][j] + 1;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 0; k < grid.size(); k++) {\n                        for (int l = 0; l < grid.get(0).size(); l++) {\n                            if (grid.get(k).get(l) == 1) {\n                                dp[k][l] = Math.max(dp[k][l], dp[i][j] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                for(int k = 0; k < cols; k++) {\n                    if(grid.get(i).get(j) == 0 && grid.get(i).get(k) == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    for (int k = 1; k <= capacity; k++) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + k);\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 1; k <= capacity; k++) {\n                        if(i - 1 >= 0 && j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n                        }\n                        if(i - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if(j - 1 >= 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (dp[i][k] == 1) {\n                            dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 1; i < grid.size(); i++) {\n            for (int j = 1; j < grid.get(0).size(); j++) {\n                dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 1; i < grid.size(); i++) {\n            for(int j = 1; j < grid.get(0).size(); j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i-1][j], Math.max(dp[i][j-1], dp[i-1][j-1]) + 1);\n                }\n            }\n        }\n        return dp[grid.size()-1][grid.get(0).size()-1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 0; k < cols; k++) {\n                        if (grid.get(i).get(k) == 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0];",
    "        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                }\n            }\n        }\n        return dp[grid.size() - 1][grid.get(0).size() - 1];",
    "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    for (int k = 1; k <= capacity; k++) {\n                        if (i - 1 >= 0 && grid.get(i - 1).get(j) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j - 1 >= 0 && grid.get(i).get(j - 1) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[rows - 1][cols - 1];"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}