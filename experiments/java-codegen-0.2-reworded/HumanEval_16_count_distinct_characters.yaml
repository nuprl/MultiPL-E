name: HumanEval_16_count_distinct_characters
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
  \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public static\
  \ long countDistinctCharacters(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ["        Map<Character, Integer> map = new HashMap<>();\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (map.containsKey(c)) {\n                map.put(c, map.get(c)\
    \ + 1);\n            } else {\n                map.put(c, 1);\n            }\n\
    \        }\n        return map.size();", "        long count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            count += string.charAt(i)\
    \ == ' ' ? 0 : 1;\n        }\n        return count;", "        HashSet<Character>\
    \ set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            set.add(string.charAt(i));\n        }\n        return set.size();",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            count += (c == ' ') ? 0 :\
    \ 1;\n        }\n        return count;", "        long count = 0;\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        HashSet<Character> set\
    \ = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n  \
    \          set.add(string.charAt(i));\n        }\n        return set.size();",
  "        HashMap<Character, Integer> map = new HashMap<>();\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n \
    \           if (map.containsKey(c)) {\n                map.put(c, map.get(c) +\
    \ 1);\n            } else {\n                map.put(c, 1);\n            }\n \
    \       }\n        return map.size();", "        long count = 0;\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            count += (c == ' ') ? 0 : 1;\n        }\n        return count;",
  "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            set.add(c);\n        }\n        return set.size();", "      \
    \  Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            char c = string.charAt(i);\n          \
    \  if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n  \
    \          } else {\n                map.put(c, 1);\n            }\n        }\n\
    \        return map.size();", "        long[] charCount = new long[256];\n   \
    \     for (char c : string.toCharArray()) {\n            charCount[c]++;\n   \
    \     }\n        long count = 0;\n        for (int i = 0; i < charCount.length;\
    \ i++) {\n            count += charCount[i] * charCount[i];\n        }\n     \
    \   return count;", "        long count = 0;\n        for (char c : string.toCharArray())\
    \ {\n            count += Character.isUpperCase(c) ? 1 : 0;\n        }\n     \
    \   return count;", "        HashSet<Character> set = new HashSet<>();\n     \
    \   for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        long count = 0;\n        for(char\
    \ c : string.toCharArray()) {\n            count += Character.isUpperCase(c) ?\
    \ 1 : 0;\n        }\n        return count;", "        long count = 0;\n      \
    \  for (int i = 0; i < string.length(); i++) {\n            count += (string.charAt(i)\
    \ == ' ') ? 0 : 1;\n        }\n        return count;", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (map.containsKey(c))\
    \ {\n                map.put(c, map.get(c) + 1);\n            } else {\n     \
    \           map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            count += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n     \
    \   }\n        return count;", "        HashMap<Character, Integer> map = new\
    \ HashMap<>();\n        for (int i = 0; i < string.length(); i++) {\n        \
    \    char c = string.charAt(i);\n            if (map.containsKey(c)) {\n     \
    \           map.put(c, map.get(c) + 1);\n            } else {\n              \
    \  map.put(c, 1);\n            }\n        }\n        return map.size();", "  \
    \      HashMap<Character, Integer> map = new HashMap<>();\n        for (char c\
    \ : string.toCharArray()) {\n            if (map.containsKey(c)) {\n         \
    \       map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c,\
    \ 1);\n            }\n        }\n        return map.size();", "        long count\
    \ = 0;\n        for(int i = 0; i < string.length(); i++) {\n            char c\
    \ = string.charAt(i);\n            count += (c == ' ') ? 0 : 1;\n        }\n \
    \       return count;", "        long count = 0;\n        for(int i = 0; i < string.length();\
    \ i++) {\n            count += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n\
    \        }\n        return count;", "        HashSet<Character> set = new HashSet<>();\n\
    \        for (char c : string.toCharArray()) {\n            set.add(c);\n    \
    \    }\n        return set.size();", "        long count = 0;\n        for(char\
    \ c : string.toCharArray()) {\n            count += Character.isUpperCase(c) ?\
    \ 1 : 0;\n        }\n        return count;", "        long[] counts = new long[256];\n\
    \        for (char c : string.toCharArray()) {\n            counts[c]++;\n   \
    \     }\n        long count = 0;\n        for (long c : counts) {\n          \
    \  count += c;\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count += string.charAt(i)\
    \ == ' ' ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        HashMap<Character, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (map.containsKey(c)) {\n\
    \                map.put(c, map.get(c) + 1);\n            } else {\n         \
    \       map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return\
    \ set.size();", "        long count = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            count += (c == '\
    \ ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n \
    \       for (int i = 0; i < string.length(); i++) {\n            count += (string.charAt(i)\
    \ == ' ') ? 0 : 1;\n        }\n        return count;", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (map.containsKey(c))\
    \ {\n                map.put(c, map.get(c) + 1);\n            } else {\n     \
    \           map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        HashSet<Character> set = new HashSet<Character>();\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n \
    \       }\n        return set.size();", "        long count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for(int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        HashSet<Character> set\
    \ = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n  \
    \          set.add(string.charAt(i));\n        }\n        return set.size();",
  "        Map<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
    \ {\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c)\
    \ + 1);\n            } else {\n                map.put(c, 1);\n            }\n\
    \        }\n        return map.size();", "        HashMap<Character, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (map.containsKey(c)) {\n\
    \                map.put(c, map.get(c) + 1);\n            } else {\n         \
    \       map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            count += (c >= 'a' && c <=\
    \ 'z') ? 1 : 0;\n            count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n      \
    \  }\n        return count;", "        long count = 0;\n        for(char c : string.toCharArray())\
    \ {\n            count += Character.isUpperCase(c) ? 1 : 0;\n        }\n     \
    \   return count;", "        HashSet<Character> set = new HashSet<>();\n     \
    \   for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n\
    \        }\n        return set.size();", "        long count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            count += (c == ' ') ? 0 : 1;\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for(int i = 0; i < string.length(); i++) {\n \
    \           count += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n      \
    \  }\n        return count;", "        long count = 0;\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            char c = string.charAt(i);\n      \
    \      count += (c >= 'a' && c <= 'z') ? 1 : 0;\n            count += (c >= 'A'\
    \ && c <= 'Z') ? 1 : 0;\n        }\n        return count;", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (map.containsKey(c))\
    \ {\n                map.put(c, map.get(c) + 1);\n            } else {\n     \
    \           map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        long count = 0;\n        for(int i = 0; i < string.length(); i++) {\n \
    \           char c = string.charAt(i);\n            count += (c == ' ') ? 0 :\
    \ 1;\n        }\n        return count;", "        HashMap<Character, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (map.containsKey(c)) {\n\
    \                map.put(c, map.get(c) + 1);\n            } else {\n         \
    \       map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        long count = 0;\n        for(int i = 0; i < string.length(); i++) {\n \
    \           count += string.charAt(i) == ' ' ? 0 : 1;\n        }\n        return\
    \ count;", "        long count = 0;\n        for(int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            count += (c == '\
    \ ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n \
    \       for (int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (int i = 0; i < string.length(); i++) {\n            count += (string.charAt(i)\
    \ == ' ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            count += (c == ' ') ? 0 : 1;\n        }\n        return count;",
  "        long count = 0;\n        for(int i = 0; i < string.length(); i++) {\n \
    \           count += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n      \
    \  }\n        return count;", "        HashSet<Character> set = new HashSet<>();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        long[] count = new long[256];\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count[string.charAt(i)]++;\n\
    \        }\n        long result = 0;\n        for (int i = 0; i < count.length;\
    \ i++) {\n            result += count[i] * (count[i] - 1) / 2;\n        }\n  \
    \      return result;", "        long count = 0;\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            count += string.charAt(i) == ' ' ? 0 :\
    \ 1;\n        }\n        return count;", "        long count = 0;\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(Character.isUpperCase(c)) {\n                count++;\n      \
    \      }\n        }\n        return count;", "        long[] count = new long[256];\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count[string.charAt(i)]++;\n\
    \        }\n        long result = 0;\n        for (int i = 0; i < count.length;\
    \ i++) {\n            result += count[i] * (count[i] - 1) / 2;\n        }\n  \
    \      return result;", "        HashSet<Character> set = new HashSet<>();\n \
    \       for(char c : string.toCharArray()) {\n            set.add(c);\n      \
    \  }\n        return set.size();", "        long count = 0;\n        for(int i\
    \ = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (int i = 0; i < string.length(); i++) {\n            count += (string.charAt(i)\
    \ == ' ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count += string.charAt(i)\
    \ == ' ' ? 0 : 1;\n        }\n        return count;", "        HashSet<Character>\
    \ set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n    \
    \        set.add(c);\n        }\n        return set.size();", "        long count\
    \ = 0;\n        for(int i = 0; i < string.length(); i++) {\n            count\
    \ += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n        }\n        return\
    \ count;", "        HashMap<Character, Integer> map = new HashMap<>();\n     \
    \   for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (map.containsKey(c)) {\n                map.put(c, map.get(c)\
    \ + 1);\n            } else {\n                map.put(c, 1);\n            }\n\
    \        }\n        return map.size();", "        long count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        HashSet<Character> set\
    \ = new HashSet<Character>();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            set.add(string.charAt(i));\n        }\n        return set.size();",
  "        long count = 0;\n        for (char c : string.toCharArray()) {\n      \
    \      count += Character.isUpperCase(c) ? 1 : 0;\n        }\n        return count;",
  "        long count = 0;\n        for(int i = 0; i < string.length(); i++) {\n \
    \           count += (string.charAt(i) == ' ') ? 0 : 1;\n        }\n        return\
    \ count;", "        long count = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            count += string.charAt(i) == ' ' ? 0 : 1;\n        }\n \
    \       return count;", "        HashSet<Character> set = new HashSet<Character>();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        long count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            count += (string.charAt(i)\
    \ == ' ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for(char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        Map<Character, Integer>\
    \ map = new HashMap<>();\n        for (char c : string.toCharArray()) {\n    \
    \        map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return map.size();",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            count += (c == ' ') ? 0 :\
    \ 1;\n        }\n        return count;", "        long count = 0;\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n            count += (c\
    \ >= 'a' && c <= 'z') ? 1 : 0;\n        }\n        return count;", "        long\
    \ count = 0;\n        for(int i = 0; i < string.length(); i++) {\n           \
    \ char c = string.charAt(i);\n            count += (c == ' ') ? 0 : 1;\n     \
    \   }\n        return count;", "        HashSet<Character> set = new HashSet<Character>();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        HashSet<Character> set = new\
    \ HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n        \
    \    set.add(string.charAt(i));\n        }\n        return set.size();", "   \
    \     HashMap<Character, Integer> map = new HashMap<>();\n        for(int i =\
    \ 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n   \
    \         if(map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n\
    \            } else {\n                map.put(c, 1);\n            }\n       \
    \ }\n        return map.size();", "        long count = 0;\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            count += (string.charAt(i) ==\
    \ ' ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count += string.charAt(i)\
    \ == ' ' ? 0 : 1;\n        }\n        return count;", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (map.containsKey(c))\
    \ {\n                map.put(c, map.get(c) + 1);\n            } else {\n     \
    \           map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            count += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n     \
    \   }\n        return count;", "        long count = 0;\n        for (int i =\
    \ 0; i < string.length(); i++) {\n            count += string.charAt(i) == ' '\
    \ ? 0 : 1;\n        }\n        return count;", "        long[] count = new long[26];\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count[string.charAt(i)\
    \ - 'a']++;\n        }\n        return Arrays.stream(count).sum();", "       \
    \ long[] counts = new long[256];\n        for (int i = 0; i < string.length();\
    \ i++) {\n            counts[string.charAt(i)]++;\n        }\n        long result\
    \ = 0;\n        for (int i = 0; i < counts.length; i++) {\n            result\
    \ += Math.min(counts[i], 1);\n        }\n        return result;", "        HashSet<Character>\
    \ set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            set.add(string.charAt(i));\n        }\n        return set.size();",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            count += string.charAt(i) == ' ' ? 0 : 1;\n        }\n        return\
    \ count;", "        long count = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            count += (c == '\
    \ ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n \
    \       for (char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for(int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for(char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            count += (c == ' ') ? 0 : 1;\n        }\n        return count;",
  "        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            set.add(c);\n        }\n        return set.size();", "      \
    \  Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            char c = string.charAt(i);\n          \
    \  if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n  \
    \          } else {\n                map.put(c, 1);\n            }\n        }\n\
    \        return map.size();", "        HashSet<Character> set = new HashSet<>();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        long[] count = new long[256];\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count[string.charAt(i)]++;\n\
    \        }\n        long result = 0;\n        for (int i = 0; i < count.length;\
    \ i++) {\n            result += count[i] * (count[i] - 1) / 2;\n        }\n  \
    \      return result;", "        HashSet<Character> set = new HashSet<>();\n \
    \       for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        long count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            count += (string.charAt(i)\
    \ == ' ') ? 0 : 1;\n        }\n        return count;", "        HashSet<Character>\
    \ set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n    \
    \        set.add(Character.toLowerCase(c));\n        }\n        return set.size();",
  "        long count = 0;\n        for (char c : string.toCharArray()) {\n      \
    \      count += Character.isUpperCase(c) ? 1 : 0;\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            count += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n     \
    \   }\n        return count;", "        long[] counts = new long[256];\n     \
    \   for (char c : string.toCharArray()) {\n            counts[c]++;\n        }\n\
    \        long count = 0;\n        for (long c : counts) {\n            count +=\
    \ c;\n        }\n        return count;", "        long count = 0;\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            count += (c == ' ') ? 0 : 1;\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            count += string.charAt(i) == ' ' ? 0 : 1;\n        }\n        return\
    \ count;", "        HashSet<Character> set = new HashSet<>();\n        for (char\
    \ c : string.toCharArray()) {\n            set.add(c);\n        }\n        return\
    \ set.size();", "        long[] counts = new long[256];\n        for (char c :\
    \ string.toCharArray()) {\n            counts[c]++;\n        }\n        long result\
    \ = 0;\n        for (long count : counts) {\n            result += count;\n  \
    \      }\n        return result;", "        HashMap<Character, Integer> map =\
    \ new HashMap<>();\n        for(char c : string.toCharArray()) {\n           \
    \ if(map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n    \
    \        } else {\n                map.put(c, 1);\n            }\n        }\n\
    \        return map.size();", "        long count = 0;\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            char c = string.charAt(i);\n      \
    \      count += (c == ' ') ? 0 : 1;\n        }\n        return count;", "    \
    \    long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n  \
    \          count += (string.charAt(i) == ' ') ? 0 : 1;\n        }\n        return\
    \ count;", "        long count = 0;\n        for(char c : string.toCharArray())\
    \ {\n            count += Character.isUpperCase(c) ? 1 : 0;\n        }\n     \
    \   return count;", "        long count = 0;\n        for(int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            count += (c == '\
    \ ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n \
    \       for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                count++;\n        \
    \    }\n        }\n        return count;", "        long count = 0;\n        for(char\
    \ c : string.toCharArray()) {\n            count += Character.isUpperCase(c) ?\
    \ 1 : 0;\n        }\n        return count;", "        HashSet<Character> set =\
    \ new HashSet<>();\n        for (char c : string.toCharArray()) {\n          \
    \  set.add(c);\n        }\n        return set.size();", "        HashSet<Character>\
    \ set = new HashSet<Character>();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();",
  "        long count = 0;\n        for (char c : string.toCharArray()) {\n      \
    \      count += Character.isUpperCase(c) ? 1 : 0;\n        }\n        return count;",
  "        HashMap<Character, Integer> map = new HashMap<>();\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n \
    \           if (map.containsKey(c)) {\n                map.put(c, map.get(c) +\
    \ 1);\n            } else {\n                map.put(c, 1);\n            }\n \
    \       }\n        return map.size();", "        long count = 0;\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            count += (string.charAt(i) ==\
    \ ' ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count += string.charAt(i)\
    \ == ' ' ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            count += string.charAt(i)\
    \ == ' ' ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            count += (c == ' ') ? 0 : 1;\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            count += string.charAt(i) == ' ' ? 0 : 1;\n        }\n        return\
    \ count;", "        long count = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            count += string.charAt(i) == ' ' ? 0 : 1;\n        }\n \
    \       return count;", "        long count = 0;\n        for(int i = 0; i < string.length();\
    \ i++) {\n            count += string.charAt(i) == ' ' ? 0 : 1;\n        }\n \
    \       return count;", "        long count = 0;\n        for(int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            count += (c == '\
    \ ') ? 0 : 1;\n        }\n        return count;", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (map.containsKey(c))\
    \ {\n                map.put(c, map.get(c) + 1);\n            } else {\n     \
    \           map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        HashMap<Character, Integer> map = new HashMap<>();\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n \
    \           if (map.containsKey(c)) {\n                map.put(c, map.get(c) +\
    \ 1);\n            } else {\n                map.put(c, 1);\n            }\n \
    \       }\n        return map.size();", "        long count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        Map<Character, Integer>\
    \ map = new HashMap<>();\n        for (char c : string.toCharArray()) {\n    \
    \        map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return map.size();",
  "        HashMap<Character, Integer> map = new HashMap<>();\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n \
    \           if (map.containsKey(c)) {\n                map.put(c, map.get(c) +\
    \ 1);\n            } else {\n                map.put(c, 1);\n            }\n \
    \       }\n        return map.size();", "        long count = 0;\n        for(char\
    \ c : string.toCharArray()) {\n            count += Character.isUpperCase(c) ?\
    \ 1 : 0;\n        }\n        return count;", "        long count = 0;\n      \
    \  for (int i = 0; i < string.length(); i++) {\n            count += (string.charAt(i)\
    \ == ' ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        HashSet<Character> set\
    \ = new HashSet<>();\n        for (char c : string.toCharArray()) {\n        \
    \    set.add(Character.toLowerCase(c));\n        }\n        return set.size();",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            count += (c >= 'A' && c <=\
    \ 'Z') ? 1 : 0;\n        }\n        return count;", "        HashSet<Character>\
    \ set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            set.add(string.charAt(i));\n        }\n        return set.size();",
  "        long[] count = new long[256];\n        for (int i = 0; i < string.length();\
    \ i++) {\n            count[string.charAt(i)]++;\n        }\n        long sum\
    \ = 0;\n        for (int i = 0; i < count.length; i++) {\n            sum += count[i]\
    \ * (count[i] - 1) / 2;\n        }\n        return sum;", "        long count\
    \ = 0;\n        for(int i = 0; i < string.length(); i++) {\n            count\
    \ += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n        }\n        return\
    \ count;", "        long count = 0;\n        for (char c : string.toCharArray())\
    \ {\n            count += Character.isUpperCase(c) ? 1 : 0;\n        }\n     \
    \   return count;", "        HashSet<Character> set = new HashSet<>();\n     \
    \   for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        long count = 0;\n        for(char\
    \ c : string.toCharArray()) {\n            count += Character.isUpperCase(c) ?\
    \ 1 : 0;\n        }\n        return count;", "        long count = 0;\n      \
    \  for (int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (char c : string.toCharArray()) {\n            count += Character.isUpperCase(c)\
    \ ? 1 : 0;\n        }\n        return count;", "        HashSet<Character> set\
    \ = new HashSet<>();\n        for (char c : string.toCharArray()) {\n        \
    \    set.add(c);\n        }\n        return set.size();", "        long count\
    \ = 0;\n        for(int i = 0; i < string.length(); i++) {\n            count\
    \ += string.charAt(i) == ' ' ? 0 : 1;\n        }\n        return count;", "  \
    \      long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            count += string.charAt(i) == ' ' ? 0 : 1;\n        }\n        return\
    \ count;", "        long count = 0;\n        for (char c : string.toCharArray())\
    \ {\n            count += Character.isUpperCase(c) ? 1 : 0;\n        }\n     \
    \   return count;", "        long count = 0;\n        for (char c : string.toCharArray())\
    \ {\n            count += Character.isUpperCase(c) ? 1 : 0;\n        }\n     \
    \   return count;", "        HashSet<Character> set = new HashSet<>();\n     \
    \   for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n\
    \        return set.size();", "        HashSet<Character> set = new HashSet<>();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        HashMap<Character, Integer>\
    \ map = new HashMap<>();\n        for(int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if(map.containsKey(c)) {\n\
    \                map.put(c, map.get(c) + 1);\n            } else {\n         \
    \       map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            count += (string.charAt(i) == ' ') ? 0 : 1;\n        }\n        return\
    \ count;", "        long count = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        Map<Character, Long> map = new HashMap<>();\n        for (char c : string.toCharArray())\
    \ {\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c)\
    \ + 1);\n            } else {\n                map.put(c, 1L);\n            }\n\
    \        }\n        return map.size();", "        HashSet<Character> set = new\
    \ HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n        \
    \    set.add(string.charAt(i));\n        }\n        return set.size();", "   \
    \     HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            set.add(c);\n        }\n        return set.size();", "      \
    \  HashMap<Character, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            char c = string.charAt(i);\n      \
    \      if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n\
    \            } else {\n                map.put(c, 1);\n            }\n       \
    \ }\n        return map.size();", "        HashMap<Character, Integer> map = new\
    \ HashMap<>();\n        for(int i = 0; i < string.length(); i++) {\n         \
    \   char c = string.charAt(i);\n            if(map.containsKey(c)) {\n       \
    \         map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c,\
    \ 1);\n            }\n        }\n        return map.size();", "        long count\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char\
    \ c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n       \
    \         count++;\n            }\n        }\n        return count;", "      \
    \  HashSet<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();",
  "        HashMap<Character, Integer> map = new HashMap<>();\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n \
    \           if (map.containsKey(c)) {\n                map.put(c, map.get(c) +\
    \ 1);\n            } else {\n                map.put(c, 1);\n            }\n \
    \       }\n        return map.size();", "        HashSet<Character> set = new\
    \ HashSet<Character>();\n        for (char c : string.toCharArray()) {\n     \
    \       set.add(c);\n        }\n        return set.size();", "        long count\
    \ = 0;\n        for(int i = 0; i < string.length(); i++) {\n            count\
    \ += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n        }\n        return\
    \ count;", "        long count = 0;\n        for(char c : string.toCharArray())\
    \ {\n            count += Character.isUpperCase(c) ? 1 : 0;\n        }\n     \
    \   return count;", "        long count = 0;\n        for(char c : string.toCharArray())\
    \ {\n            count += Character.isUpperCase(c) ? 1 : 0;\n        }\n     \
    \   return count;", "        HashMap<Character, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (map.containsKey(c)) {\n                map.put(c, map.get(c)\
    \ + 1);\n            } else {\n                map.put(c, 1);\n            }\n\
    \        }\n        return map.size();", "        long count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        Map<Character, Long> map\
    \ = new HashMap<>();\n        for (int i = 0; i < string.length(); i++) {\n  \
    \          char c = string.charAt(i);\n            if (map.containsKey(c)) {\n\
    \                map.put(c, map.get(c) + 1);\n            } else {\n         \
    \       map.put(c, 1L);\n            }\n        }\n        return map.size();",
  "        HashSet<Character> set = new HashSet<>();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            set.add(string.charAt(i));\n        }\n\
    \        return set.size();", "        long count = 0;\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            char c = string.charAt(i);\n      \
    \      if (Character.isUpperCase(c)) {\n                count++;\n           \
    \ }\n        }\n        return count;", "        long count = 0;\n        for(char\
    \ c : string.toCharArray()) {\n            count += Character.isUpperCase(c) ?\
    \ 1 : 0;\n        }\n        return count;", "        HashSet<Character> set =\
    \ new HashSet<>();\n        for (char c : string.toCharArray()) {\n          \
    \  set.add(c);\n        }\n        return set.size();", "        HashSet<Character>\
    \ set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            set.add(string.charAt(i));\n        }\n        return set.size();",
  "        HashMap<Character, Integer> map = new HashMap<>();\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n \
    \           if (map.containsKey(c)) {\n                map.put(c, map.get(c) +\
    \ 1);\n            } else {\n                map.put(c, 1);\n            }\n \
    \       }\n        return map.size();", "        long count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            count += (string.charAt(i)\
    \ - 'a' + 1);\n        }\n        return count;", "        long count = 0;\n \
    \       for (int i = 0; i < string.length(); i++) {\n            count += (string.charAt(i)\
    \ == ' ') ? 0 : 1;\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            count += (c == ' ') ? 0 : 1;\n        }\n        return count;",
  "        long count = 0;\n        for(int i = 0; i < string.length(); i++) {\n \
    \           count += Character.isUpperCase(string.charAt(i)) ? 1 : 0;\n      \
    \  }\n        return count;", "        HashMap<Character, Integer> map = new HashMap<>();\n\
    \        for (char c : string.toCharArray()) {\n            map.put(c, map.getOrDefault(c,\
    \ 0) + 1);\n        }\n        return map.size();", "        HashSet<Character>\
    \ set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n    \
    \        set.add(c);\n        }\n        return set.size();", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (map.containsKey(c))\
    \ {\n                map.put(c, map.get(c) + 1);\n            } else {\n     \
    \           map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        long count = 0;\n        for(char c : string.toCharArray()) {\n       \
    \     count += Character.isUpperCase(c) ? 1 : 0;\n        }\n        return count;",
  "        long count = 0;\n        for (char c : string.toCharArray()) {\n      \
    \      count += Character.isUpperCase(c) ? 1 : 0;\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            count += (string.charAt(i) == ' ') ? 0 : 1;\n        }\n        return\
    \ count;", "        HashSet<Character> set = new HashSet<>();\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        long count = 0;\n        for(int\
    \ i = 0; i < string.length(); i++) {\n            count += Character.isUpperCase(string.charAt(i))\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    for (int i = 0; i < string.length(); i++) {\n            count += string.charAt(i)\
    \ == ' ' ? 0 : 1;\n        }\n        return count;", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (map.containsKey(c))\
    \ {\n                map.put(c, map.get(c) + 1);\n            } else {\n     \
    \           map.put(c, 1);\n            }\n        }\n        return map.size();",
  "        long count = 0;\n        for (char c : string.toCharArray()) {\n      \
    \      count += Character.isUpperCase(c) ? 1 : 0;\n        }\n        return count;",
  "        HashSet<Character> set = new HashSet<>();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            set.add(string.charAt(i));\n        }\n\
    \        return set.size();", "        long count = 0;\n        for (char c :\
    \ string.toCharArray()) {\n            count += Character.isUpperCase(c) ? 1 :\
    \ 0;\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
