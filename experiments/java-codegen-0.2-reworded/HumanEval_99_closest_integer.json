{
  "name": "HumanEval_99_closest_integer",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n    // 15\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long closestInteger(String value) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n",
  "completions": [
    "        return (long) Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        long number = Long.parseLong(value);\n        if (number < 0) {\n            result = -1 * closestInteger(-1 * number);\n        } else {\n            result = closestInteger(number);\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.round(Double.parseDouble(value));\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // do nothing\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        return (long) Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        long abs = 0;\n        boolean negative = false;\n        if (value.charAt(0) == '-') {\n            negative = true;\n            value = value.substring(1);\n        }\n        for (int i = 0; i < value.length(); i++) {\n            char c = value.charAt(i);\n            if (c >= '0' && c <= '9') {\n                abs = abs * 10 + (c - '0');\n            } else {\n                break;\n            }\n        }\n        if (abs == 0) {\n            result = 0;\n        } else if (abs < 0) {\n            result = -abs;\n        } else {\n            result = abs;\n        }\n        if (negative) {\n            result = -result;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        // your code goes here\n        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // your code goes here\n        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return (long)Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        long number = Long.parseLong(value);\n        if (number < 0) {\n            result = -1 * closestInteger(-number);\n        } else {\n            result = closestInteger(number);\n        }\n        return result;",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // your code goes here\n        long num = Long.parseLong(value);\n        return num;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        long min = 0;\n        long max = 0;\n        boolean isNegative = false;\n        if (value.charAt(0) == '-') {\n            isNegative = true;\n            value = value.substring(1);\n        }\n        String[] parts = value.split(\"\\\\.\");\n        if (parts.length == 2) {\n            min = Long.parseLong(parts[0]);\n            max = Long.parseLong(parts[1]);\n        } else {\n            min = Long.parseLong(value);\n            max = Long.parseLong(value);\n        }\n        if (isNegative) {\n            min = -min;\n            max = -max;\n        }\n        if (max - min == 0) {\n            result = max;\n        } else {\n            result = (max + min) / 2;\n        }\n        if (result == 0) {\n            result = max;\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        long min = 0;\n        long max = 0;\n        int dotIndex = value.indexOf('.');\n        if (dotIndex != -1) {\n            min = Long.parseLong(value.substring(0, dotIndex));\n            max = Long.parseLong(value.substring(dotIndex + 1));\n        } else {\n            min = Long.parseLong(value);\n            max = Long.parseLong(value);\n        }\n        if (min > max) {\n            result = max;\n        } else if (max < min) {\n            result = min;\n        } else {\n            result = (max + min) / 2;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // do nothing\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        return Long.parseLong(value);",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        if (value.length() > 0) {\n            if (value.charAt(0) == '-') {\n                result = -Long.parseLong(value.substring(1));\n            } else {\n                result = Long.parseLong(value);\n            }\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        return (long) Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        return (long) Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        long min = 0;\n        long max = 0;\n        String[] parts = value.split(\"\\\\.\");\n        if (parts.length > 1) {\n            min = Long.parseLong(parts[0]);\n            max = Long.parseLong(parts[1]);\n        } else {\n            min = Long.parseLong(value);\n            max = Long.parseLong(value);\n        }\n        if (min > max) {\n            long temp = min;\n            min = max;\n            max = temp;\n        }\n        if (min == max) {\n            result = min;\n        } else {\n            result = (max + min) / 2;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.round(Double.parseDouble(value));\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        if (value.length() > 0) {\n            String[] parts = value.split(\"\\\\.\");\n            if (parts.length > 1) {\n                result = Long.parseLong(parts[0]);\n                result += (Long.parseLong(parts[1]) / 100);\n            } else {\n                result = Long.parseLong(value);\n            }\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        long result = 0;\n        if (value.length() > 0) {\n            result = Long.parseLong(value);\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.ceil(Double.parseDouble(value));\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        if (value.length() > 0) {\n            result = Long.parseLong(value);\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.round(Double.parseDouble(value));\n        }\n        return result;",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return (long) Math.round(Double.parseDouble(value));",
    "        return (long) Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        int len = value.length();\n        int i = 0;\n        while (i < len) {\n            char c = value.charAt(i);\n            if (c >= '0' && c <= '9') {\n                int digit = c - '0';\n                if (max < digit) {\n                    max = digit;\n                }\n                if (min > digit) {\n                    min = digit;\n                }\n            }\n            i++;\n        }\n        if (max == 0) {\n            result = min;\n        } else if (min == 0) {\n            result = max;\n        } else {\n            diff = max - min;\n            if (diff == 1) {\n                result = max;\n            } else if (diff == -1) {\n                result = min;\n            } else {\n                result = min + (diff / 2);\n            }\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // your code goes here\n        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        try {\n            num = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            System.out.println(\"NumberFormatException: \" + e);\n        }\n        if (num < 0) {\n            min = -1;\n            max = 1;\n        } else {\n            min = 0;\n            max = 0;\n        }\n        diff = max - min;\n        if (diff == 0) {\n            result = max;\n        } else if (diff > 0) {\n            result = max;\n        } else {\n            result = min;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.floor(Double.parseDouble(value));\n        }\n        return result;",
    "        long result = 0;\n        long number = 0;\n        boolean negative = false;\n        if (value.charAt(0) == '-') {\n            negative = true;\n            value = value.substring(1);\n        }\n        try {\n            number = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n        if (negative) {\n            number = -number;\n        }\n        if (number == 0) {\n            return 0;\n        }\n        if (number < 0) {\n            number = -number;\n        }\n        if (number == Integer.MIN_VALUE) {\n            return Integer.MIN_VALUE;\n        }\n        if (number == Integer.MAX_VALUE) {\n            return Integer.MAX_VALUE;\n        }\n        if (number > Integer.MAX_VALUE) {\n            result = Integer.MAX_VALUE;\n        } else if (number < Integer.MIN_VALUE) {\n            result = Integer.MIN_VALUE;\n        } else {\n            result = (int) number;\n        }\n        if (result == number) {\n            return result;\n        }\n        if (result == 0) {\n            return result;\n        }\n        if (result > 0) {\n            result = result + 1;\n        } else {\n            result = result - 1;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.round(Double.parseDouble(value));\n        }\n        return result;",
    "        // your code goes here\n        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // your code goes here\n        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.floor(Double.parseDouble(value));\n        }\n        return result;",
    "        // your code goes here\n        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // your code goes here\n        return 0;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        long sign = 1;\n        if (value.startsWith(\"-\")) {\n            sign = -1;\n            value = value.substring(1);\n        }\n        if (value.contains(\".\")) {\n            result = (long) (Double.parseDouble(value) + 0.5);\n        } else {\n            result = Long.parseLong(value);\n        }\n        result = result * sign;\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        long min = 0;\n        long max = 0;\n        boolean negative = false;\n        if (value.charAt(0) == '-') {\n            negative = true;\n            value = value.substring(1);\n        }\n        String[] parts = value.split(\"\\\\.\");\n        if (parts.length == 2) {\n            min = Long.parseLong(parts[0]);\n            max = Long.parseLong(parts[1]);\n        } else {\n            min = Long.parseLong(value);\n            max = Long.parseLong(value);\n        }\n        if (negative) {\n            result = -max;\n        } else {\n            result = max;\n        }\n        if (result == min) {\n            result = min;\n        } else if (result == max) {\n            result = max;\n        } else if (result < min) {\n            result = min;\n        } else if (result > max) {\n            result = max;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // do nothing\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        // your code goes here\n        return 0;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.floor(Double.parseDouble(value));\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.floor(Double.parseDouble(value));\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // do nothing\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.round(Double.parseDouble(value));\n        }\n        return result;",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // your code goes here\n        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        // your code goes here\n        return Long.parseLong(value);",
    "        long result = 0;\n        if (value.length() == 0) {\n            return result;\n        }\n        String[] parts = value.split(\"\\\\.\");\n        long wholePart = Long.parseLong(parts[0]);\n        long decimalPart = 0;\n        if (parts.length > 1) {\n            decimalPart = Long.parseLong(parts[1]);\n        }\n        if (wholePart == 0) {\n            result = wholePart;\n        } else {\n            result = wholePart + (decimalPart / Math.abs(decimalPart));\n        }\n        if (decimalPart > 0) {\n            result += 1;\n        }\n        if (decimalPart < 0) {\n            result -= 1;\n        }\n        return result;",
    "        return (long)Math.round(Double.parseDouble(value));",
    "        // Your code here\n        return 0;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            // Do nothing\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        long num = Long.parseLong(value);\n        if (num > max) {\n            result = max;\n        } else if (num < min) {\n            result = min;\n        } else {\n            result = num;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        return Math.round(Double.parseDouble(value));",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.floor(Double.parseDouble(value));\n        }\n        return result;",
    "        return (long) Math.round(Double.parseDouble(value));",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.ceil(Double.parseDouble(value));\n        }\n        return result;",
    "        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = 0;\n        }\n        return result;",
    "        // Your code here\n        return Long.parseLong(value);",
    "        long result = 0;\n        try {\n            result = Long.parseLong(value);\n        } catch (NumberFormatException e) {\n            result = (long) Math.round(Double.parseDouble(value));\n        }\n        return result;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}