{
  "name": "HumanEval_87_get_row",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a 2 dimensional data, as a nested array lists,\n    // which is similar to matrix, however, unlike matrices,\n    // each row may contain a different number of columns.\n    // Given lst, and integer x, find integers x in the array list,\n    // and return array list of pairs, [(x1, y1), (x2, y2) ...] such that\n    // each pair is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n    // >>> get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)\n    // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // >>> get_row([], 1)\n    // []\n    // >>> get_row([[], [1], [1, 2, 3]], 3)\n    // [(2, 2)]\n    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l), (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));\n    }\n\n}\n",
  "completions": [
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) {\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                result.add(new Pair<>(i, lst.get(i).get(0)));\n                Collections.sort(lst.get(i), (a, b) -> b - a);\n                for (int j = 1; j < lst.get(i).size(); j++) {\n                    result.add(new Pair<>(i, lst.get(i).get(j)));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        if (lst.size() == 1) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                res.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > x) {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    res.add(new Pair<>(i, lst.get(i).get(j)));\n                }\n                Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n                return res;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> b.compareTo(a)));\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            sorted.add(new ArrayList<>(lst.get(i)));\n        }\n        sorted.sort((a, b) -> a.size() - b.size());\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int j = 0; j < sorted.get(i).size(); j++) {\n                if (sorted.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        if (lst.size() == 1) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                res.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return res;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        ArrayList<Long> row = new ArrayList<>();\n        for (ArrayList<Long> list : lst) {\n            row.addAll(list);\n        }\n        Collections.sort(row, (a, b) -> a.compareTo(b));\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                result.add(new Pair<>(i, row.get(i)));\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            } else {\n                return res;\n            }\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, 0L));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                }\n            } else {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                }\n                for (int j = 1; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.add(new Pair<>(i, j));\n                    }\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.isEmpty()) return result;\n        if (lst.size() == 1) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                result.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return result;\n        }\n        ArrayList<Pair<Long, Long>> sorted = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            sorted.addAll(getRow(lst.get(i), x));\n        }\n        sorted.sort((a, b) -> a.getKey().compareTo(b.getKey()));\n        for (int i = 0; i < sorted.size(); i++) {\n            result.add(sorted.get(i));\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.add(new Pair<>(i, j));\n                        return res;\n                    }\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst.size() == 0) continue;\n            for (Long col_lst : row_lst) {\n                if (col_lst.equals(x)) {\n                    res.add(new Pair<>(row, col));\n                    break;\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                result.add(new Pair<>(i, lst.get(i).get(0)));\n                continue;\n            }\n            Collections.sort(lst.get(i), (a, b) -> b.size() - a.size());\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        Collections.sort(lst, (a, b) -> a.get(0).compareTo(b.get(0)));\n        Collections.sort(lst.get(0), (a, b) -> a.compareTo(b));\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Long> row = new ArrayList<>();\n        for (int i = 0; i < lst.get(0).size(); i++) {\n            row.add(lst.get(0).get(i));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            ArrayList<Long> curr_row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                curr_row.add(lst.get(i).get(j));\n            }\n            Collections.sort(curr_row, Collections.reverseOrder());\n            for (int j = 0; j < curr_row.size(); j++) {\n                if (curr_row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                    return res;\n                }\n            }\n            for (int j = 0; j < curr_row.size(); j++) {\n                row.add(curr_row.get(j));\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.isEmpty()) {\n            return result;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> b.compareTo(a)));\n        // Iterate through all rows.\n        for (ArrayList<Long> row : lst) {\n            // Iterate through all columns of the row.\n            for (int i = 0; i < row.size(); i++) {\n                // If the current coordinate is equal to the given x,\n                // then add it to the result.\n                if (row.get(i) == x) {\n                    result.add(new Pair<>(row.get(0), i));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res1 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res2 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res3 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res4 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res5 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res6 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res7 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res8 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res9 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res10 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res11 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res12 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res13 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res14 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res15 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res16 = getRow(lst, x);\n        Array",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst.size() == 0) return ret;\n        if (lst.get(0).size() == 0) return ret;\n        if (lst.get(0).size() == 1) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            return ret;\n        }\n        if (lst.get(0).size() == 2) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(1L, lst.get(0).get(1)));\n            return ret;\n        }\n        if (lst.get(0).size() == 3) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(1L, lst.get(0).get(1)));\n            ret.add(new Pair<>(2L, lst.get(0).get(2)));\n            return ret;\n        }\n        if (lst.get(0).size() == 4) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(1L, lst.get(0).get(1)));\n            ret.add(new Pair<>(2L, lst.get(0).get(2)));\n            ret.add(new Pair<>(3L, lst.get(0).get(3)));\n            return ret;\n        }\n        if (lst.get(0).size() == 5) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(1L, lst.get(0).get(1)));\n            ret.add(new Pair<>(2L, lst.get(0).get(2)));\n            ret.add(new Pair<>(3L, lst.get",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> b.compareTo(a)));\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        ArrayList<Pair<Long, Long>> sorted = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            sorted.add(new Pair<>(i, lst.get(i).size() - 1));\n        }\n        Collections.sort(sorted, (a, b) -> a.getKey().compareTo(b.getKey()));\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int j = 0; j < sorted.get(i).getValue(); j++) {\n                result.add(new Pair<>(sorted.get(i).getKey(), lst.get(sorted.get(i).getKey()).get(j)));\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                return res;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            if (row.size() == 0) continue;\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(0L, i));\n                }\n            }\n            return res;\n        }\n        ArrayList<Long> row = new ArrayList<>();\n        for (int i = 0; i < lst.get(0).size(); i++) {\n            row.add(lst.get(0).get(i));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            ArrayList<Long> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                temp.add(lst.get(i).get(j));\n            }\n            Collections.sort(temp, Collections.reverseOrder());\n            for (int j = 0; j < temp.size(); j++) {\n                if (temp.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        ArrayList<Long> row = new ArrayList<>();\n        for (int i = 0; i < lst.get(0).size(); i++) {\n            row.add(lst.get(0).get(i));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            row.add(lst.get(i).get(0));\n        }\n        Collections.sort(row, (a, b) -> b.compareTo(a));\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(new Pair<>(0, i));\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return result;\n        if (x < 0 || x >= lst.size()) return result;\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            result.add(new Pair<>(x, i));\n        }\n        Collections.sort(result, (p1, p2) -> p1.getKey().compareTo(p2.getKey()));\n        Collections.sort(result, (p1, p2) -> p1.getValue().compareTo(p2.getValue()));\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_val : row_lst) {\n                if (col_val == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).get(lst.get(0).size() - 1) == x) {\n            res.add(new Pair<>(0L, lst.get(0).get(lst.get(0).size() - 1)));\n            return res;\n        }\n        if (lst.get(0).get(0) < x && lst.get(0).get(lst.get(0).size() - 1) > x) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(lst.get(0).size() - 1)));\n            return res;\n        }\n        if (lst.get(0).get(0) > x && lst.get(0).get(lst.get(0).size() - 1) < x) {\n            res.add(new Pair<>(0L, lst.get(0).get(lst.get(0).size() - 1)));\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).get(0) < x && lst.get(0).get(lst.get(0).size() - 1) < x) {\n            res.add(new Pair<>(0L, lst",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, 0));\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, 0));\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, 0L));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            result.add(new Pair<>(4L, lst.get(0).",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(result, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(result, (a, b) -> a.getValue() - b.getValue());\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst == null || row_lst.size() == 0) continue;\n            for (Long col_lst : row_lst) {\n                if (col_lst == null) continue;\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (x < 0 || x >= lst.size()) {\n            return result;\n        }\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            result.add(new Pair<>(x, i));\n        }\n        Collections.sort(result, (p1, p2) -> p1.getKey() - p2.getKey());\n        Collections.sort(result, (p1, p2) -> p1.getValue() - p2.getValue());\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                    break;\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> b.compareTo(a)));\n        // Iterate through the rows and find the coordinates.\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                    break;\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(0L, lst.get(i).get(0)));\n                    return res;\n                }\n            }\n            return res;\n        }\n        Collections.sort(lst, (a, b) -> a.get(0).compareTo(b.get(0)));\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(lst.get(i).get(0), lst.get(i).get(1)));\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey().compareTo(b.getKey()));\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res1 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res2 = getRow(lst, x);\n        Collections.sort(res1, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res2, (a, b) -> b.getKey() - a.getKey());\n        for (int i = 0; i < res1.size(); i++) {\n            res.add(res1.get(i));\n        }\n        for (int i = 0; i < res2.size(); i++) {\n            res.add(res2.get(i));\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res_row = new ArrayList<>();\n        for (int i = 0; i < lst.get(0).size(); i++) {\n            res_row.add(new Pair<>(0L, i));\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                for (int j = 0; j < lst.get(i).get(0); j++) {\n                    res.add(new Pair<>(i, j));\n                }\n            } else {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.add(new Pair<>(i, j));\n                        return res;\n                    }\n                }\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) > x) {\n                        res_row.add(new Pair<>(i, j - 1));\n                        break;\n                    }\n                }\n            }\n        }\n        Collections.sort(res_row, (a, b) -> b.getValue() - a.getValue());\n        for (int i = 0; i < res_row.size(); i++) {\n            res.add(res_row.get(i));\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, 0L));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                    return res;\n                }\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, 0L));\n            }\n            for (int j = 1; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.add(new Pair<>(i, j));\n                        return res;\n                    }\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(result, (a, b) -> a.getKey() - b.getKey());\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(lst.get(i).get(0), lst.get(i).get(0)));\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res1 = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                res1.add(new Pair<>(lst.get(i).get(j), i));\n            }\n        }\n        Collections.sort(res1, (a, b) -> a.getValue() - b.getValue());\n        for (int i = 0; i < res1.size(); i++) {\n            if (res1.get(i).getValue() == x) {\n                for (int j = 0; j < lst.get(res1.get(i).getValue()).size(); j++) {\n                    res.add(new Pair<>(lst.get(res1.get(i).getValue()).get(j), res1.get(i).getValue()));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (x < 0 || x >= lst.size()) return res;\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            res.add(new Pair<>(x, i));\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return ret;\n        if (lst.get(0).size() == 0) return ret;\n        if (lst.size() == 1) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                ret.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return ret;\n        }\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                ret.add(new Pair<>(0L, lst.get(i).get(0)));\n            }\n            return ret;\n        }\n        if (lst.get(0).get(0) == x) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                ret.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return ret;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    ret.add(new Pair<>(i + 1, lst.get(i).get(j)));\n                }\n            }\n        }\n        return ret;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_val : row_lst) {\n                if (col_val == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > 1) {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.add(new Pair<>(i, j));\n                        return res;\n                    }\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n            }\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                continue;\n            }\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    row = i;\n                    col = j;\n                    break;\n                }\n            }\n        }\n        if (row == 0) {\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res1 = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i == row) {\n                continue;\n            }\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == col) {\n                    continue;\n                }\n                res1.add(new Pair<>(i, lst.get(i).get(j)));\n            }\n        }\n        Collections.sort(res1, (a, b) -> b.getKey() - a.getKey());\n        Collections.sort(res1, (a, b) -> b.getValue() - a.getValue());\n        res.add(new Pair<>(row, col));\n        res.addAll(res1);\n        return res;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst.size() == 0) return ret;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    ret.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(ret, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(ret, (a, b) -> a.getValue() - b.getValue());\n        return ret;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_list : lst) {\n            for (Long col_list : row_list) {\n                if (col_list == x) {\n                    res.add(new Pair<>(row, col));\n                    break;\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res1 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res2 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res3 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res4 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res5 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res6 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res7 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res8 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res9 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res10 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res11 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res12 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res13 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res14 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res15 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res16",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return ret;\n        if (x < 0 || x >= lst.size()) return ret;\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            ret.add(new Pair<>(x, i));\n        }\n        Collections.sort(ret, (a, b) -> a.getKey() - b.getKey());\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            ret.add(new Pair<>(x, i));\n        }\n        return ret;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > x) {\n                res.add(new Pair<>(i, lst.get(i).get(x)));\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        return res;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if(lst.size() == 0) return ret;\n        long row = 0;\n        long col = 0;\n        for(ArrayList<Long> row_lst : lst) {\n            for(Long col_lst : row_lst) {\n                if(col_lst == x) {\n                    ret.add(new Pair<>(row, col));\n                    break;\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return ret;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return ret;\n        if (lst.get(0).size() == 0) return ret;\n        if (lst.get(0).size() == 1) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            return ret;\n        }\n        if (lst.get(0).size() == 2) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(0L, lst.get(0).get(1)));\n            return ret;\n        }\n        if (lst.get(0).size() == 3) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(0L, lst.get(0).get(1)));\n            ret.add(new Pair<>(0L, lst.get(0).get(2)));\n            return ret;\n        }\n        if (lst.get(0).size() == 4) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(0L, lst.get(0).get(1)));\n            ret.add(new Pair<>(0L, lst.get(0).get(2)));\n            ret.add(new Pair<>(0L, lst.get(0).get(3)));\n            return ret;\n        }\n        if (lst.get(0).size() == 5) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(0L, lst.get(0).get(1)));\n            ret.add(new Pair<>(0L, lst.get(0).get(2)));\n            ret.add(new Pair<>(0L",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, 0L));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                }\n            }\n            else {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.add(new Pair<>(i, j));\n                    }\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            // Sort coordinates of the row by columns in descending order.\n            lst.get(i).sort((a, b) -> b - a);\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return result;\n        if (x < 0 || x > lst.size()) return result;\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            result.add(new Pair<>(x, lst.get(x).get(i)));\n        }\n        Collections.sort(result, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(result, (a, b) -> a.getValue() - b.getValue());\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, 0));\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        for (int i = 0; i < lst.get(0).size(); i++) {\n            for (int j = 0; j < lst.size(); j++) {\n                if (lst.get(j).get(i) == x) {\n                    res.add(new Pair<>(j, i));\n                }\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst == null || row_lst.size() == 0) {\n                continue;\n            }\n            for (Long col_lst : row_lst) {\n                if (col_lst == null) {\n                    continue;\n                }\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        Collections.sort(res, (a, b) -> (a.getKey() > b.getKey()) ? 1 : -1);\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst.size() == 0) continue;\n            for (Long col_lst : row_lst) {\n                if (col_lst.equals(x)) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        ArrayList<Long> row = lst.get(0);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(new Pair<>(0L, i));\n                return res;\n            }\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                    return res;\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            } else {\n                return res;\n            }\n        }\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                    return res;\n                } else {\n                    return res;\n                }\n            }\n            if (lst.get(i).get(0) < x) {\n                row = i;\n                break;\n            }\n        }\n        for (int i = 0; i < lst.get(row).size(); i++) {\n            if (lst.get(row).get(i) == x) {\n                res.add(new Pair<>(row, i));\n                return res;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (i == row) continue;\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                    return res;\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i < lst.get(0).size(); i++) {\n            sorted.add(lst.get(0).get(i));\n        }\n        Collections.sort(sorted, (a, b) -> b - a);\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, sorted.indexOf(lst.get(i).get(0))));\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, 0L));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(0L, 1L));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(0L, 1L));\n            result.add(new Pair<>(0L, 2L));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(0L, 1L));\n            result.add(new Pair<>(0L, 2L));\n            result.add(new Pair<>(0L, 3L));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(0L, 1L));\n            result.add(new Pair<>(0L, 2L));\n            result.add(new Pair<>(0L, 3L));\n            result.add(new Pair<>(0L, 4L));\n            return result;\n        }\n        if (lst.get(0).size() == 6) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(0L, 1L));\n            result.add(new Pair<>(0L, 2L));\n            result.add(new Pair<>(0L, 3L));\n",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return result;\n        if (lst.get(0).size() == 0) return result;\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.get(0).compareTo(b.get(0)));\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) continue;\n            if (lst.get(i).get(0) == x) {\n                result.add(new Pair<>(i, lst.get(i).get(0)));\n                for (int j = 1; j < lst.get(i).size(); j++) {\n                    result.add(new Pair<>(i, lst.get(i).get(j)));\n                }\n                return result;\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst == null || lst.isEmpty()) return ret;\n        if (lst.size() == 1) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                ret.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return ret;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            if (row.size() == 0) continue;\n            long row_x = row.get(0);\n            if (row_x == x) {\n                for (int j = 0; j < row.size(); j++) {\n                    ret.add(new Pair<>(i, row.get(j)));\n                }\n            }\n        }\n        Collections.sort(ret, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(ret, (a, b) -> a.getValue() - b.getValue());\n        return ret;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(0L, lst.get(i).get(0)));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Long> row = new ArrayList<>();\n        for (int i = 0; i < lst.get(0).size(); i++) {\n            row.add(lst.get(0).get(i));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n        }\n        Collections.sort(row, (a, b) -> b - a);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(new Pair<>(0L, row.get(i)));\n                return res;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.isEmpty()) {\n            return result;\n        }\n        ArrayList<Long> row = lst.get(0);\n        if (row == null || row.isEmpty()) {\n            return result;\n        }\n        Collections.sort(row, (a, b) -> a - b);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                result.add(new Pair<>(0L, i));\n                break;\n            }\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            row = lst.get(i);\n            if (row == null || row.isEmpty()) {\n                continue;\n            }\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        long[] rows = new long[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n            rows[i] = lst.get(i).size();\n        }\n        Arrays.sort(rows);\n        for (int i = 0; i < rows.length; i++) {\n            for (int j = 0; j < rows[i]; j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        // Sort coordinates by rows in ascending order.\n        Collections.sort(lst, (a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        Collections.sort(lst, (a, b) -> b.get(0).compareTo(a.get(0)));\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, 0));\n                return res;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> b.compareTo(a)));\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) return res;\n        if (lst.get(0).get(0) == x) return res;\n        if (lst.get(0).get(0) > x) return res;\n        if (lst.get(0).get(0) < x) return res;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                continue;\n            }\n            if (lst.get(i).get(0) > x) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                continue;\n            }\n            if (lst.get(i).get(0) < x) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                continue;\n            }\n            for (int j = 1; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, lst.get(i).get(j)));\n                    continue;\n                }\n                if (lst.get(i).get(j) > x) {\n                    res.add(new Pair<>(i, lst.get(i).get(j)));\n                    continue;\n                }\n                if (lst.get(i).get(j) < x) {\n                    res.add(new Pair<>(i, lst.get(i",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.size() - b.size());\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> b - a));\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.size() == 1) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                res.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            row = i;\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                col = lst.get(i).get(j);\n                if (col == x) {\n                    res.add(new Pair<>(row, j));\n                    break;\n                }\n            }\n        }\n        Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                if (o1.getKey() == o2.getKey()) {\n                    return o1.getValue() - o2.getValue();\n                } else {\n                    return o1.getKey() - o2.getKey();\n                }\n            }\n        });\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).get(0) == x) {\n            result.add(new Pair<>(0L, 0L));\n            return result;\n        }\n        ArrayList<Pair<Long, Long>> row = getRow(lst, x);\n        if (row.size() == 0) {\n            return result;\n        }\n        Collections.sort(row, (a, b) -> a.getKey().compareTo(b.getKey()));\n        for (int i = 0; i < row.size(); i++) {\n            result.add(new Pair<>(row.get(i).getKey() + 1, row.get(i).getValue() + 1));\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            res.add(new Pair<>(0L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            res.add(new Pair<>(0L, lst.get(0).get(2)));\n            res.add(new Pair<>(0L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            res.add(new Pair<>(0L, lst.get(0).get(2)));\n            res.add(new Pair<>(0L, lst.get",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return ret;\n        if (lst.get(0).size() == 0) return ret;\n        if (lst.get(0).size() == 1) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            return ret;\n        }\n        Collections.sort(lst, (a, b) -> a.get(0).compareTo(b.get(0)));\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) continue;\n            if (lst.get(i).get(0) == x) {\n                ret.add(new Pair<>(i, lst.get(i).get(0)));\n                for (int j = 1; j < lst.get(i).size(); j++) {\n                    ret.add(new Pair<>(i, lst.get(i).get(j)));\n                }\n                return ret;\n            }\n        }\n        return ret;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > x) {\n                res.add(new Pair<>(i, lst.get(i).get(x)));\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_list : lst) {\n            for (Long col_list : row_list) {\n                if (col_list == x) {\n                    res.add(new Pair<>(row, col));\n                    break;\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, 0L));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                    return res;\n                }\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, 0L));\n            }\n            for (int j = 1; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            } else {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.add(new Pair<>(i, j));\n                    }\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            res.add(new Pair<>(0L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            res.add(new Pair<>(0L, lst.get(0).get(2)));\n            res.add(new Pair<>(0L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            res.add(new Pair<>(0L, lst.get(0).get(2)));\n            res.add(new Pair<>(0L, lst.get",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.isEmpty()) {\n            return result;\n        }\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_list : lst) {\n            if (row_list == null || row_list.isEmpty()) {\n                continue;\n            }\n            for (Long col_list : row_list) {\n                if (col_list == null) {\n                    continue;\n                }\n                if (col_list == x) {\n                    result.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        Collections.sort(result, new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o2.getKey().compareTo(o1.getKey());\n            }\n        });\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                    break;\n                }\n                col++;\n            }\n            col = 0;\n            row++;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L, lst.get",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return result;\n        if (lst.get(0).size() == 0) return result;\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        long maxRow = lst.size();\n        long maxCol = lst.get(0).size();\n        long row = 0;\n        long col = 0;\n        long rowMax = 0;\n        long colMax = 0;\n        long rowMin = 0;\n        long colMin = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    row = i;\n                    col = j;\n                    break;\n                }\n            }\n        }\n        if (row == 0 && col == 0) {\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (i == row) {\n                continue;\n            }\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == col) {\n                    continue;\n                }\n                if (lst.get(i).get(j) > x) {\n                    rowMax = i;\n                    colMax = j;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (i == row) {\n                continue;\n            }\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == col) {\n                    continue;\n                }\n                if (lst.get(i).get(j) < x) {\n                    rowMin = i;\n                    colMin = j;\n                    break;\n                }\n            }\n        }\n        if (rowMax == 0 && colMax == 0) {\n            return res;\n        }",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > x) {\n                res.add(new Pair<>(i, lst.get(i).get(x)));\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return ret;\n        if (lst.get(0).size() == 0) return ret;\n        if (lst.get(0).size() == 1) {\n            ret.add(new Pair<>(0L, 0L));\n            return ret;\n        }\n        if (lst.get(0).size() == 2) {\n            ret.add(new Pair<>(0L, 0L));\n            ret.add(new Pair<>(1L, lst.get(0).get(1)));\n            return ret;\n        }\n        if (lst.get(0).size() == 3) {\n            ret.add(new Pair<>(0L, 0L));\n            ret.add(new Pair<>(1L, lst.get(0).get(1)));\n            ret.add(new Pair<>(2L, lst.get(0).get(2)));\n            return ret;\n        }\n        if (lst.get(0).size() == 4) {\n            ret.add(new Pair<>(0L, 0L));\n            ret.add(new Pair<>(1L, lst.get(0).get(1)));\n            ret.add(new Pair<>(2L, lst.get(0).get(2)));\n            ret.add(new Pair<>(3L, lst.get(0).get(3)));\n            return ret;\n        }\n        if (lst.get(0).size() == 5) {\n            ret.add(new Pair<>(0L, 0L));\n            ret.add(new Pair<>(1L, lst.get(0).get(1)));\n            ret.add(new Pair<>(2L, lst.get(0).get(2)));\n            ret.add(new Pair<>(3L, lst.get(0).get(3)));\n            ret.add(new Pair<>(4L, lst.get(0).get(4)));\n            return ret;\n        ",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > col) {\n                row = i;\n                col = lst.get(i).size() - 1;\n            }\n        }\n        for (int i = 0; i < lst.get(row).size(); i++) {\n            if (lst.get(row).get(i) == x) {\n                res.add(new Pair<>(row, i));\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return ret;\n        if (lst.get(0).size() == 0) return ret;\n        if (lst.size() == 1) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                ret.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return ret;\n        }\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                ret.add(new Pair<>(0L, lst.get(i).get(0)));\n            }\n            return ret;\n        }\n        if (lst.get(0).size() == 2) {\n            for (int i = 0; i < lst.size(); i++) {\n                ret.add(new Pair<>(0L, lst.get(i).get(0)));\n                ret.add(new Pair<>(0L, lst.get(i).get(1)));\n            }\n            return ret;\n        }\n        if (lst.get(0).size() == 3) {\n            for (int i = 0; i < lst.size(); i++) {\n                ret.add(new Pair<>(0L, lst.get(i).get(0)));\n                ret.add(new Pair<>(0L, lst.get(i).get(1)));\n                ret.add(new Pair<>(0L, lst.get(i).get(2)));\n            }\n            return ret;\n        }\n        if (lst.get(0).size() == 4) {\n            for (int i = 0; i < lst.size(); i++) {\n                ret.add(new Pair<>(0L, lst.get(i).get(0)));\n                ret.add(new Pair<>(0L, lst.get(i).get(1)));\n                ret.add",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        long max_row = lst.get(0).size();\n        long min_row = lst.get(0).size();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > max_row) {\n                max_row = lst.get(i).size();\n            }\n            if (lst.get(i).size() < min_row) {\n                min_row = lst.get(i).size();\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(result, (a, b) -> {\n            if (a.getKey() < b.getKey()) {\n                return -1;\n            }\n            if (a.getKey() > b.getKey()) {\n                return 1;\n            }\n            if (a.getValue() < b.getValue()) {\n                return -1;\n            }\n            if (a.getValue() > b.getValue()) {\n                return 1;\n            }\n            return 0;\n        });\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i, new Pair<>(result.get(i).getKey(), result.get(i).getValue() - min_row));\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res_row = getRow(lst, x);\n        for (int i = 0; i < res_row.size(); i++) {\n            res.add(new Pair<>(res_row.get(i).getKey(), i));\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> b.compareTo(a)));\n        // Iterate through all rows and find the coordinates.\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                    break;\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        long row = 0;\n        long column = 0;\n        for (ArrayList<Long> row_list : lst) {\n            for (Long column_list : row_list) {\n                if (column_list == x) {\n                    result.add(new Pair<>(row, column));\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        Collections.sort(result, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(result, (a, b) -> a.getValue() - b.getValue());\n        return result;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return ret;\n        if (lst.get(0).size() == 0) return ret;\n        if (lst.get(0).size() == 1) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            return ret;\n        }\n        Collections.sort(lst, (a, b) -> a.get(0).compareTo(b.get(0)));\n        Collections.sort(lst.get(0), (a, b) -> a.compareTo(b));\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    ret.add(new Pair<>(i, lst.get(i).get(j)));\n                }\n            }\n        }\n        return ret;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, 0L));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, 1L));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, 2L));\n            result.add(new Pair<>(2L, 1L));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, 3L));\n            result.add(new Pair<>(2L, 2L));\n            result.add(new Pair<>(3L, 1L));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, 4L));\n            result.add(new Pair<>(2L, 3L));\n            result.add(new Pair<>(3L, 2L));\n            result.add(new Pair<>(4L, 1L));\n            return result;\n        }\n        if (lst.get(0).size() == 6) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, 5L));\n            result.add(new Pair<>(2L, 4L));\n            result.add(new Pair<>(3L",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst.size() > col) {\n                result.add(new Pair<>(row, col));\n                col = row_lst.size() - 1;\n            }\n            row++;\n        }\n        Collections.sort(result, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(result, (a, b) -> a.getValue() - b.getValue());\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Long> sorted_lst = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            sorted_lst.addAll(lst.get(i));\n        }\n        sorted_lst.sort((a, b) -> b - a);\n        for (int i = 0; i < sorted_lst.size(); i++) {\n            if (sorted_lst.get(i) == x) {\n                res.add(new Pair<>(i, 0));\n                return res;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, 0L));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                }\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, 0L));\n            }\n            for (int j = 1; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.isEmpty()) return res;\n        if (lst.size() == 1) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                res.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return res;\n        }\n        ArrayList<Long> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            res.add(new Pair<>(i, row.get(i)));\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > x) {\n                result.add(new Pair<>(i, lst.get(i).get(x)));\n            }\n        }\n        Collections.sort(result, (a, b) -> a.getValue() - b.getValue());\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        ArrayList<Long> row = new ArrayList<>();\n        for (int i = 0; i < lst.get(0).size(); i++) {\n            row.add(lst.get(0).get(i));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            ArrayList<Long> newRow = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                newRow.add(lst.get(i).get(j));\n            }\n            for (int j = 0; j < row.size(); j++) {\n                if (newRow.get(j) > row.get(j)) {\n                    row.set(j, newRow.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(new Pair<>(0, i));\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        int n = lst.size();\n        long[] row = new long[n];\n        for (int i = 0; i < n; i++) {\n            row[i] = lst.get(i).get(x);\n        }\n        Arrays.sort(row);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (row[i] == lst.get(j).get(x)) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > x) {\n                result.add(new Pair<>(i, lst.get(i).get(x)));\n            }\n        }\n        Collections.sort(result, (a, b) -> a.getValue() - b.getValue());\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long[] rows = new long[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n            rows[i] = lst.get(i).size();\n        }\n        Arrays.sort(rows);\n        for (int i = 0; i < rows.length; i++) {\n            for (int j = 0; j < rows[i]; j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        int row = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            int col = 0;\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (x < 0 || x >= lst.size()) return res;\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            res.add(new Pair<>(x, i));\n        }\n        Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1() - o2.getValue1();\n            }\n        });\n        Collections.sort(lst.get(x), new Comparator<Long>() {\n            @Override\n            public int compare(Long o1, Long o2) {\n                return o2 - o1;\n            }\n        });\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            res.add(new Pair<>(lst.get(x).get(i), i));\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            if (row.size() == 0) continue;\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                    break;\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.isEmpty()) {\n            return result;\n        }\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    result.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        Collections.sort(result, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(result, (a, b) -> a.getValue() - b.getValue());\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                res.add(new Pair<>(0L, lst.get(i).get(1)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                res.add(new Pair<>(0L, lst.get(i).get(1)));\n                res.add(new Pair<>(0L, lst.get(i).get(2)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                res.add(new Pair<>(0L, lst.get(i).get(1)));\n                res.add(new Pair<>(0L, lst.get(i).get(2)));\n                res.add(new Pair<>(0L, lst.get(i).get(3)));\n            }\n            return res;\n        }\n        if (",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res1 = getRow(lst, x);\n        for (int i = 0; i < res1.size(); i++) {\n            res.add(new Pair<>(res1.get(i).getKey(), res1.get(i).getValue()));\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        for (int i = 0; i < res.size(); i++) {\n            res.set(i, new Pair<>(res.get(i).getKey(), res.get(i).getValue() + 1));\n        }\n        Collections.sort(res, (a, b) -> b.getKey() - a.getKey());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.size() == 1) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                res.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                res.add(new Pair<>(0L, lst.get(i).get(1)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                res.add(new Pair<>(0L, lst.get(i).get(1)));\n                res.add(new Pair<>(0L, lst.get(i).get(2)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                res.add(new Pair<>(0L, lst.get(i).get(1)));\n                res.add",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, 0L));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, 0L));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            result.add(new Pair<>(4L, lst.get(0).",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst.size() == 0) {\n            return ret;\n        }\n        if (lst.get(0).size() == 0) {\n            return ret;\n        }\n        if (lst.get(0).size() == 1) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            return ret;\n        }\n        if (lst.get(0).size() == 2) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(0L, lst.get(0).get(1)));\n            return ret;\n        }\n        if (lst.get(0).size() == 3) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(0L, lst.get(0).get(1)));\n            ret.add(new Pair<>(0L, lst.get(0).get(2)));\n            return ret;\n        }\n        if (lst.get(0).size() == 4) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(0L, lst.get(0).get(1)));\n            ret.add(new Pair<>(0L, lst.get(0).get(2)));\n            ret.add(new Pair<>(0L, lst.get(0).get(3)));\n            return ret;\n        }\n        if (lst.get(0).size() == 5) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            ret.add(new Pair<>(0L, lst.get(0).get(1)));\n            ret.add(new Pair<>(0L, lst.get(0).get(2)));\n            ret.add",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res_row = getRow(lst, x);\n        for (int i = 0; i < res_row.size(); i++) {\n            res.add(new Pair<>(res_row.get(i).getKey(), i));\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res1 = getRow(lst, x);\n        for (int i = 0; i < res1.size(); i++) {\n            res.add(new Pair<>(res1.get(i).getKey(), res1.get(i).getValue() + 1));\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, 0));\n                return res;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(0L, lst.get(i).get(0)));\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res1 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res2 = getRow(lst, x);\n        Collections.sort(res1, (a, b) -> a.getKey().compareTo(b.getKey()));\n        Collections.sort(res2, (a, b) -> b.getKey().compareTo(a.getKey()));\n        for (int i = 0; i < res1.size(); i++) {\n            for (int j = 0; j < res2.size(); j++) {\n                if (res1.get(i).getKey() == res2.get(j).getKey()) {\n                    res.add(new Pair<>(res1.get(i).getKey(), res2.get(j).getKey()));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, 0L));\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > col) {\n                row = i;\n                col = lst.get(i).size() - 1;\n            }\n        }\n        for (int i = 0; i < lst.get(row).size(); i++) {\n            if (lst.get(row).get(i) == x) {\n                res.add(new Pair<>(row, i));\n                break;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> b.compareTo(a)));\n        // Iterate over the rows and find the coordinates.\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            // Iterate over the columns and find the coordinates.\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            if (lst.get(0).get(1) == x) {\n                res.add(new Pair<>(0L, 1L));\n                return res;\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            if (lst.get(0).get(1) == x) {\n                res.add(new Pair<>(0L, 1L));\n                return res;\n            }\n            if (lst.get(0).get(2) == x) {\n                res.add(new Pair<>(0L, 2L));\n                return res;\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            if (lst.get(0).get(1) == x) {\n                res.add(new Pair<>(0L, 1L));\n                return res;\n            }\n            if (lst",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L, lst.get",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) continue;\n            if (lst.get(i).size() == 1) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                continue;\n            }\n            row = i;\n            col = lst.get(i).size() - 1;\n            break;\n        }\n        if (row == 0 && col == 0) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (row == 0) {\n            for (int i = 0; i < lst.get(0).size(); i++) {\n                res.add(new Pair<>(0L, lst.get(0).get(i)));\n            }\n            return res;\n        }\n        if (col == 0) {\n            for (int i = 0; i < lst.get(row).size(); i++) {\n                res.add(new Pair<>(row, lst.get(row).get(i)));\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.get(row).size(); i++) {\n            res.add(new Pair<>(row, lst.get(row).get(i)));\n        }\n        for (int i = 0; i < lst.get(row).size(); i++) {\n            res.add(new Pair<>(row, lst.get(row).get(i)));\n        }",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return ret;\n        if (x < 0 || x >= lst.size()) return ret;\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            ret.add(new Pair<>(lst.get(x).get(i), i));\n        }\n        Collections.sort(ret, (a, b) -> a.getKey().compareTo(b.getKey()));\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            ret.add(new Pair<>(lst.get(x).get(i), i));\n        }\n        return ret;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        ArrayList<Long> row = lst.get(0);\n        if (row.size() == 0) return res;\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(new Pair<>(0L, i));\n                break;\n            }\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            row = lst.get(i);\n            if (row.size() == 0) continue;\n            Collections.sort(row, Collections.reverseOrder());\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                    break;\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        long row = 0, col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst == null || row_lst.size() == 0) continue;\n            for (Long col_lst : row_lst) {\n                if (col_lst == null) continue;\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(lst.get(i).get(0), i));\n            }\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(lst.get(i).get(0), i));\n            }\n            return res;\n        }\n        if (lst.get(0).get(0) > x) return res;\n        if (lst.get(0).get(0) < x) return res;\n        for (int i = 1; i < lst.get(0).size(); i++) {\n            if (lst.get(0).get(i) == x) {\n                for (int j = 0; j < lst.size(); j++) {\n                    res.add(new Pair<>(lst.get(j).get(i), j));\n                }\n                return res;\n            }\n            if (lst.get(0).get(i) > x) return res;\n            if (lst.get(0).get(i) < x) return res;\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    for (int k = 0; k < lst.size(); k++) {\n                        res.add(new Pair<>(lst.get(k).get(j), k));\n                    }\n                    return res;\n                }\n                if (lst.get(i).get(j) >",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return result;\n        if (lst.get(0).size() == 0) return result;\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        ArrayList<Pair<Long, Long>> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(new Pair<>(i, lst.get(i).get(0)));\n        }\n        Collections.sort(row, (a, b) -> a.getKey().compareTo(b.getKey()));\n        Collections.sort(row, (a, b) -> b.getKey().compareTo(a.getKey()));\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i).getKey() == x) {\n                result.add(new Pair<>(row.get(i).getKey(), row.get(i).getValue()));\n                break;\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > x) {\n                res.add(new Pair<>(i, lst.get(i).get(x)));\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long maxRow = lst.size();\n        long maxCol = lst.get(0).size();\n        long row = 0;\n        long col = 0;\n        while (row < maxRow && col < maxCol) {\n            if (lst.get(row).get(col) == x) {\n                res.add(new Pair<>(row, col));\n                row++;\n                col++;\n            } else if (lst.get(row).get(col) < x) {\n                row++;\n            } else {\n                col++;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long[] rows = new long[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n            rows[i] = lst.get(i).size();\n        }\n        Arrays.sort(rows);\n        for (int i = 0; i < rows.length; i++) {\n            for (int j = 0; j < rows[i]; j++) {\n                res.add(new Pair<>(i, lst.get(i).get(j)));\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getValue0() - b.getValue0());\n        Collections.sort(res, (a, b) -> b.getValue1() - a.getValue1());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        long row = 0, col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst.size() > col) {\n                res.add(new Pair<>(row, col));\n                row = row_lst.get(col);\n                col = 0;\n            }\n            col++;\n        }\n        res.add(new Pair<>(row, col));\n        Collections.sort(res, (p1, p2) -> p1.getKey() - p2.getKey());\n        Collections.sort(res, (p1, p2) -> p1.getValue() - p2.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long[] rows = new long[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n            rows[i] = lst.get(i).size();\n        }\n        Arrays.sort(rows);\n        for (int i = 0; i < rows.length; i++) {\n            for (int j = 0; j < rows[i]; j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> b.compareTo(a)));\n        // Iterate through the array list, and find the coordinates of x.\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        if (lst.get(0).size() == 0) {\n            return res;\n        }\n        long max_row = lst.size() - 1;\n        long max_col = lst.get(0).size() - 1;\n        long row = 0;\n        long col = 0;\n        while (row <= max_row && col <= max_col) {\n            if (lst.get(row).get(col) == x) {\n                res.add(new Pair<>(row, col));\n                col++;\n            } else if (lst.get(row).get(col) < x) {\n                col++;\n            } else {\n                row++;\n            }\n        }\n        Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                if (o1.getKey() < o2.getKey()) {\n                    return -1;\n                } else if (o1.getKey() > o2.getKey()) {\n                    return 1;\n                } else {\n                    return o1.getValue() - o2.getValue();\n                }\n            }\n        });\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                    return res;\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, 0L));\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                }\n            } else {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                }\n                for (int j = 1; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.add(new Pair<>(i, j));\n                    }\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.add(new Pair<>(i, j));\n                    }\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).get(0) == x) {\n            result.add(new Pair<>(0L, 0L));\n            return result;\n        }\n        if (lst.get(0).get(0) < x) {\n            return result;\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) {\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                result.add(new Pair<>(i, 0L));\n                return result;\n            }\n            if (lst.get(i).get(0) < x) {\n                return result;\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, 0L));\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0L));\n                }\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, 0L));\n            }\n            for (int j = 1; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) continue;\n            Collections.sort(lst.get(i), (a, b) -> b - a);\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res_row = new ArrayList<>();\n        for (int i = 0; i < lst.get(0).size(); i++) {\n            if (lst.get(0).get(i) == x) {\n                res_row.add(new Pair<>(0, i));\n            }\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            ArrayList<Pair<Long, Long>> res_row_i = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res_row_i.add(new Pair<>(i, j));\n                }\n            }\n            res_row = merge(res_row, res_row_i);\n        }\n        return res_row;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return result;\n        if (lst.get(0).size() == 0) return result;\n        if (x < 0 || x > lst.size()) return result;\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            result.add(new Pair<>(lst.get(x).get(i), i));\n        }\n        Collections.sort(result, (a, b) -> a.getKey() - b.getKey());\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            result.get(i).setKey(result.get(i).getKey() + i);\n        }\n        Collections.sort(result, (a, b) -> b.getKey() - a.getKey());\n        return result;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst.size() == 0) return ret;\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    ret.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(ret, (a, b) -> a.getKey() - b.getKey());\n        return ret;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            } else {\n                return res;\n            }\n        }\n        ArrayList<Long> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(0));\n        }\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(new Pair<>(i, 0L));\n                return res;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).get(0) > x) return res;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1 && lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                return res;\n            }\n            if (lst.get(i).get(0) > x) return res;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_val : row_lst) {\n                if (col_val == x) {\n                    res.add(new Pair<>(row, col));\n                    break;\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 0) {\n            return result;\n        }\n        if (lst.get(0).size() == 1) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            return result;\n        }\n        if (lst.get(0).size() == 2) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            return result;\n        }\n        if (lst.get(0).size() == 3) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            return result;\n        }\n        if (lst.get(0).size() == 4) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));\n            result.add(new Pair<>(3L, lst.get(0).get(3)));\n            return result;\n        }\n        if (lst.get(0).size() == 5) {\n            result.add(new Pair<>(0L, lst.get(0).get(0)));\n            result.add(new Pair<>(1L, lst.get(0).get(1)));\n            result.add(new Pair<>(2L, lst.get(0).get(2)));",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        Collections.sort(lst, (a, b) -> a.size() - b.size());\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            Collections.sort(row, (a, b) -> b - a);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst.size() == 0) {\n            return ret;\n        }\n        if (lst.get(0).size() == 0) {\n            return ret;\n        }\n        if (lst.get(0).get(0) == x) {\n            ret.add(new Pair<>(0L, 0L));\n            return ret;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) {\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                ret.add(new Pair<>(i, 0L));\n                break;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) {\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                ret.add(new Pair<>(i, lst.get(i).size() - 1));\n                break;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) {\n                continue;\n            }\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    ret.add(new Pair<>(i, j));\n                    break;\n                }\n            }\n        }\n        return ret;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (x < 0 || x >= lst.size()) return res;\n        if (lst.get(x).size() == 0) return res;\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            res.add(new Pair<>(x, i));\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).get(0) > x) return res;\n        if (lst.get(0).get(0) < x) return res;\n        if (lst.get(0).get(0) == x) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                return res;\n            }\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                return res;\n            }\n            if (lst.get(i).get(0) > x) return res;\n            if (lst.get(i).get(0) < x) return res;\n            if (lst.get(i).get(0) == x) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                return res;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return result;\n        }\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    result.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        Collections.sort(result, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(result, (a, b) -> a.getValue() - b.getValue());\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res_row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).get(0) == x) {\n                res_row.add(new Pair<>(i, 0));\n            }\n        }\n        Collections.sort(res_row, (a, b) -> a.getKey() - b.getKey());\n        for (int i = 0; i < res_row.size(); i++) {\n            res.add(new Pair<>(res_row.get(i).getKey(), i));\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        ArrayList<Long> row = lst.get(0);\n        if (row == null || row.size() == 0) {\n            return result;\n        }\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                result.add(new Pair<>(0L, i));\n                break;\n            }\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            row = lst.get(i);\n            if (row == null || row.size() == 0) {\n                continue;\n            }\n            Collections.sort(row, Collections.reverseOrder());\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                res.add(new Pair<>(i, lst.get(i).get(0)));\n                continue;\n            }\n            if (lst.get(i).get(0) == x) {\n                row = i;\n                col = 0;\n                break;\n            }\n            for (int j = 1; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    row = i;\n                    col = j;\n                    break;\n                }\n            }\n        }\n        if (row == 0) return res;\n        ArrayList<Pair<Long, Long>> res1 = new ArrayList<>();\n        for (int i = 0; i < lst.get(row).size(); i++) {\n            if (i == col) continue;\n            res1.add(new Pair<>(row, lst.get(row).get(i)));\n        }\n        Collections.sort(res1, (a, b) -> b.getKey() - a.getKey());\n        res.addAll(res1);\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        long max_row = lst.size();\n        long max_col = lst.get(0).size();\n        long row = 0, col = 0;\n        for (row = 0; row < max_row; row++) {\n            for (col = 0; col < max_col; col++) {\n                if (lst.get(row).get(col) == x) {\n                    res.add(new Pair<>(row, col));\n                    break;\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            for (Long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> a.get(1).compareTo(b.get(1))));\n        // Iterate through the list and find the coordinates.\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res_row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                res_row.add(new Pair<>(i, 0));\n            } else {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res_row.add(new Pair<>(i, j));\n                    }\n                }\n            }\n        }\n        Collections.sort(res_row, (a, b) -> a.getValue() > b.getValue() ? -1 : 1);\n        for (int i = 0; i < res_row.size(); i++) {\n            res.add(res_row.get(i));\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(1L, lst.get(0).get(1)));\n            res.add(new Pair<>(2L, lst.get(0).get(2)));\n            res.add(new Pair<>(3L",
    "        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        // Sort coordinates by rows in ascending order.\n        lst.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        lst.forEach(row -> row.sort((a, b) -> a.get(1).compareTo(b.get(1))));\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == 0) {\n                continue;\n            }\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i).get(0) == x) {\n                    res.add(new Pair<>(i, 0));\n                    return res;\n                }\n            }\n            return res;\n        }\n        ArrayList<Pair<Long, Long>> res1 = getRow(lst, x);\n        ArrayList<Pair<Long, Long>> res2 = getRow(lst, x);\n        Collections.sort(res1, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res2, (a, b) -> a.getKey() - b.getKey());\n        for (int i = 0; i < res1.size(); i++) {\n            res.add(res1.get(i));\n        }\n        for (int i = 0; i < res2.size(); i++) {\n            res.add(res2.get(i));\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) return res;\n            else return res;\n        }\n        if (lst.get(0).get(0) == x) res.add(new Pair<>(0L, 0L));\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).size() == 1) {\n                if (lst.get(i).get(0) == x) res.add(new Pair<>(i, 0L));\n                else res.add(new Pair<>(i, 1L));\n            } else {\n                if (lst.get(i).get(0) == x) res.add(new Pair<>(i, 0L));\n                for (int j = 1; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                res.add(new Pair<>(0L, lst.get(i).get(1)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                res.add(new Pair<>(0L, lst.get(i).get(1)));\n                res.add(new Pair<>(0L, lst.get(i).get(2)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(new Pair<>(0L, lst.get(i).get(0)));\n                res.add(new Pair<>(0L, lst.get(i).get(1)));\n                res.add(new Pair<>(0L, lst.get(i).get(2)));\n                res.add(new Pair<>(0L, lst.get(i).get(3)));\n            }\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            for (",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        // Sort coordinates by rows in ascending order.\n        Collections.sort(lst, (a, b) -> a.get(0).compareTo(b.get(0)));\n        // Sort coordinates of the row by columns in descending order.\n        Collections.sort(lst, (a, b) -> b.get(1).compareTo(a.get(1)));\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst == null || row_lst.size() == 0) continue;\n            for (Long col_lst : row_lst) {\n                if (col_lst == null) continue;\n                if (col_lst == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst.size() > col) {\n                row = row_lst.get(col);\n                col++;\n            }\n        }\n        for (ArrayList<Long> row_lst : lst) {\n            if (row_lst.size() > col) {\n                row = row_lst.get(col);\n                col++;\n            }\n            for (int i = 0; i < row_lst.size(); i++) {\n                if (row_lst.get(i) == x) {\n                    res.add(new Pair<>(row, i));\n                }\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> b.getValue() - a.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() > col) {\n                row = i;\n                col = lst.get(i).size() - 1;\n            }\n        }\n        for (int i = 0; i < lst.get(row).size(); i++) {\n            if (lst.get(row).get(i) == x) {\n                res.add(new Pair<>(row, i));\n            }\n        }\n        Collections.sort(res, (a, b) -> a.getKey() - b.getKey());\n        Collections.sort(res, (a, b) -> a.getValue() - b.getValue());\n        return res;",
    "        ArrayList<Pair<Long, Long>> ret = new ArrayList<>();\n        if (lst.size() == 0) return ret;\n        if (lst.get(0).size() == 0) return ret;\n        if (lst.get(0).size() == 1) {\n            ret.add(new Pair<>(0L, lst.get(0).get(0)));\n            return ret;\n        }\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            row = i;\n            col = 0;\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    ret.add(new Pair<>(row, col));\n                    return ret;\n                }\n                col++;\n            }\n        }\n        return ret;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            if (lst.get(0).get(0) == x) {\n                res.add(new Pair<>(0L, 0L));\n                return res;\n            }\n            return res;\n        }\n        ArrayList<Long> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(0));\n        }\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(new Pair<>(i, 0L));\n                return res;\n            }\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (ArrayList<Long> row_list : lst) {\n            for (Long col_list : row_list) {\n                if (col_list == x) {\n                    res.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        if (lst.get(0).size() == 0) return res;\n        if (lst.get(0).size() == 1) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            return res;\n        }\n        if (lst.get(0).size() == 2) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            return res;\n        }\n        if (lst.get(0).size() == 3) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            res.add(new Pair<>(0L, lst.get(0).get(2)));\n            return res;\n        }\n        if (lst.get(0).size() == 4) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            res.add(new Pair<>(0L, lst.get(0).get(2)));\n            res.add(new Pair<>(0L, lst.get(0).get(3)));\n            return res;\n        }\n        if (lst.get(0).size() == 5) {\n            res.add(new Pair<>(0L, lst.get(0).get(0)));\n            res.add(new Pair<>(0L, lst.get(0).get(1)));\n            res.add(new Pair<>(0L, lst.get(0).get(2)));\n            res.add(new Pair<>(0L, lst.get"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}