{
  "name": "HumanEval_117_select_words",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) return result;\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpmrnpuscf.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] str = s.split(\" \");\n        for (String word : str) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s3ceoxq.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] str = s.split(\" \");\n        for (int i = 0; i < str.length; i++) {\n            if (str[i].length() == n) {\n                words.add(str[i]);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9mzqy8u9.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < s.length()) {\n            if (j < n) {\n                if (isConsonant(s.charAt(i))) {\n                    j++;\n                }\n            } else {\n                if (isConsonant(s.charAt(i))) {\n                    result.add(s.substring(j, i));\n                    j = 0;\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmplk2xddf1.java:34: error: cannot find symbol\n                if (isConsonant(s.charAt(i))) {\n                    ^\n  symbol:   method isConsonant(char)\n  location: class Problem\n/tmp/tmplk2xddf1.java:38: error: cannot find symbol\n                if (isConsonant(s.charAt(i))) {\n                    ^\n  symbol:   method isConsonant(char)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpyb41vgmq.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty())\n            return words;\n        int start = 0;\n        int end = 0;\n        while(end < s.length()) {\n            while(end < s.length() && s.charAt(end) != ' ')\n                end++;\n            if(end - start >= n) {\n                String word = s.substring(start, end);\n                words.add(word);\n            }\n            while(end < s.length() && s.charAt(end) == ' ')\n                end++;\n            start = end;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6rc4h4pm.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.isEmpty())\n            return result;\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == ' ') {\n                count = 0;\n                continue;\n            }\n            if(count == n) {\n                result.add(s.substring(i, i + 1));\n                count = 0;\n            }\n            count++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo45tqw9k.java:44)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.length() == 0)\n            return result;\n        String[] words = s.split(\" \");\n        for(String word : words) {\n            if(word.length() == 0)\n                continue;\n            int count = 0;\n            for(char c : word.toCharArray()) {\n                if(c == ' ')\n                    continue;\n                count++;\n            }\n            if(count == n)\n                result.add(word);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp830az87l.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (cnt[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmphs2v0z7o.java:36: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (cnt[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmphs2v0z7o.java:36: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < s.length()) {\n            if (count == n) {\n                words.add(s.substring(j, i));\n                count = 0;\n                j = i;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n            } else {\n                count++;\n                i++;\n            }\n        }\n        if (count == n) {\n            words.add(s.substring(j, i));\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0s9antlh.java:52)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) return result;\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmp3i29eoln.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpbhjpb36k.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        int i = 0, j = 0, count = 0;\n        while(i < s.length()) {\n            while(i < s.length() && count < n) {\n                if(s.charAt(i) == ' ') {\n                    i++;\n                } else {\n                    count++;\n                    i++;\n                }\n            }\n            while(i < s.length() && s.charAt(i) != ' ') {\n                i++;\n            }\n            if(count == n) {\n                words.add(s.substring(j, i));\n            }\n            count = 0;\n            j = i;\n            i++;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9u81g68a.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < s.length()) {\n            while (j < s.length() && count < n) {\n                if (s.charAt(i) == ' ') {\n                    i++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(i) == s.charAt(j)) {\n                    i++;\n                    j++;\n                    count++;\n                    continue;\n                }\n                j++;\n            }\n            if (count == n) {\n                result.add(s.substring(i, j));\n                i = j;\n                count = 0;\n            }\n            j = i + 1;\n            count = 0;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292951,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) return result;\n        HashMap<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == n) {\n                result.add(s.substring(entry.getKey() - 1, entry.getKey() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: begin 31, end 33, length 22\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.selectWords(tmph92n1mx6.java:39)\n\tat Problem.main(tmph92n1mx6.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int i = 0;\n        while(i < s.length()){\n            int j = i;\n            while(j < s.length() && s.charAt(j) != ' '){\n                j++;\n            }\n            String word = s.substring(i, j);\n            if(word.length() == n){\n                words.add(word);\n            }\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292951,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        \n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        \n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpn0m5g6g8.java:36: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpmqghen7y.java:36: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] arr = s.split(\" \");\n        for (int i = 0; i < arr.length; i++) {\n            String word = arr[i];\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbiry60v_.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) return words;\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                } else {\n                    n--;\n                }\n                j++;\n            }\n            if (n == 0) {\n                words.add(s.substring(i, j));\n                i = j;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292951,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpbhjpb36k.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    break;\n                }\n                if (s.charAt(j) == 'a' || s.charAt(j) == 'e' || s.charAt(j) == 'i' || s.charAt(j) == 'o' || s.charAt(j) == 'u') {\n                    n--;\n                }\n                j++;\n            }\n            if (n == 0) {\n                result.add(s.substring(i, j));\n            }\n            i = j;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292951,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsaln7j4n.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) return result;\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmp3i29eoln.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + 1));\n                cnt[s.charAt(i) - 'a']--;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -20 out of bounds for length 26\n\tat Problem.selectWords(tmpz4pz2vqf.java:30)\n\tat Problem.main(tmpz4pz2vqf.java:41)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) return words;\n        String[] words_arr = s.split(\" \");\n        for (String word : words_arr) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmaamz6lf.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> res = new ArrayList<String>();\n        if(s.length() == 0) return res;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                res.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "/tmp/tmploxdd5fi.java:34: error: incompatible types: possible lossy conversion from long to int\n                res.add(s.substring(i, i + n));\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.isEmpty())\n            return result;\n        int i = 0;\n        while(i < s.length()) {\n            int j = i;\n            while(j < s.length() && n > 0) {\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpkysjus9q.java:103: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] arr = s.split(\" \");\n        for (String word : arr) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppheo27k6.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpmqghen7y.java:36: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> res = new ArrayList<>();\n        if (s.isEmpty()) return res;\n        String[] arr = s.split(\" \");\n        for (String str : arr) {\n            if (str.length() == n) {\n                res.add(str);\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfnj3rdvh.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.isEmpty()) return result;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "/tmp/tmpbfpf299i.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.length() == 0) return words;\n        int i = 0;\n        while(i < s.length()) {\n            int j = i;\n            while(j < s.length() && n > 0) {\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                n--;\n                j++;\n            }\n            if(n == 0) {\n                words.add(s.substring(i, j));\n            }\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292952,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) return result;\n        \n        int i = 0;\n        int j = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            \n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            \n            if (j - i + 1 == n) {\n                result.add(s.substring(i, j));\n                i = j + 1;\n            } else {\n                j++;\n            }\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: -2147483648\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.selectWords(tmpft19htql.java:37)\n\tat Problem.main(tmpft19htql.java:52)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) result.add(word);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2efb5tf3.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            String word = s.substring(i, j);\n            if (word.length() == n) {\n                words.add(word);\n            }\n            i = j + 1;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_awax_b.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpbhjpb36k.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < s.length()) {\n            if (count == n) {\n                result.add(s.substring(j, i));\n                count = 0;\n                j = i;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n            } else {\n                count++;\n                i++;\n            }\n        }\n        if (count == n) {\n            result.add(s.substring(j, i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfizxqb7m.java:52)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < s.length()) {\n            while (j < s.length() && count < n) {\n                if (s.charAt(i) == ' ') {\n                    i++;\n                } else {\n                    count++;\n                    j++;\n                }\n            }\n            if (count == n) {\n                result.add(s.substring(i, j));\n                i = j;\n                count = 0;\n            }\n            j++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: begin 19, end -2147483646, length 22\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.selectWords(tmpmszzuk1m.java:43)\n\tat Problem.main(tmpmszzuk1m.java:52)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "/tmp/tmp_p1k5hkq.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < s.length()) {\n            if (count == n) {\n                result.add(s.substring(j, i));\n                count = 0;\n                j = i + 1;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n            } else {\n                count++;\n                i++;\n            }\n        }\n        if (count == n) {\n            result.add(s.substring(j, i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_d2s981.java:52)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                continue;\n            }\n            if (n == 0) {\n                result.add(s.substring(i, s.length()));\n                return result;\n            }\n            int count = 0;\n            for (int j = i; j < s.length(); j++) {\n                if (s.charAt(j) == ' ') {\n                    break;\n                }\n                if (s.charAt(j) == s.charAt(i)) {\n                    count++;\n                    if (count == n) {\n                        result.add(s.substring(i, j + 1));\n                        i = j + 1;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02csgaay.java:56)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) return words;\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                n--;\n                j++;\n            }\n            if (n == 0) {\n                words.add(s.substring(i, j));\n                i = j;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292952,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] str = s.split(\" \");\n        for (String word : str) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s3ceoxq.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] arr = s.split(\" \");\n        for (String word : arr) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkr0zaagk.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.length() == 0) return words;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            int count = 0;\n            for(int j = i; j < s.length(); j++) {\n                if(s.charAt(j) == ' ') break;\n                if(s.charAt(j) == s.charAt(i)) {\n                    count++;\n                    if(count == n) {\n                        words.add(s.substring(i, j));\n                        i = j;\n                        break;\n                    }\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0tav7f_b.java:46)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq09tle49.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq09tle49.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        String[] str = s.split(\" \");\n        for(String word : str) {\n            if(word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpm0690a.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> res = new ArrayList<>();\n        if(s.length() == 0) return res;\n        int i = 0;\n        while(i < s.length()) {\n            int j = i;\n            while(j < s.length() && n > 0) {\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if(n == 0) {\n                    res.add(s.substring(i, j));\n                    i = j;\n                    n = 0;\n                    break;\n                }\n                j++;\n                n--;\n            }\n            if(n == 0) break;\n            i++;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kgxleut.java:61)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) return words;\n        String[] str = s.split(\" \");\n        for (String word : str) {\n            if (word.length() == 0) continue;\n            int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n                if (word.charAt(i) == ' ') continue;\n                count++;\n                if (count == n) {\n                    words.add(word);\n                    break;\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm203apie.java:44)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                count++;\n            }\n            if (count == n) {\n                result.add(s.substring(i, i + 1));\n                count = 0;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy1zvjv17.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        HashMap<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == n) {\n                result.add(s.substring(entry.getKey() - 1, entry.getKey() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: begin 31, end 33, length 22\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.selectWords(tmpuv6s61pa.java:41)\n\tat Problem.main(tmpuv6s61pa.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmkw8y9r.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.length() == 0) return result;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "/tmp/tmppv72eibo.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "/tmp/tmp_p1k5hkq.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                count++;\n                if (count == n) {\n                    words.add(s.substring(i, i + n));\n                    count = 0;\n                }\n            } else {\n                count = 0;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "/tmp/tmpndnqyh6u.java:35: error: incompatible types: possible lossy conversion from long to int\n                    words.add(s.substring(i, i + n));\n                                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] arr = s.split(\" \");\n        for (String word : arr) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkr0zaagk.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        HashSet<String> set = new HashSet<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                continue;\n            }\n            StringBuilder sb = new StringBuilder();\n            for (int j = i; j < s.length(); j++) {\n                if (s.charAt(j) == ' ') {\n                    break;\n                }\n                sb.append(s.charAt(j));\n            }\n            String str = sb.toString();\n            if (set.contains(str)) {\n                continue;\n            }\n            set.add(str);\n            if (set.size() == n) {\n                result.add(str);\n                set.remove(str);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppefafogp.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        HashSet<String> set = new HashSet<String>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                continue;\n            }\n            StringBuilder sb = new StringBuilder();\n            for (int j = i; j < s.length(); j++) {\n                if (s.charAt(j) == ' ') {\n                    break;\n                }\n                sb.append(s.charAt(j));\n            }\n            String word = sb.toString();\n            if (set.contains(word)) {\n                continue;\n            }\n            set.add(word);\n            if (set.size() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc1faqgb7.java:54)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) return result;\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpmrnpuscf.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq09tle49.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                count++;\n                if (count == n) {\n                    result.add(s.substring(i, i + 1));\n                    count = 0;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv3zz6ygi.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpbhjpb36k.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < s.length()) {\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j - i + 1 == n) {\n                result.add(s.substring(i, j));\n                i = j + 1;\n            }\n            j++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: -2147483648\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.selectWords(tmp7kuxkyri.java:33)\n\tat Problem.main(tmp7kuxkyri.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < s.length()) {\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j == s.length()) {\n                break;\n            }\n            j++;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j == s.length()) {\n                break;\n            }\n            j++;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j == s.length()) {\n                break;\n            }\n            j++;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j == s.length()) {\n                break;\n            }\n            j++;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j == s.length()) {\n                break;\n            }\n            j++;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j == s.length()) {\n                break;\n            }\n            j++;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j == s.length()) {\n                break;\n            }\n            j++;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j == s.length()) {\n                break;\n            }\n            j++;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j == s.length\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "/tmp/tmp_6i2j9bo.java:92: error: ')' expected\n            if (j == s.length\n                             ^\n/tmp/tmp_6i2j9bo.java:93: error: illegal start of statement\n    }\n    ^\n/tmp/tmp_6i2j9bo.java:94: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "/tmp/tmptn144bl2.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        \n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            int count = 0;\n            for(int j = i; j < s.length(); j++) {\n                if(s.charAt(j) == ' ') break;\n                if(s.charAt(j) == s.charAt(i)) count++;\n                if(count == n) {\n                    words.add(s.substring(i, j));\n                    i = j;\n                    break;\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcbqfggka.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "/tmp/tmpjigy0rvb.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.length() == 0) return result;\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "/tmp/tmpvf7d6_7w.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        int start = 0;\n        int end = 0;\n        int count = 0;\n        while(end < s.length()) {\n            if(count == n) {\n                words.add(s.substring(start, end));\n                start = end;\n                count = 0;\n            }\n            if(s.charAt(end) == ' ') {\n                end++;\n            } else {\n                count++;\n                end++;\n            }\n        }\n        if(count == n) {\n            words.add(s.substring(start, end));\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6otm6dt.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsaln7j4n.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp347lqj38.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq09tle49.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] words_array = s.split(\" \");\n        for (String word : words_array) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqwkd3gr.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) return words;\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                } else {\n                    n--;\n                }\n            }\n            if (n == 0) {\n                words.add(s.substring(i, j));\n            }\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292955,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpmqghen7y.java:36: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) return words;\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == '\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "/tmp/tmpi19lnclp.java:96: error: illegal line end in character literal\n                if (s.charAt(j) == '\n                                   ^\n/tmp/tmpi19lnclp.java:98: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "/tmp/tmp4e19omcd.java:103: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        HashMap<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == n) {\n                result.add(s.substring(entry.getKey() - 1, entry.getKey() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: begin 31, end 33, length 22\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.selectWords(tmpuv6s61pa.java:41)\n\tat Problem.main(tmpuv6s61pa.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (cnt[s.charAt(i) - 'a'] == n) {\n                String word = \"\";\n                for (int j = i; j < s.length(); j++) {\n                    if (s.charAt(j) != ' ') {\n                        word += s.charAt(j);\n                    } else {\n                        break;\n                    }\n                }\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -20 out of bounds for length 26\n\tat Problem.selectWords(tmpqrp_khdo.java:30)\n\tat Problem.main(tmpqrp_khdo.java:48)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        int i = 0, j = 0;\n        while(i < s.length()) {\n            if(j < n) {\n                if(s.charAt(i) == ' ') {\n                    j++;\n                    i++;\n                    continue;\n                }\n                while(i < s.length() && s.charAt(i) != ' ') {\n                    i++;\n                }\n                if(i < s.length()) {\n                    i++;\n                }\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            while(i < s.length() && s.charAt(i) != ' ') {\n                i++;\n            }\n            if(i < s.length()) {\n                i++;\n            }\n            words.add(s.substring(j, i));\n            j = i;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8_5qvch.java:60)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for(String word : words) {\n            if(word.length() == n) result.add(word);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwf8x8gl0.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        \n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        \n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "/tmp/tmpg70bcqsl.java:36: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < s.length()) {\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j - i == n) {\n                result.add(s.substring(i, j));\n                i = j;\n            }\n            while (j < s.length() && s.charAt(j) == ' ') {\n                j++;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292955,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        String[] arr = s.split(\" \");\n        for (String word : arr) {\n            if (word.length() == 0) {\n                continue;\n            }\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == ' ') {\n                    continue;\n                }\n                count++;\n            }\n            if (count == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7fcu_qkn.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "/tmp/tmp7pyh8chg.java:36: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] str = s.split(\" \");\n        for (String word : str) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s3ceoxq.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp347lqj38.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while(i < s.length()) {\n            while(i < s.length() && count < n) {\n                if(s.charAt(i) == ' ') {\n                    i++;\n                    continue;\n                }\n                count++;\n                i++;\n            }\n            if(count == n) {\n                words.add(s.substring(j, i));\n                j = i;\n                count = 0;\n            }\n            while(i < s.length() && s.charAt(i) != ' ') {\n                i++;\n            }\n        }\n        if(count == n) {\n            words.add(s.substring(j, i));\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6pyb0f3.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.length() == 0) return result;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "/tmp/tmpn64ru2yq.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j - i > n) {\n                break;\n            }\n            count++;\n            if (count == n) {\n                result.add(s.substring(i, j));\n                count = 0;\n            }\n            i = j + 1;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: begin 5, end 4, length 22\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.selectWords(tmppvlbm8gv.java:46)\n\tat Problem.main(tmppvlbm8gv.java:54)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int nn = 0;\n        int count = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if (s.charAt(i) == '\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292940,
      "stdout": "",
      "stderr": "/tmp/tmp4cxk4nus.java:98: error: illegal line end in character literal\n            if (s.charAt(i) == '\n                               ^\n/tmp/tmp4cxk4nus.java:100: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == 0) {\n                continue;\n            }\n            int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n                if (word.charAt(i) == ' ') {\n                    continue;\n                }\n                count++;\n                if (count == n) {\n                    result.add(word);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjhvpe5de.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsaln7j4n.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int i = 0;\n        while(i < s.length()) {\n            int j = i;\n            while(j < s.length() && n > 0) {\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    n--;\n                }\n                j++;\n            }\n            if(n == 0) {\n                words.add(s.substring(i, j));\n                i = j;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292956,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        int i = 0;\n        while(i < s.length()) {\n            int j = i;\n            while(j < s.length() && s.charAt(j) != ' ') j++;\n            if(j - i < n) {\n                words.add(s.substring(i, j));\n                i = j;\n            } else {\n                i = j;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292956,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        String[] str = s.split(\" \");\n        for(String word : str) {\n            if(word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpm0690a.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> res = new ArrayList<String>();\n        if (s.isEmpty()) return res;\n        String[] str = s.split(\" \");\n        for (String s1 : str) {\n            if (s1.length() == n) res.add(s1);\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvnmpq11k.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) return words;\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292941,
      "stdout": "",
      "stderr": "/tmp/tmpoxwdyqur.java:102: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        int start = 0;\n        int end = 0;\n        while (end < s.length()) {\n            if (s.charAt(end) == ' ') {\n                end++;\n                continue;\n            }\n            start = end;\n            while (end < s.length() && s.charAt(end) != ' ') {\n                end++;\n            }\n            if (end - start == n) {\n                words.add(s.substring(start, end));\n            }\n            end++;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq56tmge3.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (cnt[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmphs2v0z7o.java:36: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        HashSet<String> set = new HashSet<String>();\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = i; j < s.length(); j++) {\n                String word = s.substring(i, j + 1);\n                if (word.length() == n) {\n                    set.add(word);\n                }\n            }\n        }\n        result.addAll(set);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8w5ctwno.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            while (i < s.length() && count < n) {\n                if (s.charAt(i) == ' ') {\n                    i++;\n                    continue;\n                }\n                count++;\n                i++;\n            }\n            if (count == n) {\n                result.add(s.substring(j, i));\n                j = i;\n                count = 0;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp68n8j1ld.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                continue;\n            }\n            int count = 0;\n            for (int j = i; j < s.length(); j++) {\n                if (s.charAt(j) == ' ') {\n                    break;\n                }\n                if (s.charAt(j) == s.charAt(i)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(s.substring(i, i + count));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7xqfzkjv.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] arr = s.split(\" \");\n        for (String word : arr) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkr0zaagk.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq09tle49.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                continue;\n            }\n            int count = 0;\n            for (int j = i; j < s.length(); j++) {\n                if (s.charAt(j) == ' ') {\n                    break;\n                }\n                if (s.charAt(j) == s.charAt(i)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                words.add(s.substring(i, i + count));\n                i += count - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5mo4c8c7.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty())\n            return words;\n        String[] str = s.split(\" \");\n        for(String s1: str) {\n            if(s1.length() == n)\n                words.add(s1);\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpus6t_vuh.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                continue;\n            }\n            int j = i;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            String word = s.substring(i, j);\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lssvt2a.java:46)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) return words;\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                n--;\n                j++;\n            }\n            if (n > 0) {\n                i = j;\n                continue;\n            }\n            String word = s.substring(i, j);\n            words.add(word);\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292957,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int i = 0;\n        int j = 0;\n        while(i < s.length()) {\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            int count = 0;\n            while(i < s.length() && count < n) {\n                if(s.charAt(i) == ' ') {\n                    i++;\n                    continue;\n                }\n                count++;\n                i++;\n            }\n            if(count == n) {\n                words.add(s.substring(j, i));\n                j = i;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkm3jszpg.java:52)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) return words;\n        int i = 0;\n        int j = 0;\n        while (i < s.length()) {\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j - i + 1 == n) {\n                words.add(s.substring(i, j));\n            }\n            while (j < s.length() && s.charAt(j) == ' ') {\n                j++;\n            }\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2rkaqvr9.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        String[] arr = s.split(\" \");\n        for (String word : arr) {\n            if (word.length() == 0) {\n                continue;\n            }\n            int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n                if (word.charAt(i) == ' ') {\n                    continue;\n                }\n                count++;\n                if (count == n) {\n                    words.add(word);\n                    break;\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qmt7p0k.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        int len = s.length();\n        int i = 0;\n        while(i < len) {\n            int j = i;\n            while(j < len && n > 0) {\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n                }\n                if(s.charAt(j) == ' ') {\n                    j++;\n                    n--;\n                    continue;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292942,
      "stdout": "",
      "stderr": "/tmp/tmpxmz_cwg8.java:102: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsaln7j4n.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) return words;\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    n--;\n                    j++;\n                    continue;\n                }\n                n--;\n                j++;\n            }\n            if (n == 0) {\n                String word = s.substring(i, j);\n                words.add(word);\n                i = j;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292958,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "/tmp/tmp8z3ab4kp.java:36: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        int start = 0, end = 0;\n        while(end < s.length()) {\n            while(end < s.length() && s.charAt(end) != ' ') end++;\n            String word = s.substring(start, end);\n            if(word.length() == n) words.add(word);\n            start = end + 1;\n            end = start;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1pwzzte.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    break;\n                }\n                n--;\n                j++;\n            }\n            if (j - i > 0) {\n                words.add(s.substring(i, j));\n            }\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292958,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int start = 0;\n        int end = 0;\n        while(end < s.length()) {\n            while(end < s.length() && s.charAt(end) != ' ') {\n                end++;\n            }\n            if(end - start >= n) {\n                words.add(s.substring(start, end));\n            }\n            while(end < s.length() && s.charAt(end) == ' ') {\n                end++;\n            }\n            start = end;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmper2e5kxh.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) return words;\n        String[] str = s.split(\" \");\n        for (String s1 : str) {\n            if (s1.length() == n) {\n                words.add(s1);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoq0w8gkx.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> res = new ArrayList<String>();\n        if(s.length() == 0) return res;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                res.add(s.substring(i, i + n));\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292943,
      "stdout": "",
      "stderr": "/tmp/tmpow9182jm.java:34: error: incompatible types: possible lossy conversion from long to int\n                res.add(s.substring(i, i + n));\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                String word = \"\";\n                for(int j = i; j < s.length(); j++) {\n                    if(s.charAt(j) == ' ') break;\n                    word += s.charAt(j);\n                }\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -20 out of bounds for length 26\n\tat Problem.selectWords(tmpg6h35fhi.java:30)\n\tat Problem.main(tmpg6h35fhi.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.isEmpty()) return result;\n        HashSet<String> set = new HashSet<>();\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c == ' ') continue;\n            if(set.contains(Character.toString(c))) continue;\n            set.add(Character.toString(c));\n            if(set.size() == n) {\n                result.add(s.substring(i, i + 1));\n                i++;\n                while(i < s.length() && s.charAt(i) == ' ') i++;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptgut85n8.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.isEmpty()) return result;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292944,
      "stdout": "",
      "stderr": "/tmp/tmpcjtprf6l.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        String[] arr = s.split(\" \");\n        for(String word : arr) {\n            if(word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292945,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8doczj8c.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        String[] words_arr = s.split(\" \");\n        for(String word: words_arr) {\n            if(word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292945,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0a4bj39.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.isEmpty())\n            return result;\n        int start = 0;\n        int end = 0;\n        int count = 0;\n        while(end < s.length()) {\n            if(s.charAt(end) == ' ') {\n                end++;\n                continue;\n            }\n            if(count == n) {\n                result.add(s.substring(start, end));\n                start = end;\n                count = 0;\n            }\n            count++;\n            end++;\n        }\n        if(count == n) {\n            result.add(s.substring(start, end));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292945,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9_9pqql.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        int len = s.length();\n        int count = 0;\n        for(int i = 0; i < len; i++) {\n            if(s.charAt(i) == ' ') {\n                count = 0;\n                continue;\n            }\n            if(count == n) {\n                words.add(s.substring(i, i + 1));\n                count = 0;\n            }\n            count++;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292945,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84llqooa.java:44)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty())\n            return words;\n        int i = 0;\n        while(i < s.length()){\n            int j = i;\n            while(j < s.length() && s.charAt(j) != ' '){\n                j++;\n            }\n            String word = s.substring(i, j);\n            if(word.length() == n){\n                words.add(word);\n            }\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292960,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                count++;\n                if (count == n) {\n                    result.add(s.substring(i, i + n));\n                    count = 0;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292945,
      "stdout": "",
      "stderr": "/tmp/tmpia06s5yb.java:35: error: incompatible types: possible lossy conversion from long to int\n                    result.add(s.substring(i, i + n));\n                                                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq09tle49.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for(String word: words) {\n            if(word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpma3m0naw.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        \n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        \n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        \n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "/tmp/tmpndhogtds.java:36: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        HashSet<String> set = new HashSet<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                continue;\n            }\n            StringBuilder sb = new StringBuilder();\n            sb.append(c);\n            for (int j = i + 1; j < s.length(); j++) {\n                c = s.charAt(j);\n                if (c == ' ') {\n                    break;\n                }\n                sb.append(c);\n            }\n            String word = sb.toString();\n            if (set.contains(word)) {\n                continue;\n            }\n            set.add(word);\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptyquhx4a.java:57)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] words_arr = s.split(\" \");\n        for (String word : words_arr) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv33r4srx.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpbhjpb36k.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        String[] str = s.split(\" \");\n        for(String word : str) {\n            if(word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpknpfin_7.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] words_arr = s.split(\" \");\n        for (String word : words_arr) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv33r4srx.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while(i < s.length()) {\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(count == n) {\n                j = i;\n                while(j < s.length() && s.charAt(j) != ' ') {\n                    j++;\n                }\n                words.add(s.substring(i, j));\n                i = j;\n                count = 0;\n            }\n            count++;\n            i++;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhwmmwwv.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                count++;\n                if (count == n) {\n                    result.add(s.substring(i, i + n));\n                    count = 0;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "/tmp/tmpg99sua0g.java:35: error: incompatible types: possible lossy conversion from long to int\n                    result.add(s.substring(i, i + n));\n                                                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpffcul7rr.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpyb41vgmq.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        for(int i = 0; i < s.length(); i++) {\n            char[] c = s.toCharArray();\n            int count = 0;\n            for(int j = i; j < s.length(); j++) {\n                if(c[j] == ' ') {\n                    count++;\n                    if(count == n) {\n                        words.add(s.substring(i, j));\n                        i = j;\n                        break;\n                    }\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8y25a7q4.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        String[] str = s.split(\" \");\n        for(String s1: str) {\n            if(s1.length() == 0) continue;\n            char[] c = s1.toCharArray();\n            int count = 0;\n            for(int i = 0; i < c.length; i++) {\n                if(c[i] == ' ') continue;\n                count++;\n                if(count == n) {\n                    words.add(s1);\n                    break;\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw30ynq_2.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            count++;\n            if(count == n) {\n                words.add(s.substring(i, i+1));\n                count = 0;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpicq8fxi_.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < s.length()) {\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j - i + 1 == n) {\n                words.add(s.substring(i, j));\n            }\n            while (j < s.length() && s.charAt(j) == ' ') {\n                j++;\n            }\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2axa8gyl.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        int start = 0;\n        int end = 0;\n        while (end < s.length()) {\n            while (end < s.length() && s.charAt(end) != ' ') {\n                end++;\n            }\n            if (end - start < n) {\n                start = end;\n            } else {\n                String word = s.substring(start, end);\n                if (word.length() == n) {\n                    words.add(word);\n                }\n                start = end;\n            }\n            end++;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5n1slum.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        \n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        \n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                String word = \"\";\n                for(int j = i; j < s.length(); j++) {\n                    if(s.charAt(j) == ' ') {\n                        if(word.length() > 0) {\n                            words.add(word);\n                            word = \"\";\n                        }\n                    } else {\n                        word += s.charAt(j);\n                    }\n                }\n                if(word.length() > 0) {\n                    words.add(word);\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -20 out of bounds for length 26\n\tat Problem.selectWords(tmpp6gmy0gx.java:31)\n\tat Problem.main(tmpp6gmy0gx.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty())\n            return words;\n        String[] str = s.split(\" \");\n        for(int i = 0; i < str.length; i++) {\n            String word = str[i];\n            if(word.length() == n)\n                words.add(word);\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5cn_137a.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsaln7j4n.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmkw8y9r.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) return result;\n        \n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') continue;\n            \n            int count = 0;\n            for (int j = i; j < s.length(); j++) {\n                if (s.charAt(j) == ' ') break;\n                if (s.charAt(j) == s.charAt(i)) count++;\n            }\n            if (count == n) result.add(s.substring(i, i + count));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjc1ffu_0.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int start = 0;\n        int end = 0;\n        int count = 0;\n        while (end < s.length()) {\n            while (end < s.length() && count < n) {\n                if (s.charAt(end) == ' ') {\n                    end++;\n                } else {\n                    count++;\n                    end++;\n                }\n            }\n            if (count == n) {\n                result.add(s.substring(start, end));\n                start = end;\n                count = 0;\n            }\n            end++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292949,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixmx1k36.java:52)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.length() == 0) {\n            return result;\n        }\n        \n        HashMap<Character, Integer> map = new HashMap<Character, Integer>();\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        \n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(map.containsKey(c) && map.get(c) == n) {\n                result.add(s.substring(i, i + 1));\n            }\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292949,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkk038vbc.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292949,
      "stdout": "",
      "stderr": "/tmp/tmpqb6ojjaa.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.length() == 0) return result;\n        int start = 0;\n        int end = 0;\n        while(end < s.length()) {\n            while(end < s.length() && s.charAt(end) != ' ') {\n                end++;\n            }\n            if(end - start < n) {\n                result.add(s.substring(start, end));\n                start = end;\n            }\n            end++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292949,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8kg8kzzs.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpyb41vgmq.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) return result;\n        String[] words = s.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.length() == n) result.add(word);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd8l25lv0.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        HashMap<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == n) {\n                result.add(s.substring(entry.getKey() - 1, entry.getKey() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: begin 31, end 33, length 22\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.selectWords(tmpuv6s61pa.java:41)\n\tat Problem.main(tmpuv6s61pa.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        HashMap<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == n) {\n                result.add(s.substring(entry.getKey() - 1, entry.getKey() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292939,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: begin 31, end 33, length 22\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.selectWords(tmpuv6s61pa.java:41)\n\tat Problem.main(tmpuv6s61pa.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "/tmp/tmpewoalta3.java:34: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        String[] str = s.split(\" \");\n        for(String word: str) {\n            if(word.length() == n) words.add(word);\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphkf4zdgz.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty())\n            return words;\n        String[] str = s.split(\" \");\n        for(String word : str) {\n            if(word.length() == n)\n                words.add(word);\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoolrx0zm.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        String[] arr = s.split(\" \");\n        for(String word : arr) {\n            if(word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9c78q5_.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < s.length()) {\n            while (i < s.length() && count < n) {\n                if (s.charAt(i) == ' ') {\n                    i++;\n                } else {\n                    count++;\n                    i++;\n                }\n            }\n            if (count == n) {\n                result.add(s.substring(j, i));\n                j = i;\n                count = 0;\n            }\n            while (i < s.length() && s.charAt(i) != ' ') {\n                i++;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz3m8cr22.java:54)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.isEmpty()) return result;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "/tmp/tmpsggm0y_3.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) {\n            return words;\n        }\n        String[] str = s.split(\" \");\n        for(String word : str) {\n            if(word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292951,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lg3hp0u.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) return words;\n        String[] str = s.split(\" \");\n        for (String word : str) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292951,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqzulklw6.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.isEmpty()) return result;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292951,
      "stdout": "",
      "stderr": "/tmp/tmpqrxs7rbo.java:34: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsaln7j4n.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] str = s.split(\" \");\n        for (String word : str) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s3ceoxq.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] cnt = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(cnt[s.charAt(i) - 'a'] == n) {\n                String word = \"\";\n                for(int j = i; j < s.length(); j++) {\n                    if(s.charAt(j) - 'a' < 26) {\n                        word += s.charAt(j);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292952,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -20 out of bounds for length 26\n\tat Problem.selectWords(tmp38us87uf.java:30)\n\tat Problem.main(tmp38us87uf.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        for(int i = 0; i < s.length(); i++) {\n            char[] chars = s.toCharArray();\n            int count = 0;\n            for(int j = i; j < s.length(); j++) {\n                if(chars[j] == ' ') {\n                    count++;\n                    if(count == n) {\n                        words.add(s.substring(i, j));\n                        i = j;\n                        break;\n                    }\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292952,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpstxdyram.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                continue;\n            }\n            int j = i;\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            String word = s.substring(i, j);\n            if (word.length() == n) {\n                words.add(word);\n            }\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292952,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9gqxpxhn.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                continue;\n            }\n            count++;\n            if (count == n) {\n                result.add(s.substring(i, i + n));\n                i += n - 1;\n                count = 0;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292952,
      "stdout": "",
      "stderr": "/tmp/tmpy0fneukq.java:37: error: incompatible types: possible lossy conversion from long to int\n                result.add(s.substring(i, i + n));\n                                            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292938,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmkw8y9r.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (cnt[s.charAt(i) - 'a'] == n) {\n                words.add(s.substring(i, i + n));\n                i += n - 1;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292952,
      "stdout": "",
      "stderr": "/tmp/tmpprsxnbwn.java:36: error: incompatible types: possible lossy conversion from long to int\n                words.add(s.substring(i, i + n));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] str = s.split(\" \");\n        for (int i = 0; i < str.length; i++) {\n            String word = str[i];\n            if (word.length() > n) {\n                continue;\n            }\n            int count = 0;\n            for (int j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') {\n                    continue;\n                }\n                count++;\n                if (count == n) {\n                    words.add(word);\n                    break;\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292952,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppfgsqvdy.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) result.add(word);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2efb5tf3.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] words_arr = s.split(\" \");\n        for (String word : words_arr) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaiasuyj0.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.isEmpty()) return result;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int count = 0;\n        while(i < s.length() && count < n) {\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i) == ' ') {\n                i++;\n                continue;\n            }\n            if(s.charAt(i\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292952,
      "stdout": "",
      "stderr": "/tmp/tmpyn3g9wii.java:97: error: ')' expected\n            if(s.charAt(i\n                         ^\n/tmp/tmpyn3g9wii.java:98: error: illegal start of statement\n    }\n    ^\n/tmp/tmpyn3g9wii.java:99: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        HashSet<String> set = new HashSet<String>();\n        for (int i = 0; i < s.length(); i++) {\n            String word = s.substring(i, i + 1);\n            if (set.contains(word)) {\n                continue;\n            }\n            set.add(word);\n            if (set.size() == n) {\n                words.add(word);\n                set.remove(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1_89tni.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] str = s.split(\" \");\n        for (int i = 0; i < str.length; i++) {\n            if (str[i].length() == n) {\n                words.add(str[i]);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9mzqy8u9.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) return words;\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                } else {\n                    n--;\n                }\n            }\n            if (n > 0) {\n                String word = s.substring(i, j);\n                words.add(word);\n                i = j;\n            } else {\n                i = j;\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292967,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        String[] arr = s.split(\" \");\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].length() == n) {\n                words.add(arr[i]);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0ui6ta4.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        HashSet<String> set = new HashSet<String>();\n        for (int i = 0; i < s.length(); i++) {\n            String word = s.substring(i, i + 1);\n            if (set.contains(word)) {\n                continue;\n            }\n            set.add(word);\n            if (set.size() == n) {\n                words.add(word);\n                set.remove(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1_89tni.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int i = 0;\n        while(i < s.length()){\n            int j = i;\n            while(j < s.length() && n > 0){\n                if(s.charAt(j) == ' ') n--;\n                j++;\n            }\n            if(n == 0) words.add(s.substring(i, j));\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292968,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.length() == 0) return words;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < s.length(); i++) {\n            if(count[s.charAt(i) - 'a'] == n) {\n                String word = \"\";\n                for(int j = i; j < s.length(); j++) {\n                    if(s.charAt(j) == ' ') {\n                        if(word.length() > 0) {\n                            words.add(word);\n                            word = \"\";\n                        }\n                    } else {\n                        word += s.charAt(j);\n                    }\n                }\n                if(word.length() > 0) {\n                    words.add(word);\n                }\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -20 out of bounds for length 26\n\tat Problem.selectWords(tmpco3r5gch.java:30)\n\tat Problem.main(tmpco3r5gch.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] words_arr = s.split(\" \");\n        for (String word : words_arr) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv33r4srx.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                continue;\n            }\n            int count = 0;\n            for (int j = i; j < s.length(); j++) {\n                if (s.charAt(j) == ' ') {\n                    break;\n                }\n                if (s.charAt(j) == s.charAt(i)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                words.add(s.substring(i, i + count));\n            }\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnz1b4wjv.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) return words;\n        int i = 0, j = 0;\n        while (i < s.length()) {\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j++;\n            }\n            if (j - i > n) break;\n            String word = s.substring(i, j);\n            if (!word.isEmpty()) words.add(word);\n            i = j + 1;\n            j = i;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn_itsni.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty()) return words;\n        String[] arr = s.split(\" \");\n        for(String word: arr) {\n            if(word.length() == n) words.add(word);\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpotakwjdg.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) return words;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') continue;\n            String word = \"\";\n            for (int j = i; j < s.length(); j++) {\n                if (s.charAt(j) == ' ') break;\n                word += s.charAt(j);\n            }\n            if (word.length() == n) words.add(word);\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi6ti1rad.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                if (s.charAt(j) == ' ') {\n                    j++;\n                    continue;\n                }\n                n--;\n                j++;\n            }\n            if (n == 0) {\n                words.add(s.substring(i, j));\n            }\n            i = j;\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292968,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n        if(s.isEmpty())\n            return words;\n        String[] str = s.split(\" \");\n        for(String word : str) {\n            if(word.length() == n)\n                words.add(word);\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoolrx0zm.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n        if(s.isEmpty()) return words;\n        String[] str = s.split(\" \");\n        for(String word : str) {\n            if(word.length() == n) words.add(word);\n        }\n        return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgb4zi8pz.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> select_words(\"Mary had a little lamb\", 4)\n    // [\"little\"]\n    // >>> select_words(\"Mary had a little lamb\", 3)\n    // [\"Mary\", \"lamb\"]\n    // >>> select_words(\"simple white space\", 2)\n    // []\n    // >>> select_words(\"Hello world\", 4)\n    // [\"world\"]\n    // >>> select_words(\"Uncle sam\", 3)\n    // [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                count++;\n                if (count == n) {\n                    result.add(s.substring(i, i + n));\n                    count = 0;\n                }\n            } else {\n                count = 0;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n",
      "timestamp": 1664292953,
      "stdout": "",
      "stderr": "/tmp/tmpdnwfuzac.java:35: error: incompatible types: possible lossy conversion from long to int\n                    result.add(s.substring(i, i + n));\n                                                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}