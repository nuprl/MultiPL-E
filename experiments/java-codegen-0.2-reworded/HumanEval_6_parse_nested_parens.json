{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
  "completions": [
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int max_depth = 0;\n        int cur_depth = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                cur_depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                cur_depth--;\n            }\n            if (cur_depth > max_depth) {\n                max_depth = cur_depth;\n            }\n            i++;\n        }\n        result.add(max_depth);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int max_depth = 0;\n        int curr_depth = 0;\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                curr_depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                curr_depth--;\n            }\n            if (curr_depth > max_depth) {\n                max_depth = curr_depth;\n                start = i;\n            }\n            if (curr_depth == 0 && i != 0 && paren_string.charAt(i - 1) == '(') {\n                end = i;\n                result.add(Long.valueOf(end - start));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j++;\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(i);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long index = stack.pop();\n                result.add(index);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        if (!stack.isEmpty()) {\n            result.add(stack.size());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j);\n                j++;\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int index = 0;\n        while (index < paren_string.length()) {\n            if (paren_string.charAt(index) == '(') {\n                stack.push(index);\n            } else if (paren_string.charAt(index) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(index - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n            index++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result.add(stack.size());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) return result;\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(i);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                j++;\n            } else if (paren_string.charAt(i) == ')') {\n                j--;\n            } else if (paren_string.charAt(i) == ' ') {\n                if (j == 0) {\n                    result.add(k);\n                    k = 0;\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(new Long(i));\n            } else if (c == ')') {\n                Long index = stack.pop();\n                result.add(index.longValue());\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.peek() == 1L) {\n                    stack.pop();\n                } else {\n                    stack.push(1L);\n                }\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.peek() == 1) {\n                    stack.pop();\n                } else {\n                    stack.push(1L);\n                }\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            }\n            else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                }\n                else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int depth = 0;\n        int start = 0;\n        int end = 0;\n        int max_depth = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                depth--;\n                if (depth == 0) {\n                    result.add(i - start);\n                    start = i + 1;\n                    end = i;\n                    max_depth = Math.max(max_depth, depth);\n                }\n            }\n        }\n        result.add(paren_string.length() - start);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                stack.pop();\n            }\n        }\n        if(stack.size() == 0) {\n            result.add(0L);\n        } else {\n            result.add(stack.size());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        int max_depth = 0;\n        int cur_depth = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                cur_depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                cur_depth--;\n            }\n            if (cur_depth > max_depth) {\n                max_depth = cur_depth;\n            }\n            i++;\n        }\n        result.add(max_depth);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int max_nesting = 0;\n        int current_nesting = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                current_nesting++;\n            } else if (paren_string.charAt(i) == ')') {\n                current_nesting--;\n            }\n            if (current_nesting > max_nesting) {\n                max_nesting = current_nesting;\n            }\n            i++;\n        }\n        result.add(max_nesting);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int level = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(level);\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level = stack.pop();\n            }\n        }\n        result.add(level);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string == null || paren_string.isEmpty()) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            int j = i;\n            while (j < paren_string.length() && paren_string.charAt(j) == ' ') {\n                j++;\n            }\n            if (j < paren_string.length()) {\n                if (paren_string.charAt(j) == '(') {\n                    result.add(Long.valueOf(j - i));\n                    i = j;\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                stack.pop();\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        int level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(i - level);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long index = stack.pop();\n                result.add(index);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(i - level);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                stack.pop();\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n        }\n        result.add(j);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        if (!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        int index = 0;\n        int level = 0;\n        while(index < paren_string.length()) {\n            if(paren_string.charAt(index) == '(') {\n                level++;\n            } else if(paren_string.charAt(index) == ')') {\n                level--;\n            }\n            index++;\n            if(level == 0) {\n                result.add(index - level);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        result.add(j);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                level++;\n            } else if(paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if(level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        result.add(j);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j++;\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int max_depth = 0;\n        int depth = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                depth--;\n            }\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n            i++;\n        }\n        result.add(max_depth);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string == null || paren_string.isEmpty()) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result.add(stack.peek());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = k;\n                k = i;\n            }\n        }\n        result.add(k);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level < 0) {\n                throw new IllegalArgumentException(\"Invalid parentheses string\");\n            }\n            if (level == 0) {\n                result.add(i - level);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int len = paren_string.length();\n        int i = 0;\n        int level = 0;\n        while (i < len) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n        }\n        result.add(level);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int level = 0;\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n                start = i;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n                end = i;\n            }\n            if (level == 0) {\n                result.add(end - start);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(i);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) return result;\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                level++;\n            } else if(paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if(level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        result.add(j);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        int level = 0;\n        int start = 0;\n        int end = 0;\n        while (end < paren_string.length()) {\n            if (paren_string.charAt(end) == '(') {\n                level++;\n            } else if (paren_string.charAt(end) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(end - start);\n                start = end + 1;\n            }\n            end++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int paren_count = 0;\n        int paren_level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                paren_count++;\n            } else if (paren_string.charAt(i) == ')') {\n                paren_count--;\n            }\n            if (paren_count == 0) {\n                paren_level++;\n                if (paren_level > result.size()) {\n                    result.add(0L);\n                }\n                result.set(paren_level - 1, result.get(paren_level - 1) + 1);\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int max_depth = 0;\n        int cur_depth = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                cur_depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                cur_depth--;\n            }\n            if (cur_depth > max_depth) {\n                max_depth = cur_depth;\n            }\n            i++;\n        }\n        result.add(max_depth);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) return result;\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long depth = stack.pop();\n                result.add(depth);\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int max_nesting = 0;\n        int current_nesting = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                current_nesting++;\n            } else if (paren_string.charAt(i) == ')') {\n                current_nesting--;\n            }\n            if (current_nesting > max_nesting) {\n                max_nesting = current_nesting;\n            }\n            i++;\n        }\n        result.add(max_nesting);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(i);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j - i);\n                i = j + 1;\n            } else {\n                j++;\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int level = 0;\n        int start = 0;\n        int end = 0;\n        int max_level = 0;\n        int max_start = 0;\n        int max_end = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n                if (level > max_level) {\n                    max_level = level;\n                    max_start = start;\n                    max_end = end;\n                }\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n                if (level == 0) {\n                    result.add(max_end - max_start + 1);\n                    start = max_start + 1;\n                    end = max_end;\n                    max_level = 0;\n                    max_start = 0;\n                    max_end = 0;\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.size() > 0) {\n                    stack.pop();\n                } else {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long index = stack.pop();\n                result.add(index);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j);\n                j++;\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                stack.pop();\n                if(stack.isEmpty()) {\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            int j = i;\n            while (j < paren_string.length() && paren_string.charAt(j) == ' ') {\n                j++;\n            }\n            if (j == paren_string.length()) {\n                result.add(0L);\n                break;\n            }\n            int k = j;\n            while (k < paren_string.length() && paren_string.charAt(k) != ' ') {\n                k++;\n            }\n            if (k == paren_string.length()) {\n                result.add(0L);\n                break;\n            }\n            String group = paren_string.substring(j, k);\n            result.add(Long.parseLong(group));\n            i = k;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else {\n                stack.pop();\n                if(stack.isEmpty()) {\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            int j = i;\n            while (j < paren_string.length() && paren_string.charAt(j) == ' ') {\n                j++;\n            }\n            if (j == i) {\n                i++;\n                continue;\n            }\n            String group = paren_string.substring(i, j);\n            if (group.charAt(0) == '(' && group.charAt(group.length() - 1) == ')') {\n                result.add(group.length());\n            }\n            i = j;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                stack.pop();\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.size() > 0) {\n                    stack.pop();\n                }\n            }\n        }\n        if(stack.size() > 0) {\n            result.add(stack.size());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) return result;\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                level++;\n            }\n            if(paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if(level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        result.add(j);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.peek());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                stack.pop();\n                if(stack.isEmpty()) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int max_nesting = 0;\n        int cur_nesting = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                cur_nesting++;\n            } else if (paren_string.charAt(i) == ')') {\n                cur_nesting--;\n            }\n            if (cur_nesting > max_nesting) {\n                max_nesting = cur_nesting;\n            }\n            i++;\n        }\n        result.add(max_nesting);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int index = 0;\n        while (index < paren_string.length()) {\n            char c = paren_string.charAt(index);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n            index++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string == null || paren_string.length() == 0) return result;\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long depth = stack.pop();\n                result.add(depth);\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(!stack.isEmpty()) {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                level++;\n            } else if(paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if(level == 0) {\n                result.add(j);\n                j++;\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                Long depth = stack.pop();\n                result.add(depth);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long index = stack.pop();\n                result.add(index);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(stack.size());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            int j = i;\n            while (j < paren_string.length() && paren_string.charAt(j) == ' ') {\n                j++;\n            }\n            if (j == paren_string.length()) {\n                result.add(0L);\n                break;\n            }\n            int k = j;\n            while (k < paren_string.length() && paren_string.charAt(k) != ' ') {\n                k++;\n            }\n            if (k == paren_string.length()) {\n                result.add(0L);\n                break;\n            }\n            String s = paren_string.substring(j, k);\n            if (s.equals(\"()\")) {\n                result.add(0L);\n            } else {\n                result.add(1L);\n            }\n            i = k;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int paren_count = 0;\n        int left_paren_count = 0;\n        int right_paren_count = 0;\n        int max_nesting = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                left_paren_count++;\n            } else if (paren_string.charAt(i) == ')') {\n                right_paren_count++;\n            } else if (paren_string.charAt(i) == '(') {\n                left_paren_count--;\n                right_paren_count--;\n                paren_count++;\n                if (left_paren_count < 0 || right_paren_count < 0) {\n                    throw new IllegalArgumentException(\"Invalid parentheses string\");\n                }\n                if (left_paren_count > max_nesting) {\n                    max_nesting = left_paren_count;\n                }\n            }\n        }\n        if (left_paren_count != 0 || right_paren_count != 0) {\n            throw new IllegalArgumentException(\"Invalid parentheses string\");\n        }\n        if (max_nesting > 0) {\n            result.add(max_nesting);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int depth = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(depth);\n                depth++;\n            } else if (c == ')') {\n                depth = stack.pop();\n            }\n        }\n        result.add(depth);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.peek() == 1L) {\n                    stack.pop();\n                } else {\n                    stack.push(0L);\n                }\n            }\n        }\n        for(int i = 0; i < stack.size(); i++) {\n            result.add(stack.pop());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int depth = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                depth--;\n            }\n            if (depth == 0) {\n                result.add(i);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(stack.size());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}