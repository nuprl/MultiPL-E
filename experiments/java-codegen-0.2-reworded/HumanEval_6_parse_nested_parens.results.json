{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpm8dsjr6c.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp34wni3bf.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int max_depth = 0;\n        int cur_depth = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                cur_depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                cur_depth--;\n            }\n            if (cur_depth > max_depth) {\n                max_depth = cur_depth;\n            }\n            i++;\n        }\n        result.add(max_depth);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpil54hwys.java:30: error: incompatible types: int cannot be converted to Long\n        result.add(max_depth);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0v6bilk3.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpm8dsjr6c.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int max_depth = 0;\n        int curr_depth = 0;\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                curr_depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                curr_depth--;\n            }\n            if (curr_depth > max_depth) {\n                max_depth = curr_depth;\n                start = i;\n            }\n            if (curr_depth == 0 && i != 0 && paren_string.charAt(i - 1) == '(') {\n                end = i;\n                result.add(Long.valueOf(end - start));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7cg__kg8.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpkc7icne2.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpkc7icne2.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp7imxw5y1.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp7imxw5y1.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j++;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp0t5ijnlz.java:27: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(i);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpzy6bjg_5.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpzy6bjg_5.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmphrxtv6lk.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmphrxtv6lk.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long index = stack.pop();\n                result.add(index);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpw4xu87k7.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp7bzszxw4.java:30: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        if (!stack.isEmpty()) {\n            result.add(stack.size());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpt4_kd045.java:34: error: incompatible types: int cannot be converted to Long\n            result.add(stack.size());\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp5up8cizc.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j);\n                j++;\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpegstwwj9.java:26: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int index = 0;\n        while (index < paren_string.length()) {\n            if (paren_string.charAt(index) == '(') {\n                stack.push(index);\n            } else if (paren_string.charAt(index) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(index - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n            index++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp16me55j0.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(index);\n                           ^\n/tmp/tmp16me55j0.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(index - 1);\n                                     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result.add(stack.size());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpcejulvm7.java:32: error: incompatible types: int cannot be converted to Long\n            result.add(stack.size());\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) return result;\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprpojmzhi.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp73a9e70n.java:28: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpelg4oeto.java:27: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(i);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpzy_ykow6.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpzy_ykow6.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpk06xk49u.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                j++;\n            } else if (paren_string.charAt(i) == ')') {\n                j--;\n            } else if (paren_string.charAt(i) == ' ') {\n                if (j == 0) {\n                    result.add(k);\n                    k = 0;\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpygqsfexn.java:41: error: incompatible types: int cannot be converted to Long\n                    result.add(k);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmp913x7a_0.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp913x7a_0.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpoeqvxhcb.java:23: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpoeqvxhcb.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(new Long(i));\n            } else if (c == ')') {\n                Long index = stack.pop();\n                result.add(index.longValue());\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpno4hyjir.java:31)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpyt4gwycq.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpyt4gwycq.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.peek() == 1L) {\n                    stack.pop();\n                } else {\n                    stack.push(1L);\n                }\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm22ku3m2.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpllwg1x_f.java:25: error: incompatible types: int cannot be converted to Long\n                result.add(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.peek() == 1) {\n                    stack.pop();\n                } else {\n                    stack.push(1L);\n                }\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_6_an0p.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpla21wzb7.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_5v358v.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprd2yh5vc.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp7imxw5y1.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp7imxw5y1.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            }\n            else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                }\n                else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7q9uw4jm.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpsni50dhz.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpsni50dhz.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int depth = 0;\n        int start = 0;\n        int end = 0;\n        int max_depth = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                depth--;\n                if (depth == 0) {\n                    result.add(i - start);\n                    start = i + 1;\n                    end = i;\n                    max_depth = Math.max(max_depth, depth);\n                }\n            }\n        }\n        result.add(paren_string.length() - start);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpep7wb9c1.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(i - start);\n                                 ^\n/tmp/tmpep7wb9c1.java:33: error: incompatible types: int cannot be converted to Long\n        result.add(paren_string.length() - start);\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                stack.pop();\n            }\n        }\n        if(stack.size() == 0) {\n            result.add(0L);\n        } else {\n            result.add(stack.size());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpuz1dwh5o.java:30: error: incompatible types: int cannot be converted to Long\n            result.add(stack.size());\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprd2yh5vc.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpm8dsjr6c.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsw9oya3o.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprd2yh5vc.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        int max_depth = 0;\n        int cur_depth = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                cur_depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                cur_depth--;\n            }\n            if (cur_depth > max_depth) {\n                max_depth = cur_depth;\n            }\n            i++;\n        }\n        result.add(max_depth);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpnajmyxto.java:30: error: incompatible types: int cannot be converted to Long\n        result.add(max_depth);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpryvuak53.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpz5j5vup8.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpm8dsjr6c.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpjlfgglc5.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpjlfgglc5.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int max_nesting = 0;\n        int current_nesting = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                current_nesting++;\n            } else if (paren_string.charAt(i) == ')') {\n                current_nesting--;\n            }\n            if (current_nesting > max_nesting) {\n                max_nesting = current_nesting;\n            }\n            i++;\n        }\n        result.add(max_nesting);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpcod0s6d9.java:30: error: incompatible types: int cannot be converted to Long\n        result.add(max_nesting);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpwno4os_0.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpk60niwdk.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpk60niwdk.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int level = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(level);\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level = stack.pop();\n            }\n        }\n        result.add(level);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmpkc4fbogf.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(level);\n                           ^\n/tmp/tmpkc4fbogf.java:23: error: incompatible types: Long cannot be converted to int\n                level = stack.pop();\n                                 ^\n/tmp/tmpkc4fbogf.java:26: error: incompatible types: int cannot be converted to Long\n        result.add(level);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string == null || paren_string.isEmpty()) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmpqagma_bg.java:23: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpqagma_bg.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmph4508_y6.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpkc7icne2.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpkc7icne2.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp7imxw5y1.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp7imxw5y1.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            int j = i;\n            while (j < paren_string.length() && paren_string.charAt(j) == ' ') {\n                j++;\n            }\n            if (j < paren_string.length()) {\n                if (paren_string.charAt(j) == '(') {\n                    result.add(Long.valueOf(j - i));\n                    i = j;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmper3_msj0.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmph26rn9xn.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmph26rn9xn.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprfj0dcfd.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmpejx4141p.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpejx4141p.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                stack.pop();\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo9e377pv.java:30)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmpqq5zljpx.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        int level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(i - level);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmp8lptj3a7.java:26: error: incompatible types: int cannot be converted to Long\n                result.add(i - level);\n                             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long index = stack.pop();\n                result.add(index);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpw4xu87k7.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(i - level);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmpq_o2ihs9.java:26: error: incompatible types: int cannot be converted to Long\n                result.add(i - level);\n                             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_5v358v.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                stack.pop();\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmp43sz6wyz.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n        }\n        result.add(j);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmpqp6z8onf.java:30: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\n/tmp/tmpqp6z8onf.java:34: error: incompatible types: int cannot be converted to Long\n        result.add(j);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprd2yh5vc.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcx2ei7cl.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpjlfgglc5.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpjlfgglc5.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnuxlwrgm.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        if (!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmponeuvgnl.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmp5z4ki92s.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp5z4ki92s.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpyt4gwycq.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpyt4gwycq.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmpfdlb2v3o.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpfdlb2v3o.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmpkbt77p4z.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpkbt77p4z.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmp25b1q245.java:23: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp25b1q245.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp7imxw5y1.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp7imxw5y1.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwk1kwy11.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        int index = 0;\n        int level = 0;\n        while(index < paren_string.length()) {\n            if(paren_string.charAt(index) == '(') {\n                level++;\n            } else if(paren_string.charAt(index) == ')') {\n                level--;\n            }\n            index++;\n            if(level == 0) {\n                result.add(index - level);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmp3j8kx_1d.java:29: error: incompatible types: int cannot be converted to Long\n                result.add(index - level);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpm8dsjr6c.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpsni50dhz.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpsni50dhz.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmphrxtv6lk.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmphrxtv6lk.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmpx9ier12d.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpx9ier12d.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        result.add(j);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmpg7ji0ko7.java:26: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\n/tmp/tmpg7ji0ko7.java:31: error: incompatible types: int cannot be converted to Long\n        result.add(j);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                level++;\n            } else if(paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if(level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        result.add(j);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmpagruyj2x.java:29: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\n/tmp/tmpagruyj2x.java:34: error: incompatible types: int cannot be converted to Long\n        result.add(j);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j++;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp0t5ijnlz.java:27: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpyt4gwycq.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpyt4gwycq.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int max_depth = 0;\n        int depth = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                depth--;\n            }\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n            i++;\n        }\n        result.add(max_depth);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmp6osp8jh9.java:30: error: incompatible types: int cannot be converted to Long\n        result.add(max_depth);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string == null || paren_string.isEmpty()) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result.add(stack.peek());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsuif6sho.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzcio3ws2.java:31)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = k;\n                k = i;\n            }\n        }\n        result.add(k);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmphz6uj2e3.java:28: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\n/tmp/tmphz6uj2e3.java:33: error: incompatible types: int cannot be converted to Long\n        result.add(k);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp7imxw5y1.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp7imxw5y1.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpjlfgglc5.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpjlfgglc5.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpjlfgglc5.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpjlfgglc5.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level < 0) {\n                throw new IllegalArgumentException(\"Invalid parentheses string\");\n            }\n            if (level == 0) {\n                result.add(i - level);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmpr49hl6r7.java:29: error: incompatible types: int cannot be converted to Long\n                result.add(i - level);\n                             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmpairvq5zc.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int len = paren_string.length();\n        int i = 0;\n        int level = 0;\n        while (i < len) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n        }\n        result.add(level);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmploodl9go.java:27: error: incompatible types: int cannot be converted to Long\n        result.add(level);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int level = 0;\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n                start = i;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n                end = i;\n            }\n            if (level == 0) {\n                result.add(end - start);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmpk379q10k.java:31: error: incompatible types: int cannot be converted to Long\n                result.add(end - start);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(i);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpzy_ykow6.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpzy_ykow6.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) return result;\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                level++;\n            } else if(paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if(level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        result.add(j);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmptdf_u63w.java:27: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\n/tmp/tmptdf_u63w.java:32: error: incompatible types: int cannot be converted to Long\n        result.add(j);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpm8dsjr6c.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        int level = 0;\n        int start = 0;\n        int end = 0;\n        while (end < paren_string.length()) {\n            if (paren_string.charAt(end) == '(') {\n                level++;\n            } else if (paren_string.charAt(end) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(end - start);\n                start = end + 1;\n            }\n            end++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "/tmp/tmpffygit4l.java:29: error: incompatible types: int cannot be converted to Long\n                result.add(end - start);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbr7pegm4.java:34)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy8erlcs4.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy8erlcs4.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int paren_count = 0;\n        int paren_level = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                paren_count++;\n            } else if (paren_string.charAt(i) == ')') {\n                paren_count--;\n            }\n            if (paren_count == 0) {\n                paren_level++;\n                if (paren_level > result.size()) {\n                    result.add(0L);\n                }\n                result.set(paren_level - 1, result.get(paren_level - 1) + 1);\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyqfs6hty.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int max_depth = 0;\n        int cur_depth = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                cur_depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                cur_depth--;\n            }\n            if (cur_depth > max_depth) {\n                max_depth = cur_depth;\n            }\n            i++;\n        }\n        result.add(max_depth);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpil54hwys.java:30: error: incompatible types: int cannot be converted to Long\n        result.add(max_depth);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpk06xk49u.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvh41xnjl.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result.add(0L);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdj56rpzo.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_5v358v.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) return result;\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmpcog2sza1.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpcog2sza1.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long depth = stack.pop();\n                result.add(depth);\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmp1ncez_c9.java:23: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int max_nesting = 0;\n        int current_nesting = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                current_nesting++;\n            } else if (paren_string.charAt(i) == ')') {\n                current_nesting--;\n            }\n            if (current_nesting > max_nesting) {\n                max_nesting = current_nesting;\n            }\n            i++;\n        }\n        result.add(max_nesting);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpcod0s6d9.java:30: error: incompatible types: int cannot be converted to Long\n        result.add(max_nesting);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_5v358v.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(i);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpzy_ykow6.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpzy_ykow6.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_5v358v.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmpfdlb2v3o.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpfdlb2v3o.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string == null || paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvjcabi5g.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmpbu35kv6c.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpk60niwdk.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpk60niwdk.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpyt4gwycq.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpyt4gwycq.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmpa6a4qyp0.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpa6a4qyp0.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j - i);\n                i = j + 1;\n            } else {\n                j++;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmpv1x8nt4i.java:26: error: incompatible types: int cannot be converted to Long\n                result.add(j - i);\n                             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int level = 0;\n        int start = 0;\n        int end = 0;\n        int max_level = 0;\n        int max_start = 0;\n        int max_end = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n                if (level > max_level) {\n                    max_level = level;\n                    max_start = start;\n                    max_end = end;\n                }\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n                if (level == 0) {\n                    result.add(max_end - max_start + 1);\n                    start = max_start + 1;\n                    end = max_end;\n                    max_level = 0;\n                    max_start = 0;\n                    max_end = 0;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmpmn8nwu18.java:33: error: incompatible types: int cannot be converted to Long\n                    result.add(max_end - max_start + 1);\n                                                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk_nc91im.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpm8dsjr6c.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_5v358v.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpk60niwdk.java:22: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpk60niwdk.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.size() > 0) {\n                    stack.pop();\n                } else {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmpt5z8blxr.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmpwpsxgxxs.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpwpsxgxxs.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmp2_zp_aik.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp2_zp_aik.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long index = stack.pop();\n                result.add(index);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpw4xu87k7.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j);\n                j++;\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpegstwwj9.java:26: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                stack.pop();\n                if(stack.isEmpty()) {\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmp0kqlgscc.java:24: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "/tmp/tmpg4jcxony.java:30: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpm8dsjr6c.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            int j = i;\n            while (j < paren_string.length() && paren_string.charAt(j) == ' ') {\n                j++;\n            }\n            if (j == paren_string.length()) {\n                result.add(0L);\n                break;\n            }\n            int k = j;\n            while (k < paren_string.length() && paren_string.charAt(k) != ' ') {\n                k++;\n            }\n            if (k == paren_string.length()) {\n                result.add(0L);\n                break;\n            }\n            String group = paren_string.substring(j, k);\n            result.add(Long.parseLong(group));\n            i = k;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NumberFormatException: For input string: \"(()())\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:697)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat Problem.parseNestedParens(tmpb1re_2ge.java:35)\n\tat Problem.main(tmpb1re_2ge.java:41)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else {\n                stack.pop();\n                if(stack.isEmpty()) {\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmpptnufirp.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "/tmp/tmpyt4gwycq.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpyt4gwycq.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            int j = i;\n            while (j < paren_string.length() && paren_string.charAt(j) == ' ') {\n                j++;\n            }\n            if (j == i) {\n                i++;\n                continue;\n            }\n            String group = paren_string.substring(i, j);\n            if (group.charAt(0) == '(' && group.charAt(group.length() - 1) == ')') {\n                result.add(group.length());\n            }\n            i = j;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmpv9594a3j.java:28: error: incompatible types: int cannot be converted to Long\n                result.add(group.length());\n                                       ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpk06xk49u.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                stack.pop();\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpls_9dhb9.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "/tmp/tmp5z4ki92s.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp5z4ki92s.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.size() > 0) {\n                    stack.pop();\n                }\n            }\n        }\n        if(stack.size() > 0) {\n            result.add(stack.size());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmp1zxy1do9.java:30: error: incompatible types: int cannot be converted to Long\n            result.add(stack.size());\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) return result;\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                level++;\n            }\n            if(paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if(level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        result.add(j);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmpm0te5rvm.java:28: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\n/tmp/tmpm0te5rvm.java:33: error: incompatible types: int cannot be converted to Long\n        result.add(j);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmpspr5d09g.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpspr5d09g.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\tat Problem.parseNestedParens(tmpd4ikx0v0.java:26)\n\tat Problem.main(tmpd4ikx0v0.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                stack.pop();\n                if(stack.isEmpty()) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmpy13dq2lx.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpy13dq2lx.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int max_nesting = 0;\n        int cur_nesting = 0;\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                cur_nesting++;\n            } else if (paren_string.charAt(i) == ')') {\n                cur_nesting--;\n            }\n            if (cur_nesting > max_nesting) {\n                max_nesting = cur_nesting;\n            }\n            i++;\n        }\n        result.add(max_nesting);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmpz5c3bqdh.java:30: error: incompatible types: int cannot be converted to Long\n        result.add(max_nesting);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmp7imxw5y1.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp7imxw5y1.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_5v358v.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpm8dsjr6c.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprd2yh5vc.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2ep3ho0.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "/tmp/tmpz5j5vup8.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int index = 0;\n        while (index < paren_string.length()) {\n            char c = paren_string.charAt(index);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n            index++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzf6wephy.java:34)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string == null || paren_string.length() == 0) return result;\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long depth = stack.pop();\n                result.add(depth);\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmpg4wlepmw.java:21: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(!stack.isEmpty()) {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmpn9cvr2q8.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (level == 0) {\n                result.add(j);\n                j = i;\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmp8xmgu1vi.java:29: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        int level = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                level++;\n            } else if(paren_string.charAt(i) == ')') {\n                level--;\n            }\n            i++;\n            if(level == 0) {\n                result.add(j);\n                j++;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmp7y_hpk4n.java:30: error: incompatible types: int cannot be converted to Long\n                result.add(j);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpsa2s_l0l.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpsa2s_l0l.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                Long depth = stack.pop();\n                result.add(depth);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpl26pu5xt.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                Long index = stack.pop();\n                result.add(index);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpw4xu87k7.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(stack.size());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpz2uc1ut_.java:30: error: incompatible types: int cannot be converted to Long\n            result.add(stack.size());\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            int j = i;\n            while (j < paren_string.length() && paren_string.charAt(j) == ' ') {\n                j++;\n            }\n            if (j == paren_string.length()) {\n                result.add(0L);\n                break;\n            }\n            int k = j;\n            while (k < paren_string.length() && paren_string.charAt(k) != ' ') {\n                k++;\n            }\n            if (k == paren_string.length()) {\n                result.add(0L);\n                break;\n            }\n            String s = paren_string.substring(j, k);\n            if (s.equals(\"()\")) {\n                result.add(0L);\n            } else {\n                result.add(1L);\n            }\n            i = k;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgbfnreud.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmp9dzgbh20.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp9dzgbh20.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (paren_string.length() == 0) {\n            return result;\n        }\n        int paren_count = 0;\n        int left_paren_count = 0;\n        int right_paren_count = 0;\n        int max_nesting = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                left_paren_count++;\n            } else if (paren_string.charAt(i) == ')') {\n                right_paren_count++;\n            } else if (paren_string.charAt(i) == '(') {\n                left_paren_count--;\n                right_paren_count--;\n                paren_count++;\n                if (left_paren_count < 0 || right_paren_count < 0) {\n                    throw new IllegalArgumentException(\"Invalid parentheses string\");\n                }\n                if (left_paren_count > max_nesting) {\n                    max_nesting = left_paren_count;\n                }\n            }\n        }\n        if (left_paren_count != 0 || right_paren_count != 0) {\n            throw new IllegalArgumentException(\"Invalid parentheses string\");\n        }\n        if (max_nesting > 0) {\n            result.add(max_nesting);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpa6n6mra4.java:44: error: incompatible types: int cannot be converted to Long\n            result.add(max_nesting);\n                       ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int depth = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(depth);\n                depth++;\n            } else if (c == ')') {\n                depth = stack.pop();\n            }\n        }\n        result.add(depth);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpjhct7v5v.java:21: error: incompatible types: int cannot be converted to Long\n                stack.push(depth);\n                           ^\n/tmp/tmpjhct7v5v.java:24: error: incompatible types: Long cannot be converted to int\n                depth = stack.pop();\n                                 ^\n/tmp/tmpjhct7v5v.java:27: error: incompatible types: int cannot be converted to Long\n        result.add(depth);\n                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                Long count = stack.pop();\n                result.add(count);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_5v358v.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.peek() == 1L) {\n                    stack.pop();\n                } else {\n                    stack.push(0L);\n                }\n            }\n        }\n        for(int i = 0; i < stack.size(); i++) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcfn2diqv.java:34)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpui3wd4qk.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.add(1L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpk70y2h94.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmp6z_y93t6.java:20: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmp6z_y93t6.java:23: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(1L);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpgammmmws.java:26: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(i - 1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "/tmp/tmpspr5d09g.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpspr5d09g.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i - 1);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else {\n                if (stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmprg1xcb93.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        Stack<Long> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpltdnwlr_.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int depth = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                depth++;\n            } else if (paren_string.charAt(i) == ')') {\n                depth--;\n            }\n            if (depth == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpfagvho00.java:24: error: incompatible types: int cannot be converted to Long\n                result.add(i);\n                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n        if(paren_string.length() == 0) {\n            return result;\n        }\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(!stack.isEmpty()) {\n            result.add(stack.size());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpvlup4md2.java:33: error: incompatible types: int cannot be converted to Long\n            result.add(stack.size());\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(1L);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpk06xk49u.java:25: error: incompatible types: int cannot be converted to Long\n                    result.add(stack.size());\n                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if(paren_string.charAt(i) == ')') {\n                if(stack.isEmpty()) {\n                    result.add(i);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "/tmp/tmpgiu9oq9q.java:19: error: incompatible types: int cannot be converted to Long\n                stack.push(i);\n                           ^\n/tmp/tmpgiu9oq9q.java:22: error: incompatible types: int cannot be converted to Long\n                    result.add(i);\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Stack<Long> stack = new Stack<Long>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(1L);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(0L);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnuxlwrgm.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}