name: HumanEval_153_Strongest_Extension
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You will be given the name of a class (a string) and an\
  \ array array list of extensions.\n    // The extensions are to be used to load\
  \ additional classes to the class. The\n    // strength of the extension is as follows:\
  \ Let CAP be the number of the uppercase\n    // letters in the extension's name,\
  \ and let SM be the number of lowercase letters \n    // in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n    // You should find the strongest\
  \ extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the array list.\n    // For example,\
  \ if you are given \"Slices\" as the class and an array array list of the\n    //\
  \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return\
  \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n   \
  \ // (its strength is -1).\n    // Example:\n    // >>> Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC'])\n    // 'my_class.AA'\n    public static String StrongestExtension(String\
  \ class_name, ArrayList<String> extensions) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
  Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
  , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
  Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\"\
  , (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
  t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
  , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
  t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
  __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
  , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
  okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
  YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
  \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
  Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
  _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
  _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
  671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        int[] strength = new int[extensions.size()];\n        int i\
    \ = 0;\n        for(String extension : extensions) {\n            strength[i]\
    \ = Character.getNumericValue(extension.charAt(0)) - Character.getNumericValue(extension.charAt(1));\n\
    \            i++;\n        }\n        Arrays.sort(strength);\n        int max\
    \ = strength[0];\n        int index = 0;\n        for(i = 1; i < strength.length;\
    \ i++) {\n            if(strength[i] == max) {\n                index = i;\n \
    \           }\n            else {\n                break;\n            }\n   \
    \     }\n        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        sb.append(extensions.get(index));\n      \
    \  return sb.toString();", "        String[] str_arr = class_name.split(\"\\\\\
    .\");\n        int strength = 0;\n        String strongest = \"\";\n        for\
    \ (String extension : extensions) {\n            String[] ext_arr = extension.split(\"\
    \\\\.\");\n            int ext_cap = 0, ext_sm = 0;\n            for (String ext\
    \ : ext_arr) {\n                if (Character.isUpperCase(ext.charAt(0))) {\n\
    \                    ext_cap++;\n                } else {\n                  \
    \  ext_sm++;\n                }\n            }\n            strength = ext_cap\
    \ - ext_sm;\n            if (strength > strength) {\n                strength\
    \ = ext_cap - ext_sm;\n                strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;", "        int[] strength\
    \ = new int[extensions.size()];\n        int i = 0;\n        for (String extension\
    \ : extensions) {\n            int cap = 0;\n            int sm = 0;\n       \
    \     for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \            i++;\n        }\n        Arrays.sort(strength);\n        StringBuilder\
    \ sb = new StringBuilder();\n        sb.append(class_name);\n        sb.append(\"\
    .\");\n        for (i = 0; i < strength.length; i++) {\n            if (i == strength.length\
    \ - 1) {\n                sb.append(extensions.get(i));\n                break;\n\
    \            }\n            if (strength[i] == strength[i + 1]) {\n          \
    \      sb.append(extensions.get(i));\n                sb.append(\".\");\n    \
    \        }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        sb.append(class_name);\n        int strength\
    \ = 0;\n        for (String ext : extensions) {\n            int cap = 0;\n  \
    \          int sm = 0;\n            for (int i = 0; i < ext.length(); i++) {\n\
    \                if (Character.isUpperCase(ext.charAt(i))) {\n               \
    \     cap++;\n                } else {\n                    sm++;\n          \
    \      }\n            }\n            strength += (cap - sm);\n        }\n    \
    \    for (String ext : extensions) {\n            if (ext.length() == strength)\
    \ {\n                sb.append(\".\").append(ext);\n                break;\n \
    \           }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        sb.append(class_name);\n        int strength\
    \ = 0;\n        for (String ext : extensions) {\n            int cap = 0;\n  \
    \          int sm = 0;\n            for (char c : ext.toCharArray()) {\n     \
    \           if (Character.isUpperCase(c)) {\n                    cap++;\n    \
    \            } else {\n                    sm++;\n                }\n        \
    \    }\n            strength += (cap - sm);\n        }\n        for (String ext\
    \ : extensions) {\n            if (ext.equals(ext.toUpperCase())) {\n        \
    \        sb.append(\".\").append(ext);\n                break;\n            }\n\
    \        }\n        return sb.toString();", "        String[] class_name_split\
    \ = class_name.split(\"\\\\.\");\n        String class_name_base = class_name_split[0];\n\
    \        String class_name_extension = class_name_split[1];\n        int class_name_extension_strength\
    \ = 0;\n        for(int i = 0; i < class_name_extension.length(); i++) {\n   \
    \         if(Character.isUpperCase(class_name_extension.charAt(i))) {\n      \
    \          class_name_extension_strength += 1;\n            }\n            else\
    \ {\n                class_name_extension_strength += 2;\n            }\n    \
    \    }\n        int index = 0;\n        for(int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int extension_strength\
    \ = 0;\n            for(int j = 0; j < extension.length(); j++) {\n          \
    \      if(Character.isUpperCase(extension.charAt(j))) {\n                    extension_strength\
    \ += 1;\n                }\n                else {\n                    extension_strength\
    \ += 2;\n                }\n            }\n            if(extension_strength >\
    \ class_name_extension_strength) {\n                index = i;\n             \
    \   class_name_extension_strength = extension_strength;\n            }\n     \
    \   }\n        return class_name_base + \".\" + extensions.get(index);", "   \
    \     int strength = 0;\n        String extension = \"\";\n        for (String\
    \ ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n   \
    \         for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        int strength = 0;\n        String extension = \"\";\n        for (String\
    \ ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n   \
    \         for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        String result = \"\";\n        int max_strength = 0;\n        String max_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            int strength\
    \ = 0;\n            int cap = 0;\n            int sm = 0;\n            for (int\
    \ i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength = cap - sm;\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                max_extension = extension;\n            }\n        }\n      \
    \  result = class_name + \".\" + max_extension;\n        return result;", "  \
    \      String[] class_name_array = class_name.split(\"\\\\.\");\n        String\
    \ class_name_without_extension = class_name_array[0];\n        String extension\
    \ = class_name_array[1];\n        int strength = 0;\n        int index = 0;\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String[] extension_array\
    \ = extensions.get(i).split(\"\\\\.\");\n            int extension_strength =\
    \ 0;\n            int extension_index = 0;\n            for (int j = 0; j < extension_array.length;\
    \ j++) {\n                if (Character.isUpperCase(extension_array[j].charAt(0)))\
    \ {\n                    extension_strength += 1;\n                } else {\n\
    \                    extension_strength += 2;\n                }\n           \
    \     extension_index++;\n            }\n            if (extension_strength >\
    \ strength) {\n                strength = extension_strength;\n              \
    \  index = i;\n            }\n        }\n        String result = class_name_without_extension\
    \ + \".\" + extensions.get(index);\n        return result;", "        int[] strength\
    \ = new int[extensions.size()];\n        int max_strength = 0;\n        int max_index\
    \ = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            String\
    \ extension = extensions.get(i);\n            int cap = 0;\n            int sm\
    \ = 0;\n            for (int j = 0; j < extension.length(); j++) {\n         \
    \       if (Character.isUpperCase(extension.charAt(j))) {\n                  \
    \  cap++;\n                } else {\n                    sm++;\n             \
    \   }\n            }\n            strength[i] = cap - sm;\n            if (strength[i]\
    \ > max_strength) {\n                max_strength = strength[i];\n           \
    \     max_index = i;\n            }\n        }\n        return class_name + \"\
    .\" + extensions.get(max_index);", "        int strength = 0;\n        String\
    \ extension = \"\";\n        for (String ext : extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n            if (strength > extension.length())\
    \ {\n                extension = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        int strength = 0;\n        String\
    \ extension = \"\";\n        for(String e : extensions) {\n            int cap\
    \ = 0;\n            int sm = 0;\n            for(char c : e.toCharArray()) {\n\
    \                if(Character.isUpperCase(c)) {\n                    cap++;\n\
    \                }\n                else {\n                    sm++;\n      \
    \          }\n            }\n            strength += (cap - sm);\n        }\n\
    \        for(String e : extensions) {\n            if(e.equals(extension)) {\n\
    \                continue;\n            }\n            if(strength == e.length())\
    \ {\n                extension = e;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        String[] class_name_split = class_name.split(\"\
    \\\\.\");\n        String class_name_base = class_name_split[0];\n        String\
    \ class_name_extension = class_name_split[1];\n        int class_name_extension_strength\
    \ = 0;\n        for (String extension : extensions) {\n            String[] extension_split\
    \ = extension.split(\"\\\\.\");\n            String extension_base = extension_split[0];\n\
    \            String extension_extension = extension_split[1];\n            int\
    \ extension_extension_strength = 0;\n            if (class_name_base.equals(extension_base))\
    \ {\n                extension_extension_strength = class_name_extension.compareTo(extension_extension);\n\
    \            }\n            if (class_name_extension.equals(extension_extension))\
    \ {\n                extension_extension_strength = class_name_extension_strength;\n\
    \            }\n            if (extension_extension_strength > class_name_extension_strength)\
    \ {\n                class_name_extension_strength = extension_extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + class_name_extension\
    \ + \".\" + class_name_extension_strength;", "        String[] class_name_split\
    \ = class_name.split(\"\\\\.\");\n        String class_name_no_extension = class_name_split[0];\n\
    \        String extension_name = class_name_split[1];\n        int strength =\
    \ 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            String[]\
    \ extension_name_split = extensions.get(i).split(\"\\\\.\");\n            int\
    \ extension_name_strength = 0;\n            for (int j = 0; j < extension_name_split.length;\
    \ j++) {\n                if (Character.isUpperCase(extension_name_split[j].charAt(0)))\
    \ {\n                    extension_name_strength += 1;\n                } else\
    \ {\n                    extension_name_strength += 2;\n                }\n  \
    \          }\n            if (extension_name_strength > strength) {\n        \
    \        strength = extension_name_strength;\n                extension_name =\
    \ extensions.get(i);\n            }\n        }\n        return class_name_no_extension\
    \ + \".\" + extension_name;", "        int[] strength = new int[extensions.size()];\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            int cap = 0;\n            int sm = 0;\n  \
    \          for (int j = 0; j < extension.length(); j++) {\n                if\
    \ (Character.isUpperCase(extension.charAt(j))) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength[i] = cap - sm;\n        }\n        Arrays.sort(strength);\n\
    \        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        for (int i = 0; i < strength.length; i++) {\n            if (i > 0 &&\
    \ strength[i] == strength[i - 1]) {\n                continue;\n            }\n\
    \            sb.append(\".\");\n            sb.append(extensions.get(i));\n  \
    \      }\n        return sb.toString();", "        String[] str = class_name.split(\"\
    \\\\.\");\n        int[] strength = new int[str.length];\n        for (int i =\
    \ 0; i < str.length; i++) {\n            strength[i] = str[i].length() - str[i].replaceAll(\"\
    [a-z]\", \"\").length();\n        }\n        int max = 0;\n        String max_ext\
    \ = \"\";\n        for (int i = 0; i < extensions.size(); i++) {\n           \
    \ String ext = extensions.get(i);\n            int s = 0;\n            for (int\
    \ j = 0; j < ext.length(); j++) {\n                if (ext.charAt(j) >= 'A' &&\
    \ ext.charAt(j) <= 'Z') {\n                    s++;\n                }\n     \
    \       }\n            if (s > max) {\n                max = s;\n            \
    \    max_ext = ext;\n            }\n        }\n        return class_name + \"\
    .\" + max_ext;", "        int[] strengths = new int[extensions.size()];\n    \
    \    for (int i = 0; i < extensions.size(); i++) {\n            strengths[i] =\
    \ getStrength(extensions.get(i));\n        }\n        Arrays.sort(strengths);\n\
    \        return class_name + \".\" + extensions.get(strengths[strengths.length\
    \ - 1]);", "        String[] str = class_name.split(\"\\\\.\");\n        int cap\
    \ = 0, sm = 0;\n        for (int i = 0; i < str.length; i++) {\n            if\
    \ (Character.isUpperCase(str[i].charAt(0))) {\n                cap++;\n      \
    \      } else {\n                sm++;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        sb.append(class_name);\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            String ext = extensions.get(i);\n\
    \            int c = 0, s = 0;\n            for (int j = 0; j < ext.length();\
    \ j++) {\n                if (Character.isUpperCase(ext.charAt(j))) {\n      \
    \              c++;\n                } else {\n                    s++;\n    \
    \            }\n            }\n            if (c - s > 0 && c - s > cap - sm)\
    \ {\n                sb.append(\".\").append(ext);\n                break;\n \
    \           }\n        }\n        return sb.toString();", "        int[] strength\
    \ = new int[extensions.size()];\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int cap\
    \ = 0;\n            int sm = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                if (Character.isUpperCase(extension.charAt(j))) {\n\
    \                    cap++;\n                }\n                if (Character.isLowerCase(extension.charAt(j)))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength[i] = cap - sm;\n        }\n        Arrays.sort(strength);\n       \
    \ int index = 0;\n        for (int i = 0; i < strength.length; i++) {\n      \
    \      if (strength[i] == strength[index]) {\n                index++;\n     \
    \       }\n        }\n        String result = class_name + \".\" + extensions.get(index);\n\
    \        return result;", "        String[] str = class_name.split(\"\\\\.\");\n\
    \        StringBuilder sb = new StringBuilder();\n        sb.append(str[0]);\n\
    \        for (int i = 1; i < str.length; i++) {\n            String s = str[i];\n\
    \            int cap = 0;\n            int sm = 0;\n            for (int j = 0;\
    \ j < s.length(); j++) {\n                if (Character.isUpperCase(s.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            int strength = cap - sm;\n\
    \            if (strength == 0) {\n                sb.append(\".\").append(s);\n\
    \            } else if (strength > 0) {\n                sb.append(\".\").append(s);\n\
    \            } else {\n                for (int j = 0; j < extensions.size();\
    \ j++) {\n                    if (extensions.get(j).equals(s)) {\n           \
    \             sb.append(\".\").append(s);\n                        break;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ sb.toString();", "        int[] strength = new int[extensions.size()];\n   \
    \     int i = 0;\n        for(String extension : extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            for(char c : extension.toCharArray())\
    \ {\n                if(Character.isUpperCase(c)) {\n                    cap++;\n\
    \                }\n                else {\n                    sm++;\n      \
    \          }\n            }\n            strength[i] = cap - sm;\n           \
    \ i++;\n        }\n        Arrays.sort(strength);\n        StringBuilder sb =\
    \ new StringBuilder();\n        sb.append(class_name);\n        sb.append(\".\"\
    );\n        for(int j = 0; j < strength.length; j++) {\n            if(j != 0\
    \ && strength[j] == strength[j - 1]) {\n                continue;\n          \
    \  }\n            sb.append(extensions.get(j));\n            sb.append(\".\");\n\
    \        }\n        return sb.toString();", "        String result = \"\";\n \
    \       int strength = 0;\n        int i = 0;\n        int j = 0;\n        int\
    \ k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n       \
    \ int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n   \
    \     int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n\
    \        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n\
    \        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n\
    \        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n\
    \        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n\
    \        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n\
    \        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n\
    \        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n\
    \        int y = 0;\n        int z = 0;\n        int aa = 0;\n        int ab =\
    \ 0;\n        int ac = 0;\n        int ad = 0;\n        int ae = 0;\n        int\
    \ af = 0;\n        int ag = 0;\n        int ah = 0;\n        int ai = 0;\n   \
    \     int aj = 0;\n        int ak = 0;\n        int al = 0;\n        int am =\
    \ 0;\n        int an = 0;\n        int ao = 0;\n        int ap = 0;\n        int\
    \ aq = 0;\n        int ar = 0;\n        int as = 0;\n        int at = 0;\n   \
    \     int au = 0;\n        int av = 0;\n        int aw = 0;\n        int ax =\
    \ 0;\n        int ay = 0;\n        int az = 0;\n        int", "        int[] strengths\
    \ = new int[extensions.size()];\n        int max = 0;\n        for (int i = 0;\
    \ i < extensions.size(); i++) {\n            strengths[i] = getStrength(extensions.get(i));\n\
    \            if (strengths[i] > max) {\n                max = strengths[i];\n\
    \            }\n        }\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            if (strengths[i] == max) {\n                return class_name\
    \ + \".\" + extensions.get(i);\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(0);", "        String result = \"\";\n        int[]\
    \ strength = new int[extensions.size()];\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int cap\
    \ = 0;\n            int sm = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                if (Character.isUpperCase(extension.charAt(j))) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength[i] = cap - sm;\n     \
    \   }\n        Arrays.sort(strength);\n        for (int i = 0; i < strength.length;\
    \ i++) {\n            if (strength[i] == strength[i + 1]) {\n                continue;\n\
    \            }\n            result = class_name + \".\" + extensions.get(i) +\
    \ \".\";\n            break;\n        }\n        return result;", "        String[]\
    \ str_arr = class_name.split(\"\\\\.\");\n        String class_name_final = str_arr[0];\n\
    \        int strength = 0;\n        int strength_final = 0;\n        for (int\
    \ i = 1; i < str_arr.length; i++) {\n            String str = str_arr[i];\n  \
    \          int cap = 0;\n            int sm = 0;\n            for (int j = 0;\
    \ j < str.length(); j++) {\n                if (Character.isUpperCase(str.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength = strength +\
    \ (cap - sm);\n        }\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            String str = extensions.get(i);\n            int cap = 0;\n \
    \           int sm = 0;\n            for (int j = 0; j < str.length(); j++) {\n\
    \                if (Character.isUpperCase(str.charAt(j))) {\n               \
    \     cap++;\n                } else {\n                    sm++;\n          \
    \      }\n            }\n            if (cap - sm > strength_final) {\n      \
    \          strength_final = cap - sm;\n                class_name_final = class_name_final\
    \ + \".\" + str;\n            }\n        }\n        return class_name_final;",
  "        int[] strength = new int[extensions.size()];\n        int max = 0;\n  \
    \      int max_index = 0;\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            String ext = extensions.get(i);\n            int cap = 0;\n \
    \           int sm = 0;\n            for (int j = 0; j < ext.length(); j++) {\n\
    \                if (Character.isUpperCase(ext.charAt(j))) {\n               \
    \     cap++;\n                } else {\n                    sm++;\n          \
    \      }\n            }\n            strength[i] = cap - sm;\n            if (strength[i]\
    \ > max) {\n                max = strength[i];\n                max_index = i;\n\
    \            }\n        }\n        String ret = class_name + \".\" + extensions.get(max_index);\n\
    \        return ret;", "        StringBuilder sb = new StringBuilder();\n    \
    \    sb.append(class_name).append(\".\");\n        int max_strength = 0;\n   \
    \     String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            String[] parts = extension.split(\"\
    _\");\n            for (String part : parts) {\n                if (Character.isUpperCase(part.charAt(0)))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength += 2;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        sb.append(strongest_extension);\n\
    \        return sb.toString();", "        int[] strengths = new int[extensions.size()];\n\
    \        int i = 0;\n        for (String extension : extensions) {\n         \
    \   strengths[i] = extension.length() - extension.replaceAll(\"[a-z]\", \"\").length();\n\
    \            i++;\n        }\n        Arrays.sort(strengths);\n        String\
    \ result = class_name + \".\" + extensions.get(strengths.length - 1);\n      \
    \  return result;", "        String[] class_name_split = class_name.split(\"\\\
    \\.\");\n        String class_name_base = class_name_split[0];\n        String\
    \ class_name_extension = class_name_split[1];\n        int strength = 0;\n   \
    \     String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            String[] extension_split = extension.split(\"\\\\.\");\n    \
    \        String extension_base = extension_split[0];\n            String extension_extension\
    \ = extension_split[1];\n            int extension_strength = 0;\n           \
    \ if (class_name_base.equals(extension_base)) {\n                extension_strength\
    \ = class_name_extension.length() - extension_extension.length();\n          \
    \  } else if (class_name_base.equals(extension_extension)) {\n               \
    \ extension_strength = class_name_extension.length() - extension_base.length();\n\
    \            } else if (class_name_extension.equals(extension_base)) {\n     \
    \           extension_strength = class_name_extension.length() - extension_extension.length();\n\
    \            } else if (class_name_extension.equals(extension_extension)) {\n\
    \                extension_strength = class_name_extension.length() - extension_base.length();\n\
    \            }\n            if (extension_strength > strength) {\n           \
    \     strength = extension_strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        int[] strengths = new int[extensions.size()];\n        int i = 0;\n   \
    \     for(String ext : extensions) {\n            strengths[i] = Character.isUpperCase(ext.charAt(0))\
    \ - Character.isLowerCase(ext.charAt(0));\n            i++;\n        }\n     \
    \   Arrays.sort(strengths);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        sb.append(extensions.get(strengths[strengths.length-1]));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        for(String ext : extensions) {\n    \
    \        int cap = 0;\n            int sm = 0;\n            for(char c : ext.toCharArray())\
    \ {\n                if(Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            int strength = (cap - sm);\n            if(strength >\
    \ 0) {\n                sb.append(\".\").append(ext);\n            }\n       \
    \ }\n        return sb.toString();", "        String class_name_ext = class_name;\n\
    \        int strength = 0;\n        for (String extension : extensions) {\n  \
    \          int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n        }\n        for (String\
    \ extension : extensions) {\n            if (extension.equals(class_name_ext))\
    \ {\n                continue;\n            }\n            if (extension.length()\
    \ > class_name_ext.length()) {\n                class_name_ext = extension;\n\
    \            }\n        }\n        return class_name + \".\" + class_name_ext;",
  "        int[] strengths = new int[extensions.size()];\n        int max = 0;\n \
    \       int max_index = 0;\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            strengths[i] = 0;\n            for (int j = 0; j < extensions.get(i).length();\
    \ j++) {\n                if (extensions.get(i).charAt(j) >= 'A' && extensions.get(i).charAt(j)\
    \ <= 'Z') {\n                    strengths[i] += 1;\n                }\n     \
    \       }\n            strengths[i] -= (strengths[i] / 2);\n            if (strengths[i]\
    \ > max) {\n                max = strengths[i];\n                max_index = i;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(max_index);",
  "        int[] strength = new int[extensions.size()];\n        for (int i = 0; i\
    \ < extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            int cap = 0;\n            int sm = 0;\n            for (int j = 0;\
    \ j < extension.length(); j++) {\n                if (Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \        }\n        Arrays.sort(strength);\n        int index = 0;\n        for\
    \ (int i = 0; i < strength.length; i++) {\n            if (strength[i] == strength[index])\
    \ {\n                index++;\n            } else {\n                break;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       sb.append(class_name);\n        sb.append(\".\");\n        sb.append(extensions.get(index));\n\
    \        return sb.toString();", "        String[] str = class_name.split(\"\\\
    \\.\");\n        int[] strength = new int[str.length];\n        for(int i = 0;\
    \ i < str.length; i++) {\n            strength[i] = str[i].length() - str[i].replaceAll(\"\
    [a-z]\", \"\").length();\n        }\n        int max = 0;\n        String max_ext\
    \ = \"\";\n        for(int i = 0; i < extensions.size(); i++) {\n            String\
    \ ext = extensions.get(i);\n            int[] ext_strength = new int[str.length];\n\
    \            for(int j = 0; j < str.length; j++) {\n                ext_strength[j]\
    \ = ext.length() - ext.replaceAll(\"[a-z]\", \"\").length();\n            }\n\
    \            int sum = 0;\n            for(int j = 0; j < str.length; j++) {\n\
    \                sum += Math.min(strength[j], ext_strength[j]);\n            }\n\
    \            if(sum > max) {\n                max = sum;\n                max_ext\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;",
  "        int strength = 0;\n        String extension = \"\";\n        for (String\
    \ ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n   \
    \         for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        int[] strength = new int[extensions.size()];\n        for (int i = 0; i\
    \ < extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            int cap = 0, sm = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                if (Character.isUpperCase(extension.charAt(j))) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength[i] = cap - sm;\n     \
    \   }\n        Arrays.sort(strength);\n        int max = strength[0];\n      \
    \  int index = 0;\n        for (int i = 1; i < strength.length; i++) {\n     \
    \       if (strength[i] == max) {\n                index++;\n            } else\
    \ {\n                break;\n            }\n        }\n        StringBuilder sb\
    \ = new StringBuilder();\n        sb.append(class_name);\n        sb.append(\"\
    .\");\n        sb.append(extensions.get(index));\n        return sb.toString();",
  "        String[] str_arr = class_name.split(\"\\\\.\");\n        int strength =\
    \ 0;\n        String strongest = \"\";\n        for (String s : extensions) {\n\
    \            String[] str_arr_s = s.split(\"\\\\.\");\n            int cap = 0;\n\
    \            int sm = 0;\n            for (String s_s : str_arr_s) {\n       \
    \         if (s_s.equals(\"\")) continue;\n                if (Character.isUpperCase(s_s.charAt(0)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > strongest.length()) {\n                strongest =\
    \ s;\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        for (String extension : extensions) {\n            int cap = 0;\n   \
    \         int sm = 0;\n            for (char c : extension.toCharArray()) {\n\
    \                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            sb.append(\".\");\n            sb.append(extension);\n\
    \            if (cap - sm > 0) {\n                sb.append(\".\");\n        \
    \        sb.append(extension);\n            }\n        }\n        return sb.toString();",
  "        int[] strength = new int[extensions.size()];\n        int[] index = new\
    \ int[extensions.size()];\n        for(int i = 0; i < extensions.size(); i++)\
    \ {\n            String ext = extensions.get(i);\n            int cap = 0;\n \
    \           int sm = 0;\n            for(int j = 0; j < ext.length(); j++) {\n\
    \                if(Character.isUpperCase(ext.charAt(j))) {\n                \
    \    cap++;\n                } else {\n                    sm++;\n           \
    \     }\n            }\n            strength[i] = cap - sm;\n            index[i]\
    \ = i;\n        }\n        Arrays.sort(strength);\n        Arrays.sort(index);\n\
    \        StringBuilder sb = new StringBuilder();\n        sb.append(class_name).append(\"\
    .\").append(extensions.get(index[0]));\n        return sb.toString();", "    \
    \    int[] strength = new int[extensions.size()];\n        int max = 0;\n    \
    \    for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            int cap = 0, sm = 0;\n            for (int\
    \ j = 0; j < extension.length(); j++) {\n                if (Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \            if (strength[i] > max) {\n                max = strength[i];\n  \
    \          }\n        }\n        int index = 0;\n        for (int i = 0; i < strength.length;\
    \ i++) {\n            if (strength[i] == max) {\n                index = i;\n\
    \            }\n        }\n        String extension = extensions.get(index);\n\
    \        return class_name + \".\" + extension;", "        int[] strength = new\
    \ int[extensions.size()];\n        int i = 0;\n        for (String extension :\
    \ extensions) {\n            int cap = 0, sm = 0;\n            for (char c : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength[i] = cap - sm;\n            i++;\n        }\n\
    \        Arrays.sort(strength);\n        int index = 0;\n        for (int strength_i\
    \ : strength) {\n            if (strength_i == strength[index]) {\n          \
    \      index++;\n            } else {\n                break;\n            }\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        sb.append(extensions.get(index));\n      \
    \  return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        int strength = 0;\n        for(String\
    \ ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n   \
    \         for(int i = 0; i < ext.length(); i++) {\n                if(Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \        }\n        for(String ext : extensions) {\n            if(ext.length()\
    \ == strength) {\n                sb.append(\".\").append(ext);\n            \
    \    break;\n            }\n        }\n        return sb.toString();", "     \
    \   int[] strength = new int[extensions.size()];\n        int max = 0;\n     \
    \   int max_index = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n\
    \            String extension = extensions.get(i);\n            int cap = 0;\n\
    \            int sm = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                if (Character.isUpperCase(extension.charAt(j))) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength[i] = cap - sm;\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(max_index);", "        String[] class_name_split =\
    \ class_name.split(\"\\\\.\");\n        String class_name_base = class_name_split[0];\n\
    \        String class_name_extension = class_name_split[1];\n        int class_name_extension_strength\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            String[] extension_split = extension.split(\"\\\
    \\.\");\n            String extension_base = extension_split[0];\n           \
    \ String extension_extension = extension_split[1];\n            int extension_extension_strength\
    \ = 0;\n            if (class_name_extension.equals(extension_extension)) {\n\
    \                extension_extension_strength = -1;\n            } else {\n  \
    \              extension_extension_strength = Math.abs(class_name_extension.length()\
    \ - extension_extension.length());\n            }\n            if (class_name_extension_strength\
    \ < extension_extension_strength) {\n                class_name_extension_strength\
    \ = extension_extension_strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name_base + \".\" + strongest_extension;",
  "        String[] class_name_array = class_name.split(\"\\\\.\");\n        String\
    \ class_name_without_extension = class_name_array[0];\n        String class_name_extension\
    \ = class_name_array[1];\n        int strength = 0;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            int cap\
    \ = 0;\n            int sm = 0;\n            String[] extension_array = extension.split(\"\
    \\\\.\");\n            String extension_without_extension = extension_array[0];\n\
    \            String extension_extension = extension_array[1];\n            if\
    \ (class_name_extension.equals(extension_extension)) {\n                cap =\
    \ class_name_extension.length();\n                sm = extension_extension.length();\n\
    \            } else {\n                cap = class_name_extension.length();\n\
    \                sm = extension_extension.length();\n            }\n         \
    \   strength = cap - sm;\n            if (strength > strength) {\n           \
    \     strength = strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name_without_extension + \".\"\
    \ + strongest_extension;", "        int[] strength = new int[extensions.size()];\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            int cap = 0;\n            int sm = 0;\n  \
    \          for (int j = 0; j < extension.length(); j++) {\n                if\
    \ (Character.isUpperCase(extension.charAt(j))) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength[i] = cap - sm;\n        }\n        Arrays.sort(strength);\n\
    \        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        for (int i = 0; i < strength.length; i++)\
    \ {\n            if (i != 0 && strength[i] == strength[i - 1]) {\n           \
    \     continue;\n            }\n            sb.append(extensions.get(i));\n  \
    \          sb.append(\".\");\n        }\n        return sb.toString();", "   \
    \     int[] strengths = new int[extensions.size()];\n        int maxStrength =\
    \ 0;\n        String strongestExtension = \"\";\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int strength\
    \ = 0;\n            for (int j = 0; j < extension.length(); j++) {\n         \
    \       if (Character.isUpperCase(extension.charAt(j))) {\n                  \
    \  strength += 1;\n                } else {\n                    strength += 2;\n\
    \                }\n            }\n            strengths[i] = strength;\n    \
    \        if (strength > maxStrength) {\n                maxStrength = strength;\n\
    \                strongestExtension = extension;\n            }\n        }\n \
    \       return class_name + \".\" + strongestExtension;", "        String[] str\
    \ = class_name.split(\"\\\\.\");\n        int cap = 0, sm = 0;\n        for(String\
    \ s : str) {\n            if(s.length() > 1) {\n                if(s.substring(0,\
    \ 1).equals(s.substring(0, 1).toUpperCase())) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n        }\n        int strength = cap - sm;\n        String result\
    \ = \"\";\n        for(String s : extensions) {\n            if(s.length() > 1)\
    \ {\n                if(s.substring(0, 1).equals(s.substring(0, 1).toUpperCase()))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if(cap - sm == strength)\
    \ {\n                if(s.compareTo(result) < 0) {\n                    result\
    \ = s;\n                }\n            }\n        }\n        return class_name\
    \ + \".\" + result;", "        String class_name_ext = class_name;\n        String\
    \ strongest_extension = \"\";\n        int strength = 0;\n        for (String\
    \ extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n\
    \            for (int i = 0; i < extension.length(); i++) {\n                if\
    \ (Character.isUpperCase(extension.charAt(i))) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength = (cap - sm);\n            if (strength > strength)\
    \ {\n                strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name_ext + \".\"\
    \ + strongest_extension;", "        int strength = 0;\n        int cap = 0;\n\
    \        int sm = 0;\n        for (String ext : extensions) {\n            cap\
    \ = ext.length();\n            sm = ext.toLowerCase().length();\n            strength\
    \ += (cap - sm);\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        sb.append(extensions.get(0));\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        int strength = 0;\n        for (String\
    \ extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n\
    \            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \        }\n        int index = 0;\n        for (String extension : extensions)\
    \ {\n            if (extension.length() > sb.length()) {\n                index\
    \ = extensions.indexOf(extension);\n                break;\n            }\n  \
    \      }\n        sb.append(\".\");\n        sb.append(extensions.get(index));\n\
    \        return sb.toString();", "        int[] strengths = new int[extensions.size()];\n\
    \        int max = 0;\n        int max_index = 0;\n        for (int i = 0; i <\
    \ extensions.size(); i++) {\n            strengths[i] = getStrength(extensions.get(i));\n\
    \            if (strengths[i] > max) {\n                max = strengths[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(max_index);", "        int[] strengths = new int[extensions.size()];\n\
    \        int maxStrength = 0;\n        int maxStrengthIndex = 0;\n        for\
    \ (int i = 0; i < extensions.size(); i++) {\n            strengths[i] = 0;\n \
    \           for (int j = 0; j < extensions.get(i).length(); j++) {\n         \
    \       if (Character.isUpperCase(extensions.get(i).charAt(j))) {\n          \
    \          strengths[i] += 1;\n                }\n            }\n            strengths[i]\
    \ -= Character.isLowerCase(extensions.get(i).charAt(0));\n            if (strengths[i]\
    \ > maxStrength) {\n                maxStrength = strengths[i];\n            \
    \    maxStrengthIndex = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(maxStrengthIndex);", "        int[] strength = new\
    \ int[extensions.size()];\n        int i = 0;\n        for(String s : extensions)\
    \ {\n            strength[i] = s.length() - s.replaceAll(\"[a-z]\", \"\").length();\n\
    \            i++;\n        }\n        Arrays.sort(strength);\n        int max\
    \ = strength[0];\n        int index = 0;\n        for(int j = 1; j < strength.length;\
    \ j++) {\n            if(strength[j] == max) {\n                index = j;\n \
    \           }\n            else {\n                break;\n            }\n   \
    \     }\n        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        sb.append(extensions.get(index));\n      \
    \  return sb.toString();", "        int[] strength = new int[extensions.size()];\n\
    \        int i = 0;\n        for (String ext : extensions) {\n            int\
    \ cap = 0, sm = 0;\n            for (char c : ext.toCharArray()) {\n         \
    \       if (Character.isUpperCase(c)) {\n                    cap++;\n        \
    \        } else {\n                    sm++;\n                }\n            }\n\
    \            strength[i] = cap - sm;\n            i++;\n        }\n        Arrays.sort(strength);\n\
    \        StringBuilder sb = new StringBuilder();\n        sb.append(class_name).append(\"\
    .\").append(extensions.get(strength[0]));\n        return sb.toString();", " \
    \       int[] strength = new int[extensions.size()];\n        for (int i = 0;\
    \ i < strength.length; i++) {\n            strength[i] = 0;\n            for (int\
    \ j = 0; j < extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ {\n                    strength[i]++;\n                }\n            }\n  \
    \          for (int j = 0; j < extensions.get(i).length(); j++) {\n          \
    \      if (Character.isLowerCase(extensions.get(i).charAt(j))) {\n           \
    \         strength[i]--;\n                }\n            }\n        }\n      \
    \  int max = 0;\n        int max_index = 0;\n        for (int i = 0; i < strength.length;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        String ret\
    \ = class_name + \".\" + extensions.get(max_index);\n        return ret;", " \
    \       String[] str = class_name.split(\"\\\\.\");\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < str.length; i++) {\n   \
    \         sb.append(str[i]);\n            if (i < str.length - 1) {\n        \
    \        sb.append(\".\");\n            }\n        }\n        int max = 0;\n \
    \       String max_ext = \"\";\n        for (String ext : extensions) {\n    \
    \        int strength = 0;\n            String[] str2 = ext.split(\"\\\\.\");\n\
    \            for (int i = 0; i < str2.length; i++) {\n                if (str2[i].equalsIgnoreCase(sb.toString()))\
    \ {\n                    strength = strength + 1;\n                }\n       \
    \     }\n            if (strength > max) {\n                max = strength;\n\
    \                max_ext = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + max_ext;", "        String class_name_ext = class_name + \".\";\n\
    \        String strongest_extension = \"\";\n        int strength = 0;\n     \
    \   for (String extension : extensions) {\n            int cap = 0;\n        \
    \    int sm = 0;\n            for (int i = 0; i < extension.length(); i++) {\n\
    \                if (Character.isUpperCase(extension.charAt(i))) {\n         \
    \           cap++;\n                } else {\n                    sm++;\n    \
    \            }\n            }\n            strength += (cap - sm);\n         \
    \   if (strength > 0) {\n                strongest_extension = class_name_ext\
    \ + extension;\n            }\n        }\n        return strongest_extension;",
  "        int[] strength = new int[extensions.size()];\n        int i = 0;\n    \
    \    for (String extension : extensions) {\n            int cap = 0;\n       \
    \     int sm = 0;\n            for (char c : extension.toCharArray()) {\n    \
    \            if (Character.isUpperCase(c)) {\n                    cap++;\n   \
    \             } else {\n                    sm++;\n                }\n       \
    \     }\n            strength[i] = cap - sm;\n            i++;\n        }\n  \
    \      Arrays.sort(strength);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        for (i = 0;\
    \ i < strength.length; i++) {\n            if (i == strength.length - 1) {\n \
    \               sb.append(extensions.get(i));\n            } else {\n        \
    \        sb.append(extensions.get(i));\n                sb.append(\".\");\n  \
    \          }\n        }\n        return sb.toString();", "        int[] strength\
    \ = new int[extensions.size()];\n        int max = 0;\n        int max_index =\
    \ 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            String[]\
    \ str = extensions.get(i).split(\"\\\\.\");\n            int cap = 0;\n      \
    \      int sm = 0;\n            for (int j = 0; j < str.length; j++) {\n     \
    \           if (Character.isUpperCase(str[j].charAt(0))) {\n                 \
    \   cap++;\n                } else {\n                    sm++;\n            \
    \    }\n            }\n            strength[i] = cap - sm;\n            if (strength[i]\
    \ > max) {\n                max = strength[i];\n                max_index = i;\n\
    \            }\n        }\n        String[] str = extensions.get(max_index).split(\"\
    \\\\.\");\n        String name = class_name + \".\" + str[0];\n        return\
    \ name;", "        int strength = 0;\n        String extension = \"\";\n     \
    \   for (String s : extensions) {\n            int cap = 0, sm = 0;\n        \
    \    for (char c : s.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ s;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        int[] strength = new int[extensions.size()];\n        for(int i = 0; i\
    \ < extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            int cap = 0;\n            int sm = 0;\n            for(int j = 0;\
    \ j < extension.length(); j++) {\n                if(Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                }\n                if(Character.isLowerCase(extension.charAt(j)))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength[i] = cap - sm;\n        }\n        Arrays.sort(strength);\n       \
    \ StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n  \
    \      for(int i = 0; i < strength.length; i++) {\n            if(strength[i]\
    \ == strength[i+1]) {\n                sb.append(\".\").append(extensions.get(i));\n\
    \            }\n        }\n        return sb.toString();", "        int[] strengths\
    \ = new int[extensions.size()];\n        int i = 0;\n        for (String extension\
    \ : extensions) {\n            int cap = 0;\n            int sm = 0;\n       \
    \     for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strengths[i] = cap - sm;\n\
    \            i++;\n        }\n        Arrays.sort(strengths);\n        int max\
    \ = strengths[strengths.length - 1];\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        for (i = 0;\
    \ i < extensions.size(); i++) {\n            if (strengths[i] == max) {\n    \
    \            sb.append(extensions.get(i));\n                sb.append(\".\");\n\
    \            }\n        }\n        return sb.toString();", "        int[] strength\
    \ = new int[extensions.size()];\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int cap\
    \ = 0;\n            int sm = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                if (Character.isUpperCase(extension.charAt(j))) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength[i] = cap - sm;\n     \
    \   }\n        Arrays.sort(strength);\n        int index = 0;\n        for (int\
    \ i = 0; i < strength.length; i++) {\n            if (strength[i] == strength[index])\
    \ {\n                index++;\n            } else {\n                break;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       sb.append(class_name);\n        sb.append(\".\");\n        sb.append(extensions.get(index));\n\
    \        return sb.toString();", "        String result = \"\";\n        int strength\
    \ = 0;\n        int maxStrength = 0;\n        String maxExtension = \"\";\n  \
    \      for (String extension : extensions) {\n            int cap = 0;\n     \
    \       int sm = 0;\n            for (char c : extension.toCharArray()) {\n  \
    \              if (Character.isUpperCase(c)) {\n                    cap++;\n \
    \               } else {\n                    sm++;\n                }\n     \
    \       }\n            strength = cap - sm;\n            if (strength > maxStrength)\
    \ {\n                maxStrength = strength;\n                maxExtension = extension;\n\
    \            }\n        }\n        result = class_name + \".\" + maxExtension;\n\
    \        return result;", "        int[] strength = new int[extensions.size()];\n\
    \        int max_strength = 0;\n        int max_index = 0;\n        for (int i\
    \ = 0; i < extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            int cap = 0;\n            int sm = 0;\n            for (int j = 0;\
    \ j < extension.length(); j++) {\n                if (Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \            if (strength[i] > max_strength) {\n                max_strength =\
    \ strength[i];\n                max_index = i;\n            }\n        }\n   \
    \     return class_name + \".\" + extensions.get(max_index);", "        int[]\
    \ strength = new int[extensions.size()];\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String[] split = extensions.get(i).split(\"\\\\.\");\n \
    \           strength[i] = split.length - 1 - split[1].length();\n        }\n \
    \       Arrays.sort(strength);\n        int max = strength[strength.length - 1];\n\
    \        for (int i = 0; i < strength.length; i++) {\n            if (strength[i]\
    \ == max) {\n                return class_name + \".\" + extensions.get(i);\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        int strength = 0;\n        for (String ext : extensions) {\n        \
    \    int cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n        }\n        int i = 0;\n\
    \        for (String ext : extensions) {\n            if (ext.equals(extensions.get(i)))\
    \ {\n                break;\n            }\n            i++;\n        }\n    \
    \    sb.append(\".\").append(extensions.get(i));\n        return sb.toString();",
  "        int[] strength = new int[extensions.size()];\n        int max_strength\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int cap\
    \ = 0;\n            int sm = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                if (Character.isUpperCase(extension.charAt(j))) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength[i] = cap - sm;\n     \
    \       if (strength[i] > max_strength) {\n                max_strength = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(max_index);", "        String result = \"\";\n    \
    \    int[] strengths = new int[extensions.size()];\n        int max_strength =\
    \ 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            strengths[i]\
    \ = getStrength(extensions.get(i));\n            if (strengths[i] > max_strength)\
    \ {\n                max_strength = strengths[i];\n                result = class_name\
    \ + \".\" + extensions.get(i);\n            }\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        int strength = 0;\n        for (String ext : extensions) {\n        \
    \    int cap = 0;\n            int sm = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n      \
    \              cap++;\n                } else {\n                    sm++;\n \
    \               }\n            }\n            strength += (cap - sm);\n      \
    \  }\n        for (String ext : extensions) {\n            if (ext.length() ==\
    \ strength) {\n                sb.append(\".\").append(ext);\n               \
    \ return sb.toString();\n            }\n        }\n        return sb.toString();",
  "        int[] strength = new int[extensions.size()];\n        for (int i = 0; i\
    \ < extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            int cap = 0;\n            int sm = 0;\n            for (int j = 0;\
    \ j < extension.length(); j++) {\n                if (Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \        }\n        Arrays.sort(strength);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        for (int i\
    \ = 0; i < strength.length; i++) {\n            if (i == strength.length - 1)\
    \ {\n                sb.append(extensions.get(i));\n                break;\n \
    \           }\n            sb.append(extensions.get(i));\n            sb.append(\"\
    .\");\n        }\n        return sb.toString();", "        int[] strengths = new\
    \ int[extensions.size()];\n        int maxStrength = 0;\n        int maxStrengthIndex\
    \ = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            strengths[i]\
    \ = getStrength(extensions.get(i));\n            if (strengths[i] > maxStrength)\
    \ {\n                maxStrength = strengths[i];\n                maxStrengthIndex\
    \ = i;\n            }\n        }\n        return class_name + \".\" + extensions.get(maxStrengthIndex);",
  "        String result = \"\";\n        int[] strengths = new int[extensions.size()];\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            strengths[i]\
    \ = getStrength(extensions.get(i));\n        }\n        Arrays.sort(strengths);\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            if (strengths[i]\
    \ == strengths[i + 1]) {\n                continue;\n            }\n         \
    \   result = class_name + \".\" + extensions.get(i);\n            break;\n   \
    \     }\n        return result;", "        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        for(String ext : extensions) {\n    \
    \        int cap = 0;\n            int sm = 0;\n            for(char c : ext.toCharArray())\
    \ {\n                if(Character.isUpperCase(c)) {\n                    cap++;\n\
    \                }\n                else {\n                    sm++;\n      \
    \          }\n            }\n            int strength = (cap - sm) / 2;\n    \
    \        if(strength > sb.length()) {\n                sb.append(\".\").append(ext);\n\
    \            }\n        }\n        return sb.toString();", "        int strength\
    \ = 0;\n        String extension = \"\";\n        for (String s : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (char\
    \ c : s.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n  \
    \                  cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength += (cap - sm);\n     \
    \   }\n        for (String s : extensions) {\n            if (s.equals(extension))\
    \ {\n                continue;\n            }\n            if (s.length() > extension.length())\
    \ {\n                extension = s;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        int[] strength = new int[extensions.size()];\n\
    \        for(int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            int cap = 0;\n            int sm = 0;\n  \
    \          for(int j = 0; j < extension.length(); j++) {\n                if(Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                }\n                else {\n \
    \                   sm++;\n                }\n            }\n            strength[i]\
    \ = cap - sm;\n        }\n        Arrays.sort(strength);\n        StringBuilder\
    \ sb = new StringBuilder();\n        sb.append(class_name);\n        for(int i\
    \ = 0; i < strength.length; i++) {\n            if(i == strength.length - 1) {\n\
    \                sb.append(\".\" + extensions.get(i));\n            }\n      \
    \      else {\n                sb.append(\".\" + extensions.get(i) + \".\");\n\
    \            }\n        }\n        return sb.toString();", "        int[] strength\
    \ = new int[extensions.size()];\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String ext = extensions.get(i);\n            int cap = 0,\
    \ sm = 0;\n            for (int j = 0; j < ext.length(); j++) {\n            \
    \    if (Character.isUpperCase(ext.charAt(j))) {\n                    cap++;\n\
    \                }\n                if (Character.isLowerCase(ext.charAt(j)))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength[i] = cap - sm;\n        }\n        Arrays.sort(strength);\n       \
    \ int max = strength[0];\n        int index = 0;\n        for (int i = 1; i <\
    \ strength.length; i++) {\n            if (strength[i] == max) {\n           \
    \     index++;\n            } else {\n                break;\n            }\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        sb.append(extensions.get(index));\n      \
    \  return sb.toString();", "        String[] class_name_split = class_name.split(\"\
    \\\\.\");\n        String class_name_without_extension = class_name_split[0];\n\
    \        String extension = class_name_split[1];\n        int strength = 0;\n\
    \        int max_strength = 0;\n        String strongest_extension = \"\";\n \
    \       for (String extension_name : extensions) {\n            int strength_of_extension\
    \ = 0;\n            String[] extension_name_split = extension_name.split(\"\\\\\
    .\");\n            String extension_name_without_extension = extension_name_split[0];\n\
    \            String extension_name_extension = extension_name_split[1];\n    \
    \        if (extension_name_extension.equalsIgnoreCase(extension)) {\n       \
    \         strength_of_extension = strength_of_extension + 1;\n            } else\
    \ {\n                strength_of_extension = strength_of_extension + 2;\n    \
    \        }\n            if (strength_of_extension > max_strength) {\n        \
    \        max_strength = strength_of_extension;\n                strongest_extension\
    \ = extension_name;\n            }\n        }\n        if (max_strength == 0)\
    \ {\n            return class_name_without_extension + \".\" + extension;\n  \
    \      } else {\n            return class_name_without_extension + \".\" + strongest_extension;\n\
    \        }", "        int[] strengths = new int[extensions.size()];\n        int\
    \ i = 0;\n        for(String extension: extensions) {\n            strengths[i]\
    \ = getStrength(extension);\n            i++;\n        }\n        Arrays.sort(strengths);\n\
    \        int strength = strengths[strengths.length - 1];\n        String result\
    \ = class_name + \".\" + extensions.get(strengths.length - 1);\n        return\
    \ result;", "        String[] class_name_split = class_name.split(\"\\\\.\");\n\
    \        String class_name_base = class_name_split[0];\n        String class_name_extension\
    \ = class_name_split[1];\n        int strength = 0;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            String[]\
    \ extension_split = extension.split(\"\\\\.\");\n            String extension_base\
    \ = extension_split[0];\n            String extension_extension = extension_split[1];\n\
    \            int extension_strength = 0;\n            if (class_name_base.equals(extension_base))\
    \ {\n                extension_strength = -1;\n            } else if (class_name_base.equals(extension_extension))\
    \ {\n                extension_strength = 1;\n            } else if (class_name_base.equals(extension_base.toLowerCase()))\
    \ {\n                extension_strength = 2;\n            } else if (class_name_base.equals(extension_extension.toLowerCase()))\
    \ {\n                extension_strength = 3;\n            } else if (class_name_base.equals(extension_base.toUpperCase()))\
    \ {\n                extension_strength = 4;\n            } else if (class_name_base.equals(extension_extension.toUpperCase()))\
    \ {\n                extension_strength = 5;\n            }\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        StringBuilder sb = new\
    \ StringBuilder();\n        sb.append(class_name);\n        int strength = 0;\n\
    \        for(String ext : extensions) {\n            int cap = 0;\n          \
    \  int sm = 0;\n            for(char c : ext.toCharArray()) {\n              \
    \  if(Character.isUpperCase(c)) {\n                    cap++;\n              \
    \  } else {\n                    sm++;\n                }\n            }\n   \
    \         strength += (cap - sm);\n        }\n        for(String ext : extensions)\
    \ {\n            if(ext.equals(ext.toUpperCase())) {\n                continue;\n\
    \            }\n            if(ext.length() > strength) {\n                sb.append(\"\
    .\").append(ext);\n            }\n        }\n        return sb.toString();", " \
    \       String[] str = class_name.split(\"\\\\.\");\n        String name = \"\"\
    ;\n        for (int i = 0; i < str.length - 1; i++) {\n            name += str[i];\n\
    \        }\n        int cap = 0;\n        int sm = 0;\n        for (int i = 0;\
    \ i < name.length(); i++) {\n            if (Character.isUpperCase(name.charAt(i)))\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        int strength = cap - sm;\n        String res =\
    \ \"\";\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions.get(i).equals(name)) {\n                if (strength == 0) {\n \
    \                   return class_name + \".\" + name;\n                } else\
    \ {\n                    return class_name + \".\" + name + \".\" + extensions.get(i);\n\
    \                }\n            }\n            if (strength == 0) {\n        \
    \        if (extensions.get(i).compareTo(name) < 0) {\n                    return\
    \ class_name + \".\" + name;\n                }\n            } else {\n      \
    \          if (extensions.get(i).compareTo(name) < 0) {\n                    if\
    \ (extensions.get(i).compareTo(name) < 0) {\n                        return class_name\
    \ + \".\" + name + \".\" + extensions.get(i);\n                    }\n       \
    \         }\n            }\n        }\n        return class_name + \".\" + name;",
  "        String[] class_name_split = class_name.split(\"\\\\.\");\n        String\
    \ class_name_base = class_name_split[0];\n        String class_name_extension\
    \ = class_name_split[1];\n        int strength = 0;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            String[]\
    \ extension_split = extension.split(\"\\\\.\");\n            String extension_base\
    \ = extension_split[0];\n            String extension_extension = extension_split[1];\n\
    \            int extension_strength = 0;\n            if (class_name_base.equals(extension_base))\
    \ {\n                extension_strength = -1;\n            } else if (class_name_base.equals(extension_extension))\
    \ {\n                extension_strength = 1;\n            } else if (class_name_extension.equals(extension_base))\
    \ {\n                extension_strength = 2;\n            } else if (class_name_extension.equals(extension_extension))\
    \ {\n                extension_strength = 3;\n            }\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        int strength = 0;\n   \
    \     String extension = \"\";\n        for (String ext : extensions) {\n    \
    \        int cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n            if (strength > extension.length())\
    \ {\n                extension = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        String result = \"\";\n        int\
    \ strength = 0;\n        for (String ext : extensions) {\n            int cap\
    \ = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n        }\n        for (String\
    \ ext : extensions) {\n            if (ext.equals(ext.toLowerCase())) {\n    \
    \            continue;\n            }\n            if (ext.length() < strength)\
    \ {\n                continue;\n            }\n            if (ext.length() >\
    \ strength) {\n                strength = ext.length();\n                result\
    \ = class_name + \".\" + ext;\n                continue;\n            }\n    \
    \        if (ext.length() == strength) {\n                if (extensions.indexOf(ext)\
    \ < extensions.indexOf(result)) {\n                    result = class_name + \"\
    .\" + ext;\n                }\n            }\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        int strength = 0;\n        for (String ext : extensions) {\n        \
    \    int cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n        }\n        for (String\
    \ ext : extensions) {\n            if (ext.length() == strength) {\n         \
    \       sb.append(\".\").append(ext);\n            }\n        }\n        return\
    \ sb.toString();", "        int[] strengths = new int[extensions.size()];\n  \
    \      int max_strength = 0;\n        int max_index = 0;\n        for (int i =\
    \ 0; i < extensions.size(); i++) {\n            strengths[i] = getStrength(extensions.get(i));\n\
    \            if (strengths[i] > max_strength) {\n                max_strength\
    \ = strengths[i];\n                max_index = i;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(max_index);", "        String[]\
    \ str_arr = class_name.split(\"\\\\.\");\n        int strength = 0;\n        String\
    \ strongest_extension = \"\";\n        for (String extension : extensions) {\n\
    \            int cap = 0, sm = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength += (cap - sm) / 2;\n \
    \           if (strength > strongest_extension.length()) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        StringBuilder sb = new StringBuilder();\n  \
    \      sb.append(class_name);\n        sb.append(\".\");\n        int max_strength\
    \ = 0;\n        String max_extension = \"\";\n        for(String extension: extensions)\
    \ {\n            int strength = 0;\n            String[] tokens = extension.split(\"\
    _\");\n            for(String token: tokens) {\n                if(token.equals(\"\
    CAP\")) {\n                    strength += 1;\n                }\n           \
    \     if(token.equals(\"SM\")) {\n                    strength -= 1;\n       \
    \         }\n            }\n            if(strength > max_strength) {\n      \
    \          max_strength = strength;\n                max_extension = extension;\n\
    \            }\n        }\n        sb.append(max_extension);\n        return sb.toString();",
  "        int[] strength = new int[extensions.size()];\n        for (int i = 0; i\
    \ < extensions.size(); i++) {\n            String[] split = extensions.get(i).split(\"\
    \\\\.\");\n            strength[i] = split[0].length() - split[1].length();\n\
    \        }\n        Arrays.sort(strength);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        for (int i\
    \ = 0; i < strength.length; i++) {\n            sb.append(extensions.get(i));\n\
    \            if (i < strength.length - 1) {\n                sb.append(\".\");\n\
    \            }\n        }\n        return sb.toString();", "        int[] strength\
    \ = new int[extensions.size()];\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String[] split = extensions.get(i).split(\"\\\\.\");\n \
    \           strength[i] = split.length - 1 - split[1].length();\n        }\n \
    \       Arrays.sort(strength);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        for (int i = 0; i < strength.length;\
    \ i++) {\n            sb.append(\".\").append(extensions.get(i));\n        }\n\
    \        return sb.toString();", "        int[] strength = new int[extensions.size()];\n\
    \        int i = 0;\n        for (String ext : extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength[i] = cap - sm;\n            i++;\n        }\n\
    \        Arrays.sort(strength);\n        int max = strength[0];\n        int max_index\
    \ = 0;\n        for (int j = 1; j < strength.length; j++) {\n            if (strength[j]\
    \ == max) {\n                max_index = j;\n            } else {\n          \
    \      break;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        sb.append(extensions.get(max_index));\n\
    \        return sb.toString();", "        String[] str = class_name.split(\"\\\
    \\.\");\n        StringBuilder sb = new StringBuilder();\n        sb.append(str[0]);\n\
    \        for(int i = 1; i < str.length; i++) {\n            String s = str[i];\n\
    \            if(s.length() > 0) {\n                int cap = 0;\n            \
    \    int sm = 0;\n                for(int j = 0; j < s.length(); j++) {\n    \
    \                if(s.charAt(j) >= 'A' && s.charAt(j) <= 'Z') {\n            \
    \            cap++;\n                    } else {\n                        sm++;\n\
    \                    }\n                }\n                int strength = cap\
    \ - sm;\n                if(strength > 0) {\n                    sb.append(\"\
    .\");\n                    sb.append(s);\n                }\n            }\n \
    \       }\n        return sb.toString();", "        String[] str = class_name.split(\"\
    \\\\.\");\n        int cap = 0;\n        int sm = 0;\n        for (String s :\
    \ str) {\n            if (s.length() > 1) {\n                if (s.charAt(0) >=\
    \ 'A' && s.charAt(0) <= 'Z') {\n                    cap++;\n                }\
    \ else {\n                    sm++;\n                }\n            }\n      \
    \  }\n        int strength = cap - sm;\n        String strongest = \"\";\n   \
    \     for (String s : extensions) {\n            if (s.length() > 1) {\n     \
    \           if (s.charAt(0) >= 'A' && s.charAt(0) <= 'Z') {\n                \
    \    cap++;\n                } else {\n                    sm++;\n           \
    \     }\n            }\n            if (s.length() > strength) {\n           \
    \     strength = s.length() - strength;\n                strongest = s;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest;", "    \
    \    String result = \"\";\n        int strength = 0;\n        int maxStrength\
    \ = 0;\n        int maxStrengthIndex = 0;\n        int minStrength = Integer.MAX_VALUE;\n\
    \        int minStrengthIndex = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            int cap = 0;\n            int sm = 0;\n            for (int\
    \ j = 0; j < extensions.get(i).length(); j++) {\n                if (extensions.get(i).charAt(j)\
    \ >= 'A' && extensions.get(i).charAt(j) <= 'Z') {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            int strength_value = cap - sm;\n            if (strength_value\
    \ > maxStrength) {\n                maxStrength = strength_value;\n          \
    \      maxStrengthIndex = i;\n            }\n            if (strength_value <\
    \ minStrength) {\n                minStrength = strength_value;\n            \
    \    minStrengthIndex = i;\n            }\n        }\n        if (maxStrengthIndex\
    \ < minStrengthIndex) {\n            result = class_name + \".\" + extensions.get(maxStrengthIndex);\n\
    \        } else {\n            result = class_name + \".\" + extensions.get(minStrengthIndex);\n\
    \        }\n        return result;", "        int[] strength = new int[extensions.size()];\n\
    \        int max = 0;\n        int i = 0;\n        for (String extension : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (int j\
    \ = 0; j < extension.length(); j++) {\n                if (Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \            if (strength[i] > max) {\n                max = strength[i];\n  \
    \          }\n            i++;\n        }\n        String result = class_name\
    \ + \".\" + extensions.get(0);\n        for (int j = 0; j < extensions.size();\
    \ j++) {\n            if (strength[j] == max) {\n                result = class_name\
    \ + \".\" + extensions.get(j);\n                break;\n            }\n      \
    \  }\n        return result;", "        String[] str_arr = class_name.split(\"\
    \\\\.\");\n        int strength = 0;\n        String extension = \"\";\n     \
    \   for (int i = 0; i < extensions.size(); i++) {\n            String ext = extensions.get(i);\n\
    \            int cap = 0;\n            int sm = 0;\n            for (int j = 0;\
    \ j < ext.length(); j++) {\n                if (Character.isUpperCase(ext.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        int strength = 0;\n        String extension = \"\";\n        for (String\
    \ ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n   \
    \         for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        String[] str = class_name.split(\"\\\\.\");\n        int cap = 0, sm =\
    \ 0;\n        for(String s: str) {\n            if(s.length() > 1) {\n       \
    \         if(s.charAt(0) >= 'A' && s.charAt(0) <= 'Z') {\n                   \
    \ cap++;\n                } else {\n                    sm++;\n              \
    \  }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        for(String s: extensions) {\n       \
    \     if(s.length() > 1) {\n                if(s.charAt(0) >= 'A' && s.charAt(0)\
    \ <= 'Z') {\n                    cap++;\n                } else {\n          \
    \          sm++;\n                }\n            }\n            if(cap - sm >\
    \ 0) {\n                sb.append(\".\").append(s);\n                break;\n\
    \            }\n        }\n        return sb.toString();", "        int strength\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            int cap = 0, sm = 0;\n            for (char c :\
    \ extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength += cap - sm;\n       \
    \     if (strength > strongest_extension.length()) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        StringBuilder sb = new StringBuilder();\n  \
    \      sb.append(class_name);\n        int strength = 0;\n        for (String\
    \ ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n   \
    \         for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \        }\n        int index = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            if (strength == extensions.get(i).length()) {\n        \
    \        index = i;\n                break;\n            }\n        }\n      \
    \  sb.append(\".\").append(extensions.get(index));\n        return sb.toString();",
  "        int[] strength = new int[extensions.size()];\n        int i = 0;\n    \
    \    for (String extension : extensions) {\n            int cap = 0;\n       \
    \     int sm = 0;\n            for (char c : extension.toCharArray()) {\n    \
    \            if (Character.isUpperCase(c)) {\n                    cap++;\n   \
    \             } else {\n                    sm++;\n                }\n       \
    \     }\n            strength[i] = cap - sm;\n            i++;\n        }\n  \
    \      Arrays.sort(strength);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name).append(\".\");\n        for (int j = 0; j < strength.length;\
    \ j++) {\n            if (strength[j] == strength[j + 1]) {\n                continue;\n\
    \            }\n            sb.append(extensions.get(j)).append(\".\");\n    \
    \    }\n        return sb.toString();", "        String result = \"\";\n     \
    \   int strength = 0;\n        int max_strength = 0;\n        int max_index =\
    \ 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            String\
    \ extension = extensions.get(i);\n            int cap = 0;\n            int sm\
    \ = 0;\n            for (int j = 0; j < extension.length(); j++) {\n         \
    \       if (Character.isUpperCase(extension.charAt(j))) {\n                  \
    \  cap++;\n                } else {\n                    sm++;\n             \
    \   }\n            }\n            strength = cap - sm;\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  max_index = i;\n            }\n        }\n        result = class_name + \"\
    .\" + extensions.get(max_index);\n        return result;", "        int max_strength\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            int strength = 0;\n            int cap = 0;\n \
    \           int sm = 0;\n            for (int i = 0; i < extension.length(); i++)\
    \ {\n                if (Character.isUpperCase(extension.charAt(i))) {\n     \
    \               cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength = cap - sm;\n        \
    \    if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        int[] strength\
    \ = new int[extensions.size()];\n        int i = 0;\n        for(String extension\
    \ : extensions) {\n            int cap = 0;\n            int sm = 0;\n       \
    \     for(char c : extension.toCharArray()) {\n                if(Character.isUpperCase(c))\
    \ {\n                    cap++;\n                }\n                else {\n \
    \                   sm++;\n                }\n            }\n            strength[i]\
    \ = cap - sm;\n            i++;\n        }\n        Arrays.sort(strength);\n \
    \       String result = class_name + \".\" + extensions.get(strength[0]);\n  \
    \      return result;", "        int[] strength = new int[extensions.size()];\n\
    \        int max = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n\
    \            String ext = extensions.get(i);\n            int cap = 0;\n     \
    \       int sm = 0;\n            for (int j = 0; j < ext.length(); j++) {\n  \
    \              if (Character.isUpperCase(ext.charAt(j))) {\n                 \
    \   cap++;\n                } else {\n                    sm++;\n            \
    \    }\n            }\n            strength[i] = cap - sm;\n            if (strength[i]\
    \ > max) {\n                max = strength[i];\n            }\n        }\n   \
    \     StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        for (int i = 0; i < max; i++) {\n            sb.append(\".\");\n    \
    \        sb.append(extensions.get(i));\n        }\n        return sb.toString();",
  "        int strength = 0;\n        String extension = \"\";\n        for (String\
    \ extension_name : extensions) {\n            int CAP = 0, SM = 0;\n         \
    \   for (char c : extension_name.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ CAP++;\n                else SM++;\n            }\n            strength += CAP\
    \ - SM;\n            if (strength > extension.length()) {\n                extension\
    \ = extension_name;\n            }\n        }\n        return class_name + \"\
    .\" + extension;", "        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        int max = 0;\n        int min = 0;\n        for (String ext : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (char\
    \ c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            if (cap - sm > max) {\n       \
    \         max = cap - sm;\n            }\n            if (cap - sm < min) {\n\
    \                min = cap - sm;\n            }\n        }\n        if (max ==\
    \ 0) {\n            return \"\";\n        }\n        for (String ext : extensions)\
    \ {\n            if (ext.length() == max) {\n                sb.append(\".\").append(ext);\n\
    \                return sb.toString();\n            }\n        }\n        for\
    \ (String ext : extensions) {\n            if (ext.length() == min) {\n      \
    \          sb.append(\".\").append(ext);\n                return sb.toString();\n\
    \            }\n        }\n        return \"\";", "        int[] strength = new\
    \ int[extensions.size()];\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            String extension = extensions.get(i);\n            int cap =\
    \ 0, sm = 0;\n            for (int j = 0; j < extension.length(); j++) {\n   \
    \             if (Character.isUpperCase(extension.charAt(j))) {\n            \
    \        cap++;\n                } else {\n                    sm++;\n       \
    \         }\n            }\n            strength[i] = cap - sm;\n        }\n \
    \       Arrays.sort(strength);\n        int max = strength[0];\n        int index\
    \ = 0;\n        for (int i = 1; i < strength.length; i++) {\n            if (strength[i]\
    \ == max) {\n                index++;\n            } else {\n                break;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(index);",
  "        int[] strength = new int[extensions.size()];\n        int max_strength\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int cap\
    \ = 0, sm = 0;\n            for (int j = 0; j < extension.length(); j++) {\n \
    \               if (Character.isUpperCase(extension.charAt(j))) {\n          \
    \          cap++;\n                } else {\n                    sm++;\n     \
    \           }\n            }\n            strength[i] = cap - sm;\n          \
    \  if (strength[i] > max_strength) {\n                max_strength = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(max_index);", "        int[] strength = new int[extensions.size()];\n\
    \        for(int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            int cap = 0, sm = 0;\n            for(int\
    \ j = 0; j < extension.length(); j++) {\n                if(Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                }\n                if(Character.isLowerCase(extension.charAt(j)))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength[i] = cap - sm;\n        }\n        Arrays.sort(strength);\n       \
    \ for(int i = 0; i < strength.length; i++) {\n            if(strength[i] == strength[i\
    \ + 1]) {\n                continue;\n            }\n            else {\n    \
    \            return class_name + \".\" + extensions.get(i);\n            }\n \
    \       }\n        return class_name + \".\" + extensions.get(0);", "        int[]\
    \ strength = new int[extensions.size()];\n        int max_strength = 0;\n    \
    \    int max_index = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n\
    \            String extension = extensions.get(i);\n            int cap = 0;\n\
    \            int sm = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                if (Character.isUpperCase(extension.charAt(j))) {\n\
    \                    cap++;\n                }\n                if (Character.isLowerCase(extension.charAt(j)))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength[i] = cap - sm;\n            if (strength[i] > max_strength) {\n   \
    \             max_strength = strength[i];\n                max_index = i;\n  \
    \          }\n        }\n        return class_name + \".\" + extensions.get(max_index);",
  "        int strength = 0;\n        String extension = \"\";\n        for (String\
    \ ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n   \
    \         for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        int[] strength = new int[extensions.size()];\n        int i = 0;\n    \
    \    for(String extension : extensions) {\n            int cap = 0, sm = 0;\n\
    \            for(char c : extension.toCharArray()) {\n                if(Character.isUpperCase(c))\
    \ {\n                    cap++;\n                }\n                else {\n \
    \                   sm++;\n                }\n            }\n            strength[i]\
    \ = cap - sm;\n            i++;\n        }\n        Arrays.sort(strength);\n \
    \       StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        for(i = 0; i < strength.length; i++) {\n \
    \           if(strength[i] == strength[i+1]) {\n                sb.append(extensions.get(i));\n\
    \                sb.append(\".\");\n            }\n        }\n        return sb.toString();",
  "        int max = 0;\n        String max_ext = \"\";\n        for (String ext :\
    \ extensions) {\n            int strength = 0;\n            int cap = 0;\n   \
    \         int sm = 0;\n            for (int i = 0; i < ext.length(); i++) {\n\
    \                if (Character.isUpperCase(ext.charAt(i))) {\n               \
    \     cap++;\n                } else {\n                    sm++;\n          \
    \      }\n            }\n            strength = cap - sm;\n            if (strength\
    \ > max) {\n                max = strength;\n                max_ext = ext;\n\
    \            }\n        }\n        return class_name + \".\" + max_ext;", "  \
    \      int[] strengths = new int[extensions.size()];\n        int maxStrength\
    \ = 0;\n        int maxStrengthIndex = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int strength\
    \ = 0;\n            for (int j = 0; j < extension.length(); j++) {\n         \
    \       if (Character.isUpperCase(extension.charAt(j))) {\n                  \
    \  strength++;\n                } else {\n                    strength--;\n  \
    \              }\n            }\n            strengths[i] = strength;\n      \
    \      if (strength > maxStrength) {\n                maxStrength = strength;\n\
    \                maxStrengthIndex = i;\n            }\n        }\n        String\
    \ result = class_name + \".\" + extensions.get(maxStrengthIndex);\n        return\
    \ result;", "        String[] str = class_name.split(\"\\\\.\");\n        int\
    \ strength = 0;\n        for (int i = 0; i < str.length; i++) {\n            if\
    \ (str[i].length() > strength) {\n                strength = str[i].length();\n\
    \            }\n        }\n        int index = 0;\n        for (int i = 0; i <\
    \ extensions.size(); i++) {\n            if (extensions.get(i).length() == strength)\
    \ {\n                if (extensions.get(i).compareTo(str[index]) < 0) {\n    \
    \                index = i;\n                }\n            }\n        }\n   \
    \     return class_name + \".\" + extensions.get(index);", "        String[] class_name_split\
    \ = class_name.split(\"\\\\.\");\n        String class_name_base = class_name_split[0];\n\
    \        String class_name_extension = class_name_split[1];\n        int class_name_extension_strength\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            String[] extension_split = extension.split(\"\\\
    \\.\");\n            String extension_base = extension_split[0];\n           \
    \ String extension_extension = extension_split[1];\n            int extension_extension_strength\
    \ = 0;\n            if (class_name_extension.equals(extension_extension)) {\n\
    \                extension_extension_strength = -1;\n            } else {\n  \
    \              extension_extension_strength = (class_name_extension.length() -\
    \ extension_extension.length()) + (extension_extension.length() - class_name_extension.length());\n\
    \            }\n            if (extension_extension_strength > class_name_extension_strength)\
    \ {\n                class_name_extension_strength = extension_extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name_base + \".\" + strongest_extension;", "        int[]\
    \ strengths = new int[extensions.size()];\n        int maxStrength = 0;\n    \
    \    int maxStrengthIndex = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            strengths[i] = getStrength(extensions.get(i));\n       \
    \     if (strengths[i] > maxStrength) {\n                maxStrength = strengths[i];\n\
    \                maxStrengthIndex = i;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions.get(maxStrengthIndex);", "        int[] strengths\
    \ = new int[extensions.size()];\n        int max = 0;\n        int index = 0;\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            strengths[i]\
    \ = 0;\n            for (int j = 0; j < extensions.get(i).length(); j++) {\n \
    \               if (extensions.get(i).charAt(j) >= 'A' && extensions.get(i).charAt(j)\
    \ <= 'Z') {\n                    strengths[i]++;\n                }\n        \
    \    }\n            strengths[i] -= (strengths[i] / 2);\n            if (strengths[i]\
    \ > max) {\n                max = strengths[i];\n                index = i;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(index);",
  "        String[] arr = class_name.split(\"\\\\.\");\n        StringBuilder sb =\
    \ new StringBuilder();\n        sb.append(arr[0]);\n        for (int i = 1; i\
    \ < arr.length; i++) {\n            String s = arr[i];\n            int cap =\
    \ 0;\n            int sm = 0;\n            for (int j = 0; j < s.length(); j++)\
    \ {\n                if (s.charAt(j) >= 'A' && s.charAt(j) <= 'Z') {\n       \
    \             cap++;\n                } else {\n                    sm++;\n  \
    \              }\n            }\n            int strength = cap - sm;\n      \
    \      for (int j = 0; j < extensions.size(); j++) {\n                String e\
    \ = extensions.get(j);\n                int e_cap = 0;\n                int e_sm\
    \ = 0;\n                for (int k = 0; k < e.length(); k++) {\n             \
    \       if (e.charAt(k) >= 'A' && e.charAt(k) <= 'Z') {\n                    \
    \    e_cap++;\n                    } else {\n                        e_sm++;\n\
    \                    }\n                }\n                if (e_cap - e_sm ==\
    \ strength) {\n                    sb.append(\".\").append(e);\n             \
    \       return sb.toString();\n                }\n            }\n        }\n \
    \       return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        int strength = 0;\n        for(String\
    \ ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n   \
    \         for(char c : ext.toCharArray()) {\n                if(Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \        }\n        for(String ext : extensions) {\n            if(ext.compareTo(ext.toUpperCase())\
    \ > 0) {\n                sb.append(\".\").append(ext.toUpperCase());\n      \
    \      } else {\n                sb.append(\".\").append(ext);\n            }\n\
    \        }\n        return sb.toString();", "        String[] class_name_split\
    \ = class_name.split(\"\\\\.\");\n        String class_name_without_extension\
    \ = class_name_split[0];\n        String extension_name = class_name_split[1];\n\
    \        int strength = 0;\n        int max_strength = 0;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            int cap\
    \ = 0;\n            int sm = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    cap++;\n                }\n                if (Character.isLowerCase(extension.charAt(i)))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength = cap - sm;\n            if (strength > max_strength) {\n         \
    \       max_strength = strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name_without_extension + \".\"\
    \ + strongest_extension;", "        int[] strength = new int[extensions.size()];\n\
    \        int i = 0;\n        for(String ext : extensions) {\n            int cap\
    \ = 0, sm = 0;\n            for(char c : ext.toCharArray()) {\n              \
    \  if(Character.isUpperCase(c)) {\n                    cap++;\n              \
    \  } else {\n                    sm++;\n                }\n            }\n   \
    \         strength[i] = cap - sm;\n            i++;\n        }\n        Arrays.sort(strength);\n\
    \        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        for(i = 0; i < strength.length; i++) {\n \
    \           if(strength[i] == strength[i+1]) {\n                sb.append(extensions.get(i));\n\
    \                sb.append(\".\");\n            }\n        }\n        return sb.toString();",
  "        int strength = 0;\n        String extension = \"\";\n        for (String\
    \ ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n   \
    \         for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    cap++;\n                }\n                if (Character.isLowerCase(ext.charAt(i)))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength += (cap - sm);\n            if (strength > extension.length()) {\n\
    \                extension = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;", "        String[] str = class_name.split(\"\\\\.\");\n\
    \        int strength = 0;\n        for (int i = 0; i < str.length; i++) {\n \
    \           if (Character.isUpperCase(str[i].charAt(0))) {\n                strength\
    \ -= 1;\n            } else {\n                strength += 1;\n            }\n\
    \        }\n        int index = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            if (extensions.get(i).equals(str[str.length - 1])) {\n \
    \               if (strength < 0) {\n                    return class_name + \"\
    .\" + extensions.get(index);\n                } else {\n                    return\
    \ class_name + \".\" + extensions.get(i);\n                }\n            }\n\
    \            if (strength < 0 && strength > extensions.get(i).length()) {\n  \
    \              index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(index);", "        int strength = 0;\n        String\
    \ extension = \"\";\n        for (String ext : extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n            if (strength > extension.length())\
    \ {\n                extension = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        String[] class_name_split = class_name.split(\"\
    \\\\.\");\n        String class_name_base = class_name_split[0];\n        String\
    \ class_name_extension = class_name_split[1];\n        int class_name_extension_strength\
    \ = 0;\n        for (String extension : extensions) {\n            String[] extension_split\
    \ = extension.split(\"\\\\.\");\n            String extension_base = extension_split[0];\n\
    \            String extension_extension = extension_split[1];\n            int\
    \ extension_extension_strength = 0;\n            if (class_name_extension.equals(extension_base))\
    \ {\n                class_name_extension_strength = -1;\n            } else {\n\
    \                class_name_extension_strength = class_name_extension.length()\
    \ - extension_extension.length();\n            }\n            if (class_name_extension_strength\
    \ > extension_extension_strength) {\n                class_name_extension_strength\
    \ = extension_extension_strength;\n            }\n        }\n        return class_name_base\
    \ + \".\" + class_name_extension + \".\" + class_name_extension_strength;", " \
    \       int[] strengths = new int[extensions.size()];\n        for (int i = 0;\
    \ i < extensions.size(); i++) {\n            strengths[i] = getStrength(extensions.get(i));\n\
    \        }\n        Arrays.sort(strengths);\n        int max = strengths[strengths.length\
    \ - 1];\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (strengths[i] == max) {\n                return class_name + \".\" + extensions.get(i);\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        int[] strength = new int[extensions.size()];\n        for(int i = 0; i\
    \ < strength.length; i++) {\n            strength[i] = 0;\n            for(char\
    \ c : extensions.get(i).toCharArray()) {\n                if(Character.isUpperCase(c))\
    \ strength[i] += 1;\n                if(Character.isLowerCase(c)) strength[i]\
    \ -= 1;\n            }\n        }\n        int max = 0;\n        int max_index\
    \ = 0;\n        for(int i = 0; i < strength.length; i++) {\n            if(strength[i]\
    \ > max) {\n                max = strength[i];\n                max_index = i;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(max_index);",
  "        int max_strength = 0;\n        String strongest_extension = \"\";\n   \
    \     for (String extension : extensions) {\n            int strength = 0;\n \
    \           String[] name_parts = extension.split(\"\\\\.\");\n            for\
    \ (int i = 0; i < name_parts.length; i++) {\n                if (name_parts[i].equalsIgnoreCase(name_parts[i]))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength += 2;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        StringBuilder sb = new\
    \ StringBuilder();\n        sb.append(class_name);\n        sb.append(\".\");\n\
    \        int strength = 0;\n        for (String ext : extensions) {\n        \
    \    int cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n        }\n        for (String\
    \ ext : extensions) {\n            if (ext.compareTo(sb.toString()) < 0) {\n \
    \               sb.append(ext);\n                sb.append(\".\");\n         \
    \   }\n        }\n        return sb.toString();", "        int[] strength = new\
    \ int[extensions.size()];\n        int i = 0;\n        for(String extension: extensions)\
    \ {\n            strength[i] = 0;\n            for(char c: extension.toCharArray())\
    \ {\n                if(Character.isUpperCase(c)) strength[i]++;\n           \
    \     if(Character.isLowerCase(c)) strength[i]--;\n            }\n           \
    \ i++;\n        }\n        Arrays.sort(strength);\n        StringBuilder sb =\
    \ new StringBuilder();\n        sb.append(class_name);\n        for(i = 0; i <\
    \ strength.length; i++) {\n            sb.append(\".\").append(extensions.get(i));\n\
    \        }\n        return sb.toString();", "        String[] str_arr = class_name.split(\"\
    \\\\.\");\n        int strength = 0;\n        String extension = \"\";\n     \
    \   for (String str : extensions) {\n            int cap = 0, sm = 0;\n      \
    \      for (char c : str.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ str;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        int[] strengths = new int[extensions.size()];\n        int max_strength\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            strengths[i] = 0;\n            for (int j = 0; j < extensions.get(i).length();\
    \ j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ {\n                    strengths[i]++;\n                }\n            }\n \
    \           strengths[i] -= Character.isLowerCase(extensions.get(i).charAt(0));\n\
    \            if (strengths[i] > max_strength) {\n                max_strength\
    \ = strengths[i];\n                max_index = i;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(max_index);", "        int[]\
    \ strength = new int[extensions.size()];\n        int i = 0;\n        for(String\
    \ extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n\
    \            for(char c : extension.toCharArray()) {\n                if(Character.isUpperCase(c))\
    \ {\n                    cap++;\n                }\n                else {\n \
    \                   sm++;\n                }\n            }\n            strength[i]\
    \ = cap - sm;\n            i++;\n        }\n        Arrays.sort(strength);\n \
    \       StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        for(int j = 0; j < strength.length; j++) {\n\
    \            if(j == strength.length - 1) {\n                sb.append(extensions.get(j));\n\
    \            }\n            else {\n                sb.append(extensions.get(j));\n\
    \                sb.append(\".\");\n            }\n        }\n        return sb.toString();",
  "        int[] strength = new int[extensions.size()];\n        int i = 0;\n    \
    \    for(String extension : extensions) {\n            strength[i] = Character.isUpperCase(extension.charAt(0))\
    \ - Character.isLowerCase(extension.charAt(0));\n            i++;\n        }\n\
    \        Arrays.sort(strength);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        sb.append(extensions.get(strength[0]));\n\
    \        return sb.toString();", "        int strength = 0;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            int cap\
    \ = 0;\n            int sm = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength += (cap - sm) / 2;\n \
    \           if (strength > strongest_extension.length()) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        int[] strength = new int[extensions.size()];\n\
    \        int max = 0;\n        int max_index = 0;\n        for (int i = 0; i <\
    \ extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            int cap = 0;\n            int sm = 0;\n            for (int j = 0;\
    \ j < extension.length(); j++) {\n                if (Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                }\n                if (Character.isLowerCase(extension.charAt(j)))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength[i] = cap - sm;\n            if (strength[i] > max) {\n            \
    \    max = strength[i];\n                max_index = i;\n            }\n     \
    \   }\n        return class_name + \".\" + extensions.get(max_index);", "    \
    \    StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        int strength = 0;\n        for (String ext : extensions) {\n        \
    \    int cap = 0;\n            int sm = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n      \
    \              cap++;\n                } else {\n                    sm++;\n \
    \               }\n            }\n            strength += (cap - sm);\n      \
    \  }\n        for (String ext : extensions) {\n            if (ext.length() ==\
    \ strength) {\n                sb.append(\".\").append(ext);\n               \
    \ return sb.toString();\n            }\n        }\n        return sb.toString();",
  "        int[] strength = new int[extensions.size()];\n        for (int i = 0; i\
    \ < extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            int cap = 0, sm = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                if (Character.isUpperCase(extension.charAt(j))) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength[i] = cap - sm;\n     \
    \   }\n        Arrays.sort(strength);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        for (int i\
    \ = 0; i < strength.length; i++) {\n            if (i > 0 && strength[i] == strength[i\
    \ - 1]) {\n                continue;\n            }\n            sb.append(extensions.get(i));\n\
    \            sb.append(\".\");\n        }\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        return sb.toString();", "        int[] strength = new int[extensions.size()];\n\
    \        int max = 0;\n        int max_index = 0;\n        for (int i = 0; i <\
    \ extensions.size(); i++) {\n            String[] split = extensions.get(i).split(\"\
    \\\\.\");\n            int cap = 0;\n            int sm = 0;\n            for\
    \ (int j = 0; j < split.length; j++) {\n                if (Character.isUpperCase(split[j].charAt(0)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \            if (strength[i] > max) {\n                max = strength[i];\n  \
    \              max_index = i;\n            }\n        }\n        String[] split\
    \ = class_name.split(\"\\\\.\");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < split.length; i++) {\n            if (i == max_index)\
    \ {\n                sb.append(split[i] + \".\" + extensions.get(max_index));\n\
    \            } else {\n                sb.append(split[i]);\n            }\n \
    \       }\n        return sb.toString();", "        String class_name_extension\
    \ = class_name + \".\";\n        int max_strength = 0;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            int strength\
    \ = 0;\n            String[] extension_array = extension.split(\"_\");\n     \
    \       for (String s : extension_array) {\n                if (s.equals(\"CAP\"\
    )) {\n                    strength += 1;\n                } else if (s.equals(\"\
    SM\")) {\n                    strength -= 1;\n                }\n            }\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = class_name_extension + extension;\n   \
    \         }\n        }\n        return strongest_extension;", "        String[]\
    \ str = class_name.split(\"\\\\.\");\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(str[0]);\n        int cap = 0;\n        int sm = 0;\n     \
    \   for (int i = 1; i < str.length; i++) {\n            if (Character.isUpperCase(str[i].charAt(0)))\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        int strength = cap - sm;\n        for (String\
    \ ext : extensions) {\n            if (ext.length() > 2) {\n                if\
    \ (Character.isUpperCase(ext.charAt(0))) {\n                    cap++;\n     \
    \           } else {\n                    sm++;\n                }\n         \
    \   }\n            if (cap - sm > strength) {\n                strength = cap\
    \ - sm;\n                sb.append(\".\").append(ext);\n            }\n      \
    \  }\n        return sb.toString();", "        String result = \"\";\n       \
    \ int strength = 0;\n        for (String extension : extensions) {\n         \
    \   int cap = 0, sm = 0;\n            for (char c : extension.toCharArray()) {\n\
    \                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n        }\n        for (String\
    \ extension : extensions) {\n            if (extension.equals(class_name)) {\n\
    \                continue;\n            }\n            if (extension.length()\
    \ > class_name.length()) {\n                continue;\n            }\n       \
    \     if (extension.length() < class_name.length()) {\n                continue;\n\
    \            }\n            if (extension.compareTo(class_name) < 0) {\n     \
    \           continue;\n            }\n            if (extension.compareTo(class_name)\
    \ > 0) {\n                continue;\n            }\n            if (extension.compareTo(class_name)\
    \ == 0) {\n                if (strength > 0) {\n                    if (extension.compareTo(result)\
    \ < 0) {\n                        result = extension;\n                    }\n\
    \                } else {\n                    result = extension;\n         \
    \       }\n            }\n        }\n        return class_name + \".\" + result;",
  "        String[] str = class_name.split(\"\\\\.\");\n        StringBuilder sb =\
    \ new StringBuilder();\n        sb.append(str[0]);\n        for (int i = 1; i\
    \ < str.length; i++) {\n            sb.append(\".\");\n            sb.append(str[i]);\n\
    \        }\n        int max = 0;\n        String max_ext = \"\";\n        for\
    \ (String ext : extensions) {\n            int cap = 0;\n            int sm =\
    \ 0;\n            for (int i = 0; i < ext.length(); i++) {\n                if\
    \ (Character.isUpperCase(ext.charAt(i))) {\n                    cap++;\n     \
    \           } else {\n                    sm++;\n                }\n         \
    \   }\n            int strength = cap - sm;\n            if (strength > max) {\n\
    \                max = strength;\n                max_ext = ext;\n           \
    \ }\n        }\n        sb.append(\".\");\n        sb.append(max_ext);\n     \
    \   return sb.toString();", "        String[] str = class_name.split(\"\\\\.\"\
    );\n        String name = \"\";\n        for (int i = 0; i < str.length - 1; i++)\
    \ {\n            name += str[i];\n        }\n        int cap = 0;\n        int\
    \ sm = 0;\n        for (int i = 0; i < name.length(); i++) {\n            if (Character.isUpperCase(name.charAt(i)))\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        int strength = (cap - sm) / 2;\n        int index\
    \ = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (strength == extensions.get(i).length()) {\n                index = i;\n   \
    \         }\n        }\n        return class_name + \".\" + extensions.get(index);",
  "        int[] strength = new int[extensions.size()];\n        int max = 0;\n  \
    \      int i = 0;\n        for (String extension : extensions) {\n           \
    \ int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength[i] = cap - sm;\n            if (strength[i] >\
    \ max) {\n                max = strength[i];\n            }\n            i++;\n\
    \        }\n        String result = class_name + \".\" + extensions.get(0);\n\
    \        for (i = 0; i < extensions.size(); i++) {\n            if (strength[i]\
    \ == max) {\n                result = class_name + \".\" + extensions.get(i);\n\
    \            }\n        }\n        return result;", "        StringBuilder sb\
    \ = new StringBuilder();\n        sb.append(class_name);\n        sb.append(\"\
    .\");\n        int strength = 0;\n        int maxStrength = 0;\n        String\
    \ maxStrengthExtension = \"\";\n        for (String extension : extensions) {\n\
    \            int cap = 0;\n            int sm = 0;\n            for (int i = 0;\
    \ i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength = (cap - sm);\n\
    \            if (strength > maxStrength) {\n                maxStrength = strength;\n\
    \                maxStrengthExtension = extension;\n            }\n        }\n\
    \        sb.append(maxStrengthExtension);\n        return sb.toString();", " \
    \       int[] strength = new int[extensions.size()];\n        int max = 0;\n \
    \       int max_index = 0;\n        for(int i = 0; i < extensions.size(); i++)\
    \ {\n            String ext = extensions.get(i);\n            int cap = 0;\n \
    \           int sm = 0;\n            for(int j = 0; j < ext.length(); j++) {\n\
    \                if(ext.charAt(j) >= 'A' && ext.charAt(j) <= 'Z') {\n        \
    \            cap++;\n                }\n                else {\n             \
    \       sm++;\n                }\n            }\n            strength[i] = cap\
    \ - sm;\n            if(strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        String ext\
    \ = extensions.get(max_index);\n        return class_name + \".\" + ext;", " \
    \       String[] str_arr = class_name.split(\"\\\\.\");\n        int strength\
    \ = 0;\n        String extension = \"\";\n        for (String s : extensions)\
    \ {\n            int cap = 0, sm = 0;\n            for (char c : s.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n            if (strength > extension.length())\
    \ {\n                extension = s;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        int[] strength = new int[extensions.size()];\n\
    \        int max = 0;\n        int i = 0;\n        for (String extension : extensions)\
    \ {\n            int cap = 0, sm = 0;\n            for (char c : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength[i] = cap - sm;\n            if (strength[i] >\
    \ max) {\n                max = strength[i];\n            }\n            i++;\n\
    \        }\n        int max_index = 0;\n        for (i = 0; i < strength.length;\
    \ i++) {\n            if (strength[i] == max) {\n                max_index = i;\n\
    \            }\n        }\n        String result = class_name + \".\" + extensions.get(max_index);\n\
    \        return result;", "        String[] arr = class_name.split(\"\\\\.\");\n\
    \        int cap = 0, sm = 0;\n        for (int i = 0; i < arr.length; i++) {\n\
    \            if (arr[i].length() > 1) {\n                if (arr[i].substring(0,\
    \ 1).equals(arr[i].substring(0, 1).toUpperCase())) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n        }\n        String result = \"\";\n        for (String ext\
    \ : extensions) {\n            if (cap - sm > 0) {\n                if (cap -\
    \ sm > 1) {\n                    if (cap - sm == 2) {\n                      \
    \  if (ext.substring(0, 1).equals(ext.substring(0, 1).toUpperCase())) {\n    \
    \                        cap--;\n                            sm--;\n         \
    \               }\n                    }\n                }\n                if\
    \ (cap - sm == 1) {\n                    if (ext.substring(0, 1).equals(ext.substring(0,\
    \ 1).toUpperCase())) {\n                        cap--;\n                     \
    \   sm--;\n                    }\n                }\n            }\n         \
    \   if (cap - sm == 0) {\n                if (ext.substring(0, 1).equals(ext.substring(0,\
    \ 1).toUpperCase())) {\n                    cap--;\n                    sm--;\n\
    \                }\n            }\n            if (cap == 0 && sm == 0) {\n  \
    \              result = class_name + \".\" + ext;\n            }\n        }\n\
    \        return result;", "        int[] strength = new int[extensions.size()];\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            int cap = 0;\n            int sm = 0;\n  \
    \          for (int j = 0; j < extension.length(); j++) {\n                if\
    \ (Character.isUpperCase(extension.charAt(j))) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength[i] = cap - sm;\n        }\n        Arrays.sort(strength);\n\
    \        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        for (int i = 0; i < strength.length; i++)\
    \ {\n            if (i == strength.length - 1) {\n                sb.append(extensions.get(i));\n\
    \            } else {\n                sb.append(extensions.get(i));\n       \
    \         sb.append(\".\");\n            }\n        }\n        return sb.toString();",
  "        int[] strengths = new int[extensions.size()];\n        int max_strength\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            strengths[i] = getStrength(extensions.get(i));\n       \
    \     if (strengths[i] > max_strength) {\n                max_strength = strengths[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(max_index);", "        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name).append(\".\");\n        int strength = 0;\n   \
    \     for (String extension : extensions) {\n            int cap = 0;\n      \
    \      int sm = 0;\n            for (char c : extension.toCharArray()) {\n   \
    \             if (Character.isUpperCase(c)) {\n                    cap++;\n  \
    \              } else {\n                    sm++;\n                }\n      \
    \      }\n            strength += (cap - sm);\n        }\n        for (String\
    \ extension : extensions) {\n            if (extension.compareTo(extensions.get(0))\
    \ < 0) {\n                continue;\n            }\n            if (extension.compareTo(extensions.get(0))\
    \ == 0) {\n                if (extension.compareTo(extensions.get(0)) > 0) {\n\
    \                    continue;\n                }\n            }\n           \
    \ sb.append(extension);\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        sb.append(class_name);\n        sb.append(\"\
    .\");\n        int max_strength = 0;\n        String max_extension = \"\";\n \
    \       for (String extension : extensions) {\n            int strength = 0;\n\
    \            for (int i = 0; i < extension.length(); i++) {\n                if\
    \ (Character.isUpperCase(extension.charAt(i))) {\n                    strength++;\n\
    \                } else {\n                    strength--;\n                }\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                max_extension = extension;\n            }\n   \
    \     }\n        sb.append(max_extension);\n        return sb.toString();", " \
    \       int max = 0;\n        String max_ext = \"\";\n        for (String ext\
    \ : extensions) {\n            int cap = 0, sm = 0;\n            for (char c :\
    \ ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n    \
    \                cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            int strength = cap - sm;\n    \
    \        if (strength > max) {\n                max = strength;\n            \
    \    max_ext = ext;\n            }\n        }\n        return class_name + \"\
    .\" + max_ext;", "        int[] strengths = new int[extensions.size()];\n    \
    \    int max = 0;\n        int index = 0;\n        for(String extension : extensions)\
    \ {\n            strengths[index] = Character.getNumericValue(extension.charAt(0))\
    \ - Character.getNumericValue(extension.charAt(1));\n            if(strengths[index]\
    \ > max) {\n                max = strengths[index];\n                index = 0;\n\
    \            }\n            else if(strengths[index] == max) {\n             \
    \   index++;\n            }\n        }\n        for(int i = 0; i < index; i++)\
    \ {\n            strengths[i] = 0;\n        }\n        StringBuilder sb = new\
    \ StringBuilder();\n        sb.append(class_name);\n        for(int i = 0; i <\
    \ index; i++) {\n            sb.append(\".\").append(extensions.get(strengths[i]));\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        for(String ext: extensions) {\n     \
    \       int cap = 0;\n            int sm = 0;\n            for(char c: ext.toCharArray())\
    \ {\n                if(Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            int strength = (cap - sm);\n            if(strength ==\
    \ 0) {\n                continue;\n            }\n            sb.append(\".\"\
    );\n            sb.append(ext);\n        }\n        return sb.toString();", " \
    \       String[] str = class_name.split(\"\\\\.\");\n        int[] strength =\
    \ new int[str.length];\n        for (int i = 0; i < str.length; i++) {\n     \
    \       strength[i] = str[i].length() - str[i].replaceAll(\"[a-z]\", \"\").length();\n\
    \        }\n        int max = 0;\n        String max_ext = \"\";\n        for\
    \ (int i = 0; i < extensions.size(); i++) {\n            String ext = extensions.get(i);\n\
    \            int[] ext_strength = new int[ext.length()];\n            for (int\
    \ j = 0; j < ext.length(); j++) {\n                ext_strength[j] = ext.length()\
    \ - ext.replaceAll(\"[a-z]\", \"\").length();\n            }\n            int\
    \ sum = 0;\n            for (int j = 0; j < strength.length; j++) {\n        \
    \        sum += Math.min(strength[j], ext_strength[j]);\n            }\n     \
    \       if (sum > max) {\n                max = sum;\n                max_ext\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;",
  "        String[] str = class_name.split(\"\\\\.\");\n        int cap = 0;\n   \
    \     int sm = 0;\n        for(int i = 0; i < str.length; i++) {\n           \
    \ if(Character.isUpperCase(str[i].charAt(0))) {\n                cap++;\n    \
    \        }\n            if(Character.isLowerCase(str[i].charAt(0))) {\n      \
    \          sm++;\n            }\n        }\n        int strength = cap - sm;\n\
    \        String result = \"\";\n        for(int i = 0; i < extensions.size();\
    \ i++) {\n            if(extensions.get(i).equals(str[str.length - 1])) {\n  \
    \              if(strength == 0) {\n                    result = class_name +\
    \ \".\" + extensions.get(i);\n                    return result;\n           \
    \     }\n                if(strength < 0) {\n                    if(extensions.get(i).compareTo(result)\
    \ < 0) {\n                        result = class_name + \".\" + extensions.get(i);\n\
    \                    }\n                }\n                if(strength > 0) {\n\
    \                    if(extensions.get(i).compareTo(result) > 0) {\n         \
    \               result = class_name + \".\" + extensions.get(i);\n           \
    \         }\n                }\n            }\n        }\n        return result;",
  "        int[] strength = new int[extensions.size()];\n        int i = 0;\n    \
    \    for (String extension : extensions) {\n            int cap = 0;\n       \
    \     int sm = 0;\n            for (char c : extension.toCharArray()) {\n    \
    \            if (Character.isUpperCase(c)) {\n                    cap++;\n   \
    \             } else {\n                    sm++;\n                }\n       \
    \     }\n            strength[i] = cap - sm;\n            i++;\n        }\n  \
    \      Arrays.sort(strength);\n        int max = strength[0];\n        int index\
    \ = 0;\n        for (int i = 1; i < strength.length; i++) {\n            if (strength[i]\
    \ == max) {\n                index = i;\n            } else {\n              \
    \  break;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        sb.append(extensions.get(index));\n\
    \        return sb.toString();", "        String[] class_name_split = class_name.split(\"\
    \\\\.\");\n        String class_name_base = class_name_split[0];\n        String\
    \ class_name_extension = class_name_split[1];\n        int class_name_extension_strength\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            int extension_strength = 0;\n            String[]\
    \ extension_split = extension.split(\"\\\\.\");\n            String extension_base\
    \ = extension_split[0];\n            String extension_extension = extension_split[1];\n\
    \            if (class_name_base.equals(extension_base)) {\n                extension_strength\
    \ = class_name_extension.length() - extension_extension.length();\n          \
    \  }\n            if (extension_strength > class_name_extension_strength) {\n\
    \                strongest_extension = extension;\n                class_name_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        int[] strength = new int[extensions.size()];\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String[] split\
    \ = extensions.get(i).split(\"\\\\.\");\n            int cap = 0;\n          \
    \  int sm = 0;\n            for (int j = 0; j < split.length; j++) {\n       \
    \         if (Character.isUpperCase(split[j].charAt(0))) {\n                 \
    \   cap++;\n                } else {\n                    sm++;\n            \
    \    }\n            }\n            strength[i] = cap - sm;\n        }\n      \
    \  Arrays.sort(strength);\n        int max = strength[0];\n        int index =\
    \ 0;\n        for (int i = 1; i < strength.length; i++) {\n            if (strength[i]\
    \ == max) {\n                index++;\n            } else {\n                break;\n\
    \            }\n        }\n        String result = class_name + \".\" + extensions.get(index);\n\
    \        return result;", "        int[] strength = new int[extensions.size()];\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String[] split\
    \ = extensions.get(i).split(\"\\\\.\");\n            int cap = 0;\n          \
    \  int sm = 0;\n            for (int j = 0; j < split.length; j++) {\n       \
    \         if (Character.isUpperCase(split[j].charAt(0))) {\n                 \
    \   cap++;\n                } else {\n                    sm++;\n            \
    \    }\n            }\n            strength[i] = cap - sm;\n        }\n      \
    \  Arrays.sort(strength);\n        StringBuilder sb = new StringBuilder();\n \
    \       sb.append(class_name);\n        for (int i = 0; i < strength.length; i++)\
    \ {\n            sb.append(\".\");\n            sb.append(extensions.get(i));\n\
    \        }\n        return sb.toString();", "        int max_strength = -1;\n\
    \        String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            int cap = 0;\n            int\
    \ sm = 0;\n            for (int i = 0; i < extension.length(); i++) {\n      \
    \          if (Character.isUpperCase(extension.charAt(i))) {\n               \
    \     cap++;\n                } else {\n                    sm++;\n          \
    \      }\n            }\n            strength = cap - sm;\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        int strength = 0;\n   \
    \     String extension = \"\";\n        for (String ext : extensions) {\n    \
    \        int cap = 0;\n            int sm = 0;\n            for (int i = 0; i\
    \ < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        int[] strength = new int[extensions.size()];\n        int i = 0;\n    \
    \    for(String extension : extensions) {\n            int cap = 0, sm = 0;\n\
    \            for(char c : extension.toCharArray()) {\n                if(Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \            i++;\n        }\n        Arrays.sort(strength);\n        StringBuilder\
    \ sb = new StringBuilder();\n        sb.append(class_name).append(\".\").append(extensions.get(strength[0]));\n\
    \        return sb.toString();", "        int[] strength = new int[extensions.size()];\n\
    \        int max = 0;\n        String max_ext = \"\";\n        for (int i = 0;\
    \ i < extensions.size(); i++) {\n            String ext = extensions.get(i);\n\
    \            int cap = 0, sm = 0;\n            for (int j = 0; j < ext.length();\
    \ j++) {\n                if (Character.isUpperCase(ext.charAt(j))) {\n      \
    \              cap++;\n                } else {\n                    sm++;\n \
    \               }\n            }\n            strength[i] = cap - sm;\n      \
    \      if (strength[i] > max) {\n                max = strength[i];\n        \
    \        max_ext = ext;\n            }\n        }\n        return class_name +\
    \ \".\" + max_ext;", "        StringBuilder sb = new StringBuilder();\n      \
    \  sb.append(class_name);\n        int strength = 0;\n        for (String extension\
    \ : extensions) {\n            int cap = 0, sm = 0;\n            for (int i =\
    \ 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \        }\n        for (String extension : extensions) {\n            if (extension.length()\
    \ == strength) {\n                sb.append(\".\").append(extension);\n      \
    \          break;\n            }\n        }\n        return sb.toString();", " \
    \       int strength = 0;\n        String strongest_extension = \"\";\n      \
    \  for (String extension : extensions) {\n            int cap = 0;\n         \
    \   int sm = 0;\n            for (char c : extension.toCharArray()) {\n      \
    \          if (Character.isUpperCase(c)) {\n                    cap++;\n     \
    \           } else {\n                    sm++;\n                }\n         \
    \   }\n            strength += (cap - sm);\n        }\n        for (String extension\
    \ : extensions) {\n            if (extension.equals(strongest_extension)) {\n\
    \                continue;\n            }\n            if (extension.length()\
    \ > strongest_extension.length()) {\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        int[] strengths = new int[extensions.size()];\n        for(int i = 0; i\
    \ < extensions.size(); i++) {\n            strengths[i] = getStrength(extensions.get(i));\n\
    \        }\n        Arrays.sort(strengths);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name).append(\".\").append(extensions.get(strengths[strengths.length\
    \ - 1]));\n        return sb.toString();", "        int[] strength = new int[extensions.size()];\n\
    \        int i = 0;\n        for(String extension : extensions) {\n          \
    \  int cap = 0;\n            int sm = 0;\n            for(char c : extension.toCharArray())\
    \ {\n                if(Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength[i] = cap - sm;\n            i++;\n        }\n\
    \        Arrays.sort(strength);\n        int max = strength[0];\n        int max_index\
    \ = 0;\n        for(int j = 1; j < strength.length; j++) {\n            if(strength[j]\
    \ == max) {\n                max_index = j;\n            } else {\n          \
    \      break;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        sb.append(extensions.get(max_index));\n\
    \        return sb.toString();", "        String[] class_name_split = class_name.split(\"\
    \\\\.\");\n        String class_name_base = class_name_split[0];\n        String\
    \ class_name_extension = class_name_split[1];\n        int strength = 0;\n   \
    \     String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            String[] extension_split = extension.split(\"\\\\.\");\n    \
    \        String extension_base = extension_split[0];\n            String extension_extension\
    \ = extension_split[1];\n            int extension_strength = 0;\n           \
    \ if (class_name_base.equals(extension_base)) {\n                extension_strength\
    \ = -1;\n            } else if (class_name_base.equals(extension_extension)) {\n\
    \                extension_strength = 1;\n            } else if (class_name_extension.equals(extension_base))\
    \ {\n                extension_strength = 2;\n            } else if (class_name_extension.equals(extension_extension))\
    \ {\n                extension_strength = 3;\n            }\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        int[] strength = new int[extensions.size()];\n\
    \        for (int i = 0; i < strength.length; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions.get(i).length(); j++) {\n \
    \               if (Character.isUpperCase(extensions.get(i).charAt(j))) {\n  \
    \                  strength[i]++;\n                }\n            }\n        \
    \    for (int j = 0; j < extensions.get(i).length(); j++) {\n                if\
    \ (Character.isLowerCase(extensions.get(i).charAt(j))) {\n                   \
    \ strength[i]--;\n                }\n            }\n        }\n        int max\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < strength.length;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        String result\
    \ = class_name + \".\" + extensions.get(max_index);\n        return result;",
  "        int strength = 0;\n        String extension = \"\";\n        for (String\
    \ ext : extensions) {\n            int cap = 0, sm = 0;\n            for (char\
    \ c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength += (cap - sm) / 2;\n \
    \           if (strength > extension.length()) {\n                extension =\
    \ ext;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        int[] strength = new int[extensions.size()];\n        int i = 0;\n    \
    \    for(String extension : extensions) {\n            int cap = 0;\n        \
    \    int sm = 0;\n            for(char c : extension.toCharArray()) {\n      \
    \          if(Character.isUpperCase(c)) {\n                    cap++;\n      \
    \          }\n                else {\n                    sm++;\n            \
    \    }\n            }\n            strength[i] = cap - sm;\n            i++;\n\
    \        }\n        Arrays.sort(strength);\n        int max = strength[0];\n \
    \       String result = class_name + \".\" + extensions.get(0);\n        for(int\
    \ j = 1; j < strength.length; j++) {\n            if(strength[j] == max) {\n \
    \               result = class_name + \".\" + extensions.get(j);\n           \
    \ }\n            else {\n                break;\n            }\n        }\n  \
    \      return result;", "        String[] class_name_split = class_name.split(\"\
    \\\\.\");\n        String class_name_base = class_name_split[0];\n        String\
    \ class_name_extension = class_name_split[1];\n        int class_name_extension_strength\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            int extension_strength = 0;\n            String[]\
    \ extension_split = extension.split(\"\\\\.\");\n            String extension_base\
    \ = extension_split[0];\n            String extension_extension = extension_split[1];\n\
    \            if (class_name_base.equals(extension_base)) {\n                extension_strength\
    \ = Math.abs(class_name_extension.length() - extension_extension.length());\n\
    \            }\n            if (extension_strength > class_name_extension_strength)\
    \ {\n                strongest_extension = extension;\n                class_name_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        String[] class_name_split = class_name.split(\"\
    \\\\.\");\n        String class_name_without_extension = class_name_split[0];\n\
    \        String extension = class_name_split[1];\n        int strength = 0;\n\
    \        int max_strength = 0;\n        String strongest_extension = \"\";\n \
    \       for(String extension_name : extensions) {\n            int strength_of_extension\
    \ = 0;\n            String[] extension_name_split = extension_name.split(\"\\\\\
    .\");\n            String extension_name_without_extension = extension_name_split[0];\n\
    \            String extension_name_extension = extension_name_split[1];\n    \
    \        if(class_name_without_extension.equals(extension_name_without_extension))\
    \ {\n                strength_of_extension = strength_of_extension + 1;\n    \
    \        }\n            if(extension_name_extension.equals(extension)) {\n   \
    \             strength_of_extension = strength_of_extension + 2;\n           \
    \ }\n            strength_of_extension = strength_of_extension - (extension_name_extension.length()\
    \ - extension.length());\n            if(strength_of_extension > max_strength)\
    \ {\n                max_strength = strength_of_extension;\n                strongest_extension\
    \ = extension_name;\n            }\n        }\n        return class_name_without_extension\
    \ + \".\" + strongest_extension;", "        int[] strengths = new int[extensions.size()];\n\
    \        int i = 0;\n        for(String extension : extensions) {\n          \
    \  strengths[i] = getStrength(extension);\n            i++;\n        }\n     \
    \   Arrays.sort(strengths);\n        String strongest = \"\";\n        for(i =\
    \ 0; i < strengths.length; i++) {\n            if(strengths[i] == strengths[strengths.length\
    \ - 1]) {\n                strongest += class_name + \".\" + extensions.get(i)\
    \ + \" \";\n            }\n        }\n        return strongest;", "        int[]\
    \ strength = new int[extensions.size()];\n        int[] index = new int[extensions.size()];\n\
    \        int i = 0;\n        for(String extension : extensions) {\n          \
    \  int cap = 0;\n            int sm = 0;\n            for(char c : extension.toCharArray())\
    \ {\n                if(Character.isUpperCase(c)) {\n                    cap++;\n\
    \                }\n                else {\n                    sm++;\n      \
    \          }\n            }\n            strength[i] = cap - sm;\n           \
    \ index[i] = i;\n            i++;\n        }\n        Arrays.sort(strength);\n\
    \        Arrays.sort(index);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name).append(\".\").append(extensions.get(index[0]));\n\
    \        return sb.toString();", "        String[] class_name_split = class_name.split(\"\
    \\\\.\");\n        String class_name_base = class_name_split[0];\n        String\
    \ class_name_extension = class_name_split[1];\n        int strength = 0;\n   \
    \     int max_strength = 0;\n        String strongest_extension = \"\";\n    \
    \    for (String extension : extensions) {\n            int cap = 0;\n       \
    \     int sm = 0;\n            for (int i = 0; i < extension.length(); i++) {\n\
    \                if (Character.isUpperCase(extension.charAt(i))) {\n         \
    \           cap++;\n                } else {\n                    sm++;\n    \
    \            }\n            }\n            strength = cap - sm;\n            if\
    \ (strength > max_strength) {\n                max_strength = strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name_base + \".\" + strongest_extension;", "        String[]\
    \ str = class_name.split(\"\\\\.\");\n        String name = \"\";\n        for(int\
    \ i = 0; i < str.length - 1; i++) {\n            name += str[i];\n        }\n\
    \        int cap = 0;\n        int sm = 0;\n        for(int i = 0; i < name.length();\
    \ i++) {\n            if(Character.isUpperCase(name.charAt(i))) {\n          \
    \      cap++;\n            }\n            if(Character.isLowerCase(name.charAt(i)))\
    \ {\n                sm++;\n            }\n        }\n        int strength = (cap\
    \ - sm);\n        String strng = \"\";\n        for(int i = 0; i < extensions.size();\
    \ i++) {\n            if(extensions.get(i).equals(name)) {\n                if(strength\
    \ > 0) {\n                    strng = class_name + \".\" + extensions.get(i);\n\
    \                }\n                else {\n                    strng = class_name\
    \ + \".\" + extensions.get(i);\n                }\n            }\n        }\n\
    \        return strng;", "        String result = \"\";\n        int strength\
    \ = 0;\n        for(String extension : extensions) {\n            int cap = 0;\n\
    \            int sm = 0;\n            for(char c : extension.toCharArray()) {\n\
    \                if(Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength += (cap - sm);\n        }\n        for(String\
    \ extension : extensions) {\n            if(extension.compareTo(result) < 0) {\n\
    \                result = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + result;", "        int[] strength = new int[extensions.size()];\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            int cap = 0, sm = 0;\n            for (int\
    \ j = 0; j < extension.length(); j++) {\n                if (Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \        }\n        Arrays.sort(strength);\n        for (int i = 0; i < strength.length;\
    \ i++) {\n            if (strength[i] == strength[i + 1]) {\n                continue;\n\
    \            }\n            return class_name + \".\" + extensions.get(i);\n \
    \       }\n        return class_name + \".\" + extensions.get(0);", "        int[]\
    \ strength = new int[extensions.size()];\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int cap\
    \ = 0;\n            int sm = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                if (Character.isUpperCase(extension.charAt(j))) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength[i] = cap - sm;\n     \
    \   }\n        Arrays.sort(strength);\n        int index = Arrays.binarySearch(strength,\
    \ strength[0]);\n        if (index < 0) {\n            index = -index - 1;\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        sb.append(extensions.get(index));\n      \
    \  return sb.toString();", "        int strength = 0;\n        String extension\
    \ = \"\";\n        for (String s : extensions) {\n            int cap = 0, sm\
    \ = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength += (cap - sm);\n\
    \            if (strength > extension.length()) {\n                extension =\
    \ s;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        for(String ext : extensions) {\n            int cap = 0;\n          \
    \  int sm = 0;\n            for(int i = 0; i < ext.length(); i++) {\n        \
    \        if(Character.isUpperCase(ext.charAt(i))) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            int strength = cap - sm;\n            if(strength > 0)\
    \ {\n                sb.append(\".\");\n                sb.append(ext);\n    \
    \        }\n        }\n        return sb.toString();", "        String[] class_name_split\
    \ = class_name.split(\"\\\\.\");\n        String class_name_base = class_name_split[0];\n\
    \        String class_name_extension = class_name_split[1];\n        String strongest_extension\
    \ = \"\";\n        int strength = 0;\n        for (String extension : extensions)\
    \ {\n            String[] extension_split = extension.split(\"\\\\.\");\n    \
    \        String extension_base = extension_split[0];\n            String extension_extension\
    \ = extension_split[1];\n            int base_strength = 0;\n            int extension_strength\
    \ = 0;\n            if (class_name_base.equals(extension_base)) {\n          \
    \      base_strength = class_name_extension.length() - extension_extension.length();\n\
    \            }\n            if (class_name_extension.equals(extension_extension))\
    \ {\n                extension_strength = class_name_extension.length() - extension_extension.length();\n\
    \            }\n            if (base_strength > extension_strength) {\n      \
    \          strength = base_strength;\n                strongest_extension = class_name_base\
    \ + \".\" + extension_extension;\n            } else {\n                strength\
    \ = extension_strength;\n                strongest_extension = class_name_extension\
    \ + \".\" + extension_extension;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        int[] strengths = new int[extensions.size()];\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            strengths[i]\
    \ = getStrength(extensions.get(i));\n        }\n        Arrays.sort(strengths);\n\
    \        int max = strengths[strengths.length - 1];\n        for (int i = 0; i\
    \ < extensions.size(); i++) {\n            if (strengths[i] == max) {\n      \
    \          return class_name + \".\" + extensions.get(i);\n            }\n   \
    \     }\n        return class_name + \".\" + extensions.get(0);", "        String[]\
    \ str = class_name.split(\"\\\\.\");\n        int strength = 0;\n        String\
    \ extension = \"\";\n        for (int i = 0; i < str.length; i++) {\n        \
    \    if (str[i].length() > strength) {\n                strength = str[i].length();\n\
    \                extension = str[i];\n            }\n        }\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions.get(i).equals(extension))\
    \ {\n                return class_name + \".\" + extensions.get(i);\n        \
    \    }\n        }\n        return class_name + \".\" + extension;", "        String[]\
    \ str = class_name.split(\"\\\\.\");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < str.length; i++) {\n            if (i == 0) {\n \
    \               sb.append(str[i]);\n            } else {\n                sb.append(\"\
    .\").append(str[i]);\n            }\n        }\n        int[] strength = new int[extensions.size()];\n\
    \        for (int i = 0; i < strength.length; i++) {\n            String s = extensions.get(i);\n\
    \            String[] str2 = s.split(\"\\\\.\");\n            int cap = 0, sm\
    \ = 0;\n            for (int j = 0; j < str2.length; j++) {\n                if\
    \ (Character.isUpperCase(str2[j].charAt(0))) {\n                    cap++;\n \
    \               } else {\n                    sm++;\n                }\n     \
    \       }\n            strength[i] = cap - sm;\n        }\n        Arrays.sort(strength);\n\
    \        int max = strength[0];\n        int index = 0;\n        for (int i =\
    \ 0; i < strength.length; i++) {\n            if (strength[i] == max) {\n    \
    \            index = i;\n            }\n        }\n        sb.append(\".\").append(extensions.get(index));\n\
    \        return sb.toString();", "        int[] strength = new int[extensions.size()];\n\
    \        int i = 0;\n        for (String extension : extensions) {\n         \
    \   int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength[i] = cap - sm;\n            i++;\n        }\n\
    \        Arrays.sort(strength);\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        sb.append(\".\");\n        for (int j\
    \ = 0; j < strength.length; j++) {\n            if (j == strength.length - 1)\
    \ {\n                sb.append(extensions.get(j));\n            } else {\n   \
    \             sb.append(extensions.get(j));\n                sb.append(\".\");\n\
    \            }\n        }\n        return sb.toString();", "        int max_strength\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            int strength = 0;\n            int cap = 0;\n \
    \           int sm = 0;\n            for (int i = 0; i < extension.length(); i++)\
    \ {\n                if (Character.isUpperCase(extension.charAt(i))) {\n     \
    \               cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            strength = cap - sm;\n        \
    \    if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        String[]\
    \ str = class_name.split(\"\\\\.\");\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < str.length - 1; i++) {\n            sb.append(str[i]);\n\
    \            sb.append(\".\");\n        }\n        sb.append(str[str.length -\
    \ 1]);\n        String result = sb.toString();\n        int strength = 0;\n  \
    \      for(String s : extensions) {\n            int cap = 0;\n            int\
    \ sm = 0;\n            for(char c : s.toCharArray()) {\n                if(Character.isUpperCase(c))\
    \ {\n                    cap++;\n                }\n                if(Character.isLowerCase(c))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength += cap - sm;\n        }\n        for(String s : extensions) {\n   \
    \         if(s.equals(result)) {\n                return result;\n           \
    \ }\n            if(s.compareTo(result) > 0 && strength == s.length()) {\n   \
    \             return s;\n            }\n        }\n        return result;", " \
    \       String result = \"\";\n        int[] strength = new int[extensions.size()];\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            int cap = 0, sm = 0;\n            for (int\
    \ j = 0; j < extension.length(); j++) {\n                if (Character.isUpperCase(extension.charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            strength[i] = cap - sm;\n\
    \        }\n        Arrays.sort(strength);\n        for (int i = 0; i < strength.length;\
    \ i++) {\n            if (strength[i] == strength[i + 1]) {\n                continue;\n\
    \            }\n            result = class_name + \".\" + extensions.get(i) +\
    \ \".\";\n            break;\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
