{
  "name": "HumanEval_129_minPath",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    // each cell of the grid contains a value. Every integer in the range [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    // You have to find the minimum path of length k in the grid. You can start\n    // from any cell, and in each step you can move to any of the neighbor cells,\n    // in other words, you can go to cells which share an edge with you current\n    // cell.\n    // Please note that a path of length k means visiting exactly k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n    // A path A (of length k) is considered less than a path B (of length k) if\n    // after making the ordered array lists of the values on the cells that A and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n    // Return an ordered array list of the values on the cells that the minimum path go through.\n    // Examples:    \n    // >>> minPath([ [1,2,3], [4,5,6], [7,8,9]], 3)\n    // [1, 2, 1]\n    // >>> minPath([ [5,9,3], [4,1,6], [7,8,2]], 1)\n    // [1]\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l, (long)16l))))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)12l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)16l, (long)11l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l))))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)1l, (long)10l, (long)1l, (long)10l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)11l, (long)16l))))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)1l, (long)7l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l))))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l))))), (12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)9l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n    }\n\n}\n",
  "completions": [
    "        ArrayList<Long> lst = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(Math.min(dp[i][j], dp[i - 1][j]) - 1);\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] dp_next = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp_next[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        dp_next[0][0] = 0;\n        for(int i = 1; i < n; i++) {\n            dp_next[i][0] = dp_next[i - 1][0] + 1;\n        }\n        for(int j = 1; j < m; j++) {\n            dp_next[0][j] = dp_next[0][j - 1] + 1;\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < m; j++) {\n                dp_next[i][j] = Math.min(dp_next[i - 1][j], dp_next[i][j - 1]) + 1;\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        int[] path = new int[k];\n        int i = n - 1;\n        int j = m - 1;\n        while(i >= 0 && j >= 0) {\n            if(dp_next[i][j] == dp[i][j]) {\n                path[k - 1] = i;\n                k--;\n                i--;\n                j--;\n            } else if(dp_next[i][j] > dp[i][j]) {\n                i--;\n            } else {\n                j--;\n            }\n        }\n        for(int p = 0; p < k; p++) {\n            ",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (m == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (k == 1) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            return result;\n        }\n        if (k == 2) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(1).get(1));\n            return result;\n        }\n        if (k == 3) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(1).get(1));\n            result.add(grid.get(1).get(2));\n            result.add(grid.get(2).get(0));\n            result.add(grid.get(2).get(1));\n            result.add(grid.get(2).get(2));\n            return result;\n        }\n        if (k == 4) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(1).get(1));\n            result.add(grid.get(1).get(",
    "        ArrayList<Long> ans = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int di = -1; di <= 1; di++) {\n                    for (int dj = -1; dj <= 1; dj++) {\n                        if (di == 0 && dj == 0) continue;\n                        int r = i + di;\n                        int c = j + dj;\n                        if (r < 0 || r >= n || c < 0 || c >= m) continue;\n                        dp[r][c] = Math.min(dp[r][c], dp[i][j] + 1);\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                if (dp[i][j] == k) {\n                    ans.add(dp[i][j]);\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        if (rows == 0 || cols == 0) {\n            return result;\n        }\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (",
    "        ArrayList<Long> ans = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                for (int di = -1; di <= 1; di++) {\n                    for (int dj = -1; dj <= 1; dj++) {\n                        if (di == 0 && dj == 0) {\n                            continue;\n                        }\n                        int ri = i + di;\n                        int rj = j + dj;\n                        if (ri < 0 || ri >= n || rj < 0 || rj >= m) {\n                            continue;\n                        }\n                        if (dp[ri][rj] == 0) {\n                            continue;\n                        }\n                        dp[i][j] = Math.min(dp[i][j], dp[ri][rj] + 1);\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                ans.add(dp[i][j]);\n            }\n        }\n        Collections.sort(ans);\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j - 1], grid.get(i).get(j));\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i - 1][j], grid.get(i).get(j));\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], grid.get(i).get(j)));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(Math.min(dp[i][j], grid.get(i).get(j)));\n                } else if (j == 0) {\n                    result.add(Math.min(dp[i][j], grid.get(i).get(j)));\n                } else {\n                    result.add(Math.min(dp[i][j], Math.min(dp[i][j - 1], grid.get(i).get(j))));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if (grid.size() == 0) return ans;\n        if (grid.get(0).size() == 0) return ans;\n        if (k == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) continue;\n                if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) continue;\n                if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        for (int",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                lst.add(grid.get(i).get(j));\n            }\n        }\n        \n        long[] dp = new long[n * m];\n        Arrays.fill(dp, Long.MAX_VALUE);\n        dp[0] = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i * m + j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i * m + j] = Math.min(dp[(i - 1) * m + j], dp[i * m + j]) + grid.get(i).get(j);\n                } else if (j == 0) {\n                    dp[i * m + j] = Math.min(dp[i * m + (j - 1)], dp[i * m + j]) + grid.get(i).get(j);\n                } else {\n                    dp[i * m + j] = Math.min(dp[(i - 1) * m + (j - 1)], Math.min(dp[(i - 1) * m + j], dp[i * m + (j - 1)])) + grid.get(i).get(j);\n                }\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i * m + j] = Math.min(dp[i * m + j], dp[(i + 1) * m + j] + k);\n                } else if (i == 0) {\n                    dp[i * m + j] = Math.min(dp",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    lst.add(grid.get(i).get(j) - dp[i][j]);\n                } else if (j == 0) {\n                    lst.add(grid.get(i).get(j) - dp[i][j]);\n                } else {\n                    lst.add(grid.get(i).get(j) - Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                for(int ii = 0; ii < n; ii++) {\n                    for(int jj = 0; jj < m; jj++) {\n                        if(i == ii && j == jj) continue;\n                        dp[ii][jj] = Math.min(dp[ii][jj], dp[i][j] + 1);\n                    }\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) ans.add(grid.get(i).get(j));\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> lst = new ArrayList<Long>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(dp[i][j]);\n                } else if (i == 0) {\n                    lst.add(Math.min(dp[i][j], dp[i][j - 1]));\n                } else if (j == 0) {\n                    lst.add(Math.min(dp[i][j], dp[i - 1][j]));\n                } else {\n                    lst.add(Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1])));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(Math.min(dp[i][j] - 1, dp[i - 1][j] - 1));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                lst.add(grid.get(i).get(j));\n            }\n        }\n        Collections.sort(lst);\n        int i = 0;\n        int j = 0;\n        while (i < n && j < m) {\n            if (lst.get(i) < lst.get(j)) {\n                i++;\n            } else if (lst.get(i) > lst.get(j)) {\n                j++;\n            } else {\n                i++;\n                j++;\n            }\n        }\n        return lst.subList(0, k);",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    ans.add(dp[i][j]);\n                    continue;\n                }\n                if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + k);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + k);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]) + k);\n                }\n                ans.add(dp[i][j]);\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    result.add(dp[i][j]);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<Long>();\n        if(grid.size() == 0 || grid.get(0).size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        int N = grid.size();\n        int M = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (N == 1 && M == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (N == 1) {\n            for (int i = 0; i < M; i++) {\n                result.add(grid.get(0).get(i));\n            }\n            return result;\n        }\n        if (M == 1) {\n            for (int i = 0; i < N; i++) {\n                result.add(grid.get(i).get(0));\n            }\n            return result;\n        }\n        int[][] dp = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (i > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                }\n                if (j > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                }\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (i > 0 && j > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + dp[i][j - 1]);\n                }\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (i > 0 && j > 0) {\n                    dp[i][j",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] dp2 = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp2[i][j] = dp[i][j];\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i > 0) {\n                    dp2[i][j] = Math.min(dp2[i][j], dp2[i - 1][j]);\n                }\n                if(j > 0) {\n                    dp2[i][j] = Math.min(dp2[i][j], dp2[i][j - 1]);\n                }\n                if(i > 0 && j > 0) {\n                    dp2[i][j] = Math.min(dp2[i][j], dp2[i - 1][j - 1]);\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp2[i][j] == k) {\n                    ans.add(dp[i][j]);\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                if(i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                    continue;\n                }\n                if(i == 0) {\n                    for(int jj = 0; jj < m; jj++) {\n                        if(dp[i][jj] != 0 && dp[i][jj] < dp[i][j]) {\n                            dp[i][j] = dp[i][jj];\n                        }\n                    }\n                }\n                if(j == 0) {\n                    for(int ii = 0; ii < n; ii++) {\n                        if(dp[ii][j] != 0 && dp[ii][j] < dp[i][j]) {\n                            dp[i][j] = dp[ii][j];\n                        }\n                    }\n                }\n                if(i > 0 && j > 0) {\n                    for(int ii = 0; ii < n; ii++) {\n                        for(int jj = 0; jj < m; jj++) {\n                            if(dp[ii][jj] != 0 && dp[ii][jj] < dp[i][j]) {\n                                dp[i][j] = dp[ii][jj];\n                            }\n                        }\n                    }\n                }\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                if(i > 0 && j > 0) {\n                    for(int ii = 0; ii < n; ii++) {",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        if (rows < 2 || cols < 2) return result;\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(dp[i][j] - 2);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] + dp[i][j - 1]);\n                } else if (j == 0) {\n                    result.add(dp[i][j] + dp[i - 1][j]);\n                } else {\n                    result.add(dp[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int[] d : dp) {\n                    if (d[i] == 0) continue;\n                    for (int e : d) {\n                        if (e == 0) continue;\n                        if (dp[i][j] < dp[i][j] + e) {\n                            dp[i][j] = dp[i][j] + e;\n                            ans.add(dp[i][j]);\n                        }\n                    }\n                }\n            }\n        }\n        return ans;",
    "        int N = grid.size();\n        int M = grid.get(0).size();\n        int[][] dp = new int[N][M];\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < M; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        \n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < M; j++) {\n                if(i > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j]) + 1;\n                }\n                if(j > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        \n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < M; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]) + 1);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                result.add(dp[i][j]);\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                if (k == 1) {\n                    ans.add(dp[i][j]);\n                    continue;\n                }\n                int[] dp_i = dp[i];\n                int[] dp_j = dp[j];\n                int[] dp_i_j = dp[i][j];\n                int[] dp_j_i = dp[j][i];\n                int[] dp_i_j_i = dp[i][j][i];\n                int[] dp_j_i_j = dp[j][i][j];\n                int[] dp_i_j_j = dp[i][j][j];\n                int[] dp_j_i_i = dp[j][i][i];\n                int[] dp_i_i_j = dp[i][i][j];\n                int[] dp_j_j_i = dp[j][j][i];\n                int[] dp_i_j_i_i = dp[i][j][i][i];\n                int[] dp_j_i_i_j = dp[j][i][i][j];\n                int[] dp_i_i_j_j = dp[i][i][j][j];\n                int[] dp_j_j_i_i = dp[j][j][i][i];\n                int[] dp_i_i_i_j = dp[i][i][i][j];\n                ",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[][] dp2 = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp2[i][j] = 1;\n                } else if (i == 0) {\n                    dp2[i][j] = dp2[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp2[i][j] = dp2[i - 1][j] + 1;\n                } else {\n                    dp2[i][j] = Math.min(dp2[i - 1][j], dp2[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[][] dp3 = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp3[i][j] = 1;\n                } else if (",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if(grid.size() == 0 || grid.get(0).size() == 0) return ans;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        int i = n - 1;\n        int j = m - 1;\n        while (i >= 0 && j >= 0 && dp[i][j] == k) {\n            result.add(grid.get(i).get(j));\n            i--;\n            j--;\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if(grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if(grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(dp[i][j]);\n                } else if (i == 0) {\n                    lst.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    lst.add(dp[i][j] - 1);\n                } else {\n                    lst.add(Math.min(dp[i][j] - 1, Math.min(dp[i - 1][j], dp[i][j - 1])));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid == null || grid.size() == 0 || k < 1) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if (grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0 || grid.get(0).size() == 0 || k < 1) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                ",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    result.add(grid.get(i).get(j) - dp[i][j - 1]);\n                } else if (j == 0) {\n                    result.add(grid.get(i).get(j) - dp[i - 1][j]);\n                } else {\n                    result.add(grid.get(i).get(j) - Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        if (n == 0 || m == 0) return result;\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    result.add(grid.get(i).get(j) + dp[i][j]);\n                } else if (j == 0) {\n                    result.add(grid.get(i).get(j) + dp[i][j]);\n                } else {\n                    result.add(grid.get(i).get(j) + Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (m == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (k == 1) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            return result;\n        }\n        if (k == 2) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            return result;\n        }\n        if (k == 3) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            return result;\n        }\n        if (k == 4) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            return result;\n        }\n        if (k == 5) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            result.add(grid.get(0).get(5));\n            return result;\n        }\n        if (k",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && j > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i - 1][j] < dp[i][j] && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if (grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int ii = 0; ii < n; ii++) {\n                    for (int jj = 0; jj < m; jj++) {\n                        if (ii == i && jj == j) continue;\n                        if (dp[ii][jj] > dp[i][j]) {\n                            dp[i][j] = dp[ii][jj];\n                        }\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                if (dp[i][j] <= k) {\n                    ans.add(dp[i][j]);\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                if (i - 1 >= 0 && dp[i - 1][j] > dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j - 1 >= 0 && dp[i][j - 1] > dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i - 1 >= 0 && j - 1 >= 0 && dp[i - 1][j - 1] > dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n                if (i + 1 < n && dp[i + 1][j] > dp[i][j]) {\n                    dp[i][j] = dp[i + 1][j];\n                }\n                if (j + 1 < m && dp[i][j + 1] > dp[i][j]) {\n                    dp[i][j] = dp[i][j + 1];\n                }\n                if (i + 1 < n && j + 1 < m && dp[i + 1][j + 1] > dp[i][j]) {\n                    dp[i][j] = dp[i + 1][j + 1];\n                }\n                if (i + 1 < n && dp[i + 1][j] > dp[i][j]) {\n                    dp[i][j",
    "        ArrayList<Long> lst = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                if(i - 1 >= 0 && dp[i - 1][j] != 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n                }\n                if(i + 1 < n && dp[i + 1][j] != 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i + 1][j] + 1);\n                }\n                if(j - 1 >= 0 && dp[i][j - 1] != 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n                }\n                if(j + 1 < m && dp[i][j + 1] != 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j + 1] + 1);\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                if(i - 1 >= 0 && dp[i - 1][j] != 0) {\n                    lst.add(dp[i - 1][j] + 1);\n                }\n                if(i + 1 < n && dp[i + 1][j",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid == null || grid.size() == 0 || k < 1) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[][] dp2 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp2[i][j] = 1;\n                } else if (i == 0) {\n                    dp2[i][j] = dp2[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp2[i][j] = dp2[i - 1][j] + 1;\n                } else {\n                    dp2[i][j] = Math.min(dp2[i - 1][j], dp2[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[][] dp3 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp3[i][j] = 1;\n                } else if (i == 0) {\n                    ",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(Math.min(dp[i][j] - 1, dp[i - 1][j] - 1));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) continue;\n                if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) continue;\n                if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if(grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(dp[i][j] - 1);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    result.add(grid.get(i).get(j) - dp[i][j]);\n                } else if (j == 0) {\n                    result.add(grid.get(i).get(j) - dp[i][j]);\n                } else {\n                    result.add(grid.get(i).get(j) - Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                lst.add(grid.get(i).get(j));\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        int[][] dirs = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        int[] d = new int[]{0, 1};\n        int[] d2 = new int[]{0, -1};\n        int[] d3 = new int[]{1, 0};\n        int[] d4 = new int[]{-1, 0};\n        int[] d5 = new int[]{1, 1};\n        int[] d6 = new int[]{1, -1};\n        int[] d7 = new int[]{-1, 1};\n        int[] d8 = new int[]{-1, -1};\n        int[] d9 = new int[]{0, 0};\n        int[] d10 = new int[]{0, 0};\n        int[] d11 = new int[]{0, 0};\n        int[] d12 = new int[]{0, 0};\n        int[] d13 = new int[]{0, 0};\n        int[] d14 = new int[]{0, 0};\n        int[] d15 = new int[]{0, 0};\n        int[] d16 = new int[]{0, 0};\n        int[] d17 = new int[]{0, 0};\n        int[] d18 = new int[]{0, 0};\n        int[] d19 = new int[]{0, 0};\n        int[] d20 = new int[]{0, 0};\n        int[] d21 = new int[]{0, 0};\n        int[] d22 = new int[]{0, 0};\n        int[] d23 = new int[]{0, 0};\n        int[] d24 = new int[]{0, 0};\n        int",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0 && j != 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (i != 0 && j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0 && j != 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (i != 0 && j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(Math.min(dp[i - 1][j], dp[i][j - 1]) - 1);\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] dp_next = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i - 1 >= 0 && j - 1 >= 0) {\n                    dp_next[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i][j - 1], dp[i - 1][j])) + 1;\n                } else if (i - 1 >= 0) {\n                    dp_next[i][j] = Math.min(dp[i - 1][j], dp[i][j]) + 1;\n                } else if (j - 1 >= 0) {\n                    dp_next[i][j] = Math.min(dp[i][j - 1], dp[i][j]) + 1;\n                } else {\n                    dp_next[i][j] = 1;\n                }\n            }\n        }\n        int[][] dp_prev = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i + 1 < n && j + 1 < m) {\n                    dp_prev[i][j] = Math.min(dp[i + 1][j + 1], Math.min(dp[i][j + 1], dp[i + 1][j])) + 1;\n                } else if (i + 1 < n) {\n                    dp_prev[i][j] = Math.min(dp[i + 1][j], dp[i][j]) + 1;\n                } else if (j + 1 < m) {\n                    dp_prev[",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] dp_next = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp_next[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        dp_next[0][0] = 0;\n        for (int i = 1; i < n; i++) {\n            dp_next[i][0] = dp_next[i - 1][0] + 1;\n        }\n        for (int i = 1; i < m; i++) {\n            dp_next[0][i] = dp_next[0][i - 1] + 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp_next[i][j] = Math.min(dp_next[i - 1][j], dp_next[i][j - 1]) + 1;\n            }\n        }\n        int[][] dp_path = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp_path[i][j] = dp_next[i][j];\n            }\n        }\n        int[][] dp_path_next = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp_path_next[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        dp_path_next[0][0] = 0",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if(grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && dp[i][j] < dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j] < dp[i][j - 1]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i][j] < dp[i - 1][j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i][j] < dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i][j",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] dp_next = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp_next[i][j] = dp[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && j > 0) {\n                    dp_next[i][j] = Math.min(dp_next[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n                if (i > 0) {\n                    dp_next[i][j] = Math.min(dp_next[i][j], dp[i - 1][j]);\n                }\n                if (j > 0) {\n                    dp_next[i][j] = Math.min(dp_next[i][j], dp[i][j - 1]);\n                }\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp_next[i][j] == dp[i][j]) {\n                    result.add(dp[i][j]);\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = -1;\n                } else {\n                    dp[i][j] = grid.get(i).get(j);\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == -1) continue;\n                for (int[] d : dp) {\n                    if (d[j] == -1) continue;\n                    if (i > 0 && dp[i - 1][j] != -1 && dp[i - 1][j] + 1 < dp[i][j]) {\n                        dp[i][j] = dp[i - 1][j] + 1;\n                    }\n                    if (i < rows - 1 && dp[i + 1][j] != -1 && dp[i + 1][j] + 1 < dp[i][j]) {\n                        dp[i][j] = dp[i + 1][j] + 1;\n                    }\n                    if (j > 0 && dp[i][j - 1] != -1 && dp[i][j - 1] + 1 < dp[i][j]) {\n                        dp[i][j] = dp[i][j - 1] + 1;\n                    }\n                    if (j < cols - 1 && dp[i][j + 1] != -1 && dp[i][j + 1] + 1 < dp[i][j]) {\n                        dp[i][j] = dp[i][j + 1] + 1;\n                    }\n                }\n            }\n        ",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if(i == 0) {\n                    dp[i][j] = Math.min(dp[i][j - 1], grid.get(i).get(j));\n                } else if(j == 0) {\n                    dp[i][j] = Math.min(dp[i - 1][j], grid.get(i).get(j));\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], grid.get(i).get(j)));\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if(i == 0) {\n                    result.add(Math.min(dp[i][j], grid.get(i).get(j)));\n                } else if(j == 0) {\n                    result.add(Math.min(dp[i][j], grid.get(i).get(j)));\n                } else {\n                    result.add(Math.min(dp[i][j], Math.min(dp[i - 1][j], grid.get(i).get(j))));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    lst.add(0L);\n                } else {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        int[] dp = new int[n * m];\n        for (int i = 0; i < n * m; i++) {\n            dp[i] = Integer.MAX_VALUE;\n        }\n        dp[0] = 0;\n        for (int i = 1; i < n * m; i++) {\n            if (dp[i] == Integer.MAX_VALUE) {\n                continue;\n            }\n            for (int j = 0; j < n * m; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (dp[j] + 1 < dp[i]) {\n                    dp[i] = dp[j] + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n * m; i++) {\n            if (dp[i] == Integer.MAX_VALUE) {\n                continue;\n            }\n            if (dp[i] == k) {\n                lst.add(0L);\n                lst.add(0L);\n                return lst;\n            }\n        }\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) continue;\n                lst.add(grid.get(i).get(j));\n            }\n        }\n        Collections.sort(lst);\n        int i = 0;\n        while (i < k) {\n            i++;\n            int j = i;\n            while (j < lst.size() && lst.get(j) == lst.get(j - 1)) {\n                j++;\n            }\n            if (j - i < k) {\n                lst.set(i, lst.get(j - 1));\n                i = j;\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[][] dp2 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp2[i][j] = 1;\n                } else if (i == 0) {\n                    dp2[i][j] = dp2[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp2[i][j] = dp2[i - 1][j] + 1;\n                } else {\n                    dp2[i][j] = Math.min(dp2[i - 1][j], dp2[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[][] dp3 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp3[i][j] = 1;\n                } else if (i == 0) {\n                    ",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if (grid.size() == 0) return ans;\n        if (grid.get(0).size() == 0) return ans;\n        if (grid.get(0).size() == 1) return grid.get(0);\n        if (grid.get(0).get(0) == 0) return ans;\n        \n        int n = grid.size();\n        int m = grid.get(0).size();\n        \n        int[][] dp = new int[n][m];\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        \n        return ans;",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if(grid.size() == 0 || grid.get(0).size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if (grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    ans.add(dp[i][j]);\n                } else if (i == 0) {\n                    ans.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    ans.add(dp[i][j] - 1);\n                } else {\n                    ans.add(dp[i][j] - 2);\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    result.add(grid.get(i).get(j) - 1);\n                } else if (j == 0) {\n                    result.add(grid.get(i).get(j) + 1);\n                } else {\n                    result.add(grid.get(i).get(j) - dp[i][j]);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    lst.add(grid.get(i).get(j) - dp[i][j]);\n                } else if (j == 0) {\n                    lst.add(grid.get(i).get(j) - dp[i][j]);\n                } else {\n                    lst.add(grid.get(i).get(j) - Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        Collections.sort(lst);\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int di = -1; di <= 1; di++) {\n                    for (int dj = -1; dj <= 1; dj++) {\n                        if (di == 0 && dj == 0) {\n                            continue;\n                        }\n                        int ri = i + di;\n                        int rj = j + dj;\n                        if (ri < 0 || ri >= n || rj < 0 || rj >= m) {\n                            continue;\n                        }\n                        dp[ri][rj] = Math.min(dp[ri][rj], dp[i][j] + 1);\n                    }\n                }\n            }\n        }\n        int[][] dp2 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp2[i][j] = dp[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int di = -1; di <= 1; di++) {\n                    for (int dj = -1; dj <= 1; dj++) {\n                        if (di == 0 && dj == 0) {\n                            continue;\n                        }\n                        int ri = i + di;\n                        int rj = j + dj;\n                        if (ri < 0 || ri >= n || rj < 0 || rj >= m) {\n                            continue;\n                        }\n                        dp2[ri][rj] = Math.min(dp2[ri][rj], dp2",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if(grid.size() == 0 || grid.get(0).size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + 1);\n                } else if(j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + 1);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i-1][j], dp[i][j-1]) + 1);\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    ans.add(dp[i][j]);\n                } else if(i == 0) {\n                    ans.add(Math.min(dp[i][j], dp[i][j-1] + 1));\n                } else if(j == 0) {\n                    ans.add(Math.min(dp[i][j], dp[i-1][j] + 1));\n                } else {\n                    ans.add(Math.min(dp[i][j], Math.min(dp[i-1][j], dp[i][j-1]) + 1));\n",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid == null || grid.size() == 0) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        if (rows < 2 || cols < 2) {\n            return result;\n        }\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(dp[i][j] - 1);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if(grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[][] dp2 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp2[i][j] = 1;\n                } else if (i == 0) {\n                    dp2[i][j] = dp2[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp2[i][j] = dp2[i - 1][j] + 1;\n                } else {\n                    dp2[i][j] = Math.min(dp2[i - 1][j], dp2[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        Collections.sort(lst);\n        int i = 0;\n        int j = 0;\n        while (",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        if (grid.get(0).size() == 0) return result;\n        if (k == 0) return result;\n        if (grid.size() == 1 && grid.get(0).size() == 1) return result;\n        if (grid.size() == 1 && grid.get(0).size() == 2) {\n            if (grid.get(0).get(0) < grid.get(0).get(1)) {\n                result.add(grid.get(0).get(0));\n                result.add(grid.get(0).get(1));\n            } else {\n                result.add(grid.get(0).get(1));\n                result.add(grid.get(0).get(0));\n            }\n            return result;\n        }\n        if (grid.size() == 2 && grid.get(0).size() == 2) {\n            if (grid.get(0).get(0) < grid.get(1).get(0)) {\n                result.add(grid.get(0).get(0));\n                result.add(grid.get(1).get(0));\n            } else {\n                result.add(grid.get(1).get(0));\n                result.add(grid.get(0).get(0));\n            }\n            return result;\n        }\n        if (grid.size() == 2 && grid.get(0).size() == 1) {\n            if (grid.get(0).get(0) < grid.get(1).get(0)) {\n                result.add(grid.get(0).get(0));\n                result.add(grid.get(1).get(0));\n            } else {\n                result.add(grid.get(1).get(0));\n                result.add(grid.get(0).get(0));\n            }\n            return result;\n        }\n        if (grid.size() == 2 && grid.get(0).size() == 0) {\n            if (grid.get(0).get(0) < grid.get(1",
    "        ArrayList<Long> ans = new ArrayList<>();\n        int n = grid.size();\n        if (n < 2) return ans;\n        int m = grid.get(0).size();\n        if (m < 2) return ans;\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    ans.add(dp[i][j]);\n                } else if (i == 0) {\n                    ans.add(dp[i][j] - dp[i][j - 1]);\n                } else if (j == 0) {\n                    ans.add(dp[i][j] - dp[i - 1][j]);\n                } else {\n                    ans.add(dp[i][j] - Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> lst = new ArrayList<Long>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    lst.add(dp[i][j]);\n                } else if(i == 0) {\n                    lst.add(Math.min(dp[i][j], dp[i][j - 1]));\n                } else if(j == 0) {\n                    lst.add(Math.min(dp[i][j], dp[i - 1][j]));\n                } else {\n                    lst.add(Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1])));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int[] d : dp) {\n                    if (i + 1 < n && d[i + 1] > dp[i + 1][j]) {\n                        dp[i + 1][j] = d[i + 1];\n                    }\n                    if (j + 1 < m && d[i][j + 1] > dp[i][j + 1]) {\n                        dp[i][j + 1] = d[i][j + 1];\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                if (i - 1 >= 0 && dp[i - 1][j] > dp[i][j]) {\n                    dp[i - 1][j] = dp[i][j];\n                }\n                if (j - 1 >= 0 && dp[i][j - 1] > dp[i][j]) {\n                    dp[i][j - 1] = dp[i][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                if (i - 1 >= 0 && j - 1",
    "        int N = grid.size();\n        int M = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (N == 1 && M == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (N == 1) {\n            for (int i = 0; i < M; i++) {\n                result.add(grid.get(0).get(i));\n            }\n            return result;\n        }\n        if (M == 1) {\n            for (int i = 0; i < N; i++) {\n                result.add(grid.get(i).get(0));\n            }\n            return result;\n        }\n        int[][] dp = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    lst.add(0L);\n                } else {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        ArrayList<Long> lst_min = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (lst.get(i * m + j) == 0) {\n                    lst_min.add(0L);\n                } else {\n                    lst_min.add(lst.get(i * m + j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (lst_min.get(i * m + j) == 0) {\n                    continue;\n                }\n                for (int jj = 0; jj < m; jj++) {\n                    if (jj == j) {\n                        continue;\n                    }\n                    if (lst_min.get(i * m + j) < lst_min.get(i * m + jj)) {\n                        lst_min.set(i * m + j, lst_min.get(i * m + jj));\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (lst_min.get(i * m + j) == 0) {\n                    continue;\n                }\n                for (int ii = 0; ii < n; ii++) {\n                    if (ii == i) {\n                        continue;\n                    }\n                    for (int jj =",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if(grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (m == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (k == 1) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            return result;\n        }\n        if (k == 2) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            return result;\n        }\n        if (k == 3) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            return result;\n        }\n        if (k == 4) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            return result;\n        }\n        if (k == 5) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            result.add(grid.get(0).get(5));\n            return result;\n        }\n        if (",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        \n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        \n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        \n        return ans;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if(grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j - 1], grid.get(i).get(j));\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i - 1][j], grid.get(i).get(j));\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], grid.get(i).get(j)));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(Math.min(dp[i][j], grid.get(i).get(j)));\n                } else if (j == 0) {\n                    result.add(Math.min(dp[i][j], grid.get(i).get(j)));\n                } else {\n                    result.add(Math.min(dp[i][j], Math.min(dp[i - 1][j], grid.get(i).get(j))));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        \n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j]);\n                }\n                if(j > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1]);\n                }\n            }\n        }\n        \n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(dp[i][j] - 1);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && dp[i][j] < dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j] < dp[i][j - 1]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i][j] < dp[i - 1][j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i][j] < dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i][j] < dp",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                lst.add(grid.get(i).get(j));\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        if (k == 1) {\n            result.add(lst.get(0));\n            return result;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (lst.get(i).equals(lst.get(j))) {\n                    result.add(lst.get(i));\n                    lst.remove(i);\n                    lst.remove(j);\n                    i--;\n                    j--;\n                    k--;\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(Math.min(dp[i][j] - 1, dp[i - 1][j] - 1));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    result.add(grid.get(i).get(j) + dp[i][j]);\n                } else if (j == 0) {\n                    result.add(grid.get(i).get(j) + dp[i][j]);\n                } else {\n                    result.add(grid.get(i).get(j) + Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if (grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && dp[i][j] < dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j] < dp[i][j - 1]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i][j] < dp[i - 1][j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && j > 0 && dp[i][j] < dp[i - 1][j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && j > 0 && dp[i][j] < dp[i - 1][j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int[] d : dp) {\n                    if (d[i] == 0 || d[j] == 0) continue;\n                    if (d[i] < dp[i][j]) {\n                        dp[i][j] = d[i];\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int[] d : dp) {\n                    if (d[i] == 0 || d[j] == 0) continue;\n                    if (d[i] < dp[i][j]) {\n                        dp[i][j] = d[i];\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int[] d : dp) {\n                    if (d[i] == 0 || d[j] == 0) continue;\n                    if (d[i] < dp[i][j]) {\n                        dp[i][j] = d[i];\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if (grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 0;\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + dp[i][j - 1]);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(0L);\n                } else if (i == 0) {\n                    result.add(Math.min(result.get(result.size() - 1), dp[i][j]));\n                } else if (j == 0) {\n                    result.add(Math.min(result.get(result.size() - 1), dp[i][j]));\n                } else {\n                    result.add(Math.min(result.get(result.size() - 1), dp[i][j] + result.get(result.size() - 1)));\n                }\n            }\n        }",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    lst.add(0L);\n                } else {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    continue;\n                }\n                for (int ii = 0; ii < n; ii++) {\n                    for (int jj = 0; jj < m; jj++) {\n                        if (grid.get(ii).get(jj) == 0) {\n                            continue;\n                        }\n                        if (i == ii && j == jj) {\n                            continue;\n                        }\n                        if (i == ii && jj < j) {\n                            continue;\n                        }\n                        if (i == ii && jj > j) {\n                            continue;\n                        }\n                        if (i < ii && jj == j) {\n                            continue;\n                        }\n                        if (i < ii && jj > j) {\n                            continue;\n                        }\n                        if (i > ii && jj == j) {\n                            continue;\n                        }\n                        if (i > ii && jj > j) {\n                            continue;\n                        }\n                        if (lst.get(i) + lst.get(ii) < lst.get(jj)) {\n                            lst.set(jj, lst.get(i) + lst.get(ii));\n                        }\n                    }\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(grid.size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        if(k > rows * cols) return result;\n        int[][] dp = new int[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0 || k < 1) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                lst.add(grid.get(i).get(j));\n            }\n        }\n        Collections.sort(lst);\n        int i = 0;\n        int j = 0;\n        while (i < n && j < m) {\n            if (lst.get(i) < lst.get(j)) {\n                i++;\n            } else if (lst.get(i) > lst.get(j)) {\n                j++;\n            } else {\n                i++;\n                j++;\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        while (i < n && j < m) {\n            if (lst.get(i) < lst.get(j)) {\n                i++;\n            } else if (lst.get(i) > lst.get(j)) {\n                j++;\n            } else {\n                i++;\n                j++;\n            }\n            ans.add(lst.get(i - 1));\n        }\n        return ans;",
    "        int N = grid.size();\n        int M = grid.get(0).size();\n        int[][] dp = new int[N][M];\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < M; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        \n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < M; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        \n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < M; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        \n        ArrayList<Long> result = new ArrayList<>();\n        \n        if(n == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        \n        if(m == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        \n        if(k == 1) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            return result;\n        }\n        \n        if(k == 2) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            return result;\n        }\n        \n        if(k == 3) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            return result;\n        }\n        \n        if(k == 4) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            return result;\n        }\n        \n        if(k == 5) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            result.add(grid.get(0).get",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    lst.add(grid.get(i).get(j) - dp[i][j]);\n                } else if (j == 0) {\n                    lst.add(grid.get(i).get(j) - dp[i][j]);\n                } else {\n                    lst.add(grid.get(i).get(j) - Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int N = grid.size();\n        int M = grid.get(0).size();\n        ArrayList<Long> ans = new ArrayList<>();\n        if (N == 1 && M == 1) {\n            ans.add(grid.get(0).get(0));\n            return ans;\n        }\n        if (N == 1) {\n            for (int i = 0; i < M; i++) {\n                ans.add(grid.get(0).get(i));\n            }\n            return ans;\n        }\n        if (M == 1) {\n            for (int i = 0; i < N; i++) {\n                ans.add(grid.get(i).get(0));\n            }\n            return ans;\n        }\n        int[][] dp = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[][] dp2 = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (i == 0 && j == 0) {\n                    dp2[i][j] = 1;\n                } else if (i == 0) {\n                    dp2[i][j] = dp2[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp2[i][j] = dp2[i - 1][j] + 1;\n                } else {\n                    dp2[",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (m == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (k == 1) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(1).get(0));\n            return result;\n        }\n        if (k == 2) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(1).get(1));\n            return result;\n        }\n        if (k == 3) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(1).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(1).get(2));\n            return result;\n        }\n        if (k == 4) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(1).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(1).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(1).get(3));\n            return result;\n        }\n        if (k == 5) {\n            result.add(grid.get(0).get",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if(grid.size() == 0 || grid.get(0).size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 0) continue;\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                    continue;\n                }\n                if(i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n                }\n                if(j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n                }\n                if(i == n - 1 && j == m - 1) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n                }\n                if(j == m - 1) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n                }\n                if(i == n - 1) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n                }\n                if(i == n - 1 && j == m - 1) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n                }\n            }\n        }\n        for(int i = 0; i < n; i++)",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] dp_next = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp_next[i][j] = dp[i][j];\n                } else if(i == 0) {\n                    dp_next[i][j] = dp[i][j] + dp_next[i][j - 1];\n                } else if(j == 0) {\n                    dp_next[i][j] = dp[i][j] + dp_next[i - 1][j];\n                } else {\n                    dp_next[i][j] = Math.min(dp[i][j], dp[i][j - 1]) + Math.min(dp[i - 1][j], dp[i][j]);\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp_next[i][j] == dp[i][j]) {\n                    ans.add(dp[i][j]);\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 0) continue;\n                for(int ii = 0; ii < n; ii++) {\n                    for(int jj = 0; jj < m; jj++) {\n                        if(ii == i && jj == j) continue;\n                        if(dp[ii][jj] == 0) continue;\n                        if(dp[ii][jj] < dp[i][j]) {\n                            dp[i][j] = dp[ii][jj];\n                        }\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 0) continue;\n                if(dp[i][j] == k) result.add(dp[i][j]);\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<Long>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    lst.add(grid.get(i).get(j) - dp[i][j]);\n                } else if (j == 0) {\n                    lst.add(grid.get(i).get(j) - dp[i][j]);\n                } else {\n                    lst.add(grid.get(i).get(j) - dp[i][j]);\n                }\n            }\n        }\n        Collections.sort(lst);\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (m == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (k == 1) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            return result;\n        }\n        if (k == 2) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(1).get(1));\n            return result;\n        }\n        if (k == 3) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(1).get(1));\n            result.add(grid.get(1).get(2));\n            result.add(grid.get(2).get(0));\n            result.add(grid.get(2).get(1));\n            result.add(grid.get(2).get(2));\n            return result;\n        }\n        if (k == 4) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(1).get(1));\n            result.add(grid.get(1).get(",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && dp[i][j] < dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j] < dp[i][j - 1]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] > k) {\n                    dp[i][j] = k;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j - 1], grid.get(i).get(j));\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i - 1][j], grid.get(i).get(j));\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], grid.get(i).get(j)));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(Math.min(dp[i][j], grid.get(i).get(j)));\n                } else if (j == 0) {\n                    result.add(Math.min(dp[i][j], grid.get(i).get(j)));\n                } else {\n                    result.add(Math.min(dp[i][j], Math.min(dp[i - 1][j], grid.get(i).get(j))));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) continue;\n                if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) continue;\n                if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n",
    "        ArrayList<Long> lst = new ArrayList<Long>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) {\n            return lst;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(dp[i][j]);\n                } else if (i == 0) {\n                    lst.add(Math.min(dp[i][j], dp[i][j - 1]));\n                } else if (j == 0) {\n                    lst.add(Math.min(dp[i][j], dp[i - 1][j]));\n                } else {\n                    lst.add(Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1])));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && dp[i][j] < dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j] < dp[i][j - 1]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i][j] < dp[i - 1][j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i][j] < dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && j > 0 && dp[i][j]",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0 || k < 1) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(Math.min(dp[i][j], dp[i][j - 1]));\n                } else if (j == 0) {\n                    result.add(Math.min(dp[i][j], dp[i - 1][j]));\n                } else {\n                    result.add(Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1])));",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if(grid.size() == 0) return lst;\n        if(grid.get(0).size() == 0) return lst;\n        if(grid.get(0).get(0) == 0) return lst;\n        \n        long[][] dp = new long[grid.size()][grid.get(0).size()];\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        \n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid.get(0).size(); j++) {\n                if(dp[i][j] == dp[i - 1][j]) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        \n        if(lst.size() < k) return lst;\n        \n        long[] lst_arr = new long[lst.size()];\n        for(int i = 0; i < lst.size(); i++) {\n            lst_arr[i] = lst.get(i);\n        }\n        Arrays.sort(lst_arr);\n        \n        for(int i = 0; i < lst.size(); i++) {\n            if(lst_arr",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else {\n                    if (i > 0 && dp[i - 1][j] == dp[i][j]) {\n                        result.add(dp[i][j]);\n                    }\n                    if (j > 0 && dp[i][j - 1] == dp[i][j]) {\n                        result.add(dp[i][j]);\n                    }\n                    if (i > 0 && j > 0 && dp[",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if(grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        if (grid.get(0).size() == 0) return lst;\n        if (grid.get(0).get(0) == 0) return lst;\n        \n        int[][] dp = new int[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        \n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    lst.add(grid.get(i).get(j) + lst.get(lst.size() - 1));\n                } else if (j == 0) {\n                    lst.add(grid.get(i).get(j) + lst.get(lst.size() - 1));\n                } else {\n                    lst.add(grid.get(i).get(j) + Math.min(lst.get(lst.size() - 1), lst.get(lst.size() - 2)));\n                }\n            }\n        }\n        \n        if (lst.size() < k) return lst;\n        ",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(Math.min(dp[i][j] - 1, dp[i - 1][j] - 1));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if (grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                lst.add(grid.get(i).get(j));\n            }\n        }\n        \n        int[] dp = new int[n * m];\n        Arrays.fill(dp, -1);\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i * m + j] = 0;\n                } else if (i == 0) {\n                    dp[i * m + j] = dp[(i - 1) * m + j] + 1;\n                } else if (j == 0) {\n                    dp[i * m + j] = dp[i * m + (j - 1)] + 1;\n                } else {\n                    dp[i * m + j] = Math.min(dp[(i - 1) * m + j], Math.min(dp[i * m + (j - 1)], dp[(i - 1) * m + (j - 1)])) + 1;\n                }\n            }\n        }\n        \n        int i = n - 1;\n        int j = m - 1;\n        while (i >= 0 && j >= 0) {\n            if (dp[i * m + j] == k) {\n                lst.add(0, grid.get(i).get(j));\n                i--;\n                j--;\n            } else if (dp[i * m + j] > k) {\n                i--;\n            } else {\n                j--;\n            }\n        }\n        \n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int[] d : dp) {\n                    if (d[i] == 0) continue;\n                    if (d[j] == 0) continue;\n                    if (d[i] == dp[i][j] && d[j] == dp[i][j]) {\n                        dp[i][j] = 0;\n                        break;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int[] d : dp) {\n                    if (d[i] == 0) continue;\n                    if (d[j] == 0) continue;\n                    if (d[i] == dp[i][j] && d[j] == dp[i][j]) {\n                        dp[i][j] = 0;\n                        break;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int[] d : dp) {\n                    if (d[i] == 0) continue;\n                    if (d[j] == 0) continue;\n                    if (d[i] == dp[i][j] && d[",
    "        ArrayList<Long> ans = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                for(int[] d : dp) {\n                    if(d[i] == 0 || d[j] == 0) {\n                        continue;\n                    }\n                    if(d[i] + d[j] == k) {\n                        ans.add(dp[i][j]);\n                    }\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        \n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        \n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                for(int di = -1; di <= 1; di++) {\n                    for(int dj = -1; dj <= 1; dj++) {\n                        if(di == 0 && dj == 0) {\n                            continue;\n                        }\n                        int ri = i + di;\n                        int rj = j + dj;\n                        if(ri < 0 || ri >= n || rj < 0 || rj >= m) {\n                            continue;\n                        }\n                        dp[ri][rj] = Math.min(dp[ri][rj], dp[i][j] + 1);\n                    }\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int N = grid.size();\n        int M = grid.get(0).size();\n        ArrayList<Long> ans = new ArrayList<>();\n        if (N == 1 && M == 1) {\n            ans.add(grid.get(0).get(0));\n            return ans;\n        }\n        if (N == 1) {\n            for (int i = 0; i < M; i++) {\n                ans.add(grid.get(0).get(i));\n            }\n            return ans;\n        }\n        if (M == 1) {\n            for (int i = 0; i < N; i++) {\n                ans.add(grid.get(i).get(0));\n            }\n            return ans;\n        }\n        int[][] dp = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[] dp_arr = new int[N * M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                dp_arr[i * M + j] = dp[i][j];\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            for (int",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 0;\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(Math.min(dp[i][j], dp[i][j - 1]));\n                } else if (j == 0) {\n                    result.add(Math.min(dp[i][j], dp[i - 1][j]));\n                } else {\n                    result.add(Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1])));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if(grid.size() == 0 || grid.get(0).size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        int[][] dirs = new int[][]{\n            {-1, 0},\n            {1, 0},\n            {0, -1},\n            {0, 1}\n        };\n        int[][] dirs_rev = new int[][]{\n            {1, 0},\n            {-1, 0},\n            {0, 1},\n            {0, -1}\n        };\n        int[][] dirs_rev_diag = new int[][]{\n            {1, 1},\n            {-1, -1},\n            {0, -1},\n            {0, 1}\n        };\n        int[][] dirs_rev_diag_rev = new int[][]{\n            {1, -1},\n            {-1, 1},\n            {0, 1},\n            {0, -1}\n        };\n        int[][] dirs_rev_diag_rev_diag = new int[][]{\n            {1, 1},\n            {-1, -1},\n            {1, -1},\n            {-1, 1}\n        };\n        int[][] dirs_rev_diag_rev_diag_rev = new int[][]{\n            {1, -1},\n            {-1, 1},\n            {1, 1},\n            {-1, -1}\n        };\n        int[][] dirs_rev_diag_rev_diag_rev_diag = new int[][]{\n            {1, -1},\n            {-1, 1},\n            {1, -1},\n            {-1, 1}\n        };\n        int[][] dirs_rev_diag_rev_diag_rev_diag_rev = new int[][]{\n            {1, 1},\n            {-1, -1},\n            {1, -1},\n            {-1, 1}\n        };\n        int[][] dirs_rev_diag",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                if (i > 0 && dp[i - 1][j] > dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] > dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] > dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                if (i > 0 && dp[i - 1][j] > dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] > dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] > dp[i][j]) {\n                    ",
    "        ArrayList<Long> result = new ArrayList<>();\n        if(grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(dp[i][j] == 0) continue;\n                for(int[] d : dp) {\n                    if(d[j] == 0) continue;\n                    if(i > 0 && d[j] < dp[i-1][j]) {\n                        dp[i][j] = dp[i-1][j];\n                    }\n                    if(j > 0 && d[j] < dp[i][j-1]) {\n                        dp[i][j] = dp[i][j-1];\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                if(dp[i][j] == 0) continue;\n                for(int[] d : dp) {\n                    if(d[j] == 0) continue;\n                    if(i > 0 && d[j] < dp[i-1][j]) {\n                        dp[i][j] = dp[i-1][j];\n                    }\n                    if(j > 0 && d[j] < dp[i][j-1]) {\n                        dp[i][j] = dp[i][j-1];\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                ",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (m == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (k == 1) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(1).get(0));\n            return result;\n        }\n        if (k == 2) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(1).get(1));\n            return result;\n        }\n        if (k == 3) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(1).get(1));\n            result.add(grid.get(1).get(2));\n            result.add(grid.get(2).get(0));\n            result.add(grid.get(2).get(1));\n            result.add(grid.get(2).get(2));\n            return result;\n        }\n        if (k == 4) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(1).get(0));\n            result.add(grid.get(1).get(1));\n            result.add(grid.get(1).get(",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int[] d : dp) {\n                    if (i + 1 < n && d[i + 1] != 0 && dp[i + 1][j] != 0 && dp[i + 1][j] < d[i + 1]) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i + 1][j] + 1);\n                    }\n                    if (j + 1 < m && d[i] != 0 && dp[i][j + 1] != 0 && dp[i][j + 1] < d[i]) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i][j + 1] + 1);\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                if (k == 1) {\n                    ans.add(dp[i][j]);\n                    break;\n                }\n                for (int[] d : dp) {\n                    if (i + 1 < n && d[i + 1] != 0 && dp[i + 1][j] != 0 && dp[i + 1][j] < d[i + 1]) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i + 1][j] + 1);\n                    }\n                    if (j",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) return result;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return result;",
    "        int N = grid.size();\n        int M = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (N == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (M == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (k == 1) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            return result;\n        }\n        if (k == 2) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            return result;\n        }\n        if (k == 3) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            return result;\n        }\n        if (k == 4) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            return result;\n        }\n        if (k == 5) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            result.add(grid.get(0).get(5));\n            return result;\n        }\n        if (k",
    "        ArrayList<Long> lst = new ArrayList<>();\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n                }\n                if (j > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n                }\n                if (i > 0 && j > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1] + 1);\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(dp[i][j]);\n                } else if (i == 0) {\n                    lst.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    lst.add(dp[i][j] - 1);\n                } else {\n                    lst.add(Math.min(dp[i][j], dp[i - 1][j] + 1));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if (grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if(grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0 || k < 1) {\n            return result;\n        }\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        long[][] dp = new long[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                result.add(dp[i][j]);\n            }\n        }\n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                    continue;\n                }\n                if (i == 0) {\n                    result.add(dp[i][j]);\n                    continue;\n                }\n                if (j == 0) {\n                    result.add(dp[i][j]);\n                    continue;\n                }\n                if (dp[i][j] == dp[i - 1][j] + 1 && dp[i][j] <= k) {\n                    result.add(dp[i][j]);\n                }\n                if (dp[i][j] == dp[i][j - 1] + 1 && dp[i][j] <= k) {\n                    result.add(dp[i][j]);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        if (grid.size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(Math.min(dp[i][j], dp[i - 1][j]) - 1);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<>();\n        if (grid.size() == 0) return ans;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        int[][] dp2 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp2[i][j] = dp[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp2[i][j] = 1;\n                } else if (i == 0) {\n                    dp2[i][j] = dp2[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp2[i][j] = dp2[i - 1][j] + 1;\n                } else {\n                    dp2[i][j] = Math.min(dp2[i - 1",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    lst.add(0L);\n                } else {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    continue;\n                }\n                \n                for (int di = -1; di <= 1; di++) {\n                    for (int dj = -1; dj <= 1; dj++) {\n                        if (di == 0 && dj == 0) {\n                            continue;\n                        }\n                        \n                        int r = i + di;\n                        int c = j + dj;\n                        if (r < 0 || r >= n || c < 0 || c >= m || grid.get(r).get(c) == 0) {\n                            continue;\n                        }\n                        \n                        lst.set(r * m + c, Math.min(lst.get(r * m + c), lst.get(i * m + j) + grid.get(r).get(c)));\n                    }\n                }\n            }\n        }\n        \n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(lst.get(i));\n        }\n        \n        return res;",
    "        ArrayList<Long> lst = new ArrayList<Long>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == k) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return lst;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        ArrayList<Long> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    lst.add(0L);\n                } else {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    continue;\n                }\n                for (int ii = 0; ii < n; ii++) {\n                    for (int jj = 0; jj < m; jj++) {\n                        if (grid.get(ii).get(jj) == 0) {\n                            continue;\n                        }\n                        if (i == ii && j == jj) {\n                            continue;\n                        }\n                        if (i == ii && jj < j) {\n                            continue;\n                        }\n                        if (i == ii && jj > j) {\n                            continue;\n                        }\n                        if (i < ii && jj == j) {\n                            continue;\n                        }\n                        if (i > ii && jj == j) {\n                            continue;\n                        }\n                        if (i > ii && jj > j) {\n                            continue;\n                        }\n                        if (i < ii && jj < j) {\n                            continue;\n                        }\n                        if (i > ii && jj > j) {\n                            continue;\n                        }\n                        if (i < ii && jj > j && ii < i) {\n                            continue;\n                        }\n                        if (i > ii && jj > j && ii > i) {\n                            continue;\n                        }\n                        if (i < ii && jj < j && jj < j) {\n                            continue;\n                        }\n                        if (i > ii && jj < j && jj > j) {\n                            continue;",
    "        int N = grid.size();\n        int M = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (N == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (M == 1) {\n            result.add(grid.get(0).get(0));\n            return result;\n        }\n        if (k == 1) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            return result;\n        }\n        if (k == 2) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            return result;\n        }\n        if (k == 3) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            return result;\n        }\n        if (k == 4) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            return result;\n        }\n        if (k == 5) {\n            result.add(grid.get(0).get(0));\n            result.add(grid.get(0).get(1));\n            result.add(grid.get(0).get(2));\n            result.add(grid.get(0).get(3));\n            result.add(grid.get(0).get(4));\n            result.add(grid.get(0).get(5));\n            return result;\n        }\n        if (k",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j) + 1;\n            }\n        }\n        \n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                for(int ii = 0; ii < n; ii++) {\n                    for(int jj = 0; jj < m; jj++) {\n                        if(i == ii && j == jj) continue;\n                        if(dp[ii][jj] > dp[i][j]) {\n                            dp[i][j] = dp[ii][jj];\n                        }\n                    }\n                }\n            }\n        }\n        \n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == k) {\n                    ans.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return ans;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(dp[i][j]);\n                } else if (i == 0) {\n                    lst.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    lst.add(dp[i][j] - 1);\n                } else {\n                    lst.add(Math.min(dp[i][j] - 1, dp[i - 1][j]));\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> lst = new ArrayList<>();\n        if (grid.size() == 0 || k == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1])) + grid.get(i).get(j);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == dp[i - 1][j]) {\n                    lst.add(grid.get(i).get(j));\n                }\n            }\n        }\n        Collections.sort(lst);\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if(grid.size() == 0 || grid.get(0).size() == 0) return result;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if(i == 0 && j != 0) {\n                    dp[i][j] = dp[i][j-1] + 1;\n                } else if(i != 0 && j == 0) {\n                    dp[i][j] = dp[i-1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if(i == 0 && j != 0) {\n                    result.add(dp[i][j] - 1);\n                } else if(i != 0 && j == 0) {\n                    result.add(dp[i][j] - 1);\n                } else {\n                    result.add(Math.min(dp[i][j], dp[i-1][j]) - 1);\n                }\n            }\n        }\n        return result;",
    "        int N = grid.size();\n        int M = grid.get(0).size();\n        ArrayList<Long> result = new ArrayList<>();\n        if (k == 0) {\n            return result;\n        }\n        if (k > N * M) {\n            return result;\n        }\n        int[][] dp = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(grid.get(i).get(j));\n                } else if (i == 0) {\n                    result.add(grid.get(i).get(j) + dp[i][j]);\n                } else if (j == 0) {\n                    result.add(grid.get(i).get(j) + dp[i][j]);\n                } else {\n                    result.add(grid.get(i).get(j) + Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return result;",
    "        ArrayList<Long> lst = new ArrayList<Long>();\n        if (grid.size() == 0) return lst;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        long[][] dp = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    lst.add(dp[i][j]);\n                } else if (i == 0) {\n                    lst.add(dp[i][j] - 1);\n                } else if (j == 0) {\n                    lst.add(dp[i][j] - 1);\n                } else {\n                    lst.add(Math.min(dp[i][j], dp[i - 1][j]) - 1);\n                }\n            }\n        }\n        return lst;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (grid.size() == 0) return result;\n        if (grid.get(0).size() == 0) return result;\n        if (grid.get(0).get(0) == 0) return result;\n        \n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        \n        long[][] dp = new long[rows][cols];\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j] == k) {\n                    result.add(grid.get(i).get(j));\n                }\n            }\n        }\n        \n        return result;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] dp_next = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp_next[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        dp_next[0][0] = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int ii = 0; ii < n; ii++) {\n                    for (int jj = 0; jj < m; jj++) {\n                        if (i == ii && j == jj) {\n                            continue;\n                        }\n                        if (dp[ii][jj] + 1 < dp_next[i][j]) {\n                            dp_next[i][j] = dp[ii][jj] + 1;\n                        }\n                    }\n                }\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp_next[i][j] == k) {\n                    ans.add(dp[i][j]);\n                }\n            }\n        }\n        return ans;",
    "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] dp2 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp2[i][j] = dp[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && dp[i - 1][j] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j];\n                }\n                if (j > 0 && dp[i][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i][j - 1];\n                }\n                if (i > 0 && j > 0 && dp[i - 1][j - 1] < dp[i][j]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n        int[][] dp3 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp3[i][j] = dp[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i > 0 && dp3[i - 1][j] < dp3[i][j]) {\n                    dp3[i][j] = dp3[i - 1][j];\n                }\n                if ("
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}