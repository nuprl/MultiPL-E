language: d
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length) \n \
    \   {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclvin2or.d(9): Error: `string` is used as a type

    /tmp/tmpclvin2or.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclvin2or.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length) \n \
    \   {\n        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbgqrx45u.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbgqrx45u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length) \n \
    \   {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclvin2or.d(9): Error: `string` is used as a type

    /tmp/tmpclvin2or.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclvin2or.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    auto result = new string[];\n    foreach (i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbe36k22v.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbe36k22v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq43p5335.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq43p5335.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    string[] result;\n    foreach(i; 0..string.length)\n    {\n \
    \       result ~= string[0..i];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_suffixes(string string) \n{\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    string[] result;\n    foreach(i;\
    \ 0..string.length)\n    {\n        result ~= string[i..$];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ import std.algorithm;\n    import std.range;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    string[] result;\n    foreach(i; 0..string.length)\n    {\n        foreach(j;\
    \ i..string.length)\n        {\n            result ~= string[i..j];\n        }\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings_2(string\
    \ string) \n{\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    string[] result;\n    foreach(i; 0..string.length)\n    {\n \
    \       foreach(j; i..string.length)\n        {\n            result ~= string[i..j];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zpzcllh.d(86): Error: found `unittest` instead of statement

    /tmp/tmp2zpzcllh.d(94): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp2zpzcllh.d(94): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zpzcllh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjvgb5mjh.d(9): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(22): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(35): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(51): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(67): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(83): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvgb5mjh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    auto result = new string[](string.length);\n    foreach (i,\
    \ ref s; string)\n    {\n        result[i] = string[0..i];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiyfi4thx.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiyfi4thx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \       \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n\
    \    foreach(immutable i; 0 .. string.length)\n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        foreach(immutable j; i .. string.length)\n        {\n        \
    \    result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings2(string string) \n{\n    string[] result;\n\
    \    foreach(immutable i; 0 .. string.length)\n    {\n        foreach(immutable\
    \ j; i .. string.length)\n        {\n            result ~= string[i .. j];\n \
    \       }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        foreach(immutable j; i .. string.length)\n        {\n        \
    \    result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings4(string string) \n{\n    string[] result;\n\
    \    foreach(immutable i; 0 .. string.length)\n    {\n        foreach(immutable\
    \ j; i .. string.length)\n        {\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvoq_w1k3.d(89): Error: found `unittest` instead of statement

    /tmp/tmpvoq_w1k3.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpvoq_w1k3.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvoq_w1k3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_length(string\
    \ string, size_t length) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        foreach(j; i .. string.length)\n        {\n            if(j -\
    \ i == length)\n            {\n                result ~= string[i .. j];\n   \
    \         }\n        }\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings_with_length_range(string string, size_t min_length, size_t max_length)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            if(j - i >= min_length\
    \ && j - i <= max_length)\n            {\n                result ~= string[i ..\
    \ j];\n            }\n        }\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa8z8j483.d(88): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa8z8j483.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j;\
    \ i .. string.length) \n        {\n            result ~= string[i .. j];\n   \
    \     }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_length(string\
    \ string, int length) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\
    \ \n    {\n        foreach(j; i .. string.length) \n        {\n            if(j\
    \ - i == length) \n            {\n                result ~= string[i .. j];\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings_with_length_range(string string, int min_length, int max_length)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            if(j - i >= min_length\
    \ && j - i <= max_length) \n            {\n                result ~= string[i\
    \ .. j];\n            }\n        }\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp80a_kpyu.d(9): Error: `string` is used as a type

    /tmp/tmp80a_kpyu.d(22): Error: `string` is used as a type

    /tmp/tmp80a_kpyu.d(35): Error: `string` is used as a type

    /tmp/tmp80a_kpyu.d(51): Error: `string` is used as a type

    /tmp/tmp80a_kpyu.d(70): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp80a_kpyu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvlsf32u4.d(9): Error: `string` is used as a type

    /tmp/tmpvlsf32u4.d(22): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvlsf32u4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    auto result = new string[];\n    foreach (i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6igf6wip.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6igf6wip.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq43p5335.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq43p5335.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings4(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuuopt_4u.d(92): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpuuopt_4u.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuopt_4u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings4(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuuopt_4u.d(92): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpuuopt_4u.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuopt_4u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length) \n \
    \   {\n        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \       \n*/\nstring[] all_suffixes(string string) \n{\n    string[] suffixes;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        suffixes ~= string[i .. $];\n\
    \    }\n    return suffixes;\n}\n/*\n Return the longest common prefix of two\
    \ strings\n        \n*/\nstring longest_common_prefix(string string1, string string2)\
    \ \n{\n    string[] prefixes1 = all_prefixes(string1);\n    string[] prefixes2\
    \ = all_prefixes(string2);\n    string longest_prefix;\n    foreach(prefix1; prefixes1)\
    \ \n    {\n        foreach(prefix2; prefixes2) \n        {\n            if(prefix1\
    \ == prefix2) \n            {\n                if(prefix1.length > longest_prefix.length)\
    \ \n                {\n                    longest_prefix = prefix1;\n       \
    \         }\n            }\n        }\n    }\n    return longest_prefix;\n}\n\
    /*\n Return the longest common suffix of two strings\n        \n*/\nstring longest_common_suffix(string\
    \ string1, string string2) \n{\n    string[] suffixes1 = all_suffixes(string1);\n\
    \    string[] suffixes2 = all_suffixes(string2);\n    string longest_suffix;\n\
    \    foreach(suffix1; suffixes1) \n    {\n        foreach(suffix2; suffixes2)\
    \ \n        {\n            if(suffix1 == suffix2) \n            {\n          \
    \      if(suffix1.length > longest_suffix.length) \n                {\n      \
    \              longest_suffix = suffix1;\n                }\n            }\n \
    \       }\n    }\n    return longest_suffix;\n}\n/*\n Return the longest common\
    \ substring of two strings\n        \n*/\nstring longest_common_substring(string\
    \ string1, string string2)\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_dcukhd7.d(82): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_dcukhd7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length) \n \
    \   {\n        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbgqrx45u.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbgqrx45u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length)\n  \
    \  {\n        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqoc776zh.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqoc776zh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjvgb5mjh.d(9): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(22): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(35): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(51): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(67): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(83): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvgb5mjh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length) \n \
    \   {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclvin2or.d(9): Error: `string` is used as a type

    /tmp/tmpclvin2or.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclvin2or.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    string[] result;\n    foreach(i; 0..string.length)\n    {\n \
    \       result ~= string[0..i];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_suffixes(string string) \n{\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    string[] result;\n    foreach(i;\
    \ 0..string.length)\n    {\n        result ~= string[i..$];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ import std.algorithm;\n    import std.range;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    string[] result;\n    foreach(i; 0..string.length)\n    {\n        foreach(j;\
    \ i..string.length)\n        {\n            result ~= string[i..j];\n        }\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings_with_length(string\
    \ string, int length) \n{\n    import std.algorithm;\n    import std.range;\n\
    \    import std.array;\n    import std.conv;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    string[] result;\n    foreach(i; 0..string.length)\n\
    \    {\n        foreach(j; i..string.length)\n        {\n            if(j-i\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2z70ta4c.d(85): Error: found `unittest` when expecting `)`

    /tmp/tmp2z70ta4c.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp2z70ta4c.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp2z70ta4c.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z70ta4c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjvgb5mjh.d(9): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(22): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(35): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(51): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(67): Error: `string` is used as a type

    /tmp/tmpjvgb5mjh.d(83): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvgb5mjh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] ret;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        ret ~= string[0 .. i];\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_8xdta3j.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8xdta3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length) \n \
    \   {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclvin2or.d(9): Error: `string` is used as a type

    /tmp/tmpclvin2or.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclvin2or.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. string.length];\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings_2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings_3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings_4(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n   \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2si3pgxa.d(91): Error: found `unittest` instead of statement

    /tmp/tmp2si3pgxa.d(99): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2si3pgxa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] ret;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        ret ~= string[0 .. i];\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphha4efjy.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphha4efjy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    auto result = new string[];\n    foreach (i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6igf6wip.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6igf6wip.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    auto result = new string[];\n    foreach (i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbe36k22v.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbe36k22v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_length(string\
    \ string, int length) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        foreach(j; i .. string.length)\n        {\n            if(j -\
    \ i == length)\n            {\n                result ~= string[i .. j];\n   \
    \         }\n        }\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings_with_length_range(string string, int min_length, int max_length)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            if(j - i >= min_length\
    \ && j - i <= max_length)\n            {\n                result ~= string[i ..\
    \ j];\n            }\n        }\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings_with_length\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk6gckcta.d(88): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6gckcta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length)\n  \
    \  {\n        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqoc776zh.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqoc776zh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(int\
    \ i; 0..string.length)\n    {\n        result ~= string[i..$];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(int i; 0..string.length)\n    {\n        foreach(int\
    \ j; i..string.length)\n        {\n            result ~= string[i..j];\n     \
    \   }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        foreach(int j; i..string.length)\n        {\n            result\
    \ ~= string[i..j];\n        }\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string) \n{\n    string[] result;\n    foreach(int\
    \ i; 0..string.length)\n    {\n        foreach(int j; i..string.length)\n    \
    \    {\n            result ~= string[i..j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(int i; 0..string.length)\n    {\n        foreach(int j; i..string.length)\n\
    \        {\n            result ~= string[i..j];\n        }\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk1ugsxfa.d(90): Error: found `unittest` instead of statement

    /tmp/tmpk1ugsxfa.d(98): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1ugsxfa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq43p5335.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq43p5335.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings4(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuuopt_4u.d(92): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpuuopt_4u.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuopt_4u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j;\
    \ i .. string.length) \n        {\n            result ~= string[i .. j];\n   \
    \     }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_length(string\
    \ string, size_t length) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\
    \ \n    {\n        foreach(j; i .. string.length) \n        {\n            if(j\
    \ - i == length) \n            {\n                result ~= string[i .. j];\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings_with_length_range(string string, size_t min_length, size_t max_length)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            if(j - i >= min_length\
    \ && j - i <= max_length) \n            {\n                result ~= string[i\
    \ .. j];\n            }\n        }\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9w5klzv5.d(83): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9w5klzv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j;\
    \ i .. string.length) \n        {\n            result ~= string[i .. j];\n   \
    \     }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_length(string\
    \ string, size_t length) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\
    \ \n    {\n        foreach(j; i .. string.length) \n        {\n            if(j\
    \ - i + 1 == length) \n            {\n                result ~= string[i .. j];\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings_with_length_range(string string, size_t min_length, size_t max_length)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            if(j - i + 1 >= min_length\
    \ && j - i + 1 <= max_length) \n            {\n                result ~= string[i\
    \ .. j];\n            }\n        }\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq9cte5cy.d(83): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq9cte5cy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq43p5335.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq43p5335.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz35w0209.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35w0209.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j;\
    \ i .. string.length) \n        {\n            result ~= string[i .. j];\n   \
    \     }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_length(string\
    \ string, size_t length) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\
    \ \n    {\n        foreach(j; i .. string.length) \n        {\n            if(j\
    \ - i == length) \n            {\n                result ~= string[i .. j];\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings_with_length_range(string string, size_t min_length, size_t max_length)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            if(j - i >= min_length\
    \ && j - i <= max_length) \n            {\n                result ~= string[i\
    \ .. j];\n            }\n        }\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9w5klzv5.d(83): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9w5klzv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length) \n \
    \   {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclvin2or.d(9): Error: `string` is used as a type

    /tmp/tmpclvin2or.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclvin2or.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \       \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n\
    \    foreach(immutable i; 0 .. string.length)\n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        foreach(immutable j; i .. string.length)\n        {\n        \
    \    result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(immutable i; 0 .. string.length)\n    {\n        foreach(immutable\
    \ j; i .. string.length)\n        {\n            result ~= string[i .. j];\n \
    \       }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        foreach(immutable j; i .. string.length)\n        {\n        \
    \    result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(immutable i; 0 .. string.length)\n    {\n        foreach(immutable\
    \ j; i .. string.length)\n        {\n            result ~\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptsquq9ah.d(89): Error: expression expected, not `unittest`

    /tmp/tmptsquq9ah.d(90): Error: found `{` when expecting `;` following statement

    /tmp/tmptsquq9ah.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptsquq9ah.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsquq9ah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gc0odli.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gc0odli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzbkuhd9.d(9): Error: `string` is used as a type

    /tmp/tmpmzbkuhd9.d(10): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzbkuhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6on7mh3.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6on7mh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length)\n  \
    \  {\n        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \       \n*/\nstring[] all_suffixes(string string) \n{\n    string[] suffixes;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        suffixes ~= string[i .. $];\n\
    \    }\n    return suffixes;\n}\n/*\n Return the longest common prefix of two\
    \ strings\n        \n*/\nstring longest_common_prefix(string string1, string string2)\
    \ \n{\n    string[] prefixes1 = all_prefixes(string1);\n    string[] prefixes2\
    \ = all_prefixes(string2);\n    foreach(prefix1; prefixes1)\n    {\n        foreach(prefix2;\
    \ prefixes2)\n        {\n            if(prefix1 == prefix2)\n            {\n \
    \               return prefix1;\n            }\n        }\n    }\n    return \"\
    \";\n}\n/*\n Return the longest common suffix of two strings\n        \n*/\nstring\
    \ longest_common_suffix(string string1, string string2) \n{\n    string[] suffixes1\
    \ = all_suffixes(string1);\n    string[] suffixes2 = all_suffixes(string2);\n\
    \    foreach(suffix1; suffixes1)\n    {\n        foreach(suffix2; suffixes2)\n\
    \        {\n            if(suffix1 == suffix2)\n            {\n              \
    \  return suffix1;\n            }\n        }\n    }\n    return \"\";\n}\n/*\n\
    \ Return the longest common substring of two strings\n        \n*/\nstring longest_common_substring(string\
    \ string1, string string2) \n{\n    string[] prefixes1 = all_prefixes(string1);\n\
    \    string[] suffixes2 = all_suffixes(string2);\n    foreach(prefix1; prefixes1)\n\
    \    {\n        foreach(suffix2; suffixes2)\n        {\n            if(prefix1\
    \ == suffix2)\n            {\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6gh9j4y0.d(84): Error: found `unittest` instead of statement

    /tmp/tmp6gh9j4y0.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp6gh9j4y0.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp6gh9j4y0.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6gh9j4y0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
