language: d
name: HumanEval_80_is_happy
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    auto len = s.length;\n    if (len < 3) return false;\n    for (int i =\
    \ 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptz6y1f2f.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmptz6y1f2f.__unittest_L18_C1() [0x427b85]

    ??:? void tmptz6y1f2f.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\n/*\n\
    \    You are given a string s.\n    Your task is to check if the string is happy\
    \ or not.\n    A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n    For example:\n                            \n*/\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    auto len = s.length;\n    if (len < 3) return false;\n    for (int i =\
    \ 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp65wb04ld.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp65wb04ld.__unittest_L17_C1() [0x427b85]

    ??:? void tmp65wb04ld.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\n/*\nYou are given a string s.\n    Your task is to check if the string is happy\
    \ or not.\n    A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n    For example:\n                            \n*/\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt6msflwy.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpt6msflwy.__unittest_L24_C1() [0x427b85]

    ??:? void tmpt6msflwy.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\n/*\nYou are given a string\
    \ s.\n    Your task is to check if the string is sad or not.\n    A string is\
    \ sad if its length is at least 3 and every 3 consecutive letters are the same.\n\
    \    For example:\n                            \n*/\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptz6y1f2f.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmptz6y1f2f.__unittest_L18_C1() [0x427b85]

    ??:? void tmptz6y1f2f.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    static assert(s.length >= 3);\n    return s[0] != s[1] && s[1] != s[2]\
    \ && s[0] != s[2];\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxeijoz3j.d(12): Error: variable `s` cannot be read at compile time

    /tmp/tmpxeijoz3j.d(12):        while evaluating: `static assert(s.length >= 3LU)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxeijoz3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164386
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    bool result = true;\n    if (s.length < 3)\n        return false;\n   \
    \ for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1]\
    \ || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n        {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    int n = s.length;\n    if (n < 3) return false;\n    for (int i = 0; i\
    \ < n - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i\
    \ + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplf6qlsbb.d(12): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplf6qlsbb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164386
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\n/*\n    You are given a string s.\n    Your task is to check\
    \ if the string is happy or not.\n    A string is happy if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n    For example:\n         \
    \                   \n*/\nunittest\n{\n    alias candidate = is_happy;\n\n   \
    \ assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz5zfcyoi.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpz5zfcyoi.__unittest_L25_C1() [0x427b85]

    ??:? void tmpz5zfcyoi.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    auto r = s.length;\n    if (r < 3) return false;\n    for (int i = 0; i\
    \ < r - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i\
    \ + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\n/*\nYou are given a string s.\n    Your task is\
    \ to check if the string is happy or not.\n    A string is happy if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\n    For example:\n\
    \                            \n*/\nunittest\n{\n    alias candidate = is_happy;\n\
    \n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpflq46v15.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpflq46v15.__unittest_L26_C1() [0x427b85]

    ??:? void tmpflq46v15.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\n/*\nYou are given a string s.\n    Your task is\
    \ to check if the string is happy or not.\n    A string is happy if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\n    For example:\n\
    \                            \n*/\nunittest\n{\n    alias candidate = is_happy;\n\
    \n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpflq46v15.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpflq46v15.__unittest_L26_C1() [0x427b85]

    ??:? void tmpflq46v15.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp65wb04ld.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp65wb04ld.__unittest_L17_C1() [0x427b85]

    ??:? void tmp65wb04ld.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    return s.length == 3 ? s[0] != s[1]\
    \ && s[1] != s[2] && s[0] != s[2] : is_happy(s[1..$]);\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\n/*\nYou are given a string s.\n    Your task is\
    \ to check if the string is happy or not.\n    A string is happy if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\n    For example:\n\
    \                            \n*/\nunittest\n{\n    alias candidate = is_happy;\n\
    \n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpflq46v15.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpflq46v15.__unittest_L26_C1() [0x427b85]

    ??:? void tmpflq46v15.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\n/*\nYou are given a string s.\n    Your task is to check\
    \ if the string is sad or not.\n    A string is sad if its length is at least\
    \ 3 and every 3 consecutive letters are the same\n    For example:\n         \
    \                   \n*/\nunittest\n{\n    alias candidate = is_happy;\n\n   \
    \ assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx_qqusp6.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpx_qqusp6.__unittest_L25_C1() [0x427b85]

    ??:? void tmpx_qqusp6.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp65wb04ld.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp65wb04ld.__unittest_L17_C1() [0x427b85]

    ??:? void tmp65wb04ld.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptz6y1f2f.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmptz6y1f2f.__unittest_L18_C1() [0x427b85]

    ??:? void tmptz6y1f2f.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\n/*\nYou are given a string\
    \ s.\n    Your task is to check if the string is happy or not.\n    A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    \    For example:\n                            \n*/\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    bool result = true;\n    if (s.length < 3)\n        return false;\n   \
    \ for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1]\
    \ || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n        {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp65wb04ld.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp65wb04ld.__unittest_L17_C1() [0x427b85]

    ??:? void tmp65wb04ld.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptz6y1f2f.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmptz6y1f2f.__unittest_L18_C1() [0x427b85]

    ??:? void tmptz6y1f2f.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for\
    \ (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n\
    \        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    auto len = s.length;\n    if (len < 3)\n        return false;\n    for\
    \ (int i = 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    auto len = s.length;\n    if (len < 3) return false;\n    if (len == 3)\
    \ return s[0] != s[1] && s[1] != s[2] && s[0] != s[2];\n    auto res = true;\n\
    \    for (int i = 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n        {\n            res = false;\n\
    \            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length -\
    \ 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp65wb04ld.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp65wb04ld.__unittest_L17_C1() [0x427b85]

    ??:? void tmp65wb04ld.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length -\
    \ 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for\
    \ (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n\
    \        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    int len = s.length;\n    if (len < 3) return false;\n    for (int i = 0;\
    \ i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] ||\
    \ s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphbrzx_h.d(12): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphbrzx_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptz6y1f2f.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmptz6y1f2f.__unittest_L18_C1() [0x427b85]

    ??:? void tmptz6y1f2f.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    return s.length >= 3 && s.chunks(3).all!(ch => ch[0] != ch[1] && ch[1]\
    \ != ch[2] && ch[0] != ch[2]);\n}\nunittest\n{\n    alias candidate = is_happy;\n\
    \n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7dwj7qwz.d(12): Error: no property `chunks` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7dwj7qwz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    bool result = false;\n    if(s.length >= 3)\n    {\n        auto r = s.length\
    \ % 3;\n        auto n = s.length / 3;\n        if(r == 0)\n        {\n      \
    \      auto i = 0;\n            while(i < n)\n            {\n                auto\
    \ a = s[i];\n                auto b = s[i+1];\n                auto c = s[i+2];\n\
    \                if(a != b && b != c && a != c)\n                {\n         \
    \           result = true;\n                }\n                else\n        \
    \        {\n                    result = false;\n                    break;\n\
    \                }\n                i += 3;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppi2rbpux.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ed5]

    ??:? void tmppi2rbpux.__unittest_L40_C1() [0x427b78]

    ??:? void tmppi2rbpux.__modtest() [0x427c58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab02]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc95]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430144]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc21]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad9]

    ??:? runModuleUnitTests [0x42ba45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428398]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length -\
    \ 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\n/*\n\
    You are given a string s.\n    Your task is to check if the string is happy or\
    \ not.\n    A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n    For example:\n                            \n*/\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptz6y1f2f.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmptz6y1f2f.__unittest_L18_C1() [0x427b85]

    ??:? void tmptz6y1f2f.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\n/*\n\
    You are given a string s.\n    Your task is to check if the string is sad or not.\n\
    \    A string is sad if its length is at least 3 and every 3 consecutive letters\
    \ are same\n    For example:\n                            \n*/\nunittest\n{\n\
    \    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n \
    \   assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) \n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) \n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    bool result = true;\n    if (s.length < 3)\n        return false;\n   \
    \ else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n   \
    \         if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    auto n = s.length;\n    if (n < 3) return false;\n    for (int i = 0; i\
    \ < n - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i\
    \ + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n  \
    \  assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\n/*\n    You are given a string s.\n    Your task\
    \ is to check if the string is happy or not.\n    A string is happy if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\n    For example:\n\
    \                            \n*/\nunittest\n{\n    alias candidate = is_happy;\n\
    \n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1f11yauv.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp1f11yauv.__unittest_L26_C1() [0x427b85]

    ??:? void tmp1f11yauv.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    auto it = s.walkLength(3);\n    while\
    \ (!it.empty)\n    {\n        if (it[0] == it[1] || it[0] == it[2] || it[1] ==\
    \ it[2]) return false;\n        it.popFrontN(1);\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") ==\
    \ false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\"\
    ) == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_gj2yss.d(13): Error: no property `walkLength` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_gj2yss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp65wb04ld.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp65wb04ld.__unittest_L17_C1() [0x427b85]

    ??:? void tmp65wb04ld.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    return s.length == 3 ? s[0] != s[1]\
    \ && s[1] != s[2] && s[0] != s[2] : is_happy(s[1..$]);\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    else\n    {\n        for (size_t i\
    \ = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2]) return false;\n        }\n        return true;\n    }\n}\n\
    unittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") ==\
    \ false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\"\
    ) == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1voplxbd.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp1voplxbd.__unittest_L22_C1() [0x427b89]

    ??:? void tmp1voplxbd.__modtest() [0x427c40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptz6y1f2f.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmptz6y1f2f.__unittest_L18_C1() [0x427b85]

    ??:? void tmptz6y1f2f.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptz6y1f2f.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmptz6y1f2f.__unittest_L18_C1() [0x427b85]

    ??:? void tmptz6y1f2f.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    auto len = s.length;\n    if (len < 3)\n        return false;\n    auto\
    \ t = s[0 .. 3];\n    if (t[0] == t[1] || t[0] == t[2] || t[1] == t[2])\n    \
    \    return false;\n    for (int i = 3; i < len; i++)\n    {\n        t = t[1\
    \ .. $] ~ s[i];\n        if (t[0] == t[1] || t[0] == t[2] || t[1] == t[2])\n \
    \           return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    bool result = true;\n    if (s.length < 3)\n        return false;\n   \
    \ for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1]\
    \ || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n        {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length -\
    \ 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp65wb04ld.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp65wb04ld.__unittest_L17_C1() [0x427b85]

    ??:? void tmp65wb04ld.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp65wb04ld.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp65wb04ld.__unittest_L17_C1() [0x427b85]

    ??:? void tmp65wb04ld.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length-2; i++)\n\
    \    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\
    \n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\n/*\nYou are given a string s.\n    Your task is to check if the string is happy\
    \ or not.\n    A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n    For example:\n                            \n*/\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt6msflwy.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpt6msflwy.__unittest_L24_C1() [0x427b85]

    ??:? void tmpt6msflwy.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 3)\n \
    \       if (s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp65wb04ld.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp65wb04ld.__unittest_L17_C1() [0x427b85]

    ??:? void tmp65wb04ld.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    return s.length >= 3 && s.chunks(3).all!(ch => ch[0] != ch[1] && ch[1]\
    \ != ch[2] && ch[0] != ch[2]);\n}\nunittest\n{\n    alias candidate = is_happy;\n\
    \n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7dwj7qwz.d(12): Error: no property `chunks` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7dwj7qwz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for\
    \ (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n\
    \        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 3)\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg88verc_.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpg88verc_.__unittest_L19_C1() [0x427b85]

    ??:? void tmpg88verc_.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\n/*\nYou are given a string\
    \ s.\n    Your task is to check if the string is happy or not.\n    A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    \    For example:\n                            \n*/\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for\
    \ (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n\
    \        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n                            \n*/\nbool is_happy(string s) \n\
    {\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2;\
    \ i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164387
