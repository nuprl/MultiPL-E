{
  "language": "d",
  "name": "HumanEval_163_generate_integers",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    return iota(a, b + 1).filter!(x => x % 2 == 0).array;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj4edkrif.d(13): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4edkrif.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    return iota(a, b).filter!(x => x % 2 == 0).array;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8q23e2pc.d(13): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q23e2pc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b) \n    {\n        if (i % 2 == 0) \n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3hjcrrkt.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hjcrrkt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    if (a > b) \n    {\n        return [];\n    }\n    auto result = new long[];\n    foreach (i; a..b) \n    {\n        if (i % 2 == 0) \n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n/*\n    The function generate_integers should return the even integers between\n    a and b, in ascending order.\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdev7mhzh.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdev7mhzh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    return iota(a, b).filter!(x => x % 2 == 0).array;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8q23e2pc.d(13): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q23e2pc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    return iota(a, b).filter!(x => x % 2 == 0).array;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8q23e2pc.d(13): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q23e2pc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; a .. b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf74_392h.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpf74_392h.__unittest_L23_C1() [0x427f8e]\n??:? void tmpf74_392h.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgkoa0b_m.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpgkoa0b_m.__unittest_L23_C1() [0x427f8e]\n??:? void tmpgkoa0b_m.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgkoa0b_m.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpgkoa0b_m.__unittest_L23_C1() [0x427f8e]\n??:? void tmpgkoa0b_m.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgkoa0b_m.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpgkoa0b_m.__unittest_L23_C1() [0x427f8e]\n??:? void tmpgkoa0b_m.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b) \n    {\n        if(i % 2 == 0) \n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptjisv995.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmptjisv995.__unittest_L23_C1() [0x427f8a]\n??:? void tmptjisv995.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    // your code here\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpz145536m.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpz145536m.__unittest_L24_C1() [0x427f8a]\n??:? void tmpz145536m.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[0];\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsxdsa7ow.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmpsxdsa7ow.__unittest_L23_C1() [0x427fa2]\n??:? void tmpsxdsa7ow.__modtest() [0x42811c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cdcf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bc62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430739]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc39]\n??:? runModuleUnitTests [0x42cba5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiy0y4d67.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpiy0y4d67.__unittest_L23_C1() [0x427f8a]\n??:? void tmpiy0y4d67.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n/*\n    Example:\n    generate_integers(2, 10) => [2, 4, 6, 8, 10]\n*/\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprk56iyd1.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmprk56iyd1.__unittest_L27_C1() [0x427f8a]\n??:? void tmprk56iyd1.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgkoa0b_m.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpgkoa0b_m.__unittest_L23_C1() [0x427f8e]\n??:? void tmpgkoa0b_m.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n/*\n    generate_integers(2, 10) = [2, 4, 6, 8, 10]\n    generate_integers(1, 11) = [2, 4, 6, 8, 10]\n    generate_integers(0, 20) = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    generate_integers(0, 0) = []\n    generate_integers(10, 2) = []\n*/\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp150tmgem.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp150tmgem.__unittest_L30_C1() [0x427f8a]\n??:? void tmp150tmgem.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(long i; a .. b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo86s2ynq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpo86s2ynq.__unittest_L23_C1() [0x427f8a]\n??:? void tmpo86s2ynq.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n/*\n    Example tests:\n*/\nunittest\n{\n    auto result = generate_integers(1, 10);\n    assert(result == [2, 4, 6, 8, 10]);\n}\nunittest\n{\n    auto result = generate_integers(1, 100);\n    assert(result == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]);\n}\nunittest\n{\n    auto result = generate_integers(1, 1);\n    assert(result == []);\n}\n/*\n    Notes:\n    - The input will always be valid.\n    - The input integers are guaranteed to be greater than or equal to 0.\n    - The input integers will not be greater than 2^31 - 1.\n    - The input integers will be in the range [0, 2^31 - 1].\n*/\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp63au5rgg.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428bd5]\n??:? void tmp63au5rgg.__unittest_L26_C1() [0x428390]\n??:? void tmp63au5rgg.__modtest() [0x428944]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d78f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431075]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431524]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431001]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c5f9]\n??:? runModuleUnitTests [0x42d565]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429024]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgkoa0b_m.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpgkoa0b_m.__unittest_L23_C1() [0x427f8e]\n??:? void tmpgkoa0b_m.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    for (; a <= b; a++)\n    {\n        if (a % 2 == 0)\n            result ~= a;\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdlf4q9oa.d(21): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdlf4q9oa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n   \nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpikcjfaj3.d(141): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikcjfaj3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n/*\n    Example:\n    generate_integers(1, 10) => [2, 4, 6, 8]\n*/\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnr0npg70.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpnr0npg70.__unittest_L27_C1() [0x427f8a]\n??:? void tmpnr0npg70.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; iota(a, b + 1))\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptukjcnj6.d(14): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptukjcnj6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiy0y4d67.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpiy0y4d67.__unittest_L23_C1() [0x427f8a]\n??:? void tmpiy0y4d67.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    return iota(a, b).filter!(x => x % 2 == 0).array;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8q23e2pc.d(13): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q23e2pc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiy0y4d67.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpiy0y4d67.__unittest_L23_C1() [0x427f8a]\n??:? void tmpiy0y4d67.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    return iota(a, b).filter!(x => x % 2 == 0).array;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8q23e2pc.d(13): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q23e2pc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgkoa0b_m.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpgkoa0b_m.__unittest_L23_C1() [0x427f8e]\n??:? void tmpgkoa0b_m.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; a .. b) \n    {\n        if(i % 2 == 0) \n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwyjb5gfb.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpwyjb5gfb.__unittest_L23_C1() [0x427f8e]\n??:? void tmpwyjb5gfb.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiy0y4d67.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpiy0y4d67.__unittest_L23_C1() [0x427f8a]\n??:? void tmpiy0y4d67.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b) \n    {\n        if (i % 2 == 0) \n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3hjcrrkt.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hjcrrkt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(immutable i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgkoa0b_m.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpgkoa0b_m.__unittest_L23_C1() [0x427f8e]\n??:? void tmpgkoa0b_m.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    auto result = new long[];\n    foreach (i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplx4798i0.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx4798i0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163130
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(long i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzdzd4izx.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpzdzd4izx.__unittest_L23_C1() [0x427f8a]\n??:? void tmpzdzd4izx.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n/*\n    Example:\n    generate_integers(2, 10) -> [2, 4, 6, 8, 10]\n*/\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4ww81uxb.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp4ww81uxb.__unittest_L27_C1() [0x427f8a]\n??:? void tmp4ww81uxb.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if (i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwex5otj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpmwex5otj.__unittest_L23_C1() [0x427f8a]\n??:? void tmpmwex5otj.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n                \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result;\n    foreach(i; a..b)\n    {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7a2ydpz8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp7a2ydpz8.__unittest_L23_C1() [0x427f8a]\n??:? void tmp7a2ydpz8.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bbee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbc5]\n??:? runModuleUnitTests [0x42cb31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163131
    }
  ]
}