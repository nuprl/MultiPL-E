name: HumanEval_111_histogram
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing a\
  \ space separated lowercase letters, return a dictionary\n    of the letter with\
  \ the most repetition and containing the corresponding count.\n    If several letters\
  \ have the same occurrence, return all of them.\n    \n    Example:\n          \
  \          \n    \n*/\nNullable!(long[string]) histogram(string test) \n"
tests: "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
  \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\"\
  : 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n  \
  \      assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n\
  \        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
  \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\
  \n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"\
  b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n\
  }\n\n}\nvoid main(){}"
completions: ["{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n        {\n\
    \            histogram[c] = 1;\n        }\n        else\n        {\n         \
    \   histogram[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c; histogram)\n\
    \    {\n        if(c.value > max)\n        {\n            max = c.value;\n   \
    \     }\n    }\n    if(max == 0)\n    {\n        return result;\n    }\n    result\
    \ = new long[string];\n    foreach(c; histogram)\n    {\n        if(c.value ==\
    \ max)\n        {\n            result.get.put(c.key, c.value);\n        }\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n\
    \        {\n            histogram[c] = 1;\n        }\n        else\n        {\n\
    \            histogram[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ histogram)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    foreach(c; histogram)\n    {\n        if(c.value == max)\n\
    \        {\n            result.insert(c.key);\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(hist.count(c))\n\
    \            hist[c]++;\n        else\n            hist[c] = 1;\n    }\n    return\
    \ hist;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histo;\n\
    \    foreach(c; test) \n    {\n        if(c in histo)\n            histo[c]++;\n\
    \        else\n            histo[c] = 1;\n    }\n    long max = 0;\n    foreach(c;\
    \ histo) \n    {\n        if(histo[c] > max)\n            max = histo[c];\n  \
    \  }\n    if(max > 0) \n    {\n        result = Nullable!(long[string])(new long[string]);\n\
    \        foreach(c; histo) \n        {\n            if(histo[c] == max)\n    \
    \            result.get.put(c, histo[c]);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ long max = 0;\n    foreach(c; test) \n    {\n        if(!histogram.contains(c))\
    \ \n        {\n            histogram[c] = 0;\n        }\n        histogram[c]++;\n\
    \        if(histogram[c] > max) \n        {\n            max = histogram[c];\n\
    \        }\n    }\n    if(max == 0) \n    {\n        return result;\n    }\n \
    \   foreach(c; histogram.keys) \n    {\n        if(histogram[c] == max) \n   \
    \     {\n            result.get.put(c, max);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        if(c in histogram)\n        {\n           \
    \ histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n\
    \        if(histogram[c] > max)\n        {\n            max = histogram[c];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = histogram;\n    }\n\
    \    return result;\n}", "{\n    long[string] histogram;\n    foreach(c; test)\n\
    \    {\n        histogram[c]++;\n    }\n    long max = max(histogram.values);\n\
    \    Nullable!(long[string]) result;\n    foreach(c; histogram.keys)\n    {\n\
    \        if(histogram[c] == max)\n        {\n            result.insert(histogram);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(c in result)\n        {\n\
    \            result[c]++;\n        }\n        else\n        {\n            result[c]\
    \ = 1;\n        }\n        max = max(max, result[c]);\n    }\n    if(max == 0)\n\
    \    {\n        return null;\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test)\n    {\n        if(c in result)\n        {\n \
    \           result[c]++;\n        }\n        else\n        {\n            result[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(result.values);\n    long[string]\
    \ maxes;\n    foreach(k, v; result)\n    {\n        if(v == max)\n        {\n\
    \            maxes[k] = v;\n        }\n    }\n    return maxes;\n}", "{\n    long[]\
    \ hist = new long[256];\n    foreach(c; test)\n    {\n        hist[c]++;\n   \
    \ }\n    long max = maxElement(hist);\n    Nullable!(long[string]) result = new\
    \ Nullable!(long[string]);\n    foreach(i, c; test)\n    {\n        if(hist[c]\
    \ == max)\n        {\n            result.set(hist);\n            break;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test) \n    {\n        if(result.count(c)) \n        {\n            result[c]++;\n\
    \        }\n        else \n        {\n            result[c] = 1;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n      \
    \  {\n            histogram[c]++;\n        }\n        else\n        {\n      \
    \      histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(k, v; histogram)\n    {\n        if(v == max)\n        {\n      \
    \      result.insert(k, v);\n        }\n    }\n    return result;\n}", "{\n  \
    \  Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n       \
    \ return result;\n    }\n    long max = 0;\n    long[string] histogram;\n    foreach\
    \ (c; test)\n    {\n        if (c == ' ')\n        {\n            continue;\n\
    \        }\n        if (histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c] += 1;\n \
    \       }\n        max = max(max, histogram[c]);\n    }\n    if (max == 0)\n \
    \   {\n        return result;\n    }\n    long[string] result_array;\n    foreach\
    \ (c; test)\n    {\n        if (c == ' ')\n        {\n            continue;\n\
    \        }\n        if (histogram[c] == max)\n        {\n            result_array\
    \ ~= c;\n        }\n    }\n    result = result_array;\n    return result;\n}",
  "{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in hist)\n\
    \            hist[c]++;\n        else\n            hist[c] = 1;\n    }\n    long\
    \ max = maxElement(hist.values);\n    long[string] result;\n    foreach(c; hist)\n\
    \    {\n        if(c.value == max)\n            result[c.key] = c.value;\n   \
    \ }\n    return result;\n}", "{\n    long[string] result;\n    long max = 0;\n\
    \    foreach(c; test)\n    {\n        if(result.count(c) == 0)\n        {\n  \
    \          result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n        if(result[c] > max)\n        {\n            max =\
    \ result[c];\n        }\n    }\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(isAlpha(c))\n        {\n    \
    \        hist[c]++;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ result.insert(k, v);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   long[string] histogram = new long[string];\n    foreach (c; test)\n    {\n\
    \        if (c in histogram)\n        {\n            histogram[c]++;\n       \
    \ }\n        else\n        {\n            histogram[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(histogram.values);\n    foreach (c; histogram.keys)\n\
    \    {\n        if (histogram[c] == max)\n        {\n            result.put(c,\
    \ max);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ in histogram)\n        {\n            histogram[c]++;\n        }\n        else\n\
    \        {\n            histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(c, histogram[c]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] hist = new long[string];\n    foreach(c; test)\
    \ {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n    if(max\
    \ == 0) {\n        return null;\n    }\n    long[string] result = new long[string];\n\
    \    foreach(k, v; hist) {\n        if(v == max) {\n            result[k] = v;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] hist = new long[string];\n    foreach(c; test)\n    {\n    \
    \    hist[c]++;\n    }\n    long max = maxElement(hist.values);\n    foreach(c;\
    \ hist.keys)\n    {\n        if(hist[c] == max)\n        {\n            result.insert(c,\
    \ hist[c]);\n        }\n    }\n    return result;\n}", "{\n    long[string] result;\n\
    \    foreach(c; test)\n    {\n        if(c in result)\n        {\n           \
    \ result[c]++;\n        }\n        else\n        {\n            result[c] = 1;\n\
    \        }\n    }\n    long max = maxElement(result.values);\n    if(max == 0)\n\
    \    {\n        return null;\n    }\n    long[string] finalResult;\n    foreach(k,\
    \ v; result)\n    {\n        if(v == max)\n        {\n            finalResult[k]\
    \ = v;\n        }\n    }\n    return finalResult;\n}", "{\n    long[string] result;\n\
    \    foreach(c; test)\n    {\n        if(result.count(c) == 0)\n        {\n  \
    \          result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n    }\n    long max = 0;\n    foreach(c; result)\n    {\n\
    \        if(result[c] > max)\n        {\n            max = result[c];\n      \
    \  }\n    }\n    long[string] result2;\n    foreach(c; result)\n    {\n      \
    \  if(result[c] == max)\n        {\n            result2[c] = result[c];\n    \
    \    }\n    }\n    if(result2.length == 0)\n    {\n        return null;\n    }\n\
    \    return result2;\n}", "{\n    long[string] result;\n    foreach(c; test)\n\
    \    {\n        if(result.count(c))\n        {\n            result[c]++;\n   \
    \     }\n        else\n        {\n            result[c] = 1;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ hist;\n    long max = 0;\n    foreach(c; test)\n    {\n        if(!hist.contains(c))\n\
    \            hist[c] = 0;\n        hist[c]++;\n        if(hist[c] > max)\n   \
    \         max = hist[c];\n    }\n    foreach(c; test)\n    {\n        if(hist[c]\
    \ == max)\n            result.insert(c);\n    }\n    return result;\n}", "{\n\
    \    long[string] result;\n    long max = 0;\n    foreach(c; test)\n    {\n  \
    \      if(result.count(c) == 0)\n        {\n            result[c] = 1;\n     \
    \   }\n        else\n        {\n            result[c] += 1;\n        }\n     \
    \   max = max(max, result[c]);\n    }\n    if(max == 0)\n    {\n        return\
    \ null;\n    }\n    long[string] ret;\n    foreach(c; result)\n    {\n       \
    \ if(c.value == max)\n        {\n            ret[c.key] = c.value;\n        }\n\
    \    }\n    return ret;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n      \
    \  {\n            histogram[c]++;\n        }\n        else\n        {\n      \
    \      histogram[c] = 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ histogram)\n    {\n        if(histogram[c] > max)\n        {\n            max\
    \ = histogram[c];\n        }\n    }\n    if(max == 0)\n    {\n        return result;\n\
    \    }\n    result = new long[string];\n    foreach(c; histogram)\n    {\n   \
    \     if(histogram[c] == max)\n        {\n            result.get!(c) = max;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histogram;\n    foreach(c; test)\n    {\n        if(!histogram.contains(c))\n\
    \        {\n            histogram[c] = 0;\n        }\n        histogram[c]++;\n\
    \    }\n    long max = 0;\n    foreach(c; histogram.keys)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    if(max\
    \ > 0)\n    {\n        result = Nullable!(long[string])(histogram.filter!(x =>\
    \ x.value == max));\n    }\n    return result;\n}", "{\n    long[string] result;\n\
    \    foreach(c; test)\n    {\n        if(c in result)\n        {\n           \
    \ result[c]++;\n        }\n        else\n        {\n            result[c] = 1;\n\
    \        }\n    }\n    long max = maxElement(result.values);\n    if(max == 0)\n\
    \    {\n        return null;\n    }\n    long[string] result2;\n    foreach(k,\
    \ v; result)\n    {\n        if(v == max)\n        {\n            result2[k] =\
    \ v;\n        }\n    }\n    return result2;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ in histogram)\n        {\n            histogram[c]++;\n        }\n        else\n\
    \        {\n            histogram[c] = 1;\n        }\n    }\n    long max = max(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.set(histogram);\n            break;\n        }\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histo;\n    foreach(c; test)\n    {\n        if(histo.count(c) == 0)\n     \
    \   {\n            histo[c] = 1;\n        }\n        else\n        {\n       \
    \     histo[c]++;\n        }\n    }\n    long max = 0;\n    foreach(k, v; histo)\n\
    \    {\n        if(v > max)\n        {\n            max = v;\n        }\n    }\n\
    \    if(max == 0)\n    {\n        return result;\n    }\n    result = new long[string];\n\
    \    foreach(k, v; histo)\n    {\n        if(v == max)\n        {\n          \
    \  result.get!(k) = v;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in\
    \ hist)\n        {\n            hist[c]++;\n        }\n        else\n        {\n\
    \            hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ result.insert(k);\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(!hist.contains(c))\n            hist[c] = 0;\n        hist[c]++;\n\
    \    }\n    long max = maxElement(hist.values);\n    long[string] result;\n  \
    \  foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n            result[c]\
    \ = max;\n    }\n    return result;\n}", "{\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        histogram[c]++;\n    }\n    long max = max(histogram.values);\n\
    \    long[string] result;\n    foreach(k, v; histogram)\n    {\n        if(v ==\
    \ max)\n        {\n            result[k] = v;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        if(c in histogram)\n        {\n           \
    \ histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n    foreach(k,\
    \ v; histogram)\n    {\n        if(v == max)\n        {\n            result.insert(k,\
    \ v);\n        }\n    }\n    return result;\n}", "{\n    long[string] hist;\n\
    \    foreach(c; test)\n    {\n        if(c in hist)\n            hist[c] += 1;\n\
    \        else\n            hist[c] = 1;\n    }\n    long max = 0;\n    foreach(k,\
    \ v; hist)\n    {\n        if(v > max)\n            max = v;\n    }\n    long[string]\
    \ result;\n    foreach(k, v; hist)\n    {\n        if(v == max)\n            result\
    \ ~= k;\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] hist;\n    foreach(c; test)\n    {\n        if(!hist.contains(c))\n\
    \        {\n            hist[c] = 0;\n        }\n        hist[c]++;\n    }\n \
    \   long max = 0;\n    foreach(c; hist)\n    {\n        if(hist[c] > max)\n  \
    \      {\n            max = hist[c];\n        }\n    }\n    foreach(c; hist)\n\
    \    {\n        if(hist[c] == max)\n        {\n            result.emplace(hist);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test)\n    {\n        if(c in result)\n        {\n            result[c]++;\n\
    \        }\n        else\n        {\n            result[c] = 1;\n        }\n \
    \   }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(hist.count(c) == 0)\n       \
    \ {\n            hist[c] = 1;\n        }\n        else\n        {\n          \
    \  hist[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c; hist)\n   \
    \ {\n        if(c.value > max)\n        {\n            max = c.value;\n      \
    \  }\n    }\n    if(max == 0)\n    {\n        return result;\n    }\n    long[string]\
    \ max_hist;\n    foreach(c; hist)\n    {\n        if(c.value == max)\n       \
    \ {\n            max_hist[c.key] = c.value;\n        }\n    }\n    result = max_hist;\n\
    \    return result;\n}", "{\n    long[string] result;\n    foreach(c; test)\n\
    \    {\n        if(c in result)\n        {\n            result[c]++;\n       \
    \ }\n        else\n        {\n            result[c] = 1;\n        }\n    }\n \
    \   long max = maxElement(result.values);\n    Nullable!(long[string]) ret = new\
    \ long[string];\n    foreach(key, value; result)\n    {\n        if(value == max)\n\
    \        {\n            ret[key] = value;\n        }\n    }\n    return ret;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(c.isLetter)\n        {\n \
    \           histo[c]++;\n            if(histo[c] > max)\n            {\n     \
    \           max = histo[c];\n            }\n        }\n    }\n    if(max > 0)\n\
    \    {\n        result = new long[string];\n        foreach(c; test)\n       \
    \ {\n            if(c.isLetter)\n            {\n                if(histo[c] ==\
    \ max)\n                {\n                    result.get!(true)[c] = max;\n \
    \               }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in hist)\n\
    \            hist[c]++;\n        else\n            hist[c] = 1;\n    }\n    long\
    \ max = hist.values.max;\n    if(max == 0)\n        return Nullable!(long[string])();\n\
    \    long[string] result;\n    foreach(c; hist.keys)\n    {\n        if(hist[c]\
    \ == max)\n            result[c] = max;\n    }\n    return Nullable!(long[string])(result);\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n    {\n   \
    \     if(v == max)\n        {\n            result.insert(k);\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        hist[c]++;\n    }\n    long max\
    \ = 0;\n    foreach(c; hist)\n    {\n        if(c.value > max)\n        {\n  \
    \          max = c.value;\n        }\n    }\n    foreach(c; hist)\n    {\n   \
    \     if(c.value == max)\n        {\n            result.insert(c.key, max);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test)\n    {\n        if(c in result)\n        {\n            result[c]++;\n\
    \        }\n        else\n        {\n            result[c] = 1;\n        }\n \
    \   }\n    long max = 0;\n    foreach(c; result)\n    {\n        if(result[c]\
    \ > max)\n        {\n            max = result[c];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return null;\n    }\n    long[string] result2;\n    foreach(c;\
    \ result)\n    {\n        if(result[c] == max)\n        {\n            result2[c]\
    \ = max;\n        }\n    }\n    return result2;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(histogram.count(c)\
    \ == 0)\n        {\n            histogram[c] = 1;\n        }\n        else\n \
    \       {\n            histogram[c]++;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; test)\n    {\n        if(histogram[c] == max)\n        {\n   \
    \         result.put(histogram);\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] result;\n    long max = 0;\n    foreach(c;\
    \ test)\n    {\n        if(!result.contains(c))\n            result[c] = 0;\n\
    \        result[c]++;\n        max = max(max, result[c]);\n    }\n    if(max ==\
    \ 0)\n        return null;\n    return result.filter!(a => a.value == max);\n}",
  "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = max(histogram.values);\n    foreach(k, v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.put(k, v);\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histogram;\n    foreach(ch; test)\n    {\n        if(histogram.count(ch)\
    \ == 0)\n        {\n            histogram[ch] = 1;\n        }\n        else\n\
    \        {\n            histogram[ch]++;\n        }\n    }\n    long max = 0;\n\
    \    foreach(ch; histogram.keys)\n    {\n        if(histogram[ch] > max)\n   \
    \     {\n            max = histogram[ch];\n        }\n    }\n    if(max > 0)\n\
    \    {\n        result = Nullable!(long[string])(histogram);\n    }\n    return\
    \ result;\n}", "{\n    long[string] result;\n    foreach(c; test)\n    {\n   \
    \     if(result.count(c) == 0)\n        {\n            result[c] = 1;\n      \
    \  }\n        else\n        {\n            result[c]++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n      \
    \  {\n            histogram[c]++;\n        }\n        else\n        {\n      \
    \      histogram[c] = 1;\n        }\n    }\n    long max = max(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(c, histogram[c]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histo;\n\
    \    foreach(c; test)\n    {\n        if(histo.count(c))\n        {\n        \
    \    histo[c]++;\n        }\n        else\n        {\n            histo[c] = 1;\n\
    \        }\n    }\n    long max = 0;\n    foreach(c; histo)\n    {\n        if(histo[c]\
    \ > max)\n        {\n            max = histo[c];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return result;\n    }\n    foreach(c; histo)\n    {\n\
    \        if(histo[c] == max)\n        {\n            result.insert(c, histo[c]);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(result.contains(c))\n    \
    \    {\n            result[c]++;\n        }\n        else\n        {\n       \
    \     result[c] = 1;\n        }\n        max = max(max, result[c]);\n    }\n \
    \   if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n      \
    \  return result.filter!(x => x.value == max).values;\n    }\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in\
    \ hist)\n        {\n            hist[c]++;\n        }\n        else\n        {\n\
    \            hist[c] = 1;\n        }\n    }\n    long max = hist.values.max;\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ result.set(hist);\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n        {\n  \
    \          histogram[c] = 1;\n        }\n        else\n        {\n           \
    \ histogram[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c; histogram)\n\
    \    {\n        if(histogram[c] > max)\n        {\n            max = histogram[c];\n\
    \        }\n    }\n    foreach(c; histogram)\n    {\n        if(histogram[c] ==\
    \ max)\n        {\n            result.insert(c, histogram[c]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(hist.count(c) == 0)\n       \
    \ {\n            hist[c] = 1;\n        }\n        else\n        {\n          \
    \  hist[c] += 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n   \
    \         result.set(hist);\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test) \n    {\n        if(histogram.count(c) == 0)\n        {\n\
    \            histogram[c] = 1;\n        }\n        else\n        {\n         \
    \   histogram[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c; histogram)\n\
    \    {\n        if(c.value > max)\n        {\n            max = c.value;\n   \
    \     }\n    }\n    foreach(c; histogram)\n    {\n        if(c.value == max)\n\
    \        {\n            result.insert(c.key);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(!hist.contains(c))\n        {\n            hist[c]\
    \ = 0;\n        }\n        hist[c]++;\n    }\n    long max = 0;\n    foreach(c;\
    \ hist)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    foreach(c; hist)\n    {\n        if(c.value == max)\n \
    \       {\n            result.insert(c.key, max);\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] result;\n    long max = 0;\n    foreach(c;\
    \ test)\n    {\n        if(!result.count(c))\n            result[c] = 0;\n   \
    \     result[c]++;\n        max = max(max, result[c]);\n    }\n    if(max == 0)\n\
    \        return null;\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    long max = 0;\n    foreach(c; test)\
    \ \n    {\n        if(!histogram.contains(c)) \n        {\n            histogram[c]\
    \ = 0;\n        }\n        histogram[c]++;\n        if(histogram[c] > max) \n\
    \        {\n            max = histogram[c];\n        }\n    }\n    if(max > 0)\
    \ \n    {\n        result = histogram;\n    }\n    return result;\n}", "{\n  \
    \  Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c; test)\n\
    \    {\n        if (histo.count(c) == 0)\n        {\n            histo[c] = 1;\n\
    \        }\n        else\n        {\n            histo[c]++;\n        }\n    }\n\
    \    long max = 0;\n    foreach(c; histo)\n    {\n        if (c.value > max)\n\
    \        {\n            max = c.value;\n        }\n    }\n    if (max > 0)\n \
    \   {\n        result = Nullable!(long[string])(histo);\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ long max = 0;\n    foreach(c; test)\n    {\n        if(histogram.count(c) ==\
    \ 0)\n        {\n            histogram[c] = 1;\n        }\n        else\n    \
    \    {\n            histogram[c]++;\n        }\n        if(histogram[c] > max)\n\
    \        {\n            max = histogram[c];\n        }\n    }\n    if(max > 0)\n\
    \    {\n        result = histogram;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ in histogram)\n        {\n            histogram[c]++;\n        }\n        else\n\
    \        {\n            histogram[c] = 1;\n        }\n    }\n    long max = 0;\n\
    \    foreach(c; histogram)\n    {\n        if(histogram[c] > max)\n        {\n\
    \            max = histogram[c];\n        }\n    }\n    if(max > 0)\n    {\n \
    \       result = Nullable!(long[string])(histogram);\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        if(c in histogram)\n        {\n           \
    \ histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c;\
    \ histogram.keys)\n    {\n        if(histogram[c] == max)\n        {\n       \
    \     result.insert(c, histogram);\n        }\n    }\n    return result;\n}",
  "{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            result2[c] = max;\n        }\n    }\n    if(result2.length\
    \ == 0)\n    {\n        return null;\n    }\n    return result2;\n}", "{\n   \
    \ long[string] hist;\n    foreach(c; test)\n    {\n        if(c in hist)\n   \
    \         hist[c]++;\n        else\n            hist[c] = 1;\n    }\n    long\
    \ max = 0;\n    foreach(c; hist)\n    {\n        if(hist[c] > max)\n         \
    \   max = hist[c];\n    }\n    long[string] result;\n    foreach(c; hist)\n  \
    \  {\n        if(hist[c] == max)\n            result ~= c;\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] hist;\n\
    \    long max = 0;\n    foreach(c; test)\n    {\n        if(c == ' ')\n      \
    \      continue;\n        if(!hist.contains(c))\n            hist[c] = 0;\n  \
    \      hist[c]++;\n        if(hist[c] > max)\n            max = hist[c];\n   \
    \ }\n    if(max == 0)\n        return result;\n    result = hist;\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n        {\n\
    \            histogram[c] = 1;\n        }\n        else\n        {\n         \
    \   histogram[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c; histogram)\n\
    \    {\n        if(histogram[c] > max)\n        {\n            max = histogram[c];\n\
    \        }\n    }\n    foreach(c; histogram)\n    {\n        if(histogram[c] ==\
    \ max)\n        {\n            result.insert(c, histogram[c]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[string] result;\n    long max = 0;\n\
    \    foreach(c; test)\n    {\n        if(!result.contains(c))\n            result[c]\
    \ = 0;\n        result[c]++;\n        max = max(max, result[c]);\n    }\n    return\
    \ max > 0 ? result : null;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(c in hist)\n        {\n     \
    \       hist[c]++;\n        }\n        else\n        {\n            hist[c] =\
    \ 1;\n        }\n    }\n    long max = 0;\n    foreach(c; hist)\n    {\n     \
    \   if(c.value > max)\n        {\n            max = c.value;\n        }\n    }\n\
    \    if(max > 0)\n    {\n        result = new long[string];\n        foreach(c;\
    \ hist)\n        {\n            if(c.value == max)\n            {\n          \
    \      result.get!(true).insert(c.key, c.value);\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(!hist.contains(c))\n        {\n\
    \            hist[c] = 0;\n        }\n        hist[c]++;\n    }\n    long max\
    \ = 0;\n    foreach(c; hist)\n    {\n        if(hist[c] > max)\n        {\n  \
    \          max = hist[c];\n        }\n    }\n    if(max > 0)\n    {\n        result\
    \ = new long[string];\n        foreach(c; hist)\n        {\n            if(hist[c]\
    \ == max)\n            {\n                result.get!(long[string])[c] = hist[c];\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ hist;\n    foreach(c; test) \n    {\n        hist[c]++;\n    }\n    long max\
    \ = maxElement(hist.values);\n    Nullable!(long[string]) result;\n    foreach(c;\
    \ hist.keys) \n    {\n        if(hist[c] == max) \n        {\n            result.insert(c,\
    \ hist[c]);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(hist.count(c)\
    \ == 0)\n        {\n            hist[c] = 1;\n        }\n        else\n      \
    \  {\n            hist[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ hist)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    long[string] max_letters;\n    foreach(c; hist)\n    {\n\
    \        if(c.value == max)\n        {\n            max_letters ~= c.key;\n  \
    \      }\n    }\n    if(max_letters.length > 0)\n    {\n        result = max_letters;\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n      \
    \  {\n            histogram[c]++;\n        }\n        else\n        {\n      \
    \      histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(k, v; histogram)\n    {\n        if(v == max)\n        {\n      \
    \      result.insert(k, v);\n        }\n    }\n    return result;\n}", "{\n  \
    \  long[string] result;\n    foreach(c; test) \n    {\n        if(c == ' ') continue;\n\
    \        result[c]++;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(histo.count(c))\n\
    \        {\n            histo[c]++;\n        }\n        else\n        {\n    \
    \        histo[c] = 1;\n        }\n    }\n    long max = 0;\n    foreach(c; histo)\n\
    \    {\n        if(histo[c] > max)\n        {\n            max = histo[c];\n \
    \       }\n    }\n    if(max == 0)\n    {\n        return result;\n    }\n   \
    \ foreach(c; histo)\n    {\n        if(histo[c] == max)\n        {\n         \
    \   result.insert(c, histo[c]);\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    long[string] histo;\n    long max =\
    \ 0;\n    foreach(c; test)\n    {\n        if(c == ' ') continue;\n        if(!histo.contains(c))\n\
    \        {\n            histo[c] = 1;\n        }\n        else\n        {\n  \
    \          histo[c]++;\n        }\n        if(histo[c] > max)\n        {\n   \
    \         max = histo[c];\n        }\n    }\n    if(max == 0)\n    {\n       \
    \ return null;\n    }\n    result = new long[string];\n    foreach(c; histo.keys)\n\
    \    {\n        if(histo[c] == max)\n        {\n            result.get!(true)[c]\
    \ = histo[c];\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(hist.count(c))\n\
    \        {\n            hist[c]++;\n        }\n        else\n        {\n     \
    \       hist[c] = 1;\n        }\n    }\n    long max = max(hist.values);\n   \
    \ foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n      \
    \      result.insert(c);\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(histogram.count(c) == 0)\n            histogram[c] = 1;\n        else\n\
    \            histogram[c]++;\n    }\n    long max = maxElement(histogram.values);\n\
    \    long[string] result;\n    foreach(c; histogram.keys)\n    {\n        if(histogram[c]\
    \ == max)\n            result[c] = max;\n    }\n    return result;\n}", "{\n \
    \   Nullable!(long[string]) result;\n    long[string] histogram;\n    long max\
    \ = 0;\n    foreach(c; test) \n    {\n        if(c in histogram)\n           \
    \ histogram[c]++;\n        else\n            histogram[c] = 1;\n        if(histogram[c]\
    \ > max)\n            max = histogram[c];\n    }\n    if(max == 0)\n        return\
    \ result;\n    result = Nullable!(long[string])(histogram);\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n        {\n  \
    \          histogram[c] = 1;\n        }\n        else\n        {\n           \
    \ histogram[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c; histogram)\n\
    \    {\n        if(histogram[c] > max)\n        {\n            max = histogram[c];\n\
    \        }\n    }\n    foreach(c; histogram)\n    {\n        if(histogram[c] ==\
    \ max)\n        {\n            result.insert(c);\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] histo;\n    foreach(c; test)\n    {\n    \
    \    if(histo.count(c) == 0)\n        {\n            histo[c] = 1;\n        }\n\
    \        else\n        {\n            histo[c] += 1;\n        }\n    }\n    long\
    \ max = maxElement(histo.values);\n    long[string] result;\n    foreach(c; histo.keys)\n\
    \    {\n        if(histo[c] == max)\n        {\n            result[c] = max;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test)\n    {\n        if(c in result)\n        {\n            result[c]++;\n\
    \        }\n        else\n        {\n            result[c] = 1;\n        }\n \
    \   }\n    long max = maxElement(result.values);\n    long[string] max_letters;\n\
    \    foreach(k, v; result)\n    {\n        if(v == max)\n        {\n         \
    \   max_letters[k] = v;\n        }\n    }\n    if(max_letters.length == 0)\n \
    \   {\n        return null;\n    }\n    return max_letters;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in\
    \ hist)\n        {\n            hist[c]++;\n        }\n        else\n        {\n\
    \            hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ result.insert(k);\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test)\n    {\n        if(result.count(c) == 0)\n   \
    \     {\n            result[c] = 0;\n        }\n        result[c]++;\n    }\n\
    \    long max = 0;\n    foreach(c; result)\n    {\n        if(result[c] > max)\n\
    \        {\n            max = result[c];\n        }\n    }\n    if(max == 0)\n\
    \    {\n        return null;\n    }\n    long[string] result2;\n    foreach(c;\
    \ result)\n    {\n        if(result[c] == max)\n        {\n            result2[c]\
    \ = max;\n        }\n    }\n    return result2;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    long max = 0;\n    foreach(c; test)\
    \ \n    {\n        if(c in histogram) \n        {\n            histogram[c]++;\n\
    \        }\n        else \n        {\n            histogram[c] = 1;\n        }\n\
    \        if(histogram[c] > max) \n        {\n            max = histogram[c];\n\
    \        }\n    }\n    if(max > 0) \n    {\n        result = histogram;\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n\
    \        {\n            histogram[c] = 1;\n        }\n        else\n        {\n\
    \            histogram[c] += 1;\n        }\n    }\n    long max = histogram.values.max;\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.set(histogram);\n            break;\n        }\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n\
    \        {\n            histogram[c] = 1;\n        }\n        else\n        {\n\
    \            histogram[c]++;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(c);\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.value[c]\
    \ = max;\n        }\n    }\n    return result;\n}", "{\n    long[string] result;\n\
    \    foreach(c; test)\n    {\n        if(result.count(c) == 0)\n        {\n  \
    \          result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n    }\n    long max = maxElement(result.values);\n    long[string]\
    \ max_letters;\n    foreach(k, v; result)\n    {\n        if(v == max)\n     \
    \   {\n            max_letters[k] = v;\n        }\n    }\n    if(max_letters.length\
    \ == 0)\n    {\n        return null;\n    }\n    return max_letters;\n}", "{\n\
    \    long[string] hist = new long[string];\n    foreach(c; test) \n    {\n   \
    \     if(c in hist) \n        {\n            hist[c]++;\n        } \n        else\
    \ \n        {\n            hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    if(max == 0) \n    {\n        return null;\n    }\n    long[string] result\
    \ = new long[string];\n    foreach(c; hist) \n    {\n        if(hist[c] == max)\
    \ \n        {\n            result[c] = max;\n        }\n    }\n    return result;\n\
    }", "{\n    auto hist = new long[string];\n    foreach(c; test)\n    {\n     \
    \   if(hist.count(c))\n            hist[c]++;\n        else\n            hist[c]\
    \ = 1;\n    }\n    return hist;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n\
    \        {\n            histogram[c] += 1;\n        }\n        else\n        {\n\
    \            histogram[c] = 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ histogram)\n    {\n        if(histogram[c] > max)\n        {\n            max\
    \ = histogram[c];\n        }\n    }\n    foreach(c; histogram)\n    {\n      \
    \  if(histogram[c] == max)\n        {\n            result.insert(c, histogram[c]);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n\
    \        {\n            histogram[c]++;\n        }\n        else\n        {\n\
    \            histogram[c] = 1;\n        }\n    }\n    long max = max(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.put(c, histogram[c]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] histo;\n    foreach(c; test)\n    {\n    \
    \    if(c in histo)\n            histo[c]++;\n        else\n            histo[c]\
    \ = 1;\n    }\n    long max = maxElement(histo.values);\n    long[string] result;\n\
    \    foreach(k, v; histo)\n    {\n        if(v == max)\n            result[k]\
    \ = v;\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] dict;\n    foreach(c; test)\n    {\n        if(c in dict)\n\
    \        {\n            dict[c]++;\n        }\n        else\n        {\n     \
    \       dict[c] = 1;\n        }\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach(key, value; dict)\n    {\n        if(value == max)\n        {\n \
    \           result.insert(key);\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c; test)\n\
    \    {\n        if(hist.count(c))\n        {\n            hist[c]++;\n       \
    \ }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n   \
    \ long max = 0;\n    foreach(c; hist)\n    {\n        if(hist[c] > max)\n    \
    \    {\n            max = hist[c];\n        }\n    }\n    foreach(c; hist)\n \
    \   {\n        if(hist[c] == max)\n        {\n            result.insert(c);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] hist = new long[string];\n    foreach(c; test)\n    {\n    \
    \    hist[c]++;\n    }\n    long max = maxElement(hist.values);\n    foreach(key,\
    \ value; hist)\n    {\n        if(value == max)\n        {\n            result.insert(key,\
    \ value);\n        }\n    }\n    return result;\n}", "{\n    auto result = new\
    \ long[string];\n    foreach(c; test) \n    {\n        if(result.count(c) == 0)\n\
    \            result[c] = 0;\n        result[c]++;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        if(c in histogram)\n        {\n           \
    \ histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n\
    \        if(histogram[c] > max)\n        {\n            max = histogram[c];\n\
    \        }\n    }\n    foreach(c; histogram)\n    {\n        if(histogram[c] ==\
    \ max)\n        {\n            result.insert(c, histogram[c]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(hist.count(c) == 0)\n       \
    \ {\n            hist[c] = 1;\n        }\n        else\n        {\n          \
    \  hist[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c; hist)\n\
    \    {\n        if(c.value > max)\n        {\n            max = c.value;\n   \
    \     }\n    }\n    foreach(c; hist)\n    {\n        if(c.value == max)\n    \
    \    {\n            result.insert(c.key);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long max = 0;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(!hist.contains(c))\n        {\n\
    \            hist[c] = 0;\n        }\n        hist[c]++;\n        if(hist[c] >\
    \ max)\n        {\n            max = hist[c];\n        }\n    }\n    foreach(c;\
    \ hist.keys)\n    {\n        if(hist[c] == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = hist;\n            }\n            else\n\
    \            {\n                result.get!().insert(c, hist[c]);\n          \
    \  }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(histo.count(c)\
    \ == 0)\n        {\n            histo[c] = 1;\n        }\n        else\n     \
    \   {\n            histo[c] += 1;\n        }\n    }\n    long max = maxElement(histo.values);\n\
    \    foreach(c; histo.keys)\n    {\n        if(histo[c] == max)\n        {\n \
    \           result.value[c] = max;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ result.get.insert(k, v);\n        }\n    }\n    return result;\n}", "{\n   \
    \ Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c; test)\n\
    \    {\n        if(histo.count(c))\n        {\n            histo[c]++;\n     \
    \   }\n        else\n        {\n            histo[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(histo.values);\n    foreach(c; histo.keys)\n    {\n\
    \        if(histo[c] == max)\n        {\n            result.insert(c);\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] hist = new long[string];\n    foreach(c; test)\n    {\n    \
    \    hist[c]++;\n    }\n    long max = max(hist.values);\n    foreach(c; hist.keys)\n\
    \    {\n        if(hist[c] == max)\n        {\n            result.insert(c);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] hist = new long[string];\n\
    \    foreach(c; test)\n    {\n        if(c in hist)\n            hist[c]++;\n\
    \        else\n            hist[c] = 1;\n    }\n    long max = maxElement(hist.values);\n\
    \    long[string] result = new long[string];\n    foreach(c; hist)\n    {\n  \
    \      if(hist[c] == max)\n            result[c] = max;\n    }\n    return result;\n\
    }", "{\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(c ==\
    \ ' ') continue;\n        if(histo.count(c) == 0)\n        {\n            histo[c]\
    \ = 1;\n        }\n        else\n        {\n            histo[c]++;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histo)\n    {\n        max = max(max,\
    \ c.value);\n    }\n    if(max == 0) return null;\n    long[string] result;\n\
    \    foreach(c; histo)\n    {\n        if(c.value == max)\n        {\n       \
    \     result[c.key] = c.value;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.put(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ in histogram)\n        {\n            histogram[c]++;\n        }\n        else\n\
    \        {\n            histogram[c] = 1;\n        }\n    }\n    long max = 0;\n\
    \    foreach(c; histogram)\n    {\n        if(histogram[c] > max)\n        {\n\
    \            max = histogram[c];\n        }\n    }\n    foreach(c; histogram)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(hist.count(c)\
    \ == 0)\n        {\n            hist[c] = 1;\n        }\n        else\n      \
    \  {\n            hist[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ hist)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    foreach(c; hist)\n    {\n        if(c.value == max)\n \
    \       {\n            result.insert(c.key, c.value);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    long max = 0;\n    foreach(c; test) \n    {\n        if(c == ' ') continue;\n\
    \        if(!histogram.contains(c)) \n        {\n            histogram[c] = 1;\n\
    \        }\n        else \n        {\n            histogram[c]++;\n        }\n\
    \        if(histogram[c] > max) \n        {\n            max = histogram[c];\n\
    \        }\n    }\n    if(max == 0) \n    {\n        return result;\n    }\n \
    \   foreach(c; histogram.keys) \n    {\n        if(histogram[c] == max) \n   \
    \     {\n            result.get.put(c, max);\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(c in\
    \ histo)\n            histo[c]++;\n        else\n            histo[c] = 1;\n \
    \   }\n    long max = maxElement(histo.values);\n    long[string] result;\n  \
    \  foreach(c; histo)\n    {\n        if(c.value == max)\n            result[c.key]\
    \ = c.value;\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in hist)\n\
    \        {\n            hist[c]++;\n        }\n        else\n        {\n     \
    \       hist[c] = 1;\n        }\n    }\n    long max = 0;\n    foreach(c; hist)\n\
    \    {\n        if(c.value > max)\n        {\n            max = c.value;\n   \
    \     }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n \
    \       foreach(c; hist)\n        {\n            if(c.value == max)\n        \
    \    {\n                result.get.put(c.key, c.value);\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] hist;\n    foreach(c; test)\n    {\n        if(!hist.contains(c))\n\
    \        {\n            hist[c] = 0;\n        }\n        hist[c] += 1;\n    }\n\
    \    long max = 0;\n    foreach(k, v; hist)\n    {\n        if(v > max)\n    \
    \    {\n            max = v;\n        }\n    }\n    if(max > 0)\n    {\n     \
    \   result = new long[string];\n        foreach(k, v; hist)\n        {\n     \
    \       if(v == max)\n            {\n                result.get!(k) = v;\n   \
    \         }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in\
    \ hist)\n        {\n            hist[c]++;\n        }\n        else\n        {\n\
    \            hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n   \
    \         result.insert(c);\n        }\n    }\n    return result;\n}", "{\n  \
    \  Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c] += 1;\n \
    \       }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c;\
    \ histogram.keys)\n    {\n        if(histogram[c] == max)\n        {\n       \
    \     result.set(histogram);\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    long max = 0;\n    foreach(c; test)\n    {\n        if(c in histogram)\n\
    \        {\n            histogram[c]++;\n        }\n        else\n        {\n\
    \            histogram[c] = 1;\n        }\n        if(histogram[c] > max)\n  \
    \      {\n            max = histogram[c];\n        }\n    }\n    if(max > 0)\n\
    \    {\n        result = histogram;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in\
    \ hist)\n        {\n            hist[c]++;\n        }\n        else\n        {\n\
    \            hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n   \
    \         result.insert(c);\n        }\n    }\n    return result;\n}", "{\n  \
    \  long[string] hist;\n    foreach(c; test)\n    {\n        if(c != ' ')\n   \
    \     {\n            hist[c]++;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    long[string] result;\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ result[k] = v;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ in histogram)\n        {\n            histogram[c]++;\n        }\n        else\n\
    \        {\n            histogram[c] = 1;\n        }\n    }\n    long max = max(histogram.values);\n\
    \    foreach(k, v; histogram)\n    {\n        if(v == max)\n        {\n      \
    \      result.set(histogram);\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] hist;\n\
    \    foreach(c; test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n\
    \        }\n        else\n        {\n            hist[c] = 1;\n        }\n   \
    \ }\n    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n    {\n\
    \        if(v == max)\n        {\n            result.insert(k);\n        }\n \
    \   }\n    return result;\n}", "{\n    long[string] histogram = new long[string];\n\
    \    foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n        {\n\
    \            histogram[c] = 0;\n        }\n        histogram[c]++;\n    }\n  \
    \  long max = maxElement(histogram.values);\n    long[string] result = new long[string];\n\
    \    foreach(k, v; histogram)\n    {\n        if(v == max)\n        {\n      \
    \      result[k] = v;\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test)\n    {\n        if(c in result)\n        {\n \
    \           result[c]++;\n        }\n        else\n        {\n            result[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(result.values);\n    Nullable!(long[string])\
    \ r;\n    foreach(k, v; result)\n    {\n        if(v == max)\n        {\n    \
    \        if(r.isNull)\n            {\n                r = new long[string];\n\
    \            }\n            r.get!(long[string])[k] = v;\n        }\n    }\n \
    \   return r;\n}", "{\n    long[string] result;\n    foreach(c; test) \n    {\n\
    \        if(result.count(c) == 0) \n        {\n            result[c] = 1;\n  \
    \      }\n        else \n        {\n            result[c]++;\n        }\n    }\n\
    \    long max = 0;\n    foreach(c; result) \n    {\n        if(result[c] > max)\
    \ \n        {\n            max = result[c];\n        }\n    }\n    long[string]\
    \ result2;\n    foreach(c; result) \n    {\n        if(result[c] == max) \n  \
    \      {\n            result2[c] = max;\n        }\n    }\n    if(result2.length\
    \ == 0) \n    {\n        return null;\n    }\n    return result2;\n}", "{\n  \
    \  Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c; test)\n\
    \    {\n        if(c in histo)\n        {\n            histo[c]++;\n        }\n\
    \        else\n        {\n            histo[c] = 1;\n        }\n    }\n    long\
    \ max = maxElement(histo.values);\n    foreach(c; histo.keys)\n    {\n       \
    \ if(histo[c] == max)\n        {\n            result.insert(c, histo);\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        histo[c]++;\n    }\n    long max = max(histo.values);\n\
    \    Nullable!(long[string]) result;\n    if(max == 0)\n    {\n        return\
    \ result;\n    }\n    result = new long[string];\n    foreach(c; histo.keys)\n\
    \    {\n        if(histo[c] == max)\n        {\n            result[c] = max;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n\
    \        {\n            histogram[c] += 1;\n        }\n        else\n        {\n\
    \            histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(c, histogram);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] hist;\n\
    \    foreach(c; test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n\
    \        }\n        else\n        {\n            hist[c] = 1;\n        }\n   \
    \ }\n    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n    {\n\
    \        if(hist[c] == max)\n        {\n            result.insert(c);\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test)\n    {\n        if(c in result)\n        {\n            result[c]++;\n\
    \        }\n        else\n        {\n            result[c] = 1;\n        }\n \
    \   }\n    long max = maxElement(result.values);\n    long[string] result2;\n\
    \    foreach(k, v; result)\n    {\n        if(v == max)\n        {\n         \
    \   result2[k] = v;\n        }\n    }\n    if(result2.length == 0)\n    {\n  \
    \      return null;\n    }\n    return result2;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(hist.count(c)\
    \ == 0)\n        {\n            hist[c] = 1;\n        }\n        else\n      \
    \  {\n            hist[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ hist)\n    {\n        if(hist[c] > max)\n        {\n            max = hist[c];\n\
    \        }\n    }\n    foreach(c; hist)\n    {\n        if(hist[c] == max)\n \
    \       {\n            result.get.insert(c, hist[c]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] hist;\n\
    \    foreach(c; test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n\
    \        }\n        else\n        {\n            hist[c] = 1;\n        }\n   \
    \ }\n    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n    {\n\
    \        if(hist[c] == max)\n        {\n            result.insert(c);\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test)\n    {\n        if(result.count(c) == 0)\n        {\n            result[c]\
    \ = 1;\n        }\n        else\n        {\n            result[c] += 1;\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n\
    \        {\n            histogram[c]++;\n        }\n        else\n        {\n\
    \            histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(c);\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = histogram.values.max;\n    if(max > 0)\n    {\n       \
    \ result = histogram.filter!(x => x.value == max);\n    }\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    long[string] hist;\n    long max = 0;\n\
    \    foreach(c; test)\n    {\n        if(!hist.contains(c))\n            hist[c]\
    \ = 0;\n        hist[c]++;\n        if(hist[c] > max)\n            max = hist[c];\n\
    \    }\n    if(max == 0)\n        return result;\n    result = new long[string];\n\
    \    foreach(c; test)\n    {\n        if(hist[c] == max)\n            result.get.put(c,\
    \ max);\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test)\n    {\n        if(c in result)\n        {\n            result[c]++;\n\
    \        }\n        else\n        {\n            result[c] = 1;\n        }\n \
    \   }\n    long max = maxElement(result.values);\n    long[string] maxes;\n  \
    \  foreach(k, v; result)\n    {\n        if(v == max)\n        {\n           \
    \ maxes[k] = v;\n        }\n    }\n    return maxes;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ in histogram)\n        {\n            histogram[c]++;\n        }\n        else\n\
    \        {\n            histogram[c] = 1;\n        }\n    }\n    long max = 0;\n\
    \    foreach(c; histogram)\n    {\n        if(histogram[c] > max)\n        {\n\
    \            max = histogram[c];\n        }\n    }\n    if(max > 0)\n    {\n \
    \       result = new long[string];\n        foreach(c; histogram)\n        {\n\
    \            if(histogram[c] == max)\n            {\n                result.get!(true).put(c,\
    \ max);\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test) \n    {\n        if(c\
    \ in hist) \n        {\n            hist[c]++;\n        }\n        else \n   \
    \     {\n            hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(k, v; hist) \n    {\n        if(v == max) \n        {\n         \
    \   result.insert(k);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ in histogram)\n        {\n            histogram[c]++;\n        }\n        else\n\
    \        {\n            histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(c);\n        }\n    }\n    return result;\n}",
  "{\n    long[string] hist;\n    foreach(c; test)\n    {\n        hist[c]++;\n  \
    \  }\n    return hist;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ dict;\n    long max = 0;\n    foreach(c; test)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(dict.count(c) == 0)\n            {\n              \
    \  dict[c] = 1;\n            }\n            else\n            {\n            \
    \    dict[c]++;\n            }\n            if(dict[c] > max)\n            {\n\
    \                max = dict[c];\n            }\n        }\n    }\n    if(max >\
    \ 0)\n    {\n        result = dict;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in\
    \ hist)\n        {\n            hist[c]++;\n        }\n        else\n        {\n\
    \            hist[c] = 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ hist)\n    {\n        if(hist[c] > max)\n        {\n            max = hist[c];\n\
    \        }\n    }\n    foreach(c; hist)\n    {\n        if(hist[c] == max)\n \
    \       {\n            result.insert(c, hist[c]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test) \n    {\n        histogram[c]++;\n    }\n    long max =\
    \ 0;\n    foreach(k, v; histogram) \n    {\n        if(v > max) \n        {\n\
    \            max = v;\n        }\n    }\n    if(max > 0) \n    {\n        result\
    \ = new long[string];\n        foreach(k, v; histogram) \n        {\n        \
    \    if(v == max) \n            {\n                result.get!(string).put(k,\
    \ v);\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    auto letters = test.split(\" \");\n    long[string] histogram;\n\
    \    foreach(letter; letters)\n    {\n        if(histogram.count(letter) == 0)\n\
    \        {\n            histogram[letter] = 1;\n        }\n        else\n    \
    \    {\n            histogram[letter]++;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(key, value; histogram)\n    {\n        if(value == max)\n       \
    \ {\n            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        if(!histogram.contains(c))\n        {\n   \
    \         histogram[c] = 1;\n        }\n        else\n        {\n            histogram[c]++;\n\
    \        }\n    }\n    long max = 0;\n    foreach(k,v; histogram)\n    {\n   \
    \     if(v > max)\n        {\n            max = v;\n        }\n    }\n    foreach(k,v;\
    \ histogram)\n    {\n        if(v == max)\n        {\n            result.insert(k);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test)\n    {\n        if(result.count(c) == 0)\n        {\n            result[c]\
    \ = 1;\n        }\n        else\n        {\n            result[c] += 1;\n    \
    \    }\n    }\n    long max = maxElement(result.values);\n    long[string] result2;\n\
    \    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n        {\n\
    \            result2[c] = max;\n        }\n    }\n    return result2;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test) \n    {\n        if(c in histogram) \n        {\n            histogram[c]++;\n\
    \        }\n        else \n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(k, v; histogram)\
    \ \n    {\n        if(v == max) \n        {\n            result.set(histogram);\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    auto result\
    \ = new long[string];\n    foreach(c; test) \n    {\n        if(c in result) \n\
    \        {\n            result[c]++;\n        }\n        else \n        {\n  \
    \          result[c] = 1;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long max = 0;\n    long[string] hist;\n    foreach(c; test)\n \
    \   {\n        if(hist.count(c) == 0)\n        {\n            hist[c] = 1;\n \
    \       }\n        else\n        {\n            hist[c] += 1;\n        }\n   \
    \     if(hist[c] > max)\n        {\n            max = hist[c];\n        }\n  \
    \  }\n    if(max > 0)\n    {\n        result = hist;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test) \n    {\n        if(c in hist) \n        {\n            hist[c]++;\n \
    \       }\n        else \n        {\n            hist[c] = 1;\n        }\n   \
    \ }\n    long max = maxElement(hist.values);\n    foreach(key, value; hist) \n\
    \    {\n        if(value == max) \n        {\n            result.set(hist);\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   long max = 0;\n    long[string] hist = new long[string];\n    foreach (c;\
    \ test)\n    {\n        hist[c]++;\n        max = max(max, hist[c]);\n    }\n\
    \    foreach (c; test)\n    {\n        if (hist[c] == max)\n        {\n      \
    \      result.set(hist);\n            return result;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histo;\n\
    \    long max = 0;\n    foreach(c; test)\n    {\n        if(c == ' ')\n      \
    \      continue;\n        auto key = c.to!string;\n        if(!histo.contains(key))\n\
    \            histo[key] = 0;\n        histo[key]++;\n        if(histo[key] > max)\n\
    \            max = histo[key];\n    }\n    if(max == 0)\n        return result;\n\
    \    result.init();\n    foreach(key, value; histo)\n    {\n        if(value ==\
    \ max)\n            result.get.insert(key, value);\n    }\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    return result;\n}",
  "{\n    long[string] histo = new long[string];\n    foreach(c; test)\n    {\n  \
    \      if(c in histo)\n            histo[c]++;\n        else\n            histo[c]\
    \ = 1;\n    }\n    return histo;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histogram;\n    long max = 0;\n    foreach(c; test)\n    {\n\
    \        if(c == ' ')\n            continue;\n        if(!histogram.contains(c))\n\
    \            histogram[c] = 0;\n        histogram[c]++;\n        if(histogram[c]\
    \ > max)\n            max = histogram[c];\n    }\n    if(max == 0)\n        return\
    \ result;\n    result = new long[string];\n    foreach(c; test)\n    {\n     \
    \   if(c == ' ')\n            continue;\n        if(histogram[c] == max)\n   \
    \         result.get!true[c] = max;\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test)\n    {\n        if(c in result)\n        {\n \
    \           result[c]++;\n        }\n        else\n        {\n            result[c]\
    \ = 1;\n        }\n    }\n    return result;\n}", "{\n    long[string] hist;\n\
    \    foreach(c; test)\n    {\n        if(hist.count(c) == 0)\n        {\n    \
    \        hist[c] = 1;\n        }\n        else\n        {\n            hist[c]\
    \ += 1;\n        }\n    }\n    long max = maxElement(hist.values);\n    long[string]\
    \ result;\n    foreach(key, value; hist)\n    {\n        if(value == max)\n  \
    \      {\n            result[key] = value;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        if(!histogram.contains(c))\n        {\n   \
    \         histogram[c] = 0;\n        }\n        histogram[c]++;\n    }\n    long\
    \ max = maxElement(histogram.values);\n    foreach(k, v; histogram)\n    {\n \
    \       if(v == max)\n        {\n            result.insert(k);\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[string] hist;\n    long max = 0;\n\
    \    foreach(c; test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n\
    \        }\n        else\n        {\n            hist[c] = 1;\n        }\n   \
    \     max = max(max, hist[c]);\n    }\n    if(max == 0)\n    {\n        return\
    \ null;\n    }\n    long[string] result;\n    foreach(c; hist)\n    {\n      \
    \  if(hist[c] == max)\n        {\n            result[c] = max;\n        }\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histo;\n    foreach(c; test)\n    {\n        if(c in histo)\n        {\n   \
    \         histo[c]++;\n        }\n        else\n        {\n            histo[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(histo.values);\n    foreach(c;\
    \ histo.keys)\n    {\n        if(histo[c] == max)\n        {\n            result.insert(c,\
    \ histo);\n        }\n    }\n    return result;\n}", "{\n    long[string] result;\n\
    \    foreach(c; test) \n    {\n        if(c in result) \n        {\n         \
    \   result[c]++;\n        }\n        else \n        {\n            result[c] =\
    \ 1;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    long max = 0;\n    foreach(c; test)\n\
    \    {\n        if(c == ' ')\n            continue;\n        if(!histogram.contains(c))\n\
    \            histogram[c] = 0;\n        histogram[c]++;\n        if(histogram[c]\
    \ > max)\n            max = histogram[c];\n    }\n    if(max == 0)\n        return\
    \ result;\n    result = new long[string];\n    foreach(c; test)\n    {\n     \
    \   if(c == ' ')\n            continue;\n        if(histogram[c] == max)\n   \
    \         result.get!(true)[c] = max;\n    }\n    return result;\n}", "{\n   \
    \ import std.algorithm : max, min;\n    import std.array : array;\n    import\
    \ std.conv : to;\n    import std.range : iota;\n    import std.typecons : Nullable;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : T", "{\n\
    \    long[string] histo;\n    foreach(c; test)\n    {\n        if(c.isLetter)\n\
    \        {\n            histo[c.toLower]++;\n        }\n    }\n    if(histo.empty)\n\
    \    {\n        return Nullable!(long[string]).init;\n    }\n    long max = histo.values.max;\n\
    \    long[string] result;\n    foreach(key, value; histo)\n    {\n        if(value\
    \ == max)\n        {\n            result[key] = value;\n        }\n    }\n   \
    \ return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n      \
    \  {\n            histogram[c]++;\n        }\n        else\n        {\n      \
    \      histogram[c] = 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ histogram)\n    {\n        if(histogram[c] > max)\n        {\n            max\
    \ = histogram[c];\n        }\n    }\n    if(max == 0)\n    {\n        return result;\n\
    \    }\n    result = histogram;\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ in histogram)\n        {\n            histogram[c]++;\n        }\n        else\n\
    \        {\n            histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(k, v; histogram)\n    {\n        if(v == max)\n        {\n      \
    \      result.insert(k, v);\n        }\n    }\n    return result;\n}", "{\n  \
    \  long[string] result;\n    foreach(c; test) \n    {\n        if(result.count(c)\
    \ == 0) \n        {\n            result[c] = 1;\n        } \n        else \n \
    \       {\n            result[c]++;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(c; result.keys) \n    {\n        if(result[c]\
    \ == max) \n        {\n            result2[c] = max;\n        }\n    }\n    if(result2.length\
    \ == 0) \n    {\n        return Nullable!(long[string])();\n    }\n    return\
    \ Nullable!(long[string])(result2);\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test)\n    {\n        if(result.count(c))\n        {\n            result[c]++;\n\
    \        }\n        else\n        {\n            result[c] = 1;\n        }\n \
    \   }\n    long max = maxElement(result.values);\n    long[string] max_keys;\n\
    \    foreach(key, value; result)\n    {\n        if(value == max)\n        {\n\
    \            max_keys[key] = value;\n        }\n    }\n    return max_keys;\n}",
  "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test) \n    {\n        if(result.count(c) == 0)\n            result[c] = 1;\n\
    \        else\n            result[c]++;\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(k, v; result) \n    {\n        if(v ==\
    \ max)\n            result2[k] = v;\n    }\n    if(result2.length == 0)\n    \
    \    return null;\n    return result2;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n\
    \        {\n            histogram[c]++;\n        }\n        else\n        {\n\
    \            histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(c, histogram[c]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test)\n    {\n        if(c in histogram)\n        {\n        \
    \    histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = histogram.values.max;\n    foreach(k,\
    \ v; histogram)\n    {\n        if(v == max)\n        {\n            result.set(histogram);\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ in histogram)\n        {\n            histogram[c]++;\n        }\n        else\n\
    \        {\n            histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(c, histogram[c]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] hist;\n\
    \    foreach(c; test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n\
    \        }\n        else\n        {\n            hist[c] = 1;\n        }\n   \
    \ }\n    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n    {\n\
    \        if(hist[c] == max)\n        {\n            result.insert(c);\n      \
    \  }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    else\n \
    \   {\n        long[string] histogram;\n        foreach (ch; test)\n        {\n\
    \            if (ch in histogram)\n            {\n                histogram[ch]++;\n\
    \            }\n            else\n            {\n                histogram[ch]\
    \ = 1;\n            }\n        }\n        long max = maxElement(histogram.values);\n\
    \        foreach (ch; histogram.keys)\n        {\n            if (histogram[ch]\
    \ == max)\n            {\n                result.insert(ch, histogram);\n    \
    \        }\n        }\n        return result;\n    }\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    long max = 0;\n    foreach(c; test)\n\
    \    {\n        if(c.isLetter)\n        {\n            if(!histogram.contains(c))\n\
    \            {\n                histogram[c] = 0;\n            }\n           \
    \ histogram[c]++;\n            if(histogram[c] > max)\n            {\n       \
    \         max = histogram[c];\n            }\n        }\n    }\n    if(max > 0)\n\
    \    {\n        result = histogram;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test) \n    {\n       \
    \ if(c in histogram)\n            histogram[c]++;\n        else\n            histogram[c]\
    \ = 1;\n    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\
    \ \n    {\n        if(histogram[c] == max)\n            result.insert(c);\n  \
    \  }\n    return result;\n}", "{\n    long[string] histo;\n    foreach(c; test)\n\
    \    {\n        histo[c]++;\n    }\n    long max = 0;\n    foreach(c; histo)\n\
    \    {\n        if(histo[c] > max)\n        {\n            max = histo[c];\n \
    \       }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    long[string]\
    \ result;\n    foreach(c; histo)\n    {\n        if(histo[c] == max)\n       \
    \ {\n            result[c] = max;\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = new long[string];\n    foreach(c; test)\n    {\n        if(c\
    \ in result)\n            result[c]++;\n        else\n            result[c] =\
    \ 1;\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histo;\n    foreach(c; test)\n    {\n        if(!histo.contains(c))\n\
    \        {\n            histo[c] = 0;\n        }\n        histo[c]++;\n    }\n\
    \    long max = histo.values.max;\n    if(max == 0)\n    {\n        return result;\n\
    \    }\n    result = new long[string];\n    foreach(c; histo.keys)\n    {\n  \
    \      if(histo[c] == max)\n        {\n            result.get.put(c, histo[c]);\n\
    \        }\n    }\n    return result;\n}", "{\n    // Create a dictionary of the\
    \ letters and their count.\n    Nullable!(long[string]) hist = new Nullable!(long[string])();\n\
    \    foreach(c; test)\n    {\n        if(hist.isNull)\n        {\n           \
    \ hist.init = new long[string]();\n        }\n        if(!hist.get.containsKey(c))\n\
    \        {\n            hist.get[c] = 0;\n        }\n        hist.get[c]++;\n\
    \    }\n    return hist;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n      \
    \  {\n            histogram[c]++;\n        }\n        else\n        {\n      \
    \      histogram[c] = 1;\n        }\n    }\n    long max = histogram.values.max;\n\
    \    foreach(k, v; histogram)\n    {\n        if(v == max)\n        {\n      \
    \      result.assign(histogram);\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test)\n    {\n        if(c in histogram)\n        {\n        \
    \    histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = 0;\n    foreach(k, v; histogram)\n  \
    \  {\n        if(v > max)\n        {\n            max = v;\n        }\n    }\n\
    \    if(max > 0)\n    {\n        result = new long[string];\n        foreach(k,\
    \ v; histogram)\n        {\n            if(v == max)\n            {\n        \
    \        result.get!(true)[k] = v;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test)\n    {\n        if(c in histogram)\n        {\n        \
    \    histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n    foreach(k,\
    \ v; histogram)\n    {\n        if(v == max)\n        {\n            result.put(k,\
    \ v);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    long max = 0;\n    foreach(c; test)\n \
    \   {\n        if(c.isLetter)\n        {\n            if(!hist.contains(c))\n\
    \            {\n                hist[c] = 0;\n            }\n            hist[c]++;\n\
    \            if(hist[c] > max)\n            {\n                max = hist[c];\n\
    \            }\n        }\n    }\n    if(max > 0)\n    {\n        result = new\
    \ long[string];\n        foreach(c; hist)\n        {\n            if(hist[c] ==\
    \ max)\n            {\n                result.get.put(c, max);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) ret;\n\
    \    long[string] hist;\n    foreach(c; test)\n    {\n        if(hist.count(c)\
    \ == 0)\n        {\n            hist[c] = 1;\n        }\n        else\n      \
    \  {\n            hist[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ hist)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return ret;\n    }\n    ret\
    \ = new long[string];\n    foreach(c; hist)\n    {\n        if(c.value == max)\n\
    \        {\n            ret.get.put(c.key, c.value);\n        }\n    }\n    return\
    \ ret;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test)\n    {\n        if(histogram.count(c))\n        {\n    \
    \        histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = 0;\n    foreach(k,v; histogram)\n   \
    \ {\n        if(v > max)\n        {\n            max = v;\n        }\n    }\n\
    \    foreach(k,v; histogram)\n    {\n        if(v == max)\n        {\n       \
    \     result.insert(k,v);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ ret = null;\n    long[string] hist = new long[string];\n    foreach(c; test)\n\
    \    {\n        hist[c]++;\n    }\n    long max = 0;\n    foreach(c; hist)\n \
    \   {\n        if(hist[c] > max)\n        {\n            max = hist[c];\n    \
    \    }\n    }\n    if(max > 0)\n    {\n        ret = new long[string];\n     \
    \   foreach(c; hist)\n        {\n            if(hist[c] == max)\n            {\n\
    \                ret.get!(true)[c] = max;\n            }\n        }\n    }\n \
    \   return ret;\n}", "{\n    long[string] result;\n    foreach(c; test)\n    {\n\
    \        if(c.isLetter)\n        {\n            result[c.toLower]++;\n       \
    \ }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n\
    \        {\n            histogram[c]++;\n        }\n        else\n        {\n\
    \            histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(c, histogram);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n        {\n\
    \            histogram[c] = 1;\n        }\n        else\n        {\n         \
    \   histogram[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c; histogram)\n\
    \    {\n        if(c.value > max)\n        {\n            max = c.value;\n   \
    \     }\n    }\n    foreach(c; histogram)\n    {\n        if(c.value == max)\n\
    \        {\n            result.insert(c.key, max);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n\
    \    foreach(c; test) \n    {\n        if(c in histogram) \n        {\n      \
    \      histogram[c]++;\n        } \n        else \n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = 0;\n    foreach(c; histogram) \n    {\n\
    \        if(histogram[c] > max) \n        {\n            max = histogram[c];\n\
    \        }\n    }\n    foreach(c; histogram) \n    {\n        if(histogram[c]\
    \ == max) \n        {\n            result.insert(c, histogram[c]);\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(c in histogram)\n      \
    \  {\n            histogram[c]++;\n        }\n        else\n        {\n      \
    \      histogram[c] = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.set(histogram);\n            break;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c; test)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n\
    \        {\n            histogram[c] = 1;\n        }\n        else\n        {\n\
    \            histogram[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ histogram)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    long[string] max_letters;\n    foreach(c; histogram)\n\
    \    {\n        if(c.value == max)\n        {\n            max_letters[c.key]\
    \ = c.value;\n        }\n    }\n    result = max_letters;\n    return result;\n\
    }", "{\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(histo.count(c)\
    \ == 0)\n        {\n            histo[c] = 1;\n        }\n        else\n     \
    \   {\n            histo[c] += 1;\n        }\n    }\n    if(histo.length == 0)\n\
    \    {\n        return null;\n    }\n    long max = histo.values.max;\n    long[string]\
    \ result;\n    foreach(c; histo.keys)\n    {\n        if(histo[c] == max)\n  \
    \      {\n            result[c] = max;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n   \
    \ foreach(c; test)\n    {\n        if(c in histogram)\n        {\n           \
    \ histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n    foreach(k,\
    \ v; histogram)\n    {\n        if(v == max)\n        {\n            result.insert(k,\
    \ v);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] counts;\n    foreach(c; test)\n    {\n        if(!counts.contains(c))\n\
    \        {\n            counts[c] = 0;\n        }\n        counts[c]++;\n    }\n\
    \    long max = maxElement(counts.values);\n    foreach(c; counts.keys)\n    {\n\
    \        if(counts[c] == max)\n        {\n            result.set(counts);\n  \
    \          break;\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test)\n    {\n        if(c in result)\n        {\n \
    \           result[c]++;\n        }\n        else\n        {\n            result[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(result.values);\n    if(max\
    \ == 0)\n    {\n        return Nullable!(long[string])();\n    }\n    long[string]\
    \ max_result;\n    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n\
    \        {\n            max_result[c] = max;\n        }\n    }\n    return Nullable!(long[string])(max_result);\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
