name: HumanEval_30_get_positive
language: d
prompt: "import std.math;\n/*\nReturn only positive numbers in the list.\n       \
  \     \n*/\nlong[] get_positive(long[] l) \n"
tests: "unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
  \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L,\
  \ 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
  \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[l.length];\n    int j = 0;\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n  \
    \          result[j] = l[i];\n            j++;\n        }\n    }\n    return result[0..j];\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] ret = new long[0];\n    foreach(long i; l)\n   \
    \ {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n    }\n \
    \   return ret;\n}", "{\n    long[] res = new long[0];\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n\
    \    return res;\n}", "{\n    long[] result = new long[l.length];\n    int j =\
    \ 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n \
    \       {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result[0..j];\n}", "{\n    long[] res = new long[l.length];\n    int\
    \ i = 0;\n    foreach(long n; l)\n    {\n        if (n > 0)\n        {\n     \
    \       res[i] = n;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }", "{\n    long[] result = new long[l.length];\n    int j = 0;\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n       \
    \     result[j] = l[i];\n            j++;\n        }\n    }\n    return result;\n\
    }", "{\n    return l.filter!(x => x > 0)();\n}", "{\n    return l.filter!(a =>\
    \ a > 0)();\n}", "{\n    long[] ret = new long[0];\n    foreach(long i; l)\n \
    \   {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n    }\n\
    \    return ret;\n}", "{\n    long[] result = new long[0];\n    foreach(long i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] res = new long[l.length];\n   \
    \ int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}", "{\n    return l.filter!(a => a > 0)();\n}",
  "{\n    return l.filter!(a => a > 0)();\n}", "{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e > 0)\n        {\n\
    \            res[i] = e;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }", "{\n    return l.filter!(x => x > 0)();\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            ret[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return ret[0..j];\n}", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n\
    \    }\n    return ret;\n}", "{\n    return l.filter!(a => a > 0)();\n}", "{\n\
    \    long[] result = new long[l.length];\n    int i = 0;\n    foreach(long x;\
    \ l)\n    {\n        if(x > 0)\n        {\n            result[i] = x;\n      \
    \      i++;\n        }\n    }\n    return result[0..i];\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int count = 0;\n    foreach(long i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result[count] = i;\n            count++;\n\
    \        }\n    }\n    return result[0..count];\n}", "{\n    return l.filter!(a\
    \ => a > 0)();\n}", "{\n    return l.filter!(a => a > 0);\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int count = 0;\n    foreach(long i; l)\n \
    \   {\n        if(i > 0)\n        {\n            result[count] = i;\n        \
    \    count++;\n        }\n    }\n    return result[0..count];\n}", "{\n    long[]\
    \ res = new long[l.length];\n    int count = 0;\n    foreach(long i; l)\n    {\n\
    \        if(i > 0)\n        {\n            res[count] = i;\n            count++;\n\
    \        }\n    }\n    return res[0..count];\n}", "{\n    long[] result = new\
    \ long[l.length];\n    long count = 0;\n    foreach(long i; l)\n    {\n      \
    \  if(i > 0)\n        {\n            result[count] = i;\n            count++;\n\
    \        }\n    }\n    return result[0..count];\n}", "{\n    long[] ret = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[] ret\
    \ = new long[0];\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n   \
    \         ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[] ret\
    \ = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    return\
    \ l.filter!(x => x > 0)();\n}", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n\
    \    }\n    return ret;\n}", "{\n    return l.filter!(a => a > 0)();\n}", "{\n\
    \    long[] res = new long[l.length];\n    int i = 0;\n    foreach(long e; l)\n\
    \    {\n        if(e > 0)\n        {\n            res[i] = e;\n            i++;\n\
    \        }\n    }\n    return res[0..i];\n}", "{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}", "{\n    long[] res = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            res[count] = i;\n            count++;\n        }\n    }\n  \
    \  return res[0..count];\n}", "{\n    long[] result = new long[l.length];\n  \
    \  long count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n       \
    \ {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n\
    \    }\n    return ret;\n}", "{\n    long[] res = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            res[j] = l[i];\n            j++;\n        }\n    }\n \
    \   return res[0..j];\n}", "{\n    return l.filter!(a => a > 0)();\n}", "{\n \
    \   long[] res = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}", "{\n\
    \    long[] ret;\n    foreach(long i; l)\n    {\n        if(i > 0)\n         \
    \   ret ~= i;\n    }\n    return ret;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}", "{\n    return l.filter!(a => a > 0);\n}",
  "{\n    long[] ret;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[] res\
    \ = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            res ~= i;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ ret = [];\n    foreach(long i; l)\n    {\n        if(i > 0)\n            ret\
    \ ~= i;\n    }\n    return ret;\n}", "{\n    long[] ret = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n\
    \    }\n    return ret;\n}", "{\n    long[] ret = [];\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n            ret ~= i;\n    }\n    return ret;\n}",
  "{\n    long[] res = [];\n    foreach(long x; l)\n    {\n        if(x > 0)\n   \
    \         res ~= x;\n    }\n    return res;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(var item; l)\n    {\n        if(item > 0)\n        {\n          \
    \  result ~= item;\n        }\n    }\n    return result;\n}", "{\n    long[] ret\
    \ = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[]\
    \ res = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ a = new long[l.length];\n    int j = 0;\n    foreach(long i; l)\n    {\n   \
    \     if(i > 0)\n        {\n            a[j] = i;\n            j++;\n        }\n\
    \    }\n    return a[0..j];\n}", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n\
    \    }\n    return ret;\n}", "{\n    long[] result = new long[l.length];\n   \
    \ int count = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            result[count] = x;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}", "{\n    long[] ret;\n    foreach(long i; l)\n    {\n\
    \        if(i > 0)\n            ret ~= i;\n    }\n    return ret;\n}", "{\n  \
    \  long[] result = new long[l.length];\n    long count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}\n/*\n\
    Return only negative numbers in the list.\n            \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    long count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i < 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}\n/*\n\
    Return only even numbers in the list.\n            \n*/\nlong[] get_even(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    long count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i % 2 == 0)\n        {\n            result[count] =\
    \ i;\n            count++;\n        }\n    }\n    return result[0..count];\n}\n\
    /*\nReturn only odd numbers in the list.\n            \n*/\nlong[] get_odd(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    long count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i % 2 != 0)\n        {\n            result[count] =\
    \ i;\n            count++;\n        }\n    }\n    return result[0..count];\n}\n\
    /*\nReturn only prime numbers in the list.\n            \n*/\nlong[] get_prime(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    long count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(is_prime(i))\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }\n/*\nReturn only numbers that are divisible by the given number in the list.",
  "{\n    long[] ret = new long[l.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n            ret[j]\
    \ = l[i];\n            j++;\n        }\n    }\n    return ret[0..j];\n}", "{\n\
    \    long[] ret = new long[l.length];\n    long ret_index = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            ret[ret_index] = i;\n\
    \            ret_index++;\n        }\n    }\n    return ret[0..ret_index];\n}",
  "{\n    long[] ret;\n    foreach(e; l)\n    {\n        if(e > 0)\n        {\n  \
    \          ret ~= e;\n        }\n    }\n    return ret;\n}", "{\n    long[] res\
    \ = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] > 0)\n        {\n            res[j] = l[i];\n       \
    \     j++;\n        }\n    }\n    return res[0..j];\n}", "{\n    long[] res =\
    \ new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] > 0)\n        {\n            res[j] = l[i];\n       \
    \     j++;\n        }\n    }\n    return res[0..j];\n}", "{\n    long[] ret =\
    \ new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n    {\n       \
    \ if(x > 0)\n        {\n            ret[i] = x;\n            i++;\n        }\n\
    \    }\n    return ret[0..i];\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            ret[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return ret[0..j];\n}", "{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}", "{\n    return l.filter!(a => a > 0)();\n}",
  "{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}", "{\n\
    \    return l.filter!(a => a > 0);\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(long n; l)\n    {\n        if(n > 0)\n        {\n\
    \            result[i] = n;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }", "{\n    return l.filter!(a => a > 0)();\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e > 0)\n        {\n\
    \            res[i] = e;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }", "{\n    long[] res;\n    foreach(e; l)\n    {\n        if(e > 0)\n       \
    \ {\n            res ~= e;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        if (l[i] > 0)\n        {\n            result[j] = l[i];\n\
    \            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[]\
    \ ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[]\
    \ ret = new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n    {\n \
    \       if(x > 0)\n        {\n            ret[i] = x;\n            i++;\n    \
    \    }\n    }\n    return ret[0..i];\n}", "{\n    long[] res;\n    foreach(num;\
    \ l)\n    {\n        if(num > 0)\n        {\n            res ~= num;\n       \
    \ }\n    }\n    return res;\n}", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n\
    \    }\n    return ret;\n}", "{\n    long[] result = new long[l.length];\n   \
    \ int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}", "{\n    long[] res = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}", "{\n    return l.filter!(x => x > 0)();\n}", "{\n\
    \    long[] result = new long[l.length];\n    int j = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n            result[j]\
    \ = l[i];\n            j++;\n        }\n    }\n    return result;\n}", "{\n  \
    \  return l.filter!(x => x > 0)();\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(num; l)\n    {\n        if(num > 0)\n        {\n            result\
    \ ~= num;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    int i = 0;\n    foreach(e; l)\n    {\n        if(e > 0)\n\
    \        {\n            result[i] = e;\n            i++;\n        }\n    }\n \
    \   return result[0..i];\n}", "{\n    long[] res = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n\
    \    }\n    return ret;\n}", "{\n    return l.filter!(x => x > 0)();\n}", "{\n\
    \    return l.filter!(x => x > 0);\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            ret[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return ret;\n}", "{\n    return l.filter!(x => x > 0)();\n}", "{\n\
    \    return l.filter!(a => a > 0);\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(long n; l)\n    {\n        if(n > 0)\n        {\n\
    \            result[i] = n;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }", "{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n       \
    \ if(i > 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n\
    }", "{\n    return l.filter!(x => x > 0)();\n}", "{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}", "{\n    return l.filter!(x => x > 0)();\n}",
  "{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}", "{\n\
    \    long[] res = new long[l.length];\n    int i = 0;\n    foreach(long e; l)\n\
    \    {\n        if(e > 0)\n        {\n            res[i] = e;\n            i++;\n\
    \        }\n    }\n    return res[0..i];\n}", "{\n    return l.filter!(a => a\
    \ > 0)();\n}", "{\n    long[] result = new long[l.length];\n    int j = 0;\n \
    \   for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n       \
    \ {\n            result[j] = l[i];\n            j++;\n        }\n    }\n    return\
    \ result[0..j];\n}", "{\n    long[] ret = new long[0];\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n    }\n\
    \    return ret;\n}", "{\n    return l.filter!(a => a > 0);\n}", "{\n    long[]\
    \ result = [];\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ res = [];\n    foreach(long x; l)\n    {\n        if(x > 0)\n            res\
    \ ~= x;\n    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}", "{\n    return l.filter!(a => a > 0)();\n\
    }", "{\n    return l.filter!(a => a > 0)();\n}", "{\n    return l.filter!(a =>\
    \ a > 0)();\n}", "{\n    long[] ret = new long[l.length];\n    int i = 0;\n  \
    \  foreach(long e; l)\n    {\n        if(e > 0)\n        {\n            ret[i]\
    \ = e;\n            i++;\n        }\n    }\n    return ret[0..i];\n}", "{\n  \
    \  return l.filter!(a => a > 0)();\n}", "{\n    return l.filter!(x => x > 0)();\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] ret = new long[l.length];\n    int i = 0;\n    foreach(e;\
    \ l)\n    {\n        if(e > 0)\n        {\n            ret[i] = e;\n         \
    \   i++;\n        }\n    }\n    return ret[0..i];\n}", "{\n    long[] res = new\
    \ long[0];\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n    \
    \        res ~= x;\n        }\n    }\n    return res;\n}", "{\n    long[] result\
    \ = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    return\
    \ l.filter!(a => a > 0);\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] res = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n   \
    \ int count = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n   \
    \         result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}", "{\n    long[] result = new long[0];\n    foreach(e;\
    \ l)\n    {\n        if(e > 0)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}", "{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}", "{\n    return l.filter!(a => a > 0);\n}", "{\n\
    \    return l.filter!(x => x > 0)();\n}", "{\n    long[] res = new long[l.length];\n\
    \    long i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            res[i] = x;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }", "{\n    long[] res = new long[0];\n    foreach(long i; l)\n    {\n       \
    \ if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[l.length];\n    int j = 0;\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n       \
    \     result[j] = l[i];\n            j++;\n        }\n    }\n    return result[0..j];\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n\
    \    }\n    return ret;\n}\n/*\nReturn only negative numbers in the list.\n  \
    \          \n*/\nlong[] get_negative(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i < 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\n/*\nReturn only even numbers in\
    \ the list.\n            \n*/\nlong[] get_even(long[] l) \n{\n    long[] ret =\
    \ new long[0];\n    foreach(long i; l)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            ret ~= i;\n        }\n    }\n    return ret;\n}\n/*\nReturn\
    \ only odd numbers in the list.\n            \n*/\nlong[] get_odd(long[] l) \n\
    {\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n\
    }\n/*\nReturn only prime numbers in the list.\n            \n*/\nlong[] get_prime(long[]\
    \ l) \n{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n     \
    \   if(is_prime(i))\n        {\n            ret ~= i;\n        }\n    }\n    return\
    \ ret;\n}\n/*\nReturn only numbers that are divisible by the given number in the\
    \ list.\n            \n*/\nlong[] get_divisible(long[] l, long n) \n{\n    long[]\
    \ ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i % n == 0)\n\
    \        {\n            ret ~= i;\n        }\n    }\n    return ret;\n}\n/*\n\
    Return only numbers that are not divisible by the given number in", "{\n    long[]\
    \ result = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        if (l[i] > 0)\n        {\n            result[j] = l[i];\n\
    \            j++;\n        }\n    }\n    return result[0..j];\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    int i;\n    foreach(i, l)\n    {\n        if(l[i]\
    \ > 0)\n        {\n            result ~= l[i];\n        }\n    }\n    return result;\n\
    }", "{\n    long[] res = new long[0];\n    foreach(long i; l)\n    {\n       \
    \ if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n\
    }", "{\n    long[] res = new long[0];\n    foreach(long i; l)\n    {\n       \
    \ if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] ret;\n    foreach(x; l)\n    {\n        if(x > 0)\n\
    \        {\n            ret ~= x;\n        }\n    }\n    return ret;\n}", "{\n\
    \    return l.filter!(a => a > 0)();\n}", "{\n    auto result = new long[];\n\
    \    foreach(e; l)\n    {\n        if(e > 0)\n            result ~= e;\n    }\n\
    \    return result;\n}", "{\n    long[] ret = new long[l.length];\n    long j\
    \ = 0;\n    for (long i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            ret[j] = l[i];\n            j++;\n        }\n    }\n \
    \   return ret[0..j];\n}", "{\n    long[] ret = new long[l.length];\n    int i\
    \ = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n        \
    \    ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n}",
  "{\n    long[] res = new long[l.length];\n    long j = 0;\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            res[j] = i;\n            j++;\n\
    \        }\n    }\n    return res[0..j];\n}", "{\n    return l.filter!(x => x\
    \ > 0)();\n}", "{\n    long[] result = new long[l.length];\n    int count = 0;\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }", "{\n    long[] result = [];\n    foreach(long i; l)\n    {\n        if(i >\
    \ 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    return l.filter!(a => a > 0)();\n}", "{\n    auto result\
    \ = new long[];\n    foreach(e; l)\n    {\n        if(e > 0)\n            result\
    \ ~= e;\n    }\n    return result;\n}", "{\n    return l.filter!(a => a > 0)();\n\
    }", "{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}", "{\n\
    \    return l.filter!(a => a > 0)();\n}", "{\n    return l.filter!(x => x > 0)();\n\
    }", "{\n    long[] res = new long[l.length];\n    int j = 0;\n    for (int i =\
    \ 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n           \
    \ res[j] = l[i];\n            j++;\n        }\n    }\n    return res[0..j];\n}",
  "{\n    return l.filter!(x => x > 0)();\n}", "{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long n; l)\n    {\n        if(n > 0)\n        {\n\
    \            res[i] = n;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }", "{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n       \
    \ if(i > 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n\
    }", "{\n    long[] res = new long[l.length];\n    int j = 0;\n    for (int i =\
    \ 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n           \
    \ res[j] = l[i];\n            j++;\n        }\n    }\n    return res[0..j];\n}",
  "{\n    return l.filter!(x => x > 0)();\n}", "{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e > 0)\n        {\n\
    \            ret[i] = e;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    return l.filter!(x => x > 0)();\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    return\
    \ l.filter!(x => x > 0)();\n}", "{\n    long[] ret = new long[l.length];\n   \
    \ int i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n  \
    \          ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }", "{\n    long[] res = new long[l.length];\n    int j = 0;\n    for (int i =\
    \ 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n           \
    \ res[j] = l[i];\n            j++;\n        }\n    }\n    return res[0..j];\n}",
  "{\n    return l.filter!(a => a > 0)();\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(long n; l) {\n        if (n > 0) {\n            result[i]\
    \ = n;\n            i++;\n        }\n    }\n    return result[0..i];\n}", "{\n\
    \    long[] res = new long[l.length];\n    int j = 0;\n    for (int i = 0; i <\
    \ l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n            res[j]\
    \ = l[i];\n            j++;\n        }\n    }\n    return res[0..j];\n}", "{\n\
    \    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i >\
    \ 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n}",
  "{\n    long[] res = new long[l.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n            res[j]\
    \ = l[i];\n            j++;\n        }\n    }\n    return res[0..j];\n}", "{\n\
    \    long[] res = new long[0];\n    foreach(long i; l)\n    {\n        if(i >\
    \ 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n}",
  "{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}", "{\n\
    \    return l.filter!(x => x > 0)();\n}", "{\n    return l.filter!(a => a > 0)();\n\
    }", "{\n    long[] res = new long[0];\n    foreach(long i; l)\n    {\n       \
    \ if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n    }\n    return result[0..count];\n}", "{\n\
    \    long[] res = new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n\
    \    {\n        if(x > 0)\n        {\n            res[i] = x;\n            i++;\n\
    \        }\n    }\n    return res[0..i];\n}", "{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}", "{\n    return l.filter!(x =>\
    \ x > 0)();\n}", "{\n    return l.filter!(x => x > 0)();\n}", "{\n    long[] ret\
    \ = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[]\
    \ res = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int i = 0;\n    foreach(long x; l)\n    {\n\
    \        if(x > 0)\n        {\n            result[i] = x;\n            i++;\n\
    \        }\n    }\n    return result[0..i];\n}", "{\n    return l.filter!(x =>\
    \ x > 0)();\n}", "{\n    long[] result = new long[l.length];\n    int j = 0;\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \  {\n            result[j] = l[i];\n            j++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] res = new long[l.length];\n    int j = 0;\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n  \
    \          res[j] = l[i];\n            j++;\n        }\n    }\n    return res[0..j];\n\
    }", "{\n    return l.filter!(x => x > 0);\n}", "{\n    return l.filter!(a => a\
    \ > 0)();\n}", "{\n    long[] result = new long[l.length];\n    int count = 0;\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }", "{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n       \
    \ if(i > 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n\
    }", "{\n    return l.filter!(a => a > 0)();\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    long[]\
    \ result = [];\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
