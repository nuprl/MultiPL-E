language: d
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    if (array.length == 0)\n        return array;\n    if (array.length ==\
    \ 1)\n        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        long[] temp = array.dup;\n        temp.sort!((a,\
    \ b) => a > b);\n        result = temp;\n    }\n    else\n    {\n        long[]\
    \ temp = array.dup;\n        temp.sort!((a, b) => a < b);\n        result = temp;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprv9_v7qe.d(35): Error: no property `sort` for type `long[]`

    /tmp/tmprv9_v7qe.d(41): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprv9_v7qe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            result[0] = array[1];\n            result[1] = array[0];\n      \
    \  }\n        else\n        {\n            result[0] = array[0];\n           \
    \ result[1] = array[1];\n        }\n        return result;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        result = array.dup;\n \
    \       result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result\
    \ = array.dup;\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdx634tns.d(39): Error: no property `sort` for type `long[]`

    /tmp/tmpdx634tns.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx634tns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a - b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplj5x477l.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmplj5x477l.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplj5x477l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6mi8audr.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp6mi8audr.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6mi8audr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0) return\
    \ result;\n    if (array.length == 1) return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        array.sort!((a, b) => a < b);\n    }\n    return array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_9_zyeg.d(36): Error: no property `sort` for type `long[]`

    /tmp/tmpk_9_zyeg.d(40): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_9_zyeg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    if ((result[0] + result[$-1]) % 2 == 0)\n\
    \    {\n        result.sort!((a, b) => b < a);\n    }\n    else\n    {\n     \
    \   result.sort!((a, b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc0ozr8h2.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmpc0ozr8h2.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0ozr8h2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        sort!((a, b) => a > b)(result);\n    }\n    else\n\
    \    {\n        sort!((a, b) => a < b)(result);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv0vl2rb.d(21): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpiv0vl2rb.d(25): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv0vl2rb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array, (a, b) => a > b);\n\
    \    }\n    else\n    {\n        sort(array, (a, b) => a < b);\n    }\n    return\
    \ array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj1gy1yi3.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpj1gy1yi3.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj1gy1yi3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9dbfr7w.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpd9dbfr7w.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9dbfr7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0)\n  \
    \      return result;\n    if(array.length == 1)\n        return array;\n    if(array.length\
    \ == 2)\n    {\n        if(array[0] > array[1])\n        {\n            long temp\
    \ = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        array.sort!((a, b) => b < a);\n\
    \        return array;\n    }\n    else\n    {\n        array.sort!((a, b) =>\
    \ a < b);\n        return array;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5js3gmks.d(35): Error: no property `sort` for type `long[]`

    /tmp/tmp5js3gmks.d(40): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5js3gmks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] copy = array.dup;\n    long first = copy[0];\n    long last = copy[copy.length\
    \ - 1];\n    long sum = first + last;\n    if(sum % 2 == 0)\n    {\n        sort(copy,\
    \ (a, b) => b - a);\n    }\n    else\n    {\n        sort(copy);\n    }\n    return\
    \ copy;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpch6ttlh2.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpch6ttlh2.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpch6ttlh2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result = array.dup.sort!((a, b)\
    \ => a > b);\n    }\n    else\n    {\n        result = array.dup.sort!((a, b)\
    \ => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwbtmm4ue.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpwbtmm4ue.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbtmm4ue.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    if (array.length == 0)\n        return result;\n\
    \    if ((array[0] + array[$ - 1]) % 2 == 0)\n        result.sort!((a, b) => a\
    \ > b);\n    else\n        result.sort!((a, b) => a < b);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5d1wd42x.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp5d1wd42x.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5d1wd42x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    bool isOdd = (result[0] + result[$-1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        result.sort!((a, b) => a > b);\n \
    \   }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeob1p_pg.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpeob1p_pg.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeob1p_pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int index = 0;\n    long sum\
    \ = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n      \
    \  array.sort!((a, b) => b - a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a - b);\n    }\n    foreach (i; array)\n    {\n        result[index] =\
    \ i;\n        index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0agmfldg.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp0agmfldg.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0agmfldg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0) return\
    \ result;\n    auto sum = array[0] + array[array.length - 1];\n    if(sum % 2\
    \ == 0)\n    {\n        sort(array.dup, (a, b) => b - a);\n    }\n    else\n \
    \   {\n        sort(array.dup);\n    }\n    return array;\n}\nunittest\n{\n  \
    \  alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsiym19xv.d(22): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpsiym19xv.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsiym19xv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int start = 0;\n    int end\
    \ = array.length - 1;\n    bool isOdd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    if (isOdd)\n    {\n        foreach(i; array)\n        {\n     \
    \       if (i % 2 == 1)\n            {\n                result[start] = i;\n \
    \               start++;\n            }\n            else\n            {\n   \
    \             result[end] = i;\n                end--;\n            }\n      \
    \  }\n    }\n    else\n    {\n        foreach(i; array)\n        {\n         \
    \   if (i % 2 == 1)\n            {\n                result[end] = i;\n       \
    \         end--;\n            }\n            else\n            {\n           \
    \     result[start] = i;\n                start++;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdwzuws50.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwzuws50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    bool isOdd = (array[0] + array[$ - 1]) % 2 == 1;\n    if (isOdd)\n\
    \        sort!((a, b) => a > b)(result);\n    else\n        sort!((a, b) => a\
    \ < b)(result);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsoyuc8_3.d(22): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpsoyuc8_3.d(24): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsoyuc8_3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto sum = array[0] + array[$-1];\n    auto result = array.dup;\n    if\
    \ (sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp0jfmyp.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmppp0jfmyp.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp0jfmyp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n        result.sort!((a,\
    \ b) => a > b);\n    else\n        result.sort!((a, b) => a < b);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplqf4qlxa.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmplqf4qlxa.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqf4qlxa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    if (array.length == 0) return array;\n    if (array.length == 1) return\
    \ array;\n    long[] result = new long[array.length];\n    long sum = array[0]\
    \ + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        auto sort_result\
    \ = array.sort!((a, b) => a > b);\n        foreach (i, v; sort_result)\n     \
    \   {\n            result[i] = v;\n        }\n    }\n    else\n    {\n       \
    \ auto sort_result = array.sort!((a, b) => a < b);\n        foreach (i, v; sort_result)\n\
    \        {\n            result[i] = v;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_pxkthqp.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmp_pxkthqp.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_pxkthqp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int start = 0;\n    int end\
    \ = array.length - 1;\n    bool isOdd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    foreach(i; 0 .. array.length)\n    {\n        if(isOdd)\n     \
    \   {\n            if(array[i] % 2 == 1)\n            {\n                result[start]\
    \ = array[i];\n                start++;\n            }\n            else\n   \
    \         {\n                result[end] = array[i];\n                end--;\n\
    \            }\n        }\n        else\n        {\n            if(array[i] %\
    \ 2 == 1)\n            {\n                result[end] = array[i];\n          \
    \      end--;\n            }\n            else\n            {\n              \
    \  result[start] = array[i];\n                start++;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdsunhbcx.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdsunhbcx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto sum = array[0] + array[$-1];\n    auto sort_order = (sum % 2 == 0)\
    \ ? Sort.descending : Sort.ascending;\n    return array.sort(sort_order);\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk6bmp2sl.d(18): Error: undefined identifier `Sort`, did you mean
    function `cbrt`?

    /tmp/tmpk6bmp2sl.d(18): Error: undefined identifier `Sort`, did you mean function
    `cbrt`?

    /tmp/tmpk6bmp2sl.d(19): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6bmp2sl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    int k = 0;\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    while (i <= j)\n    {\n        if (isOdd)\n        {\n      \
    \      if (array[i] % 2 == 1)\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n            else\n            {\n      \
    \          result[k] = array[j];\n                j--;\n            }\n      \
    \  }\n        else\n        {\n            if (array[i] % 2 == 1)\n          \
    \  {\n                result[k] = array[j];\n                j--;\n          \
    \  }\n            else\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n        }\n        k++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplqpgstya.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqpgstya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            result[0] = array[1];\n            result[1] = array[0];\n      \
    \  }\n        else\n        {\n            result[0] = array[0];\n           \
    \ result[1] = array[1];\n        }\n        return result;\n    }\n    long sum\
    \ = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n      \
    \  result = array.dup;\n        result.sort(std.math.greater);\n    }\n    else\n\
    \    {\n        result = array.dup;\n        result.sort;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwxstkvj0.d(40): Error: no property `sort` for type `long[]`

    /tmp/tmpwxstkvj0.d(45): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwxstkvj0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => b - a);\n\
    \    }\n    else\n    {\n        sort(array.dup);\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps_xyw0kj.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmps_xyw0kj.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_xyw0kj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        sort!((a, b) => a > b)(result);\n    }\n    else\n\
    \    {\n        sort!((a, b) => a < b)(result);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv0vl2rb.d(21): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpiv0vl2rb.d(25): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv0vl2rb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    bool isOdd = (array[0] + array[array.length\
    \ - 1]) % 2 == 1;\n    if (isOdd)\n    {\n        result = array.dup.sort;\n \
    \   }\n    else\n    {\n        result = array.dup.sort.reverse;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_qvubxw.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpp_qvubxw.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_qvubxw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n        result.sort!((a,\
    \ b) => a > b);\n    else\n        result.sort!((a, b) => a < b);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplqf4qlxa.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmplqf4qlxa.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqf4qlxa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzii4o_3_.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpzii4o_3_.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzii4o_3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    int first = 0;\n    int last = array.length\
    \ - 1;\n    bool isOdd = (array[first] + array[last]) % 2 == 1;\n    while (first\
    \ < last)\n    {\n        if (isOdd)\n        {\n            if (result[first]\
    \ % 2 == 0)\n            {\n                while (first < last && result[last]\
    \ % 2 == 0)\n                {\n                    last--;\n                }\n\
    \                if (first < last)\n                {\n                    long\
    \ temp = result[first];\n                    result[first] = result[last];\n \
    \                   result[last] = temp;\n                }\n            }\n \
    \       }\n        else\n        {\n            if (result[first] % 2 == 1)\n\
    \            {\n                while (first < last && result[last] % 2 == 1)\n\
    \                {\n                    last--;\n                }\n         \
    \       if (first < last)\n                {\n                    long temp =\
    \ result[first];\n                    result[first] = result[last];\n        \
    \            result[last] = temp;\n                }\n            }\n        }\n\
    \        first++;\n    }\n    if (isOdd)\n    {\n        result[0 .. array.length]\
    \ = result[0 .. array.length].sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result[0 .. array.length] = result[0 .. array.length].sort!((a, b) =>\
    \ a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1fmgz1jk.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmp1fmgz1jk.d(59): Error: no property `sort` for type `long[]`

    /tmp/tmp1fmgz1jk.d(63): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1fmgz1jk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    if(array.length == 0) return result;\n  \
    \  if(array.length == 1) return result;\n    if(array.length == 2)\n    {\n  \
    \      if(array[0] > array[1])\n        {\n            auto temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return result;\n    }\n    auto sum = array[0] + array[array.length -\
    \ 1];\n    if(sum % 2 == 0)\n    {\n        result.sort!((a, b) => b < a);\n \
    \   }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3ufy7vj.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmpu3ufy7vj.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3ufy7vj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        sort!((a, b) => b < a)(result);\n    }\n    else\n\
    \    {\n        sort!((a, b) => a < b)(result);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpize9zs6r.d(21): Error: template instance `sort!((a, b) => b < a)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpize9zs6r.d(25): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpize9zs6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int start = 0;\n    int end\
    \ = array.length - 1;\n    bool isOdd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    if (isOdd)\n    {\n        foreach(i; array)\n        {\n     \
    \       if (i % 2 == 1)\n            {\n                result[start] = i;\n \
    \               start++;\n            }\n            else\n            {\n   \
    \             result[end] = i;\n                end--;\n            }\n      \
    \  }\n    }\n    else\n    {\n        foreach(i; array)\n        {\n         \
    \   if (i % 2 == 1)\n            {\n                result[end] = i;\n       \
    \         end--;\n            }\n            else\n            {\n           \
    \     result[start] = i;\n                start++;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdwzuws50.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwzuws50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    int first = 0;\n    int last = array.length\
    \ - 1;\n    bool isOdd = (array[first] + array[last]) % 2 == 1;\n    while (first\
    \ < last)\n    {\n        if (isOdd)\n        {\n            if (result[first]\
    \ % 2 == 0)\n            {\n                first++;\n                continue;\n\
    \            }\n            if (result[last] % 2 == 1)\n            {\n      \
    \          last--;\n                continue;\n            }\n            long\
    \ temp = result[first];\n            result[first] = result[last];\n         \
    \   result[last] = temp;\n            first++;\n            last--;\n        }\n\
    \        else\n        {\n            if (result[first] % 2 == 1)\n          \
    \  {\n                first++;\n                continue;\n            }\n   \
    \         if (result[last] % 2 == 0)\n            {\n                last--;\n\
    \                continue;\n            }\n            long temp = result[first];\n\
    \            result[first] = result[last];\n            result[last] = temp;\n\
    \            first++;\n            last--;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5jr7y7q8.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jr7y7q8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp1 = new long[array.length];\n    long[] temp2 = new long[array.length];\n\
    \    long[] temp3 = new long[array.length];\n    long[] temp4 = new long[array.length];\n\
    \    long[] temp5 = new long[array.length];\n    long[] temp6 = new long[array.length];\n\
    \    long[] temp7 = new long[array.length];\n    long[] temp8 = new long[array.length];\n\
    \    long[] temp9 = new long[array.length];\n    long[] temp10 = new long[array.length];\n\
    \    long[] temp11 = new long[array.length];\n    long[] temp12 = new long[array.length];\n\
    \    long[] temp13 = new long[array.length];\n    long[] temp14 = new long[array.length];\n\
    \    long[] temp15 = new long[array.length];\n    long[] temp16 = new long[array.length];\n\
    \    long[] temp17 = new long[array.length];\n    long[] temp18 = new long[array.length];\n\
    \    long[] temp19 = new long[array.length];\n    long[] temp20 = new long[array.length];\n\
    \    long[] temp21 = new long[array.length];\n    long[] temp22 = new long[array.length];\n\
    \    long[] temp23 = new long[array.length];\n    long[] temp24 = new long[array.length];\n\
    \    long[] temp25 = new long[array.length];\n    long[] temp26 = new long[array.length];\n\
    \    long[] temp27 = new long[array.length];\n    long[] temp28 = new long[array.length];\n\
    \    long[] temp29 = new long[array.length];\n    long[] temp30 = new long[array.length];\n\
    \    long[] temp31 = new long[array.length];\n    long[] temp32 = new long[array.length];\n\
    \    long[] temp33 = new long[array.length];\n    long[] temp34 = new long[array.length];\n\
    \    long[] temp35 = new\nunittest\n{\n    alias candidate = sort_array;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2muadwwl.d(54): Error: basic type expected, not `unittest`

    /tmp/tmp2muadwwl.d(54): Error: semicolon expected, not `unittest`

    /tmp/tmp2muadwwl.d(54): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2muadwwl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if((array[0] + array[$-1]) % 2 == 0)\n        result.sort!((a, b) => a >\
    \ b);\n    else\n        result.sort!((a, b) => a < b);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ivjchgj.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp3ivjchgj.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ivjchgj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0) return result;\n\
    \    if(array.length == 1) return result;\n    long sum = array[0] + array[array.length-1];\n\
    \    if(sum % 2 == 0)\n    {\n        result.sort!((a,b) => a > b);\n    }\n \
    \   else\n    {\n        result.sort!((a,b) => a < b);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtaeri9v.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmprtaeri9v.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtaeri9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array, (a, b) => b - a);\n\
    \    }\n    else\n    {\n        sort(array);\n    }\n    return array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4v39jtv.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpd4v39jtv.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4v39jtv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0)\n  \
    \      return result;\n    long sum = array[0] + array[array.length - 1];\n  \
    \  if(sum % 2 == 0)\n    {\n        sort!((a, b) => a > b)(array);\n    }\n  \
    \  else\n    {\n        sort!((a, b) => a < b)(array);\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr8nyslf5.d(23): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpr8nyslf5.d(27): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8nyslf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b < a);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplrta3z76.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmplrta3z76.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplrta3z76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0) return\
    \ result;\n    if(array.length == 1) return array;\n    if(array.length == 2)\n\
    \    {\n        if(array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        array = array.sort(std.math.comparator);\n    }\n  \
    \  else\n    {\n        array = array.sort(std.math.comparator!\"a > b\");\n \
    \   }\n    return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp65fhm0qz.d(36): Error: no property `sort` for type `long[]`

    /tmp/tmp65fhm0qz.d(40): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp65fhm0qz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    bool isOdd = (result[0] + result[$-1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        result.sort!((a, b) => a > b);\n \
    \   }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeob1p_pg.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpeob1p_pg.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeob1p_pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (result.length > 1)\n    {\n       \
    \ long sum = result[0] + result[$ - 1];\n        if (sum % 2 == 0)\n        {\n\
    \            result.sort!((a, b) => a > b);\n        }\n        else\n       \
    \ {\n            result.sort!((a, b) => a < b);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv352tqrq.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmpv352tqrq.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv352tqrq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    temp = array.dup;\n    temp.sort;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n    {\n        for (int i = 0; i < array.length; i++)\n    \
    \    {\n            result[i] = temp[array.length - 1 - i];\n        }\n    }\n\
    \    else\n    {\n        result = temp;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpms92qbba.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpms92qbba.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        sort!((a, b) => a > b)(result);\n    }\n    else\n\
    \    {\n        sort!((a, b) => a < b)(result);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv0vl2rb.d(21): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpiv0vl2rb.d(25): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv0vl2rb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    auto sum = array[0] + array[$-1];\n   \
    \ if(sum % 2 == 0)\n    {\n        sort(result.ptr, result.ptr + result.length,\
    \ std.algorithm.greater!long);\n    }\n    else\n    {\n        sort(result.ptr,\
    \ result.ptr + result.length);\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvj90g7sc.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpvj90g7sc.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvj90g7sc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0) return\
    \ result;\n    if(array.length == 1) return array;\n    auto sum = array[0] +\
    \ array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array.ptr,\
    \ array.ptr + array.length, std.greater!long());\n    }\n    else\n    {\n   \
    \     sort(array.ptr, array.ptr + array.length);\n    }\n    return array;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3czq7oew.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp3czq7oew.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3czq7oew.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (result.length == 0) return result;\n\
    \    if (result.length == 1) return result;\n    if (result.length == 2)\n   \
    \ {\n        if (result[0] > result[1])\n        {\n            long temp = result[0];\n\
    \            result[0] = result[1];\n            result[1] = temp;\n        }\n\
    \        return result;\n    }\n    long sum = result[0] + result[result.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(result);\n    }\n    else\n\
    \    {\n        sort(result, (a, b) => b - a);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm575713v.d(33): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpm575713v.d(37): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm575713v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(result.length == 0) return result;\n\
    \    bool isOdd = (result[0] + result[$-1]) % 2 == 1;\n    if(isOdd)\n    {\n\
    \        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjz_h5029.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmpjz_h5029.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjz_h5029.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9dbfr7w.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpd9dbfr7w.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9dbfr7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] evens = array.filter!(a\
    \ => a % 2 == 0).sort!((a, b) => a > b);\n    long[] odds = array.filter!(a =>\
    \ a % 2 != 0).sort!((a, b) => a < b);\n    int evensIndex = 0;\n    int oddsIndex\
    \ = 0;\n    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i]\
    \ % 2 == 0)\n        {\n            result[i] = evens[evensIndex];\n         \
    \   evensIndex++;\n        }\n        else\n        {\n            result[i] =\
    \ odds[oddsIndex];\n            oddsIndex++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuee78nus.d(18): Error: no property `filter` for type `long[]`

    /tmp/tmpuee78nus.d(19): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuee78nus.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n        result.sort!((a,\
    \ b) => a < b);\n    else\n        result.sort!((a, b) => a > b);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp99d_f766.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp99d_f766.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99d_f766.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = result[0] + result[$-1];\n   \
    \ if(sum % 2 == 0)\n    {\n        sort(result, (a, b) => b - a);\n    }\n   \
    \ else\n    {\n        sort(result);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6jrwucz9.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp6jrwucz9.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jrwucz9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    int first = 0;\n    int last = array.length\
    \ - 1;\n    int sum = array[first] + array[last];\n    bool isOdd = sum % 2 ==\
    \ 1;\n    if (isOdd)\n    {\n        result.sort!((a, b) => a > b);\n    }\n \
    \   else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpogtuitxf.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpogtuitxf.d(20): Error: cannot implicitly convert expression `array[cast(ulong)first]
    + array[cast(ulong)last]` of type `long` to `int`

    /tmp/tmpogtuitxf.d(24): Error: no property `sort` for type `long[]`

    /tmp/tmpogtuitxf.d(28): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogtuitxf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.ptr, array.ptr + array.length,\
    \ std.greater!long());\n    }\n    else\n    {\n        sort(array.ptr, array.ptr\
    \ + array.length);\n    }\n    return array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2l3oajw.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpx2l3oajw.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2l3oajw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if((array[0] + array[$-1]) % 2 == 0)\n        result.sort!((a, b) => b -\
    \ a);\n    else\n        result.sort!((a, b) => a - b);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprqayzld0.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmprqayzld0.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqayzld0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(result.length == 0)\n        return\
    \ result;\n    if((result[0] + result[$-1]) % 2 == 0)\n        result.sort!((a,\
    \ b) => b - a);\n    else\n        result.sort!((a, b) => a - b);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p39dl7h.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp7p39dl7h.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p39dl7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    long first\
    \ = array[0];\n    long last = array[array.length - 1];\n    if ((first + last)\
    \ % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n        return array;\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n        return\
    \ array;\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7kkeo45w.d(36): Error: no property `sort` for type `long[]`

    /tmp/tmp7kkeo45w.d(41): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kkeo45w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp2 = new long[array.length];\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm\
    \ = 0;\n    int nn = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n \
    \   int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee\
    \ = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n\
    \    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int\
    \ nnn = 0;\n    int xxx = 0;\n    int yyy = 0;\n    int zzz = 0;\n    int aaa\
    \ = 0;\n    int bbb = 0;\n    int ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n\
    \    int fff = 0;\n    int ggg = 0;\n    int hhh = 0;\n    int iiii = 0;\n   \
    \ int jjjj = 0;\n    int kkkk = 0;\n    int llll = 0;\n    int mmmm = 0;\n   \
    \ int nnnn = 0;\n    int xxxx = 0;\n    int yyyy = 0;\n    int zzzz = 0;\n   \
    \ int aaaa = 0;\n   \nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn96ibicy.d(82): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn96ibicy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto first = array[0];\n    auto last = array[$-1];\n\
    \    auto sum = first + last;\n    auto isOdd = sum % 2 == 1;\n    if (isOdd)\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    else\n    {\n     \
    \   result.sort!((a, b) => a > b);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk8lxt8fd.d(24): Error: no property `sort` for type `long[]`

    /tmp/tmpk8lxt8fd.d(28): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk8lxt8fd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto sum = array[0] + array[$-1];\n    auto result = array.dup;\n    if\
    \ (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b > a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a > b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgskg7k6w.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpgskg7k6w.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgskg7k6w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if ((result[0] + result[result.length -\
    \ 1]) % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a - b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppm0p6ujc.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmppm0p6ujc.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppm0p6ujc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0) return result;\n\
    \    if(array.length == 1) return result;\n    if(array.length == 2)\n    {\n\
    \        if(array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return result;\n    }\n    if((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result.sort!((a, b) => a < b);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77hm3bnb.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmp77hm3bnb.d(36): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77hm3bnb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n        result.sort!((a,\
    \ b) => a < b);\n    else\n        result.sort!((a, b) => a > b);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp99d_f766.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp99d_f766.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99d_f766.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int index = 0;\n    int sum\
    \ = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n       \
    \ array.sort!((a, b) => b < a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    foreach(i; array)\n    {\n        result[index] =\
    \ i;\n        index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphski8r7y.d(19): Error: cannot implicitly convert expression `array[0]
    + array[array.length - 1LU]` of type `long` to `int`

    /tmp/tmphski8r7y.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmphski8r7y.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphski8r7y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n        sort!((a, b) =>\
    \ a > b)(result);\n    else\n        sort!((a, b) => a < b)(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkso6trit.d(21): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpkso6trit.d(23): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkso6trit.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array, (a, b) => b - a);\n\
    \    }\n    else\n    {\n        sort(array);\n    }\n    return array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4v39jtv.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpd4v39jtv.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4v39jtv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0) return\
    \ result;\n    if(array.length == 1) return array;\n    if(array.length == 2)\n\
    \    {\n        if(array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        result = array.dup;\n        result.sort!((a, b) =>\
    \ a > b);\n    }\n    else\n    {\n        result = array.dup;\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqwtxjom7.d(37): Error: no property `sort` for type `long[]`

    /tmp/tmpqwtxjom7.d(42): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwtxjom7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            result[0] = array[1];\n            result[1] = array[0];\n      \
    \  }\n        else\n        {\n            result[0] = array[0];\n           \
    \ result[1] = array[1];\n        }\n        return result;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        long[] temp = new long[array.length];\n\
    \        for (int i = 0; i < array.length; i++)\n            temp[i] = array[i];\n\
    \        temp.sort();\n        for (int i = 0; i < array.length; i++)\n      \
    \      result[i] = temp[array.length - 1 - i];\n    }\n    else\n    {\n     \
    \   long[] temp = new long[array.length];\n        for (int i = 0; i < array.length;\
    \ i++)\n            temp[i] = array[i];\n        temp.sort();\n        for (int\
    \ i = 0; i < array.length; i++)\n            result[i] = temp[i];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqeo5gu63.d(41): Error: no property `sort` for type `long[]`

    /tmp/tmpqeo5gu63.d(50): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqeo5gu63.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    if (array.length > 1)\n    {\n        if\
    \ ((array[0] + array[$ - 1]) % 2 == 0)\n        {\n            result.sort!((a,\
    \ b) => a > b);\n        }\n        else\n        {\n            result.sort!((a,\
    \ b) => a < b);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3urkhrt0.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp3urkhrt0.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3urkhrt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyl060v6k.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpyl060v6k.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyl060v6k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            result[0] = array[1];\n            result[1] = array[0];\n      \
    \  }\n        else\n        {\n            result[0] = array[0];\n           \
    \ result[1] = array[1];\n        }\n        return result;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        result = array.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result = array.sort!((a, b) =>\
    \ a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwwartx35.d(38): Error: no property `sort` for type `long[]`

    /tmp/tmpwwartx35.d(42): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwwartx35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto a = array.dup;\n    auto s = a.front + a.back;\n    if(s % 2 == 0)\n\
    \        a.sort!((a, b) => a > b);\n    else\n        a.sort!((a, b) => a < b);\n\
    \    return a;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo379wdl7.d(18): Error: no property `front` for type `long[]`

    /tmp/tmpo379wdl7.d(18): Error: no property `back` for type `long[]`

    /tmp/tmpo379wdl7.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmpo379wdl7.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo379wdl7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int index = 0;\n    if(array.length\
    \ == 0)\n        return result;\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        sort(array);\n        foreach(i; array)\n          \
    \  result[index++] = i;\n    }\n    else\n    {\n        sort(array);\n      \
    \  foreach(i; array)\n            result[index++] = i;\n        reverse(result);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fcva5kh.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp9fcva5kh.d(29): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp9fcva5kh.d(32): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fcva5kh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[$-1];\n   \
    \ if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n    }\n  \
    \  else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfjou6pqv.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpfjou6pqv.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfjou6pqv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    auto isOdd = sum % 2 == 1;\n    if (isOdd)\n    {\n        sort(array);\n\
    \    }\n    else\n    {\n        sort(array, (a, b) => a > b);\n    }\n    return\
    \ array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprw2uy49_.d(22): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmprw2uy49_.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprw2uy49_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result = array.dup.sort!((a, b)\
    \ => a > b);\n    }\n    else\n    {\n        result = array.dup.sort!((a, b)\
    \ => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw10nk2op.d(18): Error: cannot implicitly convert expression `array[0]
    + array[array.length - 1LU]` of type `long` to `int`

    /tmp/tmpw10nk2op.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpw10nk2op.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw10nk2op.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int sum = (int)(array[0] +\
    \ array[array.length - 1]);\n    if (sum % 2 == 0)\n    {\n        sort(array,\
    \ (a, b) => b - a);\n    }\n    else\n    {\n        sort(array);\n    }\n   \
    \ return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmdr3jr9k.d(18): Error: C style cast illegal, use `cast(int)(array[0]
    + array[array.length - 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmdr3jr9k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int start = 0;\n    int end\
    \ = array.length - 1;\n    bool isOdd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    if (isOdd)\n    {\n        foreach(i; array)\n        {\n     \
    \       if (i % 2 == 1)\n            {\n                result[start] = i;\n \
    \               start++;\n            }\n            else\n            {\n   \
    \             result[end] = i;\n                end--;\n            }\n      \
    \  }\n    }\n    else\n    {\n        foreach(i; array)\n        {\n         \
    \   if (i % 2 == 1)\n            {\n                result[end] = i;\n       \
    \         end--;\n            }\n            else\n            {\n           \
    \     result[start] = i;\n                start++;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdwzuws50.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwzuws50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n        sort!((a, b) =>\
    \ a > b)(result);\n    else\n        sort!((a, b) => a < b)(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkso6trit.d(21): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpkso6trit.d(23): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkso6trit.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzii4o_3_.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpzii4o_3_.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzii4o_3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    array.dup.sort;\n    if((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        array.reverse;\n    }\n\
    \    return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3hi8q7cq.d(18): Error: no property `sort` for type `long[]`

    /tmp/tmp3hi8q7cq.d(21): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3hi8q7cq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    temp = array.dup;\n    temp.sort;\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        for(int i = 0; i < array.length; i++)\n    \
    \    {\n            result[i] = temp[array.length - 1 - i];\n        }\n    }\n\
    \    else\n    {\n        result = temp;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgcmm899i.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgcmm899i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0)\n  \
    \      return result;\n    if(array.length == 1)\n        return array;\n    if(array.length\
    \ == 2)\n    {\n        if(array[0] > array[1])\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        long[] temp = new long[array.length];\n    \
    \    for(int i = 0; i < array.length; i++)\n            temp[i] = array[i];\n\
    \        temp.sort();\n        for(int i = 0; i < array.length; i++)\n       \
    \     result[i] = temp[array.length - 1 - i];\n    }\n    else\n    {\n      \
    \  long[] temp = new long[array.length];\n        for(int i = 0; i < array.length;\
    \ i++)\n            temp[i] = array[i];\n        temp.sort();\n        for(int\
    \ i = 0; i < array.length; i++)\n            result[i] = temp[i];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp2 = new long[array.length];\n    long[] temp3 = new long[array.length];\n\
    \    long[] temp4 = new long[array.length];\n    long[] temp5 = new long[array.length];\n\
    \    long[] temp6 = new long[array.length];\n    long[] temp7 = new long[array.length];\n\
    \    long[] temp8 = new long[array.length];\n    long[] temp9 = new long[array.length];\n\
    \    long[] temp10 = new long[array.length];\n    long[] temp11 = new long[array.length];\n\
    \    long[] temp12 = new long[array.length];\n    long[] temp13 = new long[array.length];\n\
    \    long[] temp14 = new long[array.length];\n    long[] temp15 = new long[array.length];\n\
    \    long[] temp16 = new long[array.length];\n    long[] temp17 = new long[array.length];\n\
    \    long[] temp18 = new long[array.length];\n    long[] temp19 = new long[array.length];\n\
    \    long[] temp20 = new long[array.length];\n    long[] temp21 = new long[array.length];\n\
    \    long[] temp22 = new long[array.length];\n    long[] temp23 = new long[array.length];\n\
    \    long[] temp24 = new long[array.length];\n    long[] temp25 = new long[array.length];\n\
    \    long[] temp26 = new long[array.length];\n    long[] temp27 = new long[array.length];\n\
    \    long[] temp28 = new long[array.length];\n    long[] temp29 = new long[array.length];\n\
    \    long[] temp30 = new long[array.length];\n    long[] temp31 = new long[array.length];\n\
    \    long[] temp32 = new long[array.length];\n    long[] temp33 = new long[array.length];\n\
    \    long[] temp34 = new long[array.length];\n    long[] temp35 = new long[array.length];\n\
    \    long[] temp36 = new\nunittest\n{\n    alias candidate = sort_array;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpchizhmtm.d(54): Error: basic type expected, not `unittest`

    /tmp/tmpchizhmtm.d(54): Error: semicolon expected, not `unittest`

    /tmp/tmpchizhmtm.d(54): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchizhmtm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => a > b);\n\
    \    }\n    else\n    {\n        sort(array.dup, (a, b) => a < b);\n    }\n  \
    \  return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjupu8csr.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpjupu8csr.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjupu8csr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    int k = 0;\n    int sum = array[0] + array[array.length - 1];\n  \
    \  if (sum % 2 == 0)\n    {\n        while (i <= j)\n        {\n            if\
    \ (array[i] > array[j])\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n            else\n            {\n      \
    \          result[k] = array[j];\n                j--;\n            }\n      \
    \      k++;\n        }\n    }\n    else\n    {\n        while (i <= j)\n     \
    \   {\n            if (array[i] < array[j])\n            {\n                result[k]\
    \ = array[i];\n                i++;\n            }\n            else\n       \
    \     {\n                result[k] = array[j];\n                j--;\n       \
    \     }\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo9hm4kre.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpo9hm4kre.d(21): Error: cannot implicitly convert expression `array[0]
    + array[array.length - 1LU]` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo9hm4kre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    auto\
    \ isOdd = sum % 2 == 1;\n    if (isOdd)\n    {\n        sort!((a, b) => a < b)(result);\n\
    \    }\n    else\n    {\n        sort!((a, b) => a > b)(result);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppe_jrwdn.d(22): Error: template instance `sort!((a, b) => a < b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmppe_jrwdn.d(26): Error: template instance `sort!((a, b) => a > b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppe_jrwdn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            result[0] = array[1];\n            result[1] = array[0];\n      \
    \  }\n        else\n        {\n            result[0] = array[0];\n           \
    \ result[1] = array[1];\n        }\n        return result;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        result = array.dup;\n \
    \       result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result\
    \ = array.dup;\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdx634tns.d(39): Error: no property `sort` for type `long[]`

    /tmp/tmpdx634tns.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx634tns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[$-1];\n   \
    \ if(sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n   \
    \ else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_9ai8oz.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp2_9ai8oz.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_9ai8oz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    int sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk4r4zw0r.d(18): Error: cannot implicitly convert expression `array[0]
    + array[array.length - 1LU]` of type `long` to `int`

    /tmp/tmpk4r4zw0r.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpk4r4zw0r.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk4r4zw0r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => b - a);\n\
    \    }\n    else\n    {\n        sort(array.dup);\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9i8qdp4k.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp9i8qdp4k.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9i8qdp4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int sum = (int)(array[0] +\
    \ array[array.length - 1]);\n    if(sum % 2 == 0)\n    {\n        result = array.dup.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result = array.dup.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptotev2hr.d(18): Error: C style cast illegal, use `cast(int)(array[0]
    + array[array.length - 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptotev2hr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp2 = new long[array.length];\n    long[] temp3 = new long[array.length];\n\
    \    long[] temp4 = new long[array.length];\n    long[] temp5 = new long[array.length];\n\
    \    long[] temp6 = new long[array.length];\n    long[] temp7 = new long[array.length];\n\
    \    long[] temp8 = new long[array.length];\n    long[] temp9 = new long[array.length];\n\
    \    long[] temp10 = new long[array.length];\n    long[] temp11 = new long[array.length];\n\
    \    long[] temp12 = new long[array.length];\n    long[] temp13 = new long[array.length];\n\
    \    long[] temp14 = new long[array.length];\n    long[] temp15 = new long[array.length];\n\
    \    long[] temp16 = new long[array.length];\n    long[] temp17 = new long[array.length];\n\
    \    long[] temp18 = new long[array.length];\n    long[] temp19 = new long[array.length];\n\
    \    long[] temp20 = new long[array.length];\n    long[] temp21 = new long[array.length];\n\
    \    long[] temp22 = new long[array.length];\n    long[] temp23 = new long[array.length];\n\
    \    long[] temp24 = new long[array.length];\n    long[] temp25 = new long[array.length];\n\
    \    long[] temp26 = new long[array.length];\n    long[] temp27 = new long[array.length];\n\
    \    long[] temp28 = new long[array.length];\n    long[] temp29 = new long[array.length];\n\
    \    long[] temp30 = new long[array.length];\n    long[] temp31 = new long[array.length];\n\
    \    long[] temp32 = new long[array.length];\n    long[] temp33 = new long[array.length];\n\
    \    long[] temp34 = new long[array.length];\n    long[] temp35 = new long[array.length];\n\
    \    long[] temp36 = new\nunittest\n{\n    alias candidate = sort_array;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpchizhmtm.d(54): Error: basic type expected, not `unittest`

    /tmp/tmpchizhmtm.d(54): Error: semicolon expected, not `unittest`

    /tmp/tmpchizhmtm.d(54): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchizhmtm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if ((array[0] + array[$-1]) % 2 == 0)\n\
    \    {\n        sort(result, (a, b) => a > b);\n    }\n    else\n    {\n     \
    \   sort(result, (a, b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1112awtz.d(20): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp1112awtz.d(24): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1112awtz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0) return\
    \ result;\n    if (array.length == 1) return array;\n    if (array.length == 2)\n\
    \    {\n        if ((array[0] + array[1]) % 2 == 0)\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    long[] odd = new long[array.length];\n\
    \    long[] even = new long[array.length];\n    int odd_index = 0;\n    int even_index\
    \ = 0;\n    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i]\
    \ % 2 == 0)\n        {\n            even[even_index] = array[i];\n           \
    \ even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = array[i];\n            odd_index++;\n        }\n    }\n    even = even[0..even_index];\n\
    \    odd = odd[0..odd_index];\n    even.sort();\n    odd.sort();\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        even = even.reverse;\n\
    \    }\n    else\n    {\n        odd = odd.reverse;\n    }\n    int index = 0;\n\
    \    for (int i = 0; i < odd.length; i++)\n    {\n        result[index] = odd[i];\n\
    \        index++;\n    }\n    for (int i = 0; i < even.length; i++)\n    {\n \
    \       result[index] = even[i];\n        index++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_2oeytgb.d(53): Error: no property `sort` for type `long[]`

    /tmp/tmp_2oeytgb.d(54): Error: no property `sort` for type `long[]`

    /tmp/tmp_2oeytgb.d(57): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp_2oeytgb.d(61): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_2oeytgb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    int first = 0;\n    int last = array.length\
    \ - 1;\n    bool isOdd = (array[first] + array[last]) % 2 == 1;\n    while (first\
    \ < last)\n    {\n        if (isOdd)\n        {\n            if (result[first]\
    \ % 2 == 0)\n            {\n                if (result[last] % 2 == 1)\n     \
    \           {\n                    long temp = result[first];\n              \
    \      result[first] = result[last];\n                    result[last] = temp;\n\
    \                    first++;\n                    last--;\n                }\n\
    \                else\n                {\n                    last--;\n      \
    \          }\n            }\n            else\n            {\n               \
    \ first++;\n            }\n        }\n        else\n        {\n            if\
    \ (result[first] % 2 == 1)\n            {\n                if (result[last] %\
    \ 2 == 0)\n                {\n                    long temp = result[first];\n\
    \                    result[first] = result[last];\n                    result[last]\
    \ = temp;\n                    first++;\n                    last--;\n       \
    \         }\n                else\n                {\n                    last--;\n\
    \                }\n            }\n            else\n            {\n         \
    \       first++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl51tkctb.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl51tkctb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array.ptr, array.ptr + array.length,\
    \ std.greater!long());\n    }\n    else\n    {\n        sort(array.ptr, array.ptr\
    \ + array.length);\n    }\n    return array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbk37qub3.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpbk37qub3.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbk37qub3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(result.length == 0) return result;\n\
    \    if(result.length == 1) return result;\n    if(result.length == 2)\n    {\n\
    \        if(result[0] > result[1])\n        {\n            long temp = result[0];\n\
    \            result[0] = result[1];\n            result[1] = temp;\n        }\n\
    \        return result;\n    }\n    long first = result[0];\n    long last = result[result.length\
    \ - 1];\n    bool isOdd = (first + last) % 2 == 1;\n    if(isOdd)\n    {\n   \
    \     result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpop5ocy07.d(35): Error: no property `sort` for type `long[]`

    /tmp/tmpop5ocy07.d(39): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpop5ocy07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    if (array.length == 0)\n        return array;\n    long[] result = new\
    \ long[array.length];\n    auto sum = array[0] + array[$ - 1];\n    auto isOdd\
    \ = sum % 2 == 1;\n    auto sorted = array.dup.sort;\n    if (isOdd)\n    {\n\
    \        foreach (i, e; sorted)\n            result[i] = e;\n    }\n    else\n\
    \    {\n        foreach (i, e; sorted)\n            result[i] = e;\n        result\
    \ = result.reverse;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kve8s8v.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp5kve8s8v.d(32): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kve8s8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0)\n  \
    \      return result;\n    if(array.length == 1)\n        return array;\n    if(array.length\
    \ == 2)\n    {\n        if(array[0] > array[1])\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        for(int i = 0; i < array.length;\
    \ i++)\n        {\n            result[i] = array[array.length - 1 - i];\n    \
    \    }\n    }\n    else\n    {\n        for(int i = 0; i < array.length; i++)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl0b2vd79.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288e5]

    ??:? void tmpl0b2vd79.__unittest_L53_C1() [0x4282e6]

    ??:? void tmpl0b2vd79.__modtest() [0x428664]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c99f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b832]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430abd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b809]

    ??:? runModuleUnitTests [0x42c775]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428da8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] odd = new long[array.length];\n\
    \    long[] even = new long[array.length];\n    int odd_index = 0;\n    int even_index\
    \ = 0;\n    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i]\
    \ % 2 == 0)\n        {\n            even[even_index] = array[i];\n           \
    \ even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = array[i];\n            odd_index++;\n        }\n    }\n    even = even[0..even_index];\n\
    \    odd = odd[0..odd_index];\n    even.sort();\n    odd.sort();\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        even = even.reverse();\n\
    \    }\n    else\n    {\n        odd = odd.reverse();\n    }\n    int index =\
    \ 0;\n    for (int i = 0; i < odd.length; i++)\n    {\n        result[index] =\
    \ odd[i];\n        index++;\n    }\n    for (int i = 0; i < even.length; i++)\n\
    \    {\n        result[index] = even[i];\n        index++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8pyu3ey.d(37): Error: no property `sort` for type `long[]`

    /tmp/tmpx8pyu3ey.d(38): Error: no property `sort` for type `long[]`

    /tmp/tmpx8pyu3ey.d(41): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpx8pyu3ey.d(45): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8pyu3ey.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if((array[0] + array[$-1]) % 2 == 0)\n        result.sort!((a, b) => a >\
    \ b);\n    else\n        result.sort!((a, b) => a < b);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ivjchgj.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp3ivjchgj.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ivjchgj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    if (array.length > 1)\n    {\n        if\
    \ ((array[0] + array[$ - 1]) % 2 == 0)\n        {\n            sort!((a, b) =>\
    \ a > b)(result);\n        }\n        else\n        {\n            sort!((a, b)\
    \ => a < b)(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvbb14wt.d(22): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpxvbb14wt.d(26): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvbb14wt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5k0r0poq.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp5k0r0poq.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5k0r0poq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int start = 0;\n    int end\
    \ = array.length - 1;\n    bool isOdd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    if (isOdd)\n    {\n        foreach(i; array)\n        {\n     \
    \       if (i % 2 == 1)\n            {\n                result[start] = i;\n \
    \               start++;\n            }\n            else\n            {\n   \
    \             result[end] = i;\n                end--;\n            }\n      \
    \  }\n    }\n    else\n    {\n        foreach(i; array)\n        {\n         \
    \   if (i % 2 == 1)\n            {\n                result[end] = i;\n       \
    \         end--;\n            }\n            else\n            {\n           \
    \     result[start] = i;\n                start++;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdwzuws50.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwzuws50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvz4q5jn_.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpvz4q5jn_.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvz4q5jn_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0)\n  \
    \      return result;\n    auto sum = array[0] + array[array.length - 1];\n  \
    \  if(sum % 2 == 0)\n    {\n        sort(array.ptr, array.ptr + array.length,\
    \ (a, b) => a > b);\n    }\n    else\n    {\n        sort(array.ptr, array.ptr\
    \ + array.length, (a, b) => a < b);\n    }\n    return array;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_cm4tpjs.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp_cm4tpjs.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_cm4tpjs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0)\n  \
    \      return result;\n    if(array.length == 1)\n        return array;\n    if(array.length\
    \ == 2)\n    {\n        if(array[0] > array[1])\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        result = array.dup;\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result = array.dup;\n       \
    \ result.sort!((a, b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp47bx6vya.d(39): Error: no property `sort` for type `long[]`

    /tmp/tmp47bx6vya.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47bx6vya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => b - a);\n\
    \    }\n    else\n    {\n        sort(array.dup);\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps_xyw0kj.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmps_xyw0kj.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_xyw0kj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9dbfr7w.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpd9dbfr7w.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9dbfr7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if((array[0] + array[$-1]) % 2 == 0)\n    {\n        sort!((a, b) => a >\
    \ b)(result);\n    }\n    else\n    {\n        sort!((a, b) => a < b)(result);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3il3iyc.d(22): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpj3il3iyc.d(26): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3il3iyc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0)\n  \
    \      return result;\n    if(array.length == 1)\n        return array;\n    if(array.length\
    \ == 2)\n    {\n        if(array[0] > array[1])\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        long[] temp = new long[array.length];\n    \
    \    for(int i = 0; i < array.length; i++)\n            temp[i] = array[i];\n\
    \        temp.sort();\n        for(int i = 0; i < array.length; i++)\n       \
    \     result[i] = temp[array.length - 1 - i];\n    }\n    else\n    {\n      \
    \  long[] temp = new long[array.length];\n        for(int i = 0; i < array.length;\
    \ i++)\n            temp[i] = array[i];\n        temp.sort();\n        for(int\
    \ i = 0; i < array.length; i++)\n            result[i] = temp[i];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] res = new long[array.length];\n    if (array.length == 0)\n    \
    \    return res;\n    int sum = array[0] + array[array.length - 1];\n    if (sum\
    \ % 2 == 0)\n    {\n        res = array.dup.sort!((a, b) => a > b);\n    }\n \
    \   else\n    {\n        res = array.dup.sort!((a, b) => a < b);\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_thfea_.d(20): Error: cannot implicitly convert expression `array[0]
    + array[array.length - 1LU]` of type `long` to `int`

    /tmp/tmpo_thfea_.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmpo_thfea_.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_thfea_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result = array.sort!((a, b) =>\
    \ b < a);\n    }\n    else\n    {\n        result = array.sort!((a, b) => a <\
    \ b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppbw2u6f9.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmppbw2u6f9.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbw2u6f9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyl060v6k.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpyl060v6k.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyl060v6k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab =\
    \ 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n   \
    \ int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak =\
    \ 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n   \
    \ int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at =\
    \ 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n   \
    \ int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc =\
    \ 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n   \
    \ int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl =\
    \ 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n   \
    \ int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu =\
    \ 0;\n    int bv = 0;\n   \nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_8xk0i0l.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8xk0i0l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => a > b);\n\
    \    }\n    else\n    {\n        sort(array.dup, (a, b) => a < b);\n    }\n  \
    \  return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23nrgklc.d(18): Error: cannot implicitly convert expression `array[0]
    + array[array.length - 1LU]` of type `long` to `int`

    /tmp/tmp23nrgklc.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp23nrgklc.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23nrgklc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    int k = 0;\n    if (array.length == 0)\n        return result;\n \
    \   if (array[0] + array[array.length - 1] % 2 == 0)\n    {\n        while (k\
    \ < array.length)\n        {\n            if (array[i] % 2 == 0)\n           \
    \ {\n                result[k] = array[i];\n                i++;\n           \
    \ }\n            else\n            {\n                result[k] = array[j];\n\
    \                j--;\n            }\n            k++;\n        }\n    }\n   \
    \ else\n    {\n        while (k < array.length)\n        {\n            if (array[i]\
    \ % 2 == 0)\n            {\n                result[k] = array[j];\n          \
    \      j--;\n            }\n            else\n            {\n                result[k]\
    \ = array[i];\n                i++;\n            }\n            k++;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8dbebtly.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dbebtly.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    bool isOdd = (array[0] + array[array.length\
    \ - 1]) % 2 == 1;\n    if (isOdd)\n    {\n        result = array.dup.sort;\n \
    \   }\n    else\n    {\n        result = array.dup.sort.reverse;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_qvubxw.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpp_qvubxw.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_qvubxw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            result[0] = array[1];\n            result[1] = array[0];\n      \
    \  }\n        else\n        {\n            result[0] = array[0];\n           \
    \ result[1] = array[1];\n        }\n        return result;\n    }\n    long sum\
    \ = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n      \
    \  foreach (i; 0 .. array.length)\n        {\n            result[i] = array[array.length\
    \ - 1 - i];\n        }\n    }\n    else\n    {\n        foreach (i; 0 .. array.length)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk15aplvq.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmpk15aplvq.__unittest_L53_C1() [0x4282ee]

    ??:? void tmpk15aplvq.__modtest() [0x42866c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] odd = new long[array.length];\n\
    \    long[] even = new long[array.length];\n    int odd_index = 0;\n    int even_index\
    \ = 0;\n    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i]\
    \ % 2 == 0)\n        {\n            even[even_index] = array[i];\n           \
    \ even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = array[i];\n            odd_index++;\n        }\n    }\n    sort(odd[0..odd_index]);\n\
    \    sort(even[0..even_index]);\n    if ((array[0] + array[array.length - 1])\
    \ % 2 == 0)\n    {\n        for (int i = 0; i < odd_index; i++)\n        {\n \
    \           result[i] = odd[odd_index - i - 1];\n        }\n        for (int i\
    \ = 0; i < even_index; i++)\n        {\n            result[odd_index + i] = even[even_index\
    \ - i - 1];\n        }\n    }\n    else\n    {\n        for (int i = 0; i < odd_index;\
    \ i++)\n        {\n            result[i] = odd[i];\n        }\n        for (int\
    \ i = 0; i < even_index; i++)\n        {\n            result[odd_index + i] =\
    \ even[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaj8nsxrp.d(35): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpaj8nsxrp.d(36): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaj8nsxrp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    if(array.length > 1)\n    {\n        auto\
    \ first = array[0];\n        auto last = array[$-1];\n        if((first + last)\
    \ % 2 == 0)\n        {\n            result.sort!((a, b) => a > b);\n        }\n\
    \        else\n        {\n            result.sort!((a, b) => a < b);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgfr4bjus.d(24): Error: no property `sort` for type `long[]`

    /tmp/tmpgfr4bjus.d(28): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfr4bjus.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n        result.sort!((a,\
    \ b) => a < b);\n    else\n        result.sort!((a, b) => a > b);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpieej2pc7.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpieej2pc7.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpieej2pc7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    auto sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        sort(array.dup, \"a > b\");\n    }\n   \
    \ else\n    {\n        sort(array.dup);\n    }\n    return array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wd6n71x.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp8wd6n71x.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wd6n71x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0) return result;\n\
    \    if (array.length == 1) return result;\n    if (array.length == 2)\n    {\n\
    \        if (array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        return result;\n    }\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7j8m9u5j.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmp7j8m9u5j.d(35): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7j8m9u5j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    long sum = array[0] + array[array.length - 1];\n \
    \   bool isOdd = sum % 2 == 1;\n    if (isOdd)\n    {\n        sort(array.dup);\n\
    \        foreach (i, v; array)\n            result[i] = v;\n    }\n    else\n\
    \    {\n        sort(array.dup, std.algorithm.greater!\"a\");\n        foreach\
    \ (i, v; array)\n            result[i] = v;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppnteqxmr.d(24): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmppnteqxmr.d(30): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppnteqxmr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9dbfr7w.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpd9dbfr7w.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9dbfr7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    if (array.length == 0)\n        return result;\n\
    \    if ((array[0] + array[$ - 1]) % 2 == 0)\n        result.sort!((a, b) => a\
    \ > b);\n    else\n        result.sort!((a, b) => a < b);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5d1wd42x.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp5d1wd42x.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5d1wd42x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if (array.length == 0) return result;\n\
    \    if (array.length == 1) return result;\n    if (array.length == 2)\n    {\n\
    \        if ((array[0] + array[1]) % 2 == 0)\n        {\n            if (array[0]\
    \ > array[1])\n            {\n                long temp = array[0];\n        \
    \        array[0] = array[1];\n                array[1] = temp;\n            }\n\
    \        }\n        else\n        {\n            if (array[0] < array[1])\n  \
    \          {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n        }\n  \
    \      return result;\n    }\n    if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result.sort!((a, b) => a < b);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6alt85i.d(44): Error: no property `sort` for type `long[]`

    /tmp/tmpb6alt85i.d(48): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6alt85i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    temp = array.dup;\n    temp.sort;\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        for(int i = 0; i < array.length; i++)\n    \
    \    {\n            result[i] = temp[array.length - i - 1];\n        }\n    }\n\
    \    else\n    {\n        result = temp;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbja1c9ls.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbja1c9ls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result = array.dup.sort!((a, b)\
    \ => b < a);\n    }\n    else\n    {\n        result = array.dup.sort!((a, b)\
    \ => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfy554q3_.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpfy554q3_.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfy554q3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0) return result;\n\
    \    bool isOdd = (array[0] + array[$-1]) % 2 == 1;\n    if(isOdd)\n    {\n  \
    \      result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp816eujz_.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp816eujz_.d(26): Error: no property `sort` for type `long[]`

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0) return\
    \ result;\n    auto sum = array[0] + array[array.length - 1];\n    if(sum % 2\
    \ == 0)\n    {\n        sort(array.dup, (a, b) => a > b);\n    }\n    else\n \
    \   {\n        sort(array.dup, (a, b) => a < b);\n    }\n    return array;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4a_9t7l9.d(22): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp4a_9t7l9.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4a_9t7l9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result = array.dup.sort!((a, b)\
    \ => b < a);\n    }\n    else\n    {\n        result = array.dup.sort!((a, b)\
    \ => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfy554q3_.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpfy554q3_.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfy554q3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    temp = array.dup;\n    temp.sort;\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        for(int i = 0; i < array.length; i++)\n    \
    \    {\n            result[i] = temp[array.length - i - 1];\n        }\n    }\n\
    \    else\n    {\n        result = temp;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbja1c9ls.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbja1c9ls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    if (array.length == 0)\n        return array;\n    if (array.length ==\
    \ 1)\n        return array;\n    auto result = array.dup;\n    if ((array[0] +\
    \ array[$-1]) % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp59aqct31.d(24): Error: no property `sort` for type `long[]`

    /tmp/tmp59aqct31.d(28): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59aqct31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result = array.sort(std.math.cmp.descending);\n\
    \    }\n    else\n    {\n        result = array.sort();\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79c80tts.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp79c80tts.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79c80tts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => a > b);\n\
    \    }\n    else\n    {\n        sort(array.dup, (a, b) => a < b);\n    }\n  \
    \  return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjupu8csr.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpjupu8csr.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjupu8csr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => a > b);\n\
    \    }\n    else\n    {\n        sort(array.dup, (a, b) => a < b);\n    }\n  \
    \  return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphitrsl1l.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmphitrsl1l.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphitrsl1l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0) return result;\n\
    \    if(array.length == 1) return result;\n    if(array.length == 2)\n    {\n\
    \        if(array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return result;\n    }\n    if((array[0] + array[$-1]) % 2 == 0)\n    {\n\
    \        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaihgnfia.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmpaihgnfia.d(36): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaihgnfia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long first = array[0];\n    long last =\
    \ array[$-1];\n    if((first + last) % 2 == 0)\n    {\n        sort(result, (a,\
    \ b) => a > b);\n    }\n    else\n    {\n        sort(result, (a, b) => a < b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpixumxyxg.d(22): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpixumxyxg.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpixumxyxg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    auto sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        temp = array.dup;\n        temp.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        temp = array.dup;\n        temp.sort!((a, b) => a <\
    \ b);\n    }\n    foreach(i, v; temp)\n    {\n        result[i] = v;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n   \
    \ assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpez4p58gw.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmpez4p58gw.d(28): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpez4p58gw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    if (array.length == 1)\n        return array;\n  \
    \  long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n   \
    \ {\n        foreach (i, e; array)\n            result[i] = e;\n        sort(result);\n\
    \        return result;\n    }\n    else\n    {\n        foreach (i, e; array)\n\
    \            result[i] = e;\n        sort(result);\n        reverse(result);\n\
    \        return result;\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp098uhe3v.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp098uhe3v.d(34): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp098uhe3v.d(35): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp098uhe3v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    temp = array.dup;\n    temp.sort;\n    if(array[0] + array[array.length -\
    \ 1] % 2 == 0)\n    {\n        for(int i = 0; i < array.length; i++)\n       \
    \ {\n            result[i] = temp[array.length - i - 1];\n        }\n    }\n \
    \   else\n    {\n        result = temp;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpun_s5iap.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpun_s5iap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    array.dup.sort;\n    if((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        result = array.dup.sort.reverse;\n\
    \    }\n    else\n    {\n        result = array.dup.sort;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwd46b8a.d(18): Error: no property `sort` for type `long[]`

    /tmp/tmpgwd46b8a.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpgwd46b8a.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwd46b8a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    bool isOdd = sum % 2 == 1;\n    if (isOdd)\n    {\n        result\
    \ = array.dup.sort();\n    }\n    else\n    {\n        result = array.dup.sort!((a,\
    \ b) => b - a);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnh67yzld.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmpnh67yzld.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnh67yzld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] sorted = array.dup;\n\
    \    sorted.sort;\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n  \
    \  {\n        result = sorted.reverse;\n    }\n    else\n    {\n        result\
    \ = sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfm3j84re.d(19): Error: no property `sort` for type `long[]`

    /tmp/tmpfm3j84re.d(22): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfm3j84re.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        sort!((a, b) => a > b)(result);\n    }\n    else\n\
    \    {\n        sort!((a, b) => a < b)(result);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv0vl2rb.d(21): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpiv0vl2rb.d(25): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv0vl2rb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        sort(array, (a, b) => a > b);\n    }\n \
    \   else\n    {\n        sort(array, (a, b) => a < b);\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nhbxo7h.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp6nhbxo7h.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nhbxo7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto array_copy = array.dup;\n    auto sum = array[0] + array[$-1];\n \
    \   if(sum % 2 == 0)\n    {\n        sort(array_copy[], (a, b) => a > b);\n  \
    \  }\n    else\n    {\n        sort(array_copy[], (a, b) => a < b);\n    }\n \
    \   return array_copy;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6doetx0w.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp6doetx0w.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6doetx0w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int index = 0;\n    foreach(long\
    \ i; array)\n    {\n        result[index] = i;\n        index++;\n    }\n    if((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        sort(result);\n    }\n\
    \    else\n    {\n        sort(result, std.math.greater!long);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2snatd1.d(26): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpl2snatd1.d(30): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2snatd1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result = array.dup.sort!((a, b)\
    \ => b - a);\n    }\n    else\n    {\n        result = array.dup.sort!((a, b)\
    \ => a - b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcq0aiysy.d(18): Error: cannot implicitly convert expression `array[0]
    + array[array.length - 1LU]` of type `long` to `int`

    /tmp/tmpcq0aiysy.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpcq0aiysy.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcq0aiysy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    if (array.length == 0)\n        return array;\n    \n    auto result =\
    \ array.dup;\n    auto sum = array[0] + array[$ - 1];\n    auto isOdd = sum %\
    \ 2 == 1;\n    if (isOdd)\n        sort!((a, b) => a > b)(result);\n    else\n\
    \        sort!((a, b) => a < b)(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zljpo9e.d(24): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmp2zljpo9e.d(26): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zljpo9e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long first = array[0];\n    long last =\
    \ array[$-1];\n    if((first + last) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b < a);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzizntagr.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmpzizntagr.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzizntagr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if (array.length == 0)\n \
    \       return result;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            result[0] = array[1];\n            result[1] = array[0];\n      \
    \  }\n        else\n        {\n            result[0] = array[0];\n           \
    \ result[1] = array[1];\n        }\n        return result;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        result = array.dup;\n \
    \       result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result\
    \ = array.dup;\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdx634tns.d(39): Error: no property `sort` for type `long[]`

    /tmp/tmpdx634tns.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx634tns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    temp = array.dup;\n    temp.sort;\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        for(int i = 0; i < array.length; i++)\n    \
    \    {\n            result[i] = temp[array.length - 1 - i];\n        }\n    }\n\
    \    else\n    {\n        result = temp;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgcmm899i.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgcmm899i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if(sum\
    \ % 2 == 0)\n    {\n        sort!((a, b) => a > b)(result);\n    }\n    else\n\
    \    {\n        sort!((a, b) => a < b)(result);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpctpcmxx_.d(21): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpctpcmxx_.d(25): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctpcmxx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto sum = array[0] + array[$-1];\n    auto sorted = array.dup;\n    if\
    \ (sum % 2 == 0)\n        sorted.sort!((a, b) => a > b);\n    else\n        sorted.sort!((a,\
    \ b) => a < b);\n    return sorted;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy8puc_v7.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmpy8puc_v7.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy8puc_v7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[$-1];\n   \
    \ if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n  \
    \  else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jilf8sf.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp0jilf8sf.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jilf8sf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if(sum\
    \ % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9yzlldwh.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp9yzlldwh.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9yzlldwh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0) return result;\n\
    \    if(array.length == 1) return result;\n    if(array.length == 2) \n    {\n\
    \        if(array[0] > array[1]) \n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return result;\n    }\n    if((array[0] + array[array.length - 1]) % 2\
    \ == 0) \n    {\n        result.sort!((a, b) => a > b);\n    }\n    else \n  \
    \  {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfc1k2l2h.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmpfc1k2l2h.d(36): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfc1k2l2h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    int k = 0;\n    bool odd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    while (i <= j)\n    {\n        if (odd)\n        {\n          \
    \  if (array[i] % 2 == 1)\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n            else\n            {\n      \
    \          result[k] = array[j];\n                j--;\n            }\n      \
    \  }\n        else\n        {\n            if (array[i] % 2 == 1)\n          \
    \  {\n                result[k] = array[j];\n                j--;\n          \
    \  }\n            else\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n        }\n        k++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97ivczje.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97ivczje.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    if (array.length == 0) return array;\n    auto result = array.dup;\n  \
    \  if ((array[0] + array[$-1]) % 2 == 0)\n    {\n        sort(result, (a, b) =>\
    \ b - a);\n    }\n    else\n    {\n        sort(result);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4h3ftvu8.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp4h3ftvu8.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4h3ftvu8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    bool isOdd = (array[0] + array[$-1]) %\
    \ 2 == 1;\n    if (isOdd)\n    {\n        result.sort!((a, b) => a > b);\n   \
    \ }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpijyhdbo0.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpijyhdbo0.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijyhdbo0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    int first = 0;\n    int last = array.length\
    \ - 1;\n    bool isOdd = (array[first] + array[last]) % 2 == 1;\n    while (first\
    \ < last)\n    {\n        if (isOdd)\n        {\n            if (result[first]\
    \ % 2 == 0)\n            {\n                if (result[last] % 2 == 1)\n     \
    \           {\n                    long temp = result[first];\n              \
    \      result[first] = result[last];\n                    result[last] = temp;\n\
    \                    first++;\n                    last--;\n                }\n\
    \                else\n                {\n                    last--;\n      \
    \          }\n            }\n            else\n            {\n               \
    \ first++;\n            }\n        }\n        else\n        {\n            if\
    \ (result[first] % 2 == 1)\n            {\n                if (result[last] %\
    \ 2 == 0)\n                {\n                    long temp = result[first];\n\
    \                    result[first] = result[last];\n                    result[last]\
    \ = temp;\n                    first++;\n                    last--;\n       \
    \         }\n                else\n                {\n                    last--;\n\
    \                }\n            }\n            else\n            {\n         \
    \       first++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl51tkctb.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl51tkctb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9dbfr7w.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpd9dbfr7w.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9dbfr7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9dbfr7w.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpd9dbfr7w.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9dbfr7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int[] index = new int[array.length];\n\
    \    for (int i = 0; i < array.length; i++)\n    {\n        index[i] = i;\n  \
    \  }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        index.sort!((a,\
    \ b) => array[a] < array[b]);\n    }\n    else\n    {\n        index.sort!((a,\
    \ b) => array[a] > array[b]);\n    }\n    for (int i = 0; i < array.length; i++)\n\
    \    {\n        result[i] = array[index[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5vq57mx7.d(25): Error: no property `sort` for type `int[]`

    /tmp/tmp5vq57mx7.d(29): Error: no property `sort` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5vq57mx7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0)\n  \
    \      return result;\n    if(array.length == 1)\n        return array;\n    if(array.length\
    \ == 2)\n    {\n        if(array[0] > array[1])\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        for(int i = 0; i < array.length; i++)\n    \
    \    {\n            result[i] = array[array.length - 1 - i];\n        }\n    }\n\
    \    else\n    {\n        for(int i = 0; i < array.length; i++)\n        {\n \
    \           result[i] = array[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4p9mvoi_.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288e5]

    ??:? void tmp4p9mvoi_.__unittest_L52_C1() [0x4282e6]

    ??:? void tmp4p9mvoi_.__modtest() [0x428664]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c99f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b832]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430abd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b809]

    ??:? runModuleUnitTests [0x42c775]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428da8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9dbfr7w.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpd9dbfr7w.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9dbfr7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.ptr, array.ptr + array.length,\
    \ std.greater!long());\n    }\n    else\n    {\n        sort(array.ptr, array.ptr\
    \ + array.length);\n    }\n    return array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2l3oajw.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpx2l3oajw.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2l3oajw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if ((result[0] + result[$-1]) % 2 == 0)\n\
    \    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n     \
    \   result.sort!((a, b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppz7jdysp.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmppz7jdysp.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppz7jdysp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => a > b);\n\
    \    }\n    else\n    {\n        sort(array.dup, (a, b) => a < b);\n    }\n  \
    \  return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32v_7gis.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp32v_7gis.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32v_7gis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b < a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpila3zzp8.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpila3zzp8.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpila3zzp8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    int k = 0;\n    if((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        while(i <= j)\n        {\n            if(array[i] > array[j])\n\
    \            {\n                result[k] = array[i];\n                i++;\n\
    \            }\n            else\n            {\n                result[k] = array[j];\n\
    \                j--;\n            }\n            k++;\n        }\n    }\n   \
    \ else\n    {\n        while(i <= j)\n        {\n            if(array[i] < array[j])\n\
    \            {\n                result[k] = array[i];\n                i++;\n\
    \            }\n            else\n            {\n                result[k] = array[j];\n\
    \                j--;\n            }\n            k++;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplp625n9i.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplp625n9i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if(sum\
    \ % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9yzlldwh.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp9yzlldwh.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9yzlldwh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup);\n        reverse(array);\n\
    \    }\n    else\n    {\n        sort(array.dup);\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7jxwg42.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpk7jxwg42.d(22): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpk7jxwg42.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7jxwg42.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[$-1];\n\
    \    auto isEven = sum % 2 == 0;\n    auto comparer = isEven ? (a, b) => a > b\
    \ : (a, b) => a < b;\n    result = array.dup;\n    result.sort(comparer);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0tv99bzg.d(20): Error: variable `tmp0tv99bzg.sort_array.comparer`
    type `void` is inferred from initializer `isEven ? (a, b) => a > b : (a, b) =>
    a < b`, and variables cannot be of type `void`

    /tmp/tmp0tv99bzg.d(20): Error: expression `isEven ? (a, b) => a > b : (a, b) =>
    a < b` is `void` and has no value

    /tmp/tmp0tv99bzg.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tv99bzg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    int first = 0;\n    int last = array.length\
    \ - 1;\n    int sum = array[first] + array[last];\n    if (sum % 2 == 0)\n   \
    \ {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo0tnwml9.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpo0tnwml9.d(20): Error: cannot implicitly convert expression `array[cast(ulong)first]
    + array[cast(ulong)last]` of type `long` to `int`

    /tmp/tmpo0tnwml9.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmpo0tnwml9.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0tnwml9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0) return\
    \ result;\n    if(array.length == 1) return array;\n    if(array.length == 2)\n\
    \    {\n        if(array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n        return array;\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n        return\
    \ array;\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbj75pi7m.d(36): Error: no property `sort` for type `long[]`

    /tmp/tmpbj75pi7m.d(41): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbj75pi7m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    bool isOdd = (sum % 2 == 1);\n    if (isOdd)\n    {\n        result\
    \ = array.dup.sort;\n    }\n    else\n    {\n        result = array.dup.sort.reverse;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxfdtbzq3.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmpxfdtbzq3.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxfdtbzq3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp2 = new long[array.length];\n    long[] temp3 = new long[array.length];\n\
    \    long[] temp4 = new long[array.length];\n    long[] temp5 = new long[array.length];\n\
    \    long[] temp6 = new long[array.length];\n    long[] temp7 = new long[array.length];\n\
    \    long[] temp8 = new long[array.length];\n    long[] temp9 = new long[array.length];\n\
    \    long[] temp10 = new long[array.length];\n    long[] temp11 = new long[array.length];\n\
    \    long[] temp12 = new long[array.length];\n    long[] temp13 = new long[array.length];\n\
    \    long[] temp14 = new long[array.length];\n    long[] temp15 = new long[array.length];\n\
    \    long[] temp16 = new long[array.length];\n    long[] temp17 = new long[array.length];\n\
    \    long[] temp18 = new long[array.length];\n    long[] temp19 = new long[array.length];\n\
    \    long[] temp20 = new long[array.length];\n    long[] temp21 = new long[array.length];\n\
    \    long[] temp22 = new long[array.length];\n    long[] temp23 = new long[array.length];\n\
    \    long[] temp24 = new long[array.length];\n    long[] temp25 = new long[array.length];\n\
    \    long[] temp26 = new long[array.length];\n    long[] temp27 = new long[array.length];\n\
    \    long[] temp28 = new long[array.length];\n    long[] temp29 = new long[array.length];\n\
    \    long[] temp30 = new long[array.length];\n    long[] temp31 = new long[array.length];\n\
    \    long[] temp32 = new long[array.length];\n    long[] temp33 = new long[array.length];\n\
    \    long[] temp34 = new long[array.length];\n    long[] temp35 = new long[array.length];\n\
    \    long[] temp36 = new\nunittest\n{\n    alias candidate = sort_array;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpchizhmtm.d(54): Error: basic type expected, not `unittest`

    /tmp/tmpchizhmtm.d(54): Error: semicolon expected, not `unittest`

    /tmp/tmpchizhmtm.d(54): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchizhmtm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    if(array.length == 0) return result;\n\
    \    if(array.length == 1) return result;\n    if(array.length == 2)\n    {\n\
    \        if(array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return result;\n    }\n    if((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result.sort!((a, b) => a < b);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77hm3bnb.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmp77hm3bnb.d(36): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77hm3bnb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    if (array.length == 0)\n        return array;\n    if (array.length ==\
    \ 1)\n        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    long[] result = array.dup;\n    bool isOdd = (result[0] + result[result.length\
    \ - 1]) % 2 == 1;\n    if (isOdd)\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyk6x49i8.d(35): Error: no property `sort` for type `long[]`

    /tmp/tmpyk6x49i8.d(39): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyk6x49i8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if(sum\
    \ % 2 == 0)\n    {\n        result.sort!((a, b) => b < a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj6a5r8qx.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpj6a5r8qx.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6a5r8qx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => a < b);\n\
    \    }\n    else\n    {\n        sort(array.dup, (a, b) => a > b);\n    }\n  \
    \  return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7fec6a4m.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp7fec6a4m.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7fec6a4m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    if (array.length == 0)\n        return result;\n\
    \    if ((array[0] + array[$ - 1]) % 2 == 0)\n        result.sort!((a, b) => a\
    \ > b);\n    else\n        result.sort!((a, b) => a < b);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5d1wd42x.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp5d1wd42x.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5d1wd42x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    bool isOdd = (result[0] + result[$-1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        result.sort!((a, b) => a > b);\n \
    \   }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeob1p_pg.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpeob1p_pg.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeob1p_pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.ptr, array.ptr + array.length,\
    \ std.greater!long());\n    }\n    else\n    {\n        sort(array.ptr, array.ptr\
    \ + array.length);\n    }\n    return array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2l3oajw.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpx2l3oajw.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2l3oajw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        sort!((a, b) => b < a)(result);\n    }\n    else\n\
    \    {\n        sort!((a, b) => a < b)(result);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpize9zs6r.d(21): Error: template instance `sort!((a, b) => b < a)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpize9zs6r.d(25): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpize9zs6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] odd = new long[array.length];\n\
    \    long[] even = new long[array.length];\n    int odd_index = 0;\n    int even_index\
    \ = 0;\n    foreach(i; array)\n    {\n        if(i % 2 == 0)\n        {\n    \
    \        even[even_index] = i;\n            even_index++;\n        }\n       \
    \ else\n        {\n            odd[odd_index] = i;\n            odd_index++;\n\
    \        }\n    }\n    sort(odd[0..odd_index]);\n    sort(even[0..even_index]);\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        reverse(even[0..even_index]);\n\
    \    }\n    else\n    {\n        reverse(odd[0..odd_index]);\n    }\n    int index\
    \ = 0;\n    foreach(i; odd[0..odd_index])\n    {\n        result[index] = i;\n\
    \        index++;\n    }\n    foreach(i; even[0..even_index])\n    {\n       \
    \ result[index] = i;\n        index++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt8koxqsc.d(35): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpt8koxqsc.d(36): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpt8koxqsc.d(39): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpt8koxqsc.d(43): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt8koxqsc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int start = 0;\n    int end\
    \ = array.length - 1;\n    bool isOdd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    if (isOdd)\n    {\n        sort(array);\n        foreach(i; array)\n\
    \        {\n            result[start++] = i;\n        }\n    }\n    else\n   \
    \ {\n        sort(array, (a, b) => a > b);\n        foreach(i; array)\n      \
    \  {\n            result[end--] = i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwxb5nhhy.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpwxb5nhhy.d(23): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpwxb5nhhy.d(31): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwxb5nhhy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    if(array.length == 0)\n  \
    \      return result;\n    if(array.length == 1)\n        return array;\n    if(array.length\
    \ == 2)\n    {\n        if(array[0] > array[1])\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        result = array.dup;\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result = array.dup;\n       \
    \ result.sort!((a, b) => a < b);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp47bx6vya.d(39): Error: no property `sort` for type `long[]`

    /tmp/tmp47bx6vya.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47bx6vya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    long[] odd = new long[array.length];\n\
    \    long[] even = new long[array.length];\n    int odd_index = 0;\n    int even_index\
    \ = 0;\n    foreach(i; array)\n    {\n        if(i % 2 == 0)\n        {\n    \
    \        even[even_index] = i;\n            even_index++;\n        }\n       \
    \ else\n        {\n            odd[odd_index] = i;\n            odd_index++;\n\
    \        }\n    }\n    sort(odd[0..odd_index]);\n    sort(even[0..even_index]);\n\
    \    if((array[0] + array[$-1]) % 2 == 0)\n    {\n        even = even[0..even_index].reverse;\n\
    \    }\n    else\n    {\n        odd = odd[0..odd_index].reverse;\n    }\n   \
    \ int index = 0;\n    foreach(i; odd)\n    {\n        result[index] = i;\n   \
    \     index++;\n    }\n    foreach(i; even)\n    {\n        result[index] = i;\n\
    \        index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpznrs2zw4.d(35): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpznrs2zw4.d(36): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpznrs2zw4.d(39): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpznrs2zw4.d(43): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznrs2zw4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => a > b);\n\
    \    }\n    else\n    {\n        sort(array.dup, (a, b) => a < b);\n    }\n  \
    \  return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjupu8csr.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpjupu8csr.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjupu8csr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164394
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = array.dup;\n    auto first = result[0];\n    auto last\
    \ = result[$-1];\n    if((first + last) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ty3k7up.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp1ty3k7up.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ty3k7up.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a - b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplj5x477l.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmplj5x477l.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplj5x477l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164393
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n\
    {\n    long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        foreach (e; array)\n        {\n            if (e % 2\
    \ == 1)\n            {\n                result[i] = e;\n                i++;\n\
    \            }\n        }\n        foreach (e; array)\n        {\n           \
    \ if (e % 2 == 0)\n            {\n                result[j] = e;\n           \
    \     j--;\n            }\n        }\n    }\n    else\n    {\n        foreach\
    \ (e; array)\n        {\n            if (e % 2 == 0)\n            {\n        \
    \        result[i] = e;\n                i++;\n            }\n        }\n    \
    \    foreach (e; array)\n        {\n            if (e % 2 == 1)\n            {\n\
    \                result[j] = e;\n                j--;\n            }\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zlysapb.d(19): Error: cannot implicitly convert expression `array.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zlysapb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
