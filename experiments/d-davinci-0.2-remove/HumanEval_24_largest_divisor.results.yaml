language: d
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    foreach(i; 2 .. n)\n    {\n        if(n\
    \ % i == 0)\n        {\n            largest_divisor = i;\n        }\n    }\n \
    \   return largest_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n)\n    {\n        if(n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. sqrt(n))\n    {\n        if\
    \ (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpum7gfi7r.d(9): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpum7gfi7r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160462
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 1) {\n        if (n % i == 0) {\n     \
    \       return i;\n        }\n        i--;\n    }\n    return 1;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpekz91ukn.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpekz91ukn.__unittest_L17_C1() [0x427a64]

    ??:? void tmpekz91ukn.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) \n    {\n        if (n % i == 0) \n\
    \        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqimcegjq.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpqimcegjq.__unittest_L19_C1() [0x427a60]

    ??:? void tmpqimcegjq.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i;\n    for (i = n - 1; i > 0; i--) \n    {\n        if (n % i\
    \ == 0) \n        {\n            return i;\n        }\n    }\n    return 0;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i;\n    for (i = n/2; i > 0; i--) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            return i;\n        }\n    }\n    return 1;\n}\n\
    unittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = 2;\n    while (i < n) \n    {\n        if (n % i == 0) \n\
    \        {\n            return n / i;\n        }\n        i += 1;\n    }\n   \
    \ return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    foreach(i; 2 .. n)\n    {\n        if\
    \ (n % i == 0)\n        {\n            largest_divisor = i;\n        }\n    }\n\
    \    return largest_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i;\n    for (i = n - 1; i >= 1; i--) \n    {\n        if (n %\
    \ i == 0) \n        {\n            return i;\n        }\n    }\n    return 1;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n - 1;\n    while (i > 0) \n    {\n        if (n % i == 0)\
    \ \n        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long max_divisor = 1;\n    foreach(i; 2 .. n)\n    {\n        if (n\
    \ % i == 0)\n        {\n            max_divisor = i;\n        }\n    }\n    return\
    \ max_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n   \
    \ assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 1 .. n)\n    {\n        if(n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n - 1;\n    while (i > 0) {\n        if (n % i == 0) {\n \
    \           return i;\n        }\n        i--;\n    }\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++)\n    {\n\
    \        if (n % i == 0)\n        {\n            largest_divisor = i;\n      \
    \  }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n - 1;\n    while (i > 0) \n    {\n        if (n % i == 0)\
    \ \n        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i;\n    for (i = n - 1; i > 0; i--) \n    {\n        if (n % i\
    \ == 0) \n        {\n            return i;\n        }\n    }\n    return 1;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i;\n    for (i = n - 1; i > 0; i--) \n    {\n        if (n % i\
    \ == 0) \n        {\n            return i;\n        }\n    }\n    return 0;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n)\n    {\n        if (n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n      \
    \  if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n \
    \   return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++)\n    {\n\
    \        if (n % i == 0)\n        {\n            largest_divisor = i;\n      \
    \  }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = 2;\n    while (i < n) \n    {\n        if (n % i == 0) \n\
    \        {\n            n = n / i;\n        } \n        else \n        {\n   \
    \         i = i + 1;\n        }\n    }\n    return i;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvpinuii3.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpvpinuii3.__unittest_L22_C1() [0x427a78]

    ??:? void tmpvpinuii3.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 1) \n    {\n        if (n % i == 0)\n \
    \           return i;\n        i--;\n    }\n    return 1;\n}\nunittest\n{\n  \
    \  alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n  \
    \  assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg1krc3w5.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpg1krc3w5.__unittest_L17_C1() [0x427a64]

    ??:? void tmpg1krc3w5.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n)\n    {\n        if(n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0)\n       \
    \     return i;\n        i++;\n    }\n    return 1;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdvd8bga9.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpdvd8bga9.__unittest_L16_C1() [0x427aaa]

    ??:? void tmpdvd8bga9.__modtest() [0x427b00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n)\n    {\n        if(n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n)\n    {\n        if (n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvv9ise_i.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpvv9ise_i.__unittest_L19_C1() [0x427a64]

    ??:? void tmpvv9ise_i.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = 2;\n    while (i < n) \n    {\n        if (n % i == 0) \n\
    \        {\n            return n / i;\n        }\n        i++;\n    }\n    return\
    \ 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) {\n        if (n % i == 0) {\n     \
    \       return i;\n        }\n        i--;\n    }\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyqog9e2s.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpyqog9e2s.__unittest_L17_C1() [0x427a60]

    ??:? void tmpyqog9e2s.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long max_divisor = 1;\n    for (long i = 2; i < n; i++)\n    {\n  \
    \      if (n % i == 0)\n        {\n            max_divisor = i;\n        }\n \
    \   }\n    return max_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = 2;\n    while (i < n) \n    {\n        if (n % i == 0) \n\
    \        {\n            return i;\n        }\n        i++;\n    }\n    return\
    \ 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph5dfis72.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmph5dfis72.__unittest_L19_C1() [0x427aaa]

    ??:? void tmph5dfis72.__modtest() [0x427b00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i <= n; i++)\n    {\n     \
    \   if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n \
    \   return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx73050ox.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpx73050ox.__unittest_L18_C1() [0x427a74]

    ??:? void tmpx73050ox.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i;\n    for (i = n - 1; i > 0; i--)\n    {\n        if (n % i\
    \ == 0)\n        {\n            return i;\n        }\n    }\n    return 1;\n}\n\
    unittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long max = n / 2;\n    for (long i = max; i > 0; i--) \n    {\n   \
    \     if (n % i == 0) \n        {\n            return i;\n        }\n    }\n \
    \   return -1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n   \
    \ assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++)\n    {\n\
    \        if (n % i == 0)\n        {\n            largest_divisor = i;\n      \
    \  }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n - 1;\n    while (i > 0) \n    {\n        if (n % i == 0)\
    \ \n        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i;\n    for (i = n - 1; i > 0; i--)\n    {\n        if (n % i\
    \ == 0)\n        {\n            return i;\n        }\n    }\n    return 0;\n}\n\
    unittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i <= n; i++) \n    {\n    \
    \    if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptscjhlfe.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmptscjhlfe.__unittest_L18_C1() [0x427a74]

    ??:? void tmptscjhlfe.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = 2;\n    while (i < n) \n    {\n        if (n % i == 0) \n\
    \        {\n            return n / i;\n        }\n        i++;\n    }\n    return\
    \ 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) {\n        if (n % i == 0) {\n     \
    \       return i;\n        }\n        i--;\n    }\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyqog9e2s.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpyqog9e2s.__unittest_L17_C1() [0x427a60]

    ??:? void tmpyqog9e2s.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = 2;\n    while (n % i != 0) i++;\n    return i;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu1355597.d(16): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpu1355597.__unittest_L12_C1() [0x427a58]

    ??:? void tmpu1355597.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i;\n    for (i = n - 1; i > 0; i--) \n    {\n        if (n % i\
    \ == 0) \n        {\n            return i;\n        }\n    }\n    return 0;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    foreach(i; 2 .. n)\n    {\n        if(n\
    \ % i == 0)\n        {\n            largest_divisor = i;\n        }\n    }\n \
    \   return largest_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n)\n    {\n        if(n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i <= n; i++) \n   \
    \ {\n        if (n % i == 0) \n        {\n            largest_divisor = i;\n \
    \       }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm9peik79.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpm9peik79.__unittest_L18_C1() [0x427a74]

    ??:? void tmpm9peik79.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n - 1;\n    while (i > 0) {\n        if (n % i == 0) {\n \
    \           return i;\n        }\n        i--;\n    }\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if ((n % i) == 0) \n        {\n            largest_divisor = i;\n   \
    \     }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) \n    {\n        if (n % i == 0) \n\
    \        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqimcegjq.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpqimcegjq.__unittest_L19_C1() [0x427a60]

    ??:? void tmpqimcegjq.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) {\n        if (n % i == 0) {\n     \
    \       return i;\n        }\n        i--;\n    }\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyqog9e2s.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpyqog9e2s.__unittest_L17_C1() [0x427a60]

    ??:? void tmpyqog9e2s.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n - 1;\n    while (i > 0) \n    {\n        if (n % i == 0)\
    \ \n        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    foreach(i; 2 .. n) \n    {\n       \
    \ if(n % i == 0) \n        {\n            largest_divisor = i;\n        }\n  \
    \  }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) {\n        if (n % i == 0) {\n     \
    \       return i;\n        }\n        i--;\n    }\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyqog9e2s.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpyqog9e2s.__unittest_L17_C1() [0x427a60]

    ??:? void tmpyqog9e2s.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvv9ise_i.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpvv9ise_i.__unittest_L19_C1() [0x427a64]

    ??:? void tmpvv9ise_i.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n - 1;\n    while (i > 0) \n    {\n        if (n % i == 0)\
    \ \n        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n) \n    {\n        if(n % i\
    \ == 0) \n        {\n            largest = i;\n        }\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n)\n    {\n        if (n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = 2;\n    while (i < n) \n    {\n        if (n % i == 0) \n\
    \        {\n            return n / i;\n        }\n        i++;\n    }\n    return\
    \ 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) {\n        if (n % i == 0) {\n     \
    \       return i;\n        }\n        i--;\n    }\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyqog9e2s.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpyqog9e2s.__unittest_L17_C1() [0x427a60]

    ??:? void tmpyqog9e2s.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long max_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n \
    \       if (n % i == 0) \n        {\n            max_divisor = i;\n        }\n\
    \    }\n    return max_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long d = 2;\n    while (n % d != 0) \n    {\n        d++;\n    }\n\
    \    return d;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n   \
    \ assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp57u79awb.d(19): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp57u79awb.__unittest_L15_C1() [0x427a58]

    ??:? void tmp57u79awb.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n - 1;\n    while (i > 0) \n    {\n        if (n % i == 0)\n\
    \            return i;\n        i--;\n    }\n    return 0;\n}\nunittest\n{\n \
    \   alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n \
    \   assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) \n    {\n        if (n % i == 0) \n\
    \        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqimcegjq.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpqimcegjq.__unittest_L19_C1() [0x427a60]

    ??:? void tmpqimcegjq.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n)\n    {\n        if (n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long max_divisor = 1;\n    for (long d = 2; d < n; d++) \n    {\n \
    \       if (n % d == 0) \n        {\n            max_divisor = d;\n        }\n\
    \    }\n    return max_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++)\n    {\n\
    \        if (n % i == 0)\n        {\n            largest_divisor = i;\n      \
    \  }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) {\n        if (n % i == 0) return i;\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr25juz0a.d(19): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpr25juz0a.__unittest_L15_C1() [0x427a60]

    ??:? void tmpr25juz0a.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n - 1;\n    while (i > 0) \n    {\n        if (n % i == 0)\
    \ \n        {\n            return i;\n        }\n        i--;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long i = n;\n    while (i > 0) {\n        if (n % i == 0) {\n     \
    \       return i;\n        }\n        i--;\n    }\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyqog9e2s.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpyqog9e2s.__unittest_L17_C1() [0x427a60]

    ??:? void tmpyqog9e2s.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    foreach(i; 2 .. n)\n    {\n        if(n % i\
    \ == 0)\n            largest = i;\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long max_divisor = 1;\n    for (long i = 2; i <= n / 2; i++) \n   \
    \ {\n        if (n % i == 0) \n        {\n            max_divisor = i;\n     \
    \   }\n    }\n    return max_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160464
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            largest = i;\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i <= n; i++) \n    {\n    \
    \    if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptscjhlfe.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmptscjhlfe.__unittest_L18_C1() [0x427a74]

    ??:? void tmptscjhlfe.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long max = 0;\n    for (long i = 1; i < n; i++)\n    {\n        if\
    \ (n % i == 0)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160464
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest = 0;\n    for (long i = 1; i < n; i++) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    foreach(i; 2 .. n)\n    {\n        if(n\
    \ % i == 0)\n        {\n            largest_divisor = i;\n        }\n    }\n \
    \   return largest_divisor;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n        \n*/\nlong largest_divisor(long n)\
    \ \n{\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_divisor = i;\n     \
    \   }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160463
