name: HumanEval_140_fix_spaces
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace\
  \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
  \ spaces, \n    then replace all consecutive spaces with - \n    \n            \
  \        \n*/\nstring fix_spaces(string text) \n"
tests: "unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
  Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
  );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
  );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
  \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      else if(count == 2)\n            {\n                result ~= '-';\n  \
    \          }\n        }\n        else\n        {\n            result ~= c;\n \
    \           count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            count++;\n            if(count == 1)\n          \
    \      result ~= '_';\n            else if(count > 2)\n                result\
    \ ~= '-';\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            count++;\n            if(count == 1)\n          \
    \      result ~= '_';\n            else if(count > 2)\n                result\
    \ ~= '-';\n        }\n        else\n        {\n            count = 0;\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            count++;\n            if(count == 1)\n          \
    \      result ~= '_';\n            else if(count == 2)\n                result\
    \ ~= '-';\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            spaces++;\n            if(spaces > 2)\n    \
    \        {\n                result ~= '-';\n                spaces = 0;\n    \
    \        }\n        }\n        else\n        {\n            result ~= c;\n   \
    \         spaces = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int count = 0;\n    for (int i = 0; i < text.length; i++)\
    \ \n    {\n        if (text[i] == ' ') \n        {\n            count++;\n   \
    \         if (count == 1) \n            {\n                result ~= \"_\";\n\
    \            }\n            else if (count > 2) \n            {\n            \
    \    result ~= \"-\";\n            }\n        }\n        else \n        {\n  \
    \          result ~= text[i];\n            count = 0;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    int consecutive_spaces = 0;\n\
    \    for (int i = 0; i < text.length; i++) \n    {\n        if (text[i] == ' ')\
    \ \n        {\n            consecutive_spaces++;\n            if (consecutive_spaces\
    \ == 1) \n            {\n                result += \"_\";\n            }\n   \
    \         else if (consecutive_spaces == 2) \n            {\n                result\
    \ += \"-\";\n            }\n        }\n        else \n        {\n            consecutive_spaces\
    \ = 0;\n            result += text[i];\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    bool consecutive = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(consecutive)\n       \
    \     {\n                result ~= '-';\n            }\n            else\n   \
    \         {\n                result ~= '_';\n                consecutive = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            consecutive = false;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    string[] words = text.split(\" \");\n    foreach(word;\
    \ words)\n    {\n        if(word.length > 0)\n        {\n            result ~=\
    \ word ~ \" \";\n        }\n    }\n    return result.replace(\" \", \"_\").replace(\"\
    __\", \"-\");\n}", "{\n    auto result = text.replace(\" \", \"_\");\n    result\
    \ = result.replace(\"__\", \"_\");\n    result = result.replace(\"___\", \"_\"\
    );\n    result = result.replace(\"____\", \"_\");\n    result = result.replace(\"\
    _____\", \"_\");\n    result = result.replace(\"______\", \"_\");\n    result\
    \ = result.replace(\"_______\", \"_\");\n    result = result.replace(\"________\"\
    , \"_\");\n    result = result.replace(\"_________\", \"_\");\n    result = result.replace(\"\
    __________\", \"_\");\n    result = result.replace(\"___________\", \"_\");\n\
    \    result = result.replace(\"____________\", \"_\");\n    result = result.replace(\"\
    _____________\", \"_\");\n    result = result.replace(\"______________\", \"_\"\
    );\n    result = result.replace(\"_______________\", \"_\");\n    result = result.replace(\"\
    ________________\", \"_\");\n    result = result.replace(\"_________________\"\
    , \"_\");\n    result = result.replace(\"__________________\", \"_\");\n    result\
    \ = result.replace(\"___________________\", \"_\");\n    result = result.replace(\"\
    ____________________\", \"_\");\n    result = result.replace(\"_____________________\"\
    , \"_\");\n    result = result.replace(\"______________________\", \"_\");\n \
    \   result = result.replace(\"_______________________\", \"_\");\n    result =\
    \ result.replace(\"________________________\", \"_\");\n    result = result.replace(\"\
    _________________________\", \"_\");\n    result = result.replace(\"__________________________\"\
    , \"_\");\n    result = result.replace(\"___________________________\", \"_\"\
    );\n    result = result.replace(\"____________________________\", \"_\");\n  \
    \  result = result.replace(\"_____________________________\", \"_\");\n    result\
    \ = result.replace(\"______________________________\", \"_\");\n    result = result.replace(\"\
    _______________________________\", \"_\");\n    result = result.replace(\"________________________________\"\
    , \"_\");\n    result = result.replace(\"_________________________________\",\
    \ \"_\");\n    result = result.replace(\"__________________________________\"\
    , \"_\");\n    result = result.replace(\"___________________________________\"\
    , \"_\");\n    result = result.replace(\"____________________________________\"\
    , \"_\");\n    result = result.replace(\"_____________________________________\"\
    , \"_\");\n    result = result.replace(\"______________________________________\"\
    , \"_\");\n    result = result.replace(\"_______________________________________\"\
    , \"_\");\n    result = result.replace(\"________________________________________\"\
    , \"_\");\n", "{\n    string result;\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n                result ~= '_';\n            else if(count == 2)\n   \
    \             result ~= '-';\n        }\n        else\n        {\n           \
    \ count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count >\
    \ 2)\n            {\n                result ~= '-';\n                count = 0;\n\
    \            }\n            else\n            {\n                result ~= '_';\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    bool prev_space = false;\n    foreach(c; text)\n    {\n       \
    \ if(c == ' ')\n        {\n            if(prev_space)\n            {\n       \
    \         result ~= '-';\n            }\n            else\n            {\n   \
    \             result ~= '_';\n            }\n            prev_space = true;\n\
    \        }\n        else\n        {\n            result ~= c;\n            prev_space\
    \ = false;\n        }\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n\
    \        {\n            spaces++;\n            if(spaces > 2)\n            {\n\
    \                result ~= '-';\n                spaces = 0;\n            }\n\
    \        }\n        else\n        {\n            if(spaces > 0)\n            {\n\
    \                result ~= '_';\n                spaces = 0;\n            }\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            count++;\n            if(count == 1)\n     \
    \       {\n                result ~= '_';\n            }\n            else if(count\
    \ == 2)\n            {\n                result ~= '-';\n            }\n      \
    \  }\n        else\n        {\n            count = 0;\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            count++;\n            if(count == 1)\n            {\n           \
    \     result ~= '_';\n            }\n            else if(count > 2)\n        \
    \    {\n                result ~= '-';\n            }\n        }\n        else\n\
    \        {\n            result ~= c;\n            count = 0;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result;\n    bool space_found = false;\n\
    \    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n         \
    \   if(space_found)\n            {\n                result ~= '-';\n         \
    \   }\n            else\n            {\n                result ~= '_';\n     \
    \           space_found = true;\n            }\n        }\n        else\n    \
    \    {\n            result ~= c;\n            space_found = false;\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    int count =\
    \ 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n         \
    \   count++;\n            if(count == 1)\n            {\n                result\
    \ ~= '_';\n            }\n            else if(count > 2)\n            {\n    \
    \            result ~= '-';\n            }\n        }\n        else\n        {\n\
    \            count = 0;\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count == 1)\n            {\n                result ~= '_';\n       \
    \     }\n            else if(count == 2)\n            {\n                result\
    \ ~= '-';\n            }\n        }\n        else\n        {\n            count\
    \ = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            count = 0;\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    bool consecutive = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(consecutive)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n            }\n            consecutive =\
    \ true;\n        }\n        else\n        {\n            result ~= c;\n      \
    \      consecutive = false;\n        }\n    }\n    return result;\n}", "{\n  \
    \  string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n  \
    \      if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            count++;\n            if(count == 1)\n     \
    \       {\n                result ~= '_';\n            }\n            else if(count\
    \ == 2)\n            {\n                result ~= '-';\n            }\n      \
    \  }\n        else\n        {\n            result ~= c;\n            count = 0;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    int count\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     if(count == 0)\n            {\n                result ~= '_';\n        \
    \        count = 1;\n            }\n            else if(count == 1)\n        \
    \    {\n                result ~= '-';\n                count = 2;\n         \
    \   }\n            else\n            {\n                count = 2;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    count = 0;\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            count++;\n            if(count == 1)\n          \
    \  {\n                result ~= '_';\n            }\n            else if(count\
    \ == 2)\n            {\n                result ~= '-';\n            }\n      \
    \  }\n        else\n        {\n            result ~= c;\n            count = 0;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    int consecutive_spaces\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     consecutive_spaces++;\n            if(consecutive_spaces == 1)\n       \
    \         result ~= '_';\n            else if(consecutive_spaces == 2)\n     \
    \           result ~= '-';\n        }\n        else\n        {\n            consecutive_spaces\
    \ = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ == 1)\n                result ~= '_';\n            else if(spaces > 2)\n   \
    \             result ~= '-';\n        }\n        else\n        {\n           \
    \ spaces = 0;\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"___\", \"-\");\n    return result;\n\
    }", "{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n                result ~= '_';\n            else if(count == 2)\n      \
    \          result ~= '-';\n        }\n        else\n        {\n            result\
    \ ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 2)\n            {\n                result ~= '-';\n                count = 0;\n\
    \            }\n        }\n        else\n        {\n            if(count == 1)\n\
    \            {\n                result ~= '_';\n                count = 0;\n \
    \           }\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ > 2)\n            {\n                result ~= '-';\n                count =\
    \ 0;\n            }\n            else\n            {\n                result ~=\
    \ '_';\n            }\n        }\n        else\n        {\n            result\
    \ ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    bool consecutive_spaces = false;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            if(consecutive_spaces)\n\
    \            {\n                result ~= '-';\n            }\n            else\n\
    \            {\n                result ~= '_';\n                consecutive_spaces\
    \ = true;\n            }\n        }\n        else\n        {\n            result\
    \ ~= c;\n            consecutive_spaces = false;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count == 2)\n            {\n                result ~= '-';\n       \
    \         count = 0;\n            }\n        }\n        else\n        {\n    \
    \        if(count == 1)\n            {\n                result ~= '_';\n     \
    \           count = 0;\n            }\n            result ~= c;\n        }\n \
    \   }\n    return result;\n}", "{\n    string result;\n    int i = 0;\n    int\
    \ len = text.length;\n    int count = 0;\n    while (i < len)\n    {\n       \
    \ if (text[i] == ' ')\n        {\n            if (count == 0)\n            {\n\
    \                result ~= '_';\n                count++;\n            }\n   \
    \         else if (count == 1)\n            {\n                result ~= '-';\n\
    \                count++;\n            }\n            else\n            {\n  \
    \              count++;\n            }\n        }\n        else\n        {\n \
    \           result ~= text[i];\n            count = 0;\n        }\n        i++;\n\
    \    }\n    return result;\n}", "{\n    auto result = text.replace(\" \", \"_\"\
    );\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    ___\", \"-\");\n    return result;\n}", "{\n    import std.algorithm : replace,\
    \ count;\n    import std.range : zip;\n    import std.typecons : tuple;\n    import\
    \ std.conv : to;\n    import std.string : toStringz;\n    import std.array : array;\n\
    \    import std.math : max;\n    import std.range : iota;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n", "{\n    string result;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            result ~= '_';\n        }\n        else\n  \
    \      {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"___\", \"-\");\n    return result;\n\
    }", "{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"\
    __\", \"-\");\n    return result;\n}", "{\n    string result;\n    int count =\
    \ 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n         \
    \   count++;\n            if(count > 2)\n            {\n                result\
    \ ~= '-';\n                count = 0;\n            }\n            else\n     \
    \       {\n                result ~= '_';\n            }\n        }\n        else\n\
    \        {\n            count = 0;\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result;\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count == 1)\n                result ~= '_';\n            else if(count\
    \ == 2)\n                result ~= '-';\n        }\n        else\n        {\n\
    \            count = 0;\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    auto result = text.idup;\n    auto i = 0;\n    auto len\
    \ = text.length;\n    auto count = 0;\n    while (i < len)\n    {\n        if\
    \ (result[i] == ' ')\n        {\n            count++;\n            if (count >\
    \ 2)\n            {\n                result[i] = '-';\n            }\n       \
    \     else\n            {\n                result[i] = '_';\n            }\n \
    \       }\n        else\n        {\n            count = 0;\n        }\n      \
    \  i++;\n    }\n    return result;\n}", "{\n    string result;\n    int count\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     if(count == 0)\n            {\n                result ~= '_';\n        \
    \        count++;\n            }\n            else if(count == 1)\n          \
    \  {\n                result ~= '-';\n                count++;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            count\
    \ = 0;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n   \
    \     {\n            count++;\n            if(count == 1)\n            {\n   \
    \             result ~= '_';\n            }\n            else if(count > 2)\n\
    \            {\n                result ~= '-';\n            }\n        }\n   \
    \     else\n        {\n            count = 0;\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    bool\
    \ space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            if(space)\n            {\n                result ~= '-';\n      \
    \      }\n            else\n            {\n                result ~= '_';\n  \
    \              space = true;\n            }\n        }\n        else\n       \
    \ {\n            result ~= c;\n            space = false;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    int count = 0;\n \
    \   foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n\
    \            if(count == 1)\n            {\n                result ~= '_';\n \
    \           }\n            else if(count == 2)\n            {\n              \
    \  result ~= '-';\n            }\n        }\n        else\n        {\n       \
    \     result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      else if(count == 2)\n            {\n                result ~= '-';\n  \
    \          }\n        }\n        else\n        {\n            result ~= c;\n \
    \           count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int consecutive_spaces = 0;\n    for (int i = 0; i < text.length;\
    \ i++) \n    {\n        if (text[i] == ' ') \n        {\n            consecutive_spaces++;\n\
    \            if (consecutive_spaces == 1) \n            {\n                result\
    \ += '_';\n            }\n            else if (consecutive_spaces > 2) \n    \
    \        {\n                result += '-';\n            }\n        }\n       \
    \ else \n        {\n            consecutive_spaces = 0;\n            result +=\
    \ text[i];\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            if(space_found)\n            {\n                result\
    \ ~= '-';\n            }\n            else\n            {\n                result\
    \ ~= '_';\n                space_found = true;\n            }\n        }\n   \
    \     else\n        {\n            result ~= c;\n            space_found = false;\n\
    \        }\n    }\n    return result;\n}", "{\n    import std.algorithm : replace,\
    \ count;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : take;\n    import std.string : join;\n    import std.typecons :\
    \ tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n   ", "{\n    string result = \"\";\n    int\
    \ consecutive_spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n\
    \        {\n            consecutive_spaces++;\n            if(consecutive_spaces\
    \ == 1)\n            {\n                result ~= \"_\";\n            }\n    \
    \        else if(consecutive_spaces == 2)\n            {\n                result\
    \ ~= \"-\";\n            }\n        }\n        else\n        {\n            consecutive_spaces\
    \ = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    int space_count = 0;\n    foreach(c; text)\n    {\n \
    \       if(c == ' ')\n        {\n            space_count++;\n            if(space_count\
    \ > 2)\n                continue;\n            else\n                result ~=\
    \ '_';\n        }\n        else\n        {\n            space_count = 0;\n   \
    \         result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    bool space = false;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            if(space)\n            {\n                result\
    \ ~= '-';\n            }\n            else\n            {\n                result\
    \ ~= '_';\n                space = true;\n            }\n        }\n        else\n\
    \        {\n            result ~= c;\n            space = false;\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    int count =\
    \ 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n         \
    \   count++;\n            if(count == 2)\n            {\n                result\
    \ ~= '-';\n                count = 0;\n            }\n        }\n        else\n\
    \        {\n            if(count == 1)\n            {\n                result\
    \ ~= '_';\n                count = 0;\n            }\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    auto result = text.replace(\"\
    \ \", \"_\");\n    result = result.replace(\"_ _\", \"-\");\n    return result;\n\
    }", "{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n                result ~= '_';\n            else if(count == 2)\n      \
    \          result ~= '-';\n        }\n        else\n        {\n            count\
    \ = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"\
    __\", \"-\");\n    return result;\n}", "{\n    string result;\n    int count =\
    \ 0;\n    for (int i = 0; i < text.length; i++) \n    {\n        if (text[i] ==\
    \ ' ') \n        {\n            count++;\n            if (count == 1) \n     \
    \       {\n                result ~= '_';\n            }\n            else if\
    \ (count == 2) \n            {\n                result ~= '-';\n            }\n\
    \        }\n        else \n        {\n            count = 0;\n            result\
    \ ~= text[i];\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    int i = 0;\n    int spaces = 0;\n    while (i < text.length)\n\
    \    {\n        if (text[i] == ' ')\n        {\n            spaces++;\n      \
    \      if (spaces > 2)\n            {\n                result += '-';\n      \
    \          spaces = 0;\n            }\n        }\n        else\n        {\n  \
    \          result += text[i];\n            spaces = 0;\n        }\n        i++;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    int count =\
    \ 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n         \
    \   count++;\n            if(count == 1)\n            {\n                result\
    \ ~= '_';\n            }\n            else if(count == 2)\n            {\n   \
    \             result ~= '-';\n            }\n        }\n        else\n       \
    \ {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ > 2)\n            {\n                result ~= '-';\n                count =\
    \ 0;\n            }\n            else\n            {\n                result ~=\
    \ '_';\n            }\n        }\n        else\n        {\n            count =\
    \ 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    bool consecutive = false;\n    for (int i = 0; i < text.length;\
    \ i++) \n    {\n        if (text[i] == ' ') \n        {\n            if (consecutive)\
    \ \n            {\n                result ~= '-';\n            } \n          \
    \  else \n            {\n                result ~= '_';\n                consecutive\
    \ = true;\n            }\n        } \n        else \n        {\n            result\
    \ ~= text[i];\n            consecutive = false;\n        }\n    }\n    return\
    \ result;\n}", "{\n    auto result = text.replace(\" \", \"_\");\n    result =\
    \ result.replace(\"__\", \"-\");\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            count++;\n            if(count == 1)\n          \
    \  {\n                result ~= '_';\n            }\n            else if(count\
    \ == 2)\n            {\n                result ~= '-';\n            }\n      \
    \  }\n        else\n        {\n            count = 0;\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            count++;\n            if(count == 1)\n            {\n           \
    \     result ~= '_';\n            }\n            else if(count > 2)\n        \
    \    {\n                result ~= '-';\n            }\n        }\n        else\n\
    \        {\n            count = 0;\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    int consecutive_spaces\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     consecutive_spaces++;\n            if(consecutive_spaces == 1)\n       \
    \     {\n                result ~= '_';\n            }\n            else if(consecutive_spaces\
    \ == 2)\n            {\n                result ~= '-';\n            }\n      \
    \  }\n        else\n        {\n            consecutive_spaces = 0;\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}", "{\n    auto result\
    \ = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n\
    \    result = result.replace(\"___\", \"-\");\n    return result;\n}", "{\n  \
    \  string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n  \
    \      if(c == ' ')\n        {\n            count++;\n            if(count > 2)\n\
    \            {\n                result ~= '-';\n                count = 0;\n \
    \           }\n            else\n            {\n                result ~= '_';\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(immutable ch; text)\n    {\n        if(ch == ' ')\n   \
    \     {\n            if(result.length > 0 && result[$-1] == '_')\n           \
    \ {\n                result ~= '-';\n            }\n            else\n       \
    \     {\n                result ~= '_';\n            }\n        }\n        else\n\
    \        {\n            result ~= ch;\n        }\n    }\n    return result;\n}",
  "{\n    string result;\n    bool consecutive = false;\n    foreach(c; text)\n  \
    \  {\n        if(c == ' ')\n        {\n            if(consecutive)\n         \
    \   {\n                result ~= '-';\n            }\n            else\n     \
    \       {\n                result ~= '_';\n                consecutive = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            consecutive = false;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n       \
    \ if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n\
    \                result ~= '_';\n            else if(count == 2)\n           \
    \     result ~= '-';\n        }\n        else\n        {\n            count =\
    \ 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count > 2)\n            {\n                result ~= '-';\n      \
    \      }\n        }\n        else\n        {\n            result ~= c;\n     \
    \       count = 0;\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n     \
    \   {\n            count++;\n            if(count == 1)\n                result\
    \ ~= '_';\n            else if(count == 2)\n                result ~= '-';\n \
    \       }\n        else\n        {\n            count = 0;\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n   \
    \     {\n            count++;\n            if(count == 1)\n            {\n   \
    \             result ~= '_';\n            }\n            else if(count > 2)\n\
    \            {\n                result ~= '-';\n            }\n        }\n   \
    \     else\n        {\n            result ~= c;\n            count = 0;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int\
    \ space_count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n      \
    \  {\n            space_count++;\n            if(space_count == 1)\n         \
    \   {\n                result ~= '_';\n            }\n            else if(space_count\
    \ == 2)\n            {\n                result ~= '-';\n            }\n      \
    \  }\n        else\n        {\n            space_count = 0;\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n   \
    \     {\n            count++;\n            if(count == 1)\n            {\n   \
    \             result ~= '_';\n            }\n            else if(count == 2)\n\
    \            {\n                result ~= '-';\n            }\n        }\n   \
    \     else\n        {\n            count = 0;\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int\
    \ spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            spaces++;\n            if(spaces > 2)\n            {\n          \
    \      result ~= '-';\n                spaces = 0;\n            }\n        }\n\
    \        else\n        {\n            result ~= c;\n            spaces = 0;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    int count\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     count++;\n            if(count == 1)\n                result ~= '_';\n \
    \           else if(count == 2)\n                result ~= '-';\n        }\n \
    \       else\n        {\n            result ~= c;\n            count = 0;\n  \
    \      }\n    }\n    return result;\n}", "{\n    auto result = text.replace(\"\
    \ \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    ___\", \"-\");\n    return result;\n}", "{\n    string result;\n    int count\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     count++;\n            if(count == 1)\n                result ~= '_';\n \
    \           else if(count == 2)\n                result ~= '-';\n        }\n \
    \       else\n        {\n            result ~= c;\n            count = 0;\n  \
    \      }\n    }\n    return result;\n}", "{\n    auto result = text.replace(\"\
    \ \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    ___\", \"-\");\n    return result;\n}", "{\n    string result = \"\";\n    int\
    \ count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n \
    \           count++;\n            if(count == 1)\n            {\n            \
    \    result ~= '_';\n            }\n            else if(count > 2)\n         \
    \   {\n                result ~= '-';\n            }\n        }\n        else\n\
    \        {\n            count = 0;\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    import std.algorithm : replace, replaceInPlace;\n\
    \    import std.range : join;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.string : split;\n    import std.typecons : tuple;\n  \
    \  import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : T", "{\n    string result = \"\";\n    int count =\
    \ 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n         \
    \   count++;\n            if(count > 2)\n            {\n                result\
    \ ~= '-';\n                count = 0;\n            }\n            else\n     \
    \       {\n                result ~= '_';\n            }\n        }\n        else\n\
    \        {\n            result ~= c;\n            count = 0;\n        }\n    }\n\
    \    return result;\n}", "{\n    auto result = text.replace(\" \", \"_\");\n \
    \   result = result.replace(\"__\", \"-\");\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            count++;\n            if(count == 1)\n     \
    \       {\n                result ~= '_';\n            }\n            else if(count\
    \ > 2)\n            {\n                result ~= '-';\n            }\n       \
    \ }\n        else\n        {\n            count = 0;\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    int count\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     count++;\n            if(count == 1)\n                result ~= '_';\n \
    \           else if(count > 2)\n                result ~= '-';\n        }\n  \
    \      else\n        {\n            result ~= c;\n            count = 0;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int\
    \ count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n \
    \           count++;\n            if(count == 1)\n            {\n            \
    \    result ~= '_';\n            }\n            else if(count == 2)\n        \
    \    {\n                result ~= '-';\n            }\n        }\n        else\n\
    \        {\n            count = 0;\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    int count = 0;\n \
    \   foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n\
    \            if(count > 2)\n            {\n                result ~= '-';\n  \
    \              count = 0;\n            }\n            else\n            {\n  \
    \              result ~= '_';\n            }\n        }\n        else\n      \
    \  {\n            result ~= c;\n            count = 0;\n        }\n    }\n   \
    \ return result;\n}", "{\n    auto result = text.replace(\" \", \"_\");\n    result\
    \ = result.replace(\"__\", \"_\");\n    result = result.replace(\"__\", \"_\"\
    );\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.",
  "{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n      \
    \  if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n\
    \                result ~= '_';\n            else if(count == 2)\n           \
    \     result ~= '-';\n        }\n        else\n        {\n            count =\
    \ 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count >\
    \ 2)\n            {\n                result ~= \"-\";\n                count =\
    \ 0;\n            }\n            else\n            {\n                result ~=\
    \ \"_\";\n            }\n        }\n        else\n        {\n            result\
    \ ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int consecutive_spaces = 0;\n    foreach(c; text)\
    \ \n    {\n        if(c == ' ') \n        {\n            consecutive_spaces++;\n\
    \            if(consecutive_spaces == 1) \n            {\n                result\
    \ ~= '_';\n            }\n            else if(consecutive_spaces == 2) \n    \
    \        {\n                result ~= '-';\n            }\n        }\n       \
    \ else \n        {\n            consecutive_spaces = 0;\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(immutable\
    \ c; text)\n    {\n        if(c == ' ')\n        {\n            if(result.back\
    \ == '_')\n            {\n                result ~= '-';\n            }\n    \
    \        else\n            {\n                result ~= '_';\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}", "{\n    import std.algorithm : replace, replaceInPlace;\n\
    \    import std.range : filter;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.string : split;\n    import std.typecons : tuple;\n  \
    \  import std.range : map;\n    import std.range : zip;\n    import std.range\
    \ : chain;\n    import std.range : cycle;\n    import std.range : take;\n    import\
    \ std.range : drop;\n    import std.range : takeExactly;\n    import std.range\
    \ : dropExactly;\n    import std.range : takeExactly;\n    import std.range :\
    \ dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n\
    \    import std.range : takeExactly;\n    import std.range : dropExactly;\n  \
    \  import std.range : takeExactly;\n    import std.range : dropExactly;\n    import\
    \ std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range\
    \ : takeExactly;\n    import std.range : dropExactly;\n    import std.range :\
    \ takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n\
    \    import std.range : dropExactly;\n    import std.range : takeExactly;\n  \
    \  import std.range : dropExactly;\n    import std.range : takeExactly;\n    import\
    \ std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range\
    \ : dropExactly;\n    import std.range : takeExactly;\n    import std.range :\
    \ dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n\
    \    import std.range : takeExactly;\n    import std.range : dropExactly;\n  \
    \  import std.range : takeExactly;\n    import std.range : dropExactly;\n    import\
    \ std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range\
    \ : takeExactly;\n    import std.range : dropExactly;\n    import std.range :\
    \ takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n\
    \    import std.range", "{\n    import std.algorithm : replace, replaceInPlace;\n\
    \    import std.range : filter;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.string : toStringz;\n    import std.typecons : tuple;\n\
    \    import std.range : take;\n    import std.range : drop;\n    import std.range\
    \ : zip;\n    import std.range : cycle;\n    import std.range : retro;\n    import\
    \ std.range : retroCycle;\n    import std.range : retroZip;\n    import std.range\
    \ : retroFilter;\n    import std.range : retroMap;\n    import std.range : retroTake;\n\
    \    import std.range : retroDrop;\n    import std.range : retroChunks;\n    import\
    \ std.range : retroChunksOf;\n    import std.range : retroChunksUntil;\n    import\
    \ std.range : retroChunksWhile;\n    import std.range : retroFilter!\"a == ' '\"\
    ;\n    import std.range : retroMap!\"a == ' ' ? '_' : a\";\n    import std.range\
    \ : retroTake!\"a == ' '\";\n    import std.range : retroDrop!\"a == ' '\";\n\
    \    import std.range : retroChunks!\"a == ' '\";\n    import std.range : retroChunksOf!\"\
    a == ' '\";\n    import std.range : retroChunksUntil!\"a == ' '\";\n    import\
    \ std.range : retroChunksWhile!\"a == ' '\";\n    import std.range : retroFilter!\"\
    a == ' '\";\n    import std.range : retroMap!\"a == ' ' ? '_' : a\";\n    import\
    \ std.range : retroTake!\"a == ' '\";\n    import std.range : retroDrop!\"a ==\
    \ ' '\";\n    import std.range : retroChunks!\"a == ' '\";\n    import std.range\
    \ : retroChunksOf!\"a == ' '\";\n    import std.range : retroChunksUntil!\"a ==\
    \ ' '\";\n    import std.range : retroChunksWhile!\"a == ' '\";\n    import std.range\
    \ : retroFilter!\"a == ' '\";\n    import std.range : retroMap!\"a == ' '", "{\n\
    \    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count >\
    \ 2)\n            {\n                result ~= '-';\n                count = 0;\n\
    \            }\n            else\n            {\n                result ~= '_';\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            count++;\n            if(count == 1)\n          \
    \      result ~= '_';\n            else if(count == 2)\n                result\
    \ ~= '-';\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    bool space_found = false;\n    foreach(c; text)\n    {\n      \
    \  if(c == ' ')\n        {\n            if(space_found)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space_found = true;\n        \
    \    }\n        }\n        else\n        {\n            result ~= c;\n       \
    \     space_found = false;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n   \
    \     if(c == ' ')\n        {\n            count++;\n            if(count > 2)\n\
    \            {\n                result ~= '-';\n                count = 0;\n \
    \           }\n            else\n            {\n                result ~= '_';\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            count++;\n            if(count > 2)\n      \
    \      {\n                result ~= '-';\n                count = 0;\n       \
    \     }\n            else\n            {\n                result ~= '_';\n   \
    \         }\n        }\n        else\n        {\n            result ~= c;\n  \
    \          count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    int n = text.length;\n    int i = 0;\n    while (i < n) \n    {\n\
    \        if (text[i] == ' ') \n        {\n            result ~= '_';\n       \
    \     int j = i + 1;\n            while (j < n && text[j] == ' ')\n          \
    \      j++;\n            if (j - i > 2)\n                result ~= '-';\n    \
    \        i = j;\n        } \n        else \n        {\n            result ~= text[i];\n\
    \            i++;\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n     \
    \   {\n            count++;\n            if(count == 1)\n                result\
    \ ~= '_';\n            else if(count == 2)\n                result ~= '-';\n \
    \       }\n        else\n        {\n            count = 0;\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n   \
    \     {\n            count++;\n            if(count == 1)\n            {\n   \
    \             result ~= '_';\n            }\n            else if(count > 2)\n\
    \            {\n                result ~= '-';\n            }\n        }\n   \
    \     else\n        {\n            result ~= c;\n            count = 0;\n    \
    \    }\n    }\n    return result;\n}", "{\n    auto result = text.replace(\" \"\
    , \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.",
  "{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"___\", \"-\");\n    return result;\n\
    }", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      else if(count > 2)\n            {\n                result ~= '-';\n   \
    \         }\n        }\n        else\n        {\n            count = 0;\n    \
    \        result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            spaces++;\n            if(spaces > 2)\n    \
    \        {\n                result ~= '-';\n                spaces = 0;\n    \
    \        }\n        }\n        else\n        {\n            result ~= c;\n   \
    \         spaces = 0;\n        }\n    }\n    return result;\n}", "{\n    // replace\
    \ all spaces with underscores\n    text = text.replace(\" \", \"_\");\n    //\
    \ replace all consecutive spaces with -\n    text = text.replace(\"_+\", \"-\"\
    );\n    return text;\n}", "{\n    string result = \"\";\n    int spaces = 0;\n\
    \    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n\
    \            if(spaces > 2)\n            {\n                result ~= \"-\";\n\
    \                spaces = 0;\n            }\n        }\n        else\n       \
    \ {\n            result ~= c;\n            spaces = 0;\n        }\n    }\n   \
    \ return result;\n}", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count > 2)\n            {\n                result ~= '-';\n        \
    \        count = 0;\n            }\n            else\n            {\n        \
    \        result ~= '_';\n            }\n        }\n        else\n        {\n \
    \           result ~= c;\n            count = 0;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count > 2)\n            {\n                result ~= '-';\n        \
    \        count = 0;\n            }\n            else\n            {\n        \
    \        result ~= '_';\n            }\n        }\n        else\n        {\n \
    \           result ~= c;\n            count = 0;\n        }\n    }\n    return\
    \ result;\n}", "{\n    auto result = text.idup;\n    size_t i = 0;\n    while\
    \ (i < result.length)\n    {\n        if (result[i] == ' ')\n        {\n     \
    \       result[i] = '_';\n            if (i + 1 < result.length && result[i +\
    \ 1] == ' ')\n            {\n                result[i] = '-';\n              \
    \  while (i + 1 < result.length && result[i + 1] == ' ')\n                {\n\
    \                    result.remove(i + 1);\n                }\n            }\n\
    \        }\n        i++;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            count++;\n            if(count == 1)\n          \
    \  {\n                result ~= '_';\n            }\n            else if(count\
    \ > 2)\n            {\n                result ~= '-';\n            }\n       \
    \ }\n        else\n        {\n            count = 0;\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    int count\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     count++;\n            if(count == 1)\n                result ~= '_';\n \
    \           else if(count > 2)\n                result ~= '-';\n        }\n  \
    \      else\n        {\n            result ~= c;\n            count = 0;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int\
    \ spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            spaces++;\n            if(spaces == 1)\n                result ~=\
    \ '_';\n            else if(spaces == 2)\n                result ~= '-';\n   \
    \     }\n        else\n        {\n            spaces = 0;\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result;\n  \
    \  int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n       \
    \ {\n            count++;\n            if(count == 1)\n                result\
    \ ~= '_';\n            else if(count > 2)\n                result ~= '-';\n  \
    \      }\n        else\n        {\n            count = 0;\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result;\n  \
    \  int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n       \
    \ {\n            count++;\n            if(count == 1)\n                result\
    \ ~= '_';\n            else if(count == 2)\n                result ~= '-';\n \
    \       }\n        else\n        {\n            count = 0;\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n   \
    \     {\n            count++;\n            if(count == 1)\n            {\n   \
    \             result ~= '_';\n            }\n            else if(count == 2)\n\
    \            {\n                result ~= '-';\n            }\n        }\n   \
    \     else\n        {\n            count = 0;\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    bool\
    \ consecutive = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n  \
    \      {\n            if(consecutive)\n            {\n                result ~=\
    \ '-';\n            }\n            else\n            {\n                result\
    \ ~= '_';\n            }\n            consecutive = true;\n        }\n       \
    \ else\n        {\n            result ~= c;\n            consecutive = false;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    int count\
    \ = 0;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n  \
    \          count++;\n            if(count == 1)\n                result ~= '_';\n\
    \            else if(count == 2)\n                result ~= '-';\n        }\n\
    \        else\n        {\n            result ~= c;\n            count = 0;\n \
    \       }\n    }\n    return result;\n}", "{\n    import std.algorithm : replace,\
    \ replaceInPlace;\n    import std.range : join;\n    import std.array : array;\n\
    \    import std.conv : to;\n    import std.string : split;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleOf;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleOf;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tupleOf;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tupleOf;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tupleOf;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tupleOf;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tupleOf;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleOf;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleOf;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tupleOf;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tupleOf;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tupleOf;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tupleOf;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tupleOf;\n    import std.typecons\
    \ : tuple;\n   ", "{\n    auto result = text.replace(\" \", \"_\");\n    result\
    \ = result.replace(\"__\", \"_\");\n    result = result.replace(\"___\", \"_\"\
    );\n    result = result.replace(\"____\", \"_\");\n    result = result.replace(\"\
    _____\", \"_\");\n    result = result.replace(\"______\", \"_\");\n    result\
    \ = result.replace(\"_______\", \"_\");\n    result = result.replace(\"________\"\
    , \"_\");\n    result = result.replace(\"_________\", \"_\");\n    result = result.replace(\"\
    __________\", \"_\");\n    result = result.replace(\"___________\", \"_\");\n\
    \    result = result.replace(\"____________\", \"_\");\n    result = result.replace(\"\
    _____________\", \"_\");\n    result = result.replace(\"______________\", \"_\"\
    );\n    result = result.replace(\"_______________\", \"_\");\n    result = result.replace(\"\
    ________________\", \"_\");\n    result = result.replace(\"_________________\"\
    , \"_\");\n    result = result.replace(\"__________________\", \"_\");\n    result\
    \ = result.replace(\"___________________\", \"_\");\n    result = result.replace(\"\
    ____________________\", \"_\");\n    result = result.replace(\"_____________________\"\
    , \"_\");\n    result = result.replace(\"______________________\", \"_\");\n \
    \   result = result.replace(\"_______________________\", \"_\");\n    result =\
    \ result.replace(\"________________________\", \"_\");\n    result = result.replace(\"\
    _________________________\", \"_\");\n    result = result.replace(\"__________________________\"\
    , \"_\");\n    result = result.replace(\"___________________________\", \"_\"\
    );\n    result = result.replace(\"____________________________\", \"_\");\n  \
    \  result = result.replace(\"_____________________________\", \"_\");\n    result\
    \ = result.replace(\"______________________________\", \"_\");\n    result = result.replace(\"\
    _______________________________\", \"_\");\n    result = result.replace(\"________________________________\"\
    , \"_\");\n    result = result.replace(\"_________________________________\",\
    \ \"_\");\n    result = result.replace(\"__________________________________\"\
    , \"_\");\n    result = result.replace(\"___________________________________\"\
    , \"_\");\n    result = result.replace(\"____________________________________\"\
    , \"_\");\n    result = result.replace(\"_____________________________________\"\
    , \"_\");\n    result = result.replace(\"______________________________________\"\
    , \"_\");\n    result = result.replace(\"_______________________________________\"\
    , \"_\");\n    result = result.replace(\"________________________________________\"\
    , \"_\");\n", "{\n    string result;\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ > 2)\n            {\n                result ~= '-';\n                count =\
    \ 0;\n            }\n            else\n            {\n                result ~=\
    \ '_';\n            }\n        }\n        else\n        {\n            result\
    \ ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n       \
    \ if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n\
    \                result ~= '_';\n            else if(count > 2)\n            \
    \    result ~= '-';\n        }\n        else\n        {\n            count = 0;\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            count++;\n            if(count == 1)\n     \
    \       {\n                result ~= '_';\n            }\n            else if(count\
    \ > 2)\n            {\n                result ~= '-';\n            }\n       \
    \ }\n        else\n        {\n            count = 0;\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            count++;\n            if(count == 1)\n            {\n           \
    \     result ~= '_';\n            }\n            else if(count == 2)\n       \
    \     {\n                result ~= '-';\n            }\n        }\n        else\n\
    \        {\n            result ~= c;\n            count = 0;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    int count = 0;\n \
    \   foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n\
    \            if(count == 1)\n            {\n                result ~= '_';\n \
    \           }\n            else if(count > 2)\n            {\n               \
    \ result ~= '-';\n            }\n        }\n        else\n        {\n        \
    \    result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    int space_count = 0;\n    foreach(c; text) {\n\
    \        if(c == ' ') {\n            space_count++;\n            if(space_count\
    \ == 1) {\n                result ~= '_';\n            }\n        } else {\n \
    \           if(space_count > 1) {\n                result ~= '-';\n          \
    \  }\n            result ~= c;\n            space_count = 0;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    int count = 0;\n \
    \   foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n\
    \            if(count == 1)\n            {\n                result ~= '_';\n \
    \           }\n            else if(count == 2)\n            {\n              \
    \  result ~= '-';\n            }\n        }\n        else\n        {\n       \
    \     result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    bool consecutive = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(consecutive)\n       \
    \     {\n                result ~= '-';\n            }\n            else\n   \
    \         {\n                result ~= '_';\n                consecutive = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            consecutive = false;\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"\
    __\", \"_\");\n    result = result.replace(\"___\", \"-\");\n    return result;\n\
    }", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ > 2)\n            {\n                result ~= '-';\n                count =\
    \ 0;\n            }\n            else\n            {\n                result ~=\
    \ '_';\n            }\n        }\n        else\n        {\n            result\
    \ ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    bool space_flag = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space_flag)\n        \
    \    {\n                result ~= '-';\n            }\n            else\n    \
    \        {\n                result ~= '_';\n                space_flag = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            space_flag = false;\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"\
    __\", \"-\");\n    return result;\n}", "{\n    string result;\n    int count =\
    \ 0;\n    foreach(ch; text)\n    {\n        if(ch == ' ')\n        {\n       \
    \     count++;\n            if(count > 2)\n            {\n                result\
    \ ~= '-';\n                count = 0;\n            }\n            else\n     \
    \       {\n                result ~= '_';\n            }\n        }\n        else\n\
    \        {\n            result ~= ch;\n            count = 0;\n        }\n   \
    \ }\n    return result;\n}", "{\n    auto result = text.replace(\" \", \"_\");\n\
    \    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"___\"\
    , \"-\");\n    return result;\n}", "{\n    string result;\n    foreach(char c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            result ~= '_';\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    int count = 0;\n\
    \    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n\
    \            if(count > 2)\n            {\n                result ~= '-';\n  \
    \              count = 0;\n            }\n            else\n            {\n  \
    \              result ~= '_';\n            }\n        }\n        else\n      \
    \  {\n            result ~= c;\n            count = 0;\n        }\n    }\n   \
    \ return result;\n}", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count == 1)\n            {\n                result ~= '_';\n       \
    \     }\n            else if(count == 2)\n            {\n                result\
    \ ~= '-';\n            }\n        }\n        else\n        {\n            result\
    \ ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ > 2)\n            {\n                result ~= '-';\n                spaces\
    \ = 0;\n            }\n        }\n        else\n        {\n            spaces\
    \ = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            count++;\n            if(count > 2)\n           \
    \ {\n                result ~= '-';\n                count = 0;\n            }\n\
    \            else\n            {\n                result ~= '_';\n           \
    \ }\n        }\n        else\n        {\n            result ~= c;\n          \
    \  count = 0;\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    int count = 0;\n    for (int i = 0; i < text.length; i++) \n    {\n     \
    \   if (text[i] == ' ') \n        {\n            count++;\n            if (count\
    \ == 1) \n            {\n                result ~= '_';\n            } \n    \
    \        else if (count > 2) \n            {\n                result ~= '-';\n\
    \            }\n        } \n        else \n        {\n            count = 0;\n\
    \            result ~= text[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}", "{\n    // your\
    \ code goes here\n    string result;\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      else if(count > 2)\n            {\n                result ~= '-';\n   \
    \         }\n        }\n        else\n        {\n            count = 0;\n    \
    \        result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    bool consecutive = false;\n    foreach(c; text)\n    {\n      \
    \  if(c == ' ')\n        {\n            if(consecutive)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                consecutive = true;\n        \
    \    }\n        }\n        else\n        {\n            result ~= c;\n       \
    \     consecutive = false;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    int count = 0;\n    for (int i = 0; i < text.length;\
    \ i++) \n    {\n        if (text[i] == ' ') \n        {\n            count++;\n\
    \            if (count > 2) \n            {\n                result += '-';\n\
    \                count = 0;\n            }\n            else \n            {\n\
    \                result += '_';\n            }\n        }\n        else \n   \
    \     {\n            result += text[i];\n            count = 0;\n        }\n \
    \   }\n    return result;\n}", "{\n    string result;\n    auto it = text.begin;\n\
    \    auto end = text.end;\n    int count = 0;\n    while (it != end)\n    {\n\
    \        if (*it == ' ')\n        {\n            count++;\n            if (count\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      else if (count > 2)\n            {\n                result ~= '-';\n  \
    \          }\n        }\n        else\n        {\n            count = 0;\n   \
    \         result ~= *it;\n        }\n        it++;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ > 2)\n            {\n                result ~= '-';\n                spaces\
    \ = 0;\n            }\n        }\n        else\n        {\n            if(spaces\
    \ > 0)\n            {\n                result ~= '_';\n                spaces\
    \ = 0;\n            }\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count > 2)\n            {\n                result ~= '-';\n        \
    \        count = 0;\n            }\n            else\n            {\n        \
    \        result ~= '_';\n            }\n        }\n        else\n        {\n \
    \           result ~= c;\n            count = 0;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count > 2)\n            {\n                result ~= '-';\n        \
    \        count = 0;\n            }\n            else\n            {\n        \
    \        result ~= '_';\n            }\n        }\n        else\n        {\n \
    \           result ~= c;\n            count = 0;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    bool space_found = false;\n\
    \    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n\
    \            {\n                result ~= '-';\n            }\n            else\n\
    \            {\n                result ~= '_';\n                space_found =\
    \ true;\n            }\n        }\n        else\n        {\n            result\
    \ ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    bool space_found = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space_found)\n       \
    \     {\n                result ~= '-';\n            }\n            else\n   \
    \         {\n                result ~= '_';\n                space_found = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            space_found = false;\n        }\n    }\n    return result;\n}", "{\n\
    \    // your code here\n    string[] words = text.split(\" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(word.length > 0)\n    \
    \    {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n\
    }", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      else if(count == 2)\n            {\n                result ~= '-';\n  \
    \          }\n        }\n        else\n        {\n            count = 0;\n   \
    \         result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            count++;\n            if(count == 1)\n     \
    \       {\n                result ~= '_';\n            }\n            else if(count\
    \ == 2)\n            {\n                result ~= '-';\n            }\n      \
    \  }\n        else\n        {\n            result ~= c;\n            count = 0;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            count++;\n            if(count == 1)\n            {\n           \
    \     result ~= '_';\n            }\n            else if(count > 2)\n        \
    \    {\n                result ~= '-';\n            }\n        }\n        else\n\
    \        {\n            count = 0;\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    int count = 0;\n \
    \   foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n\
    \            if(count == 1)\n            {\n                result ~= '_';\n \
    \           }\n            else if(count == 2)\n            {\n              \
    \  result ~= '-';\n            }\n        }\n        else\n        {\n       \
    \     count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      else if(count == 2)\n            {\n                result ~= '-';\n  \
    \          }\n        }\n        else\n        {\n            result ~= c;\n \
    \           count = 0;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int count = 0;\n    foreach(c; text) \n    {\n        if(c\
    \ == ' ') \n        {\n            if(count == 0) \n            {\n          \
    \      result ~= '_';\n                count = 1;\n            } \n          \
    \  else if(count == 1) \n            {\n                result ~= '-';\n     \
    \           count = 2;\n            }\n        } \n        else \n        {\n\
    \            result ~= c;\n            count = 0;\n        }\n    }\n    return\
    \ result;\n}", "{\n    auto result = text;\n    auto spaces = 0;\n    for (size_t\
    \ i = 0; i < text.length; i++)\n    {\n        if (text[i] == ' ')\n        {\n\
    \            spaces++;\n            if (spaces > 2)\n            {\n         \
    \       result[i] = '-';\n            }\n            else\n            {\n   \
    \             result[i] = '_';\n            }\n        }\n        else\n     \
    \   {\n            spaces = 0;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    int count = 0;\n    for (int i = 0; i < text.length;\
    \ i++)\n    {\n        if (text[i] == ' ')\n        {\n            count++;\n\
    \            if (count == 1)\n            {\n                result ~= '_';\n\
    \            }\n            else if (count == 2)\n            {\n            \
    \    result ~= '-';\n            }\n        }\n        else\n        {\n     \
    \       result ~= text[i];\n            count = 0;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count == 1)\n            {\n                result ~= '_';\n       \
    \     }\n            else if(count == 2)\n            {\n                result\
    \ ~= '-';\n            }\n        }\n        else\n        {\n            count\
    \ = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    import std.algorithm : replace, replaceInPlace;\n    import std.range : join;\n\
    \    import std.string : split;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.typecons : tuple;\n    import std.math : max;\n    import\
    \ std.range : iota;\n    import std.algorithm : map;\n    import std.typecons\
    \ : tuple;\n    import std.range : zip;\n    import std.typecons : tuple;\n  \
    \  import std.range : zip;\n    import std.algorithm : map;\n    import std.range\
    \ : iota;\n    import std.typecons : tuple;\n    import std.range : zip;\n   \
    \ import std.algorithm : map;\n    import std.range : iota;\n    import std.typecons\
    \ : tuple;\n    import std.range : zip;\n    import std.algorithm : map;\n   \
    \ import std.range : iota;\n    import std.typecons : tuple;\n    import std.range\
    \ : zip;\n    import std.algorithm : map;\n    import std.range : iota;\n    import\
    \ std.typecons : tuple;\n    import std.range : zip;\n    import std.algorithm\
    \ : map;\n    import std.range : iota;\n    import std.typecons : tuple;\n   \
    \ import std.range : zip;\n    import std.algorithm : map;\n    import std.range\
    \ : iota;\n    import std.typecons : tuple;\n    import std.range : zip;\n   \
    \ import std.algorithm : map;\n    import std.range : iota;\n    import std.typecons\
    \ : tuple;\n    import std.range : zip;\n    import std.algorithm : map;\n   \
    \ import std.range : iota;\n    import std.typecons : tuple;\n    import std.range\
    \ : zip;\n    import std.algorithm : map;\n    import std.range : iota;\n    import\
    \ std.typecons : tuple;\n    import std.range : zip;\n    import std.algorithm\
    \ : map;\n    import std.range : iota;\n    import std.typecons : tuple;\n   ",
  "{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"\
    __\", \"-\");\n    return result;\n}", "{\n    string result;\n    bool space_found\
    \ = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n   \
    \         if(space_found)\n            {\n                result ~= '-';\n   \
    \         }\n            else\n            {\n                result ~= '_';\n\
    \                space_found = true;\n            }\n        }\n        else\n\
    \        {\n            result ~= c;\n            space_found = false;\n     \
    \   }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int space_count\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     space_count++;\n            if(space_count == 1)\n            {\n      \
    \          result ~= '_';\n            }\n            else if(space_count > 2)\n\
    \            {\n                result ~= '-';\n            }\n        }\n   \
    \     else\n        {\n            space_count = 0;\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            count++;\n            if(count > 2)\n            {\n            \
    \    result ~= '-';\n                count = 0;\n            }\n            else\n\
    \            {\n                result ~= '_';\n            }\n        }\n   \
    \     else\n        {\n            result ~= c;\n            count = 0;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    bool\
    \ consecutive = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n  \
    \      {\n            if(consecutive)\n            {\n                result ~=\
    \ '-';\n            }\n            else\n            {\n                result\
    \ ~= '_';\n            }\n            consecutive = true;\n        }\n       \
    \ else\n        {\n            result ~= c;\n            consecutive = false;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ int count = 0;\n    for (int i = 0; i < text.length; i++)\n    {\n        if\
    \ (text[i] == ' ')\n        {\n            count++;\n            if (count ==\
    \ 1)\n            {\n                result += '_';\n            }\n         \
    \   else if (count > 2)\n            {\n                result += '-';\n     \
    \       }\n        }\n        else\n        {\n            count = 0;\n      \
    \      result += text[i];\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int consecutive_spaces = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            consecutive_spaces++;\n        \
    \    if(consecutive_spaces == 1)\n            {\n                result ~= '_';\n\
    \            }\n            else if(consecutive_spaces > 2)\n            {\n \
    \               result ~= '-';\n            }\n        }\n        else\n     \
    \   {\n            consecutive_spaces = 0;\n            result ~= c;\n       \
    \ }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int count\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     count++;\n            if(count == 1)\n            {\n                result\
    \ ~= '_';\n            }\n            else if(count == 2)\n            {\n   \
    \             result ~= '-';\n            }\n        }\n        else\n       \
    \ {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    auto result = text.split(\" \").map!(a => a.length\
    \ > 2 ? \"-\" : a).join(\"_\");\n    return result;\n}", "{\n    string result;\n\
    \    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n     \
    \   {\n            count++;\n            if(count == 1)\n                result\
    \ ~= '_';\n            else if(count > 2)\n                result ~= '-';\n  \
    \      }\n        else\n        {\n            count = 0;\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result;\n  \
    \  int consecutive_spaces = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            consecutive_spaces++;\n            if(consecutive_spaces\
    \ > 2)\n            {\n                result ~= '-';\n                consecutive_spaces\
    \ = 0;\n            }\n            else\n            {\n                result\
    \ ~= '_';\n            }\n        }\n        else\n        {\n            consecutive_spaces\
    \ = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 2)\n            {\n                result ~= '-';\n                count = 0;\n\
    \            }\n        }\n        else\n        {\n            if(count == 1)\n\
    \            {\n                result ~= '_';\n                count = 0;\n \
    \           }\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    int spaces = 0;\n    foreach(char c; text)\n \
    \   {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ == 1)\n                result ~= '_';\n            else if(spaces > 2)\n   \
    \             result ~= '-';\n        }\n        else\n        {\n           \
    \ result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      else if(count == 2)\n            {\n                result ~= '-';\n  \
    \          }\n        }\n        else\n        {\n            result ~= c;\n \
    \           count = 0;\n        }\n    }\n    return result;\n}", "{\n    // \n\
    \    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n   ", "{\n    string\
    \ result;\n    bool consecutive = false;\n    foreach(c; text)\n    {\n      \
    \  if(c == ' ')\n        {\n            if(consecutive)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                consecutive = true;\n        \
    \    }\n        }\n        else\n        {\n            result ~= c;\n       \
    \     consecutive = false;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n   \
    \     if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n\
    \            {\n                result ~= '_';\n            }\n            else\
    \ if(count > 2)\n            {\n                result ~= '-';\n            }\n\
    \        }\n        else\n        {\n            count = 0;\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n  \
    \      {\n            spaces++;\n            if(spaces > 2)\n            {\n \
    \               result ~= '-';\n                spaces = 0;\n            }\n \
    \       }\n        else\n        {\n            if(spaces > 0)\n            {\n\
    \                result ~= '_';\n                spaces = 0;\n            }\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            count++;\n            if(count == 1)\n          \
    \      result ~= '_';\n            else if(count == 2)\n                result\
    \ ~= '-';\n        }\n        else\n        {\n            count = 0;\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    bool consecutive = false;\n    foreach(c; text)\n    {\n      \
    \  if(c == ' ')\n        {\n            if(consecutive)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                consecutive = true;\n        \
    \    }\n        }\n        else\n        {\n            result ~= c;\n       \
    \     consecutive = false;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c\
    \ == ' ')\n        {\n            count++;\n            if(count == 1)\n     \
    \           result ~= '_';\n            else if(count > 2)\n                result\
    \ ~= '-';\n        }\n        else\n        {\n            count = 0;\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}", "{\n    auto result\
    \ = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n\
    \    result = result.replace(\"___\", \"_\");\n    result = result.replace(\"\
    ____\", \"_\");\n    result = result.replace(\"_____\", \"_\");\n    result =\
    \ result.replace(\"______\", \"_\");\n    result = result.replace(\"_______\"\
    , \"_\");\n    result = result.replace(\"________\", \"_\");\n    result = result.replace(\"\
    _________\", \"_\");\n    result = result.replace(\"__________\", \"_\");\n  \
    \  result = result.replace(\"___________\", \"_\");\n    result = result.replace(\"\
    ____________\", \"_\");\n    result = result.replace(\"_____________\", \"_\"\
    );\n    result = result.replace(\"______________\", \"_\");\n    result = result.replace(\"\
    _______________\", \"_\");\n    result = result.replace(\"________________\",\
    \ \"_\");\n    result = result.replace(\"_________________\", \"_\");\n    result\
    \ = result.replace(\"__________________\", \"_\");\n    result = result.replace(\"\
    ___________________\", \"_\");\n    result = result.replace(\"____________________\"\
    , \"_\");\n    result = result.replace(\"_____________________\", \"_\");\n  \
    \  result = result.replace(\"______________________\", \"_\");\n    result = result.replace(\"\
    _______________________\", \"_\");\n    result = result.replace(\"________________________\"\
    , \"_\");\n    result = result.replace(\"_________________________\", \"_\");\n\
    \    result = result.replace(\"__________________________\", \"_\");\n    result\
    \ = result.replace(\"___________________________\", \"_\");\n    result = result.replace(\"\
    ____________________________\", \"_\");\n    result = result.replace(\"_____________________________\"\
    , \"_\");\n    result = result.replace(\"______________________________\", \"\
    _\");\n    result = result.replace(\"_______________________________\", \"_\"\
    );\n    result = result.replace(\"________________________________\", \"_\");\n\
    \    result = result.replace(\"_________________________________\", \"_\");\n\
    \    result = result.replace(\"__________________________________\", \"_\");\n\
    \    result = result.replace(\"___________________________________\", \"_\");\n\
    \    result = result.replace(\"____________________________________\", \"_\");\n\
    \    result = result.replace(\"_____________________________________\", \"_\"\
    );\n    result = result.replace(\"______________________________________\", \"\
    _\");\n    result = result.replace(\"_______________________________________\"\
    , \"_\");\n    result = result.replace(\"________________________________________\"\
    , \"_\");\n", "{\n    import std.algorithm : replace, count;\n    import std.array\
    \ : join;\n    import std.string : split;\n    import std.range : map;\n    import\
    \ std.conv : to;\n    import std.typecons : tuple;\n    import std.math : max;\n\
    \    import std.range : iota;\n    import std.range : retro;\n    import std.range\
    \ : take;\n    import std.range : drop;\n    import std.range : retro;\n    import\
    \ std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n", "{\n    string result = \"\";\n    int count =\
    \ 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n         \
    \   count++;\n            if(count == 2)\n            {\n                result\
    \ ~= '-';\n                count = 0;\n            }\n        }\n        else\n\
    \        {\n            if(count == 1)\n            {\n                result\
    \ ~= '_';\n                count = 0;\n            }\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            count++;\n            if(count > 2)\n            {\n            \
    \    result ~= '-';\n                count = 0;\n            }\n            else\n\
    \            {\n                result ~= '_';\n            }\n        }\n   \
    \     else\n        {\n            result ~= c;\n            count = 0;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int\
    \ count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n \
    \           count++;\n            if(count > 2)\n            {\n             \
    \   result ~= '-';\n                count = 0;\n            }\n            else\n\
    \            {\n                result ~= '_';\n            }\n        }\n   \
    \     else\n        {\n            count = 0;\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result;\n    int count =\
    \ 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n         \
    \   count++;\n            if(count == 1)\n                result ~= '_';\n   \
    \         else if(count == 2)\n                result ~= '-';\n        }\n   \
    \     else\n        {\n            count = 0;\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    size_t\
    \ spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n\
    \            spaces++;\n            if(spaces == 1)\n                result ~=\
    \ '_';\n            else if(spaces == 2)\n                result ~= '-';\n   \
    \     }\n        else\n        {\n            result ~= c;\n            spaces\
    \ = 0;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    int space_count = 0;\n    foreach(c; text) {\n        if(c == ' ') {\n\
    \            ++space_count;\n            if(space_count == 1) {\n            \
    \    result ~= '_';\n            }\n        } else {\n            if(space_count\
    \ > 1) {\n                result ~= '-';\n            }\n            result ~=\
    \ c;\n            space_count = 0;\n        }\n    }\n    return result;\n}",
  "{\n    import std.algorithm : replace, map;\n    import std.array : join;\n   \
    \ import std.range : iota;\n    import std.conv : to;\n    import std.typecons\
    \ : tuple;\n    import std.math : max;\n    import std.string : split;\n    import\
    \ std.typecons : Tuple;\n    import std.range : zip;\n    import std.algorithm\
    \ : map;\n    import std.range : take;\n    import std.range : drop;\n    import\
    \ std.range : cycle;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range :", "{\n    string result;\n    int space_count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            space_count++;\n\
    \            if(space_count > 2)\n                continue;\n            else\n\
    \                result ~= '_';\n        }\n        else\n        {\n        \
    \    result ~= c;\n            space_count = 0;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    int consecutive_spaces = 0;\n\
    \    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            consecutive_spaces++;\n\
    \            if(consecutive_spaces == 1)\n            {\n                result\
    \ ~= '_';\n            }\n            else if(consecutive_spaces == 2)\n     \
    \       {\n                result ~= '-';\n            }\n        }\n        else\n\
    \        {\n            consecutive_spaces = 0;\n            result ~= c;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string result;\n    bool consecutive\
    \ = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n   \
    \         if(consecutive)\n            {\n                result ~= '-';\n   \
    \         }\n            else\n            {\n                result ~= '_';\n\
    \                consecutive = true;\n            }\n        }\n        else\n\
    \        {\n            result ~= c;\n            consecutive = false;\n     \
    \   }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int count\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     if(count == 0)\n            {\n                result ~= '_';\n        \
    \        count = 1;\n            }\n            else if(count == 1)\n        \
    \    {\n                result ~= '-';\n                count = 2;\n         \
    \   }\n            else\n            {\n                count = 2;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    count = 0;\n        }\n    }\n    return result;\n}", "{\n    auto result\
    \ = text.dup;\n    int i = 0;\n    int n = text.length;\n    while (i < n)\n \
    \   {\n        if (result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \            int j = i + 1;\n            while (j < n && result[j] == ' ')\n \
    \           {\n                result[j] = '-';\n                j++;\n      \
    \      }\n            i = j;\n        }\n        else\n        {\n           \
    \ i++;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
