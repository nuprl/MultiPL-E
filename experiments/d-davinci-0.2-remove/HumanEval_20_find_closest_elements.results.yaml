language: d
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0.0;\n    float min_diff_b\
    \ = 0.0;\n    foreach (i, a; numbers)\n    {\n        foreach (j, b; numbers)\n\
    \        {\n            if (i != j)\n            {\n                float diff\
    \ = abs(a - b);\n                if (diff < min_diff)\n                {\n   \
    \                 min_diff = diff;\n                    min_diff_a = a;\n    \
    \                min_diff_b = b;\n                }\n            }\n        }\n\
    \    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx1xmih1j.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpx1xmih1j.__unittest_L31_C1() [0x428e7d]

    ??:? void tmpx1xmih1j.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (size_t\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (size_t j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz3j2huj4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a161]

    ??:? void tmpz3j2huj4.__unittest_L27_C1() [0x429051]

    ??:? void tmpz3j2huj4.__modtest() [0x429b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f15f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e06e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432995]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432921]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e045]

    ??:? runModuleUnitTests [0x42ef35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn3r6nluz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpn3r6nluz.__unittest_L29_C1() [0x428f49]

    ??:? void tmpn3r6nluz.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2xqu_jbd.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp2xqu_jbd.__unittest_L27_C1() [0x429041]

    ??:? void tmp2xqu_jbd.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2xqu_jbd.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp2xqu_jbd.__unittest_L27_C1() [0x429041]

    ??:? void tmp2xqu_jbd.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = float.max;\n   \
    \ float first_element;\n    float second_element;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float difference = abs(numbers[i] - numbers[j]);\n            if\
    \ (difference < min_difference)\n            {\n                min_difference\
    \ = difference;\n                first_element = numbers[i];\n               \
    \ second_element = numbers[j];\n            }\n        }\n    }\n    return tuple(first_element,\
    \ second_element);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptahhepap.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f29]

    ??:? void tmptahhepap.__unittest_L29_C1() [0x428ee1]

    ??:? void tmptahhepap.__modtest() [0x4298dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db21]

    ??:? runModuleUnitTests [0x42ea11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n        {\n\
    \            if (a != b) \n            {\n                float diff = abs(a -\
    \ b);\n                if (diff < min_diff) \n                {\n            \
    \        min_diff = diff;\n                    min_a = a;\n                  \
    \  min_b = b;\n                }\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppr540pn7.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmppr540pn7.__unittest_L31_C1() [0x428e85]

    ??:? void tmppr540pn7.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (size_t\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[i] -\
    \ numbers[j]);\n            if (diff < min_diff) \n            {\n           \
    \     min_diff = diff;\n                min_a = numbers[i];\n                min_b\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm13ucsw3.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f99]

    ??:? void tmpm13ucsw3.__unittest_L29_C1() [0x428f55]

    ??:? void tmpm13ucsw3.__modtest() [0x429950]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432990]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43246d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db91]

    ??:? runModuleUnitTests [0x42ea81]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a45c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n    float\
    \ min_diff_a = 0;\n    float min_diff_b = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n     \
    \       }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplbf0x8vl.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f29]

    ??:? void tmplbf0x8vl.__unittest_L29_C1() [0x428ee1]

    ??:? void tmplbf0x8vl.__modtest() [0x4298dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db21]

    ??:? runModuleUnitTests [0x42ea11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqgvexlu.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpfqgvexlu.__unittest_L29_C1() [0x428f65]

    ??:? void tmpfqgvexlu.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n    \
    \    {\n            if (a == b) \n            {\n                continue;\n \
    \           }\n            float diff = abs(a - b);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_diff_a\
    \ = a;\n                min_diff_b = b;\n            }\n        }\n    }\n   \
    \ return tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate =\
    \ find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvjcea7qn.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpvjcea7qn.__unittest_L32_C1() [0x428e85]

    ??:? void tmpvjcea7qn.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n    \
    \    {\n            if (a == b) continue;\n            float diff = abs(a - b);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = a;\n                min_b = b;\n            }\n     \
    \   }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5tcwu2s4.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp5tcwu2s4.__unittest_L29_C1() [0x428e85]

    ??:? void tmp5tcwu2s4.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                closest_pair = tuple(numbers[i], numbers[j]);\n            }\n\
    \        }\n    }\n    return closest_pair;\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg7il5_wx.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpg7il5_wx.__unittest_L27_C1() [0x429041]

    ??:? void tmpg7il5_wx.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a == b)\n                continue;\n            float diff = abs(a\
    \ - b);\n            if (diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                min_a = a;\n                min_b = b;\n          \
    \  }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpison9m47.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpison9m47.__unittest_L30_C1() [0x428e85]

    ??:? void tmpison9m47.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0.0;\n    float min_diff_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpegxfizyj.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpegxfizyj.__unittest_L28_C1() [0x428e99]

    ??:? void tmpegxfizyj.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n    Tuple!(float,\
    \ float) closest_pair;\n    for (size_t i = 0; i < numbers.length; i++)\n    {\n\
    \        for (size_t j = i + 1; j < numbers.length; j++)\n        {\n        \
    \    float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                closest_pair\
    \ = tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ closest_pair;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7l8se6gj.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a0d1]

    ??:? void tmp7l8se6gj.__unittest_L27_C1() [0x428fc1]

    ??:? void tmp7l8se6gj.__modtest() [0x429a84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f0cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dfde]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432905]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432db4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432891]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dfb5]

    ??:? runModuleUnitTests [0x42eea5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a620]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqgvexlu.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpfqgvexlu.__unittest_L29_C1() [0x428f65]

    ??:? void tmpfqgvexlu.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2xqu_jbd.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp2xqu_jbd.__unittest_L27_C1() [0x429041]

    ??:? void tmp2xqu_jbd.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n    \
    \    {\n            if (a == b)\n                continue;\n            float\
    \ diff = abs(a - b);\n            if (diff < min_diff)\n            {\n      \
    \          min_diff = diff;\n                min_a = a;\n                min_b\
    \ = b;\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0xh2w6vb.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp0xh2w6vb.__unittest_L30_C1() [0x428e85]

    ??:? void tmp0xh2w6vb.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a == b)\n                continue;\n            float diff = abs(a\
    \ - b);\n            if (diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                min_a = a;\n                min_b = b;\n          \
    \  }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpison9m47.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpison9m47.__unittest_L30_C1() [0x428e85]

    ??:? void tmpison9m47.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuyxl37jp.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpuyxl37jp.__unittest_L28_C1() [0x428e99]

    ??:? void tmpuyxl37jp.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.max;\n    float min_distance_a = 0;\n    float\
    \ min_distance_b = 0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n\
    \        {\n            if (a == b)\n                continue;\n            float\
    \ distance = abs(a - b);\n            if (distance < min_distance)\n         \
    \   {\n                min_distance = distance;\n                min_distance_a\
    \ = a;\n                min_distance_b = b;\n            }\n        }\n    }\n\
    \    return tuple(min_distance_a, min_distance_b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq0972hj2.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpq0972hj2.__unittest_L30_C1() [0x428e85]

    ??:? void tmpq0972hj2.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest_difference = float.max;\n    float first_number = 0;\n   \
    \ float second_number = 0;\n    for (int i = 0; i < numbers.length; i++) \n  \
    \  {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n     \
    \       float difference = abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < smallest_difference) \n            {\n                smallest_difference\
    \ = difference;\n                first_number = numbers[i];\n                second_number\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(first_number,\
    \ second_number);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfazttcka.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpfazttcka.__unittest_L28_C1() [0x428e99]

    ??:? void tmpfazttcka.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    auto min_diff = numbers[1] - numbers[0];\n    auto min_pair = tuple(numbers[0],\
    \ numbers[1]);\n    foreach (i, element; numbers[1..$])\n    {\n        foreach\
    \ (j, element2; numbers[0..i])\n        {\n            auto diff = abs(element\
    \ - element2);\n            if (diff < min_diff)\n            {\n            \
    \    min_diff = diff;\n                min_pair = tuple(element, element2);\n\
    \            }\n        }\n    }\n    return min_pair;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzclhrzqp.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a055]

    ??:? void tmpzclhrzqp.__unittest_L26_C1() [0x428ffd]

    ??:? void tmpzclhrzqp.__modtest() [0x429ac0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f053]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42df62]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432889]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432d38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432815]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42df39]

    ??:? runModuleUnitTests [0x42ee29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a5a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9q0q9afc.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp9q0q9afc.__unittest_L29_C1() [0x428f65]

    ??:? void tmp9q0q9afc.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b =\
    \ 0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j\
    \ = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbm10fd14.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpbm10fd14.__unittest_L28_C1() [0x428e99]

    ??:? void tmpbm10fd14.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) closest_elements = tuple(numbers[0], numbers[1]);\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_elements = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpllgi3xgp.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a161]

    ??:? void tmpllgi3xgp.__unittest_L27_C1() [0x429051]

    ??:? void tmpllgi3xgp.__modtest() [0x429b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f15f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e06e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432995]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432921]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e045]

    ??:? runModuleUnitTests [0x42ef35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.max;\n    float min_distance_first_element = 0.0;\n\
    \    float min_distance_second_element = 0.0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float distance = abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               min_distance_first_element = numbers[i];\n                min_distance_second_element\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_distance_first_element,\
    \ min_distance_second_element);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw0ltei5q.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpw0ltei5q.__unittest_L28_C1() [0x428e99]

    ??:? void tmpw0ltei5q.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.infinity;\n    float a = 0.0;\n    float b = 0.0;\n\
    \    foreach (i, x; numbers)\n    {\n        foreach (j, y; numbers[i+1..$])\n\
    \        {\n            float distance = abs(x - y);\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               a = x;\n                b = y;\n            }\n        }\n   \
    \ }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1o1p71op.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e25]

    ??:? void tmp1o1p71op.__unittest_L28_C1() [0x428e91]

    ??:? void tmp1o1p71op.__modtest() [0x42988c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb37]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43236d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43281c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4322f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da1d]

    ??:? runModuleUnitTests [0x42e90d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqgvexlu.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpfqgvexlu.__unittest_L29_C1() [0x428f65]

    ??:? void tmpfqgvexlu.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = float.max;\n   \
    \ float min_first = 0.0;\n    float min_second = 0.0;\n    foreach (i, first;\
    \ numbers)\n    {\n        foreach (j, second; numbers[i+1..$])\n        {\n \
    \           float difference = abs(first - second);\n            if (difference\
    \ < min_difference)\n            {\n                min_difference = difference;\n\
    \                min_first = first;\n                min_second = second;\n  \
    \          }\n        }\n    }\n    return tuple(min_first, min_second);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3nvi8vwh.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f21]

    ??:? void tmp3nvi8vwh.__unittest_L29_C1() [0x428ed9]

    ??:? void tmp3nvi8vwh.__modtest() [0x4298d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432469]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432918]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db19]

    ??:? runModuleUnitTests [0x42ea09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    foreach (i, a; numbers)\n    {\n        foreach (j, b; numbers)\n\
    \        {\n            if (i != j)\n            {\n                float diff\
    \ = abs(a - b);\n                if (diff < min_diff)\n                {\n   \
    \                 min_diff = diff;\n                    min_diff_a = a;\n    \
    \                min_diff_b = b;\n                }\n            }\n        }\n\
    \    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxj5_0icy.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpxj5_0icy.__unittest_L31_C1() [0x428e7d]

    ??:? void tmpxj5_0icy.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_elements = tuple(numbers[0],\
    \ numbers[1]);\n    for (int i = 0; i < numbers.length; i++) \n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ difference = abs(numbers[i] - numbers[j]);\n            if (difference < min_difference)\
    \ \n            {\n                min_difference = difference;\n            \
    \    closest_elements = tuple(numbers[i], numbers[j]);\n            }\n      \
    \  }\n    }\n    return closest_elements;\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprcuqfxn9.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmprcuqfxn9.__unittest_L27_C1() [0x429041]

    ??:? void tmprcuqfxn9.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0.0;\n    float min_diff_b\
    \ = 0.0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n    \
    \    {\n            if (a == b)\n                continue;\n            float\
    \ diff = abs(a - b);\n            if (diff < min_diff)\n            {\n      \
    \          min_diff = diff;\n                min_diff_a = a;\n               \
    \ min_diff_b = b;\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi16_n8sp.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpi16_n8sp.__unittest_L30_C1() [0x428e85]

    ??:? void tmpi16_n8sp.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n        {\n\
    \            if (a != b) \n            {\n                float diff = abs(a -\
    \ b);\n                if (diff < min_diff) \n                {\n            \
    \        min_diff = diff;\n                    min_a = a;\n                  \
    \  min_b = b;\n                }\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppr540pn7.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmppr540pn7.__unittest_L31_C1() [0x428e85]

    ??:? void tmppr540pn7.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n      \
    \  {\n            if (a == b)\n                continue;\n            float diff\
    \ = abs(a - b);\n            if (diff < min_diff)\n            {\n           \
    \     min_diff = diff;\n                min_diff_a = a;\n                min_diff_b\
    \ = b;\n            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp60a4g_qf.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp60a4g_qf.__unittest_L30_C1() [0x428e85]

    ??:? void tmp60a4g_qf.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = float.infinity;\n\
    \    float min_index = 0;\n    for (int i = 0; i < numbers.length - 1; i++) \n\
    \    {\n        float difference = abs(numbers[i] - numbers[i + 1]);\n       \
    \ if (difference < min_difference) \n        {\n            min_difference = difference;\n\
    \            min_index = i;\n        }\n    }\n    return tuple(numbers[min_index],\
    \ numbers[min_index + 1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1fajab4.d(22): Error: cannot implicitly convert expression `min_index`
    of type `float` to `ulong`

    /tmp/tmpa1fajab4.d(22): Error: cannot implicitly convert expression `min_index
    + 1.00000F` of type `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1fajab4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpunni9rsz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpunni9rsz.__unittest_L29_C1() [0x428f65]

    ??:? void tmpunni9rsz.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd6dovaxe.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpd6dovaxe.__unittest_L28_C1() [0x428e99]

    ??:? void tmpd6dovaxe.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.infinity;\n    float min_distance_a = 0.0;\n \
    \   float min_distance_b = 0.0;\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float distance = abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < min_distance) \n            {\n                min_distance = distance;\n\
    \                min_distance_a = numbers[i];\n                min_distance_b\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_distance_a,\
    \ min_distance_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpogankhfo.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpogankhfo.__unittest_L28_C1() [0x428e99]

    ??:? void tmpogankhfo.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n  \
    \      {\n            if (a == b) \n            {\n                continue;\n\
    \            }\n            float diff = abs(a - b);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = a;\n\
    \                min_b = b;\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptex0yd3p.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmptex0yd3p.__unittest_L32_C1() [0x428e85]

    ??:? void tmptex0yd3p.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_difference = float.infinity;\n    float min_a = 0.0;\n    float\
    \ min_b = 0.0;\n    foreach (a; numbers) \n    {\n        foreach (b; numbers)\
    \ \n        {\n            if (a == b) \n            {\n                continue;\n\
    \            }\n            float difference = abs(a - b);\n            if (difference\
    \ < min_difference) \n            {\n                min_difference = difference;\n\
    \                min_a = a;\n                min_b = b;\n            }\n     \
    \   }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_hh2c6_j.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp_hh2c6_j.__unittest_L32_C1() [0x428e85]

    ??:? void tmp_hh2c6_j.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_r9wdvbb.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp_r9wdvbb.__unittest_L28_C1() [0x428e99]

    ??:? void tmp_r9wdvbb.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnhrtg7ga.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpnhrtg7ga.__unittest_L29_C1() [0x428f49]

    ??:? void tmpnhrtg7ga.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuyxl37jp.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpuyxl37jp.__unittest_L28_C1() [0x428e99]

    ??:? void tmpuyxl37jp.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n    \
    \    {\n            if (a == b) \n            {\n                continue;\n \
    \           }\n            float diff = abs(a - b);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_diff_a\
    \ = a;\n                min_diff_b = b;\n            }\n        }\n    }\n   \
    \ return tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate =\
    \ find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpib510l9o.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpib510l9o.__unittest_L32_C1() [0x428e85]

    ??:? void tmpib510l9o.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    foreach(i,\
    \ a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n            if\
    \ (i == j)\n                continue;\n            float diff = abs(a - b);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = a;\n                min_b = b;\n            }\n     \
    \   }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2a4fr5sj.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f81]

    ??:? void tmp2a4fr5sj.__unittest_L31_C1() [0x428f3d]

    ??:? void tmp2a4fr5sj.__modtest() [0x429938]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dba2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432978]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432455]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db79]

    ??:? runModuleUnitTests [0x42ea69]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a444]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeqh8e09p.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpeqh8e09p.__unittest_L29_C1() [0x428f49]

    ??:? void tmpeqh8e09p.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnhrtg7ga.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpnhrtg7ga.__unittest_L29_C1() [0x428f49]

    ??:? void tmpnhrtg7ga.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2xqu_jbd.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp2xqu_jbd.__unittest_L27_C1() [0x429041]

    ??:? void tmp2xqu_jbd.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n    float\
    \ min_a = 0.0;\n    float min_b = 0.0;\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n     \
    \   {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         min_a = numbers[i];\n                min_b = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu00vnql4.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f31]

    ??:? void tmpu00vnql4.__unittest_L29_C1() [0x428eed]

    ??:? void tmpu00vnql4.__modtest() [0x4298e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db29]

    ??:? runModuleUnitTests [0x42ea19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwafnt8rc.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpwafnt8rc.__unittest_L29_C1() [0x428f49]

    ??:? void tmpwafnt8rc.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeqh8e09p.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpeqh8e09p.__unittest_L29_C1() [0x428f49]

    ??:? void tmpeqh8e09p.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n    Tuple!(float,\
    \ float) min_pair;\n    for (size_t i = 0; i < numbers.length; i++) \n    {\n\
    \        for (size_t j = i + 1; j < numbers.length; j++) \n        {\n       \
    \     float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_pair\
    \ = tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ min_pair;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphgg1ixze.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a0d1]

    ??:? void tmphgg1ixze.__unittest_L27_C1() [0x428fc1]

    ??:? void tmphgg1ixze.__modtest() [0x429a84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f0cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dfde]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432905]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432db4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432891]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dfb5]

    ??:? runModuleUnitTests [0x42eea5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a620]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b =\
    \ 0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n\
    \            if (a != b)\n            {\n                float diff = abs(a -\
    \ b);\n                if (diff < min_diff)\n                {\n             \
    \       min_diff = diff;\n                    min_a = a;\n                   \
    \ min_b = b;\n                }\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw_2s57s2.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpw_2s57s2.__unittest_L31_C1() [0x428e85]

    ??:? void tmpw_2s57s2.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = float.max;\n   \
    \ float min_difference_a = 0;\n    float min_difference_b = 0;\n    for (size_t\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (size_t j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float difference = abs(numbers[i] - numbers[j]);\n\
    \            if (difference < min_difference)\n            {\n               \
    \ min_difference = difference;\n                min_difference_a = numbers[i];\n\
    \                min_difference_b = numbers[j];\n            }\n        }\n  \
    \  }\n    return tuple(min_difference_a, min_difference_b);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpytlyorl_.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f31]

    ??:? void tmpytlyorl_.__unittest_L29_C1() [0x428eed]

    ??:? void tmpytlyorl_.__modtest() [0x4298e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db29]

    ??:? runModuleUnitTests [0x42ea19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n    float\
    \ first_num = 0;\n    float second_num = 0;\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (size_t j = i + 1; j < numbers.length; j++) \n   \
    \     {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff) \n            {\n                min_diff = diff;\n      \
    \          first_num = numbers[i];\n                second_num = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(first_num, second_num);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7vgk9k7v.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f31]

    ??:? void tmp7vgk9k7v.__unittest_L29_C1() [0x428eed]

    ??:? void tmp7vgk9k7v.__modtest() [0x4298e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db29]

    ??:? runModuleUnitTests [0x42ea19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqgvexlu.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpfqgvexlu.__unittest_L29_C1() [0x428f65]

    ??:? void tmpfqgvexlu.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (size_t\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[i] -\
    \ numbers[j]);\n            if (diff < min_diff) \n            {\n           \
    \     min_diff = diff;\n                min_a = numbers[i];\n                min_b\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt1rod_z0.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb9]

    ??:? void tmpt1rod_z0.__unittest_L29_C1() [0x428f75]

    ??:? void tmpt1rod_z0.__modtest() [0x429970]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432501]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43248d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dbb1]

    ??:? runModuleUnitTests [0x42eaa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a47c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnhrtg7ga.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpnhrtg7ga.__unittest_L29_C1() [0x428f49]

    ??:? void tmpnhrtg7ga.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                result = tuple(min(numbers[i], numbers[j]), max(numbers[i], numbers[j]));\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqu82i8ca.d(21): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpqu82i8ca.d(21): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqu82i8ca.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) closest_elements = tuple(numbers[0], numbers[1]);\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_elements = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpllgi3xgp.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a161]

    ??:? void tmpllgi3xgp.__unittest_L27_C1() [0x429051]

    ??:? void tmpllgi3xgp.__modtest() [0x429b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f15f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e06e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432995]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432921]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e045]

    ??:? runModuleUnitTests [0x42ef35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    // Sort the array\n    numbers.sort;\n    \n    // Find the minimum difference\
    \ between two adjacent elements\n    float min_diff = numbers[1] - numbers[0];\n\
    \    foreach (i, _; numbers[1..$])\n    {\n        float diff = numbers[i] - numbers[i-1];\n\
    \        if (diff < min_diff)\n            min_diff = diff;\n    }\n    \n   \
    \ // Find the two elements that are closest to each other\n    float min_element1\
    \ = numbers[0];\n    float min_element2 = numbers[1];\n    foreach (i, _; numbers[1..$])\n\
    \    {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff == min_diff)\n\
    \        {\n            min_element1 = numbers[i-1];\n            min_element2\
    \ = numbers[i];\n        }\n    }\n    \n    return tuple(min_element1, min_element2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptym7pnry.d(11): Error: no property `sort` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptym7pnry.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi_95u1wv.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a131]

    ??:? void tmpi_95u1wv.__unittest_L27_C1() [0x429025]

    ??:? void tmpi_95u1wv.__modtest() [0x429ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f12f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e03e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432965]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4328f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e015]

    ??:? runModuleUnitTests [0x42ef05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a680]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n  \
    \      {\n            if (a == b) \n            {\n                continue;\n\
    \            }\n            float diff = abs(a - b);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = a;\n\
    \                min_b = b;\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptex0yd3p.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmptex0yd3p.__unittest_L32_C1() [0x428e85]

    ??:? void tmptex0yd3p.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    Tuple!(float, float) min_pair;\n    foreach\
    \ (i, a; numbers)\n    {\n        foreach (j, b; numbers[i+1..$])\n        {\n\
    \            float diff = abs(a - b);\n            if (diff < min_diff)\n    \
    \        {\n                min_diff = diff;\n                min_pair = tuple(a,\
    \ b);\n            }\n        }\n    }\n    return min_pair;\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyjzb1ia3.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fc5]

    ??:? void tmpyjzb1ia3.__unittest_L26_C1() [0x428f6d]

    ??:? void tmpyjzb1ia3.__modtest() [0x429a30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42efc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ded2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4327f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432ca8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432785]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dea9]

    ??:? runModuleUnitTests [0x42ed99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a514]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4un1a06z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e35]

    ??:? void tmp4un1a06z.__unittest_L28_C1() [0x428ea5]

    ??:? void tmp4un1a06z.__modtest() [0x4298a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43237d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43282c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da2d]

    ??:? runModuleUnitTests [0x42e91d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n    float\
    \ min_a = 0;\n    float min_b = 0;\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (size_t j = i + 1; j < numbers.length; j++) \n   \
    \     {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff) \n            {\n                min_diff = diff;\n      \
    \          min_a = numbers[i];\n                min_b = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min(min_a, min_b), max(min_a, min_b));\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5msl4ifx.d(27): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmp5msl4ifx.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5msl4ifx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b =\
    \ 0;\n    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj54mlonf.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e35]

    ??:? void tmpj54mlonf.__unittest_L28_C1() [0x428ea5]

    ??:? void tmpj54mlonf.__modtest() [0x4298a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43237d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43282c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da2d]

    ??:? runModuleUnitTests [0x42e91d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwm6ng3ge.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpwm6ng3ge.__unittest_L28_C1() [0x428e99]

    ??:? void tmpwm6ng3ge.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfohjgp_o.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpfohjgp_o.__unittest_L28_C1() [0x428e99]

    ??:? void tmpfohjgp_o.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float first_number = numbers[0];\n    float second_number = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                first_number = numbers[i];\n        \
    \        second_number = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(first_number, second_number);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc0gy_l9a.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpc0gy_l9a.__unittest_L29_C1() [0x428f65]

    ??:? void tmpc0gy_l9a.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    foreach (i, num1; numbers[0 .. $ - 1])\
    \ \n    {\n        foreach (j, num2; numbers[i + 1 .. $]) \n        {\n      \
    \      float diff = abs(num1 - num2);\n            if (diff < min_diff) \n   \
    \         {\n                min_diff = diff;\n                min_num1 = num1;\n\
    \                min_num2 = num2;\n            }\n        }\n    }\n    return\
    \ tuple(min_num1, min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4_nf9_33.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e9d]

    ??:? void tmp4_nf9_33.__unittest_L28_C1() [0x428f09]

    ??:? void tmp4_nf9_33.__modtest() [0x429904]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ebaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432894]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432371]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da95]

    ??:? runModuleUnitTests [0x42e985]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a360]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.max;\n    float min_distance_a = 0;\n    float\
    \ min_distance_b = 0;\n    foreach (a; numbers) \n    {\n        foreach (b; numbers)\
    \ \n        {\n            if (a == b) \n            {\n                continue;\n\
    \            }\n            float distance = abs(a - b);\n            if (distance\
    \ < min_distance) \n            {\n                min_distance = distance;\n\
    \                min_distance_a = a;\n                min_distance_b = b;\n  \
    \          }\n        }\n    }\n    return tuple(min_distance_a, min_distance_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc07_l2c5.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpc07_l2c5.__unittest_L32_C1() [0x428e85]

    ??:? void tmpc07_l2c5.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (size_t\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[i] -\
    \ numbers[j]);\n            if (diff < min_diff) \n            {\n           \
    \     min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqgpebb74.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a161]

    ??:? void tmpqgpebb74.__unittest_L27_C1() [0x429051]

    ??:? void tmpqgpebb74.__modtest() [0x429b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f15f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e06e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432995]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432921]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e045]

    ??:? runModuleUnitTests [0x42ef35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    // If there are less than two elements, return an empty tuple.\n    if (numbers.length\
    \ < 2)\n        return tuple();\n    \n    // If there are only two elements,\
    \ return them.\n    if (numbers.length == 2)\n        return tuple(numbers[0],\
    \ numbers[1]);\n    \n    // Sort the numbers.\n    numbers.sort();\n    \n  \
    \  // Find the minimum difference between two adjacent elements.\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 2; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff)\n\
    \            min_diff = diff;\n    }\n    \n    // Find the two adjacent elements\
    \ with the minimum difference.\n    float[] result;\n    for (int i = 1; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff\
    \ == min_diff)\n        {\n            result ~= numbers[i - 1];\n           \
    \ result ~= numbers[i];\n        }\n    }\n    \n    // Return the two elements.\n\
    \    return tuple(result[0], result[1]);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwvivjc2k.d(19): Error: no property `sort` for type `float[]`

    /tmp/tmpwvivjc2k.d(12): Error: cannot implicitly convert expression `tuple()`
    of type `Tuple!()` to `Tuple!(float, float)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvivjc2k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                result = tuple(min(numbers[i], numbers[j]), max(numbers[i], numbers[j]));\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqu82i8ca.d(21): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpqu82i8ca.d(21): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqu82i8ca.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a == b)\n                continue;\n            float diff = abs(a\
    \ - b);\n            if (diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                min_a = a;\n                min_b = b;\n          \
    \  }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi2p3hp08.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpi2p3hp08.__unittest_L30_C1() [0x428e85]

    ??:? void tmpi2p3hp08.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.infinity;\n    float min_distance_a = 0.0;\n \
    \   float min_distance_b = 0.0;\n    for (size_t i = 0; i < numbers.length; i++)\n\
    \    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n        {\n \
    \           float distance = abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               min_distance_a = numbers[i];\n                min_distance_b =\
    \ numbers[j];\n            }\n        }\n    }\n    return tuple(min_distance_a,\
    \ min_distance_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpka1nhnn8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e35]

    ??:? void tmpka1nhnn8.__unittest_L28_C1() [0x428ea5]

    ??:? void tmpka1nhnn8.__modtest() [0x4298a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43237d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43282c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da2d]

    ??:? runModuleUnitTests [0x42e91d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_distance = abs(numbers[0] - numbers[1]);\n\
    \    float min_distance_a = numbers[0];\n    float min_distance_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float distance = abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < min_distance) \n            {\n \
    \               min_distance = distance;\n                min_distance_a = numbers[i];\n\
    \                min_distance_b = numbers[j];\n            }\n        }\n    }\n\
    \    return tuple(min_distance_a, min_distance_b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp60bae02o.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp60bae02o.__unittest_L29_C1() [0x428f65]

    ??:? void tmp60bae02o.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2xqu_jbd.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp2xqu_jbd.__unittest_L27_C1() [0x429041]

    ??:? void tmp2xqu_jbd.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a != b)\n            {\n                float diff = abs(a - b);\n\
    \                if (diff < min_diff)\n                {\n                   \
    \ min_diff = diff;\n                    min_a = a;\n                    min_b\
    \ = b;\n                }\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy6z3n5wd.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpy6z3n5wd.__unittest_L31_C1() [0x428e85]

    ??:? void tmpy6z3n5wd.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a == b)\n                continue;\n            float diff = abs(a\
    \ - b);\n            if (diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                min_a = a;\n                min_b = b;\n          \
    \  }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi2p3hp08.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpi2p3hp08.__unittest_L30_C1() [0x428e85]

    ??:? void tmpi2p3hp08.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_distance = abs(numbers[0] - numbers[1]);\n\
    \    float min_element1 = numbers[0];\n    float min_element2 = numbers[1];\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float distance = abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < min_distance)\n            {\n  \
    \              min_distance = distance;\n                min_element1 = numbers[i];\n\
    \                min_element2 = numbers[j];\n            }\n        }\n    }\n\
    \    return tuple(min_element1, min_element2);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgn_qsgr2.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb9]

    ??:? void tmpgn_qsgr2.__unittest_L29_C1() [0x428f75]

    ??:? void tmpgn_qsgr2.__modtest() [0x429970]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432501]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43248d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dbb1]

    ??:? runModuleUnitTests [0x42eaa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a47c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_difference = float.max;\n    float first_element = 0;\n    float\
    \ second_element = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n \
    \       for (int j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ difference = abs(numbers[i] - numbers[j]);\n            if (difference < min_difference)\n\
    \            {\n                min_difference = difference;\n               \
    \ first_element = numbers[i];\n                second_element = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(first_element, second_element);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1lwsu6a4.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp1lwsu6a4.__unittest_L28_C1() [0x428e99]

    ??:? void tmp1lwsu6a4.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    // TODO: implement\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    foreach(i, n; numbers)\n    {\n        if(n < min)\n            min = n;\n\
    \        if(n > max)\n            max = n;\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwm_fp0ex.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x429d35]

    ??:? void tmpwm_fp0ex.__unittest_L22_C1() [0x428db1]

    ??:? void tmpwm_fp0ex.__modtest() [0x4297a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ea23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d932]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4321e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d909]

    ??:? runModuleUnitTests [0x42e7f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a1f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (size_t\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[j] -\
    \ numbers[i]);\n            if (diff < min_diff) \n            {\n           \
    \     min_diff = diff;\n                min_a = numbers[i];\n                min_b\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmup4wqo8.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f99]

    ??:? void tmpmup4wqo8.__unittest_L29_C1() [0x428f55]

    ??:? void tmpmup4wqo8.__modtest() [0x429950]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432990]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43246d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db91]

    ??:? runModuleUnitTests [0x42ea81]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a45c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqgvexlu.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpfqgvexlu.__unittest_L29_C1() [0x428f65]

    ??:? void tmpfqgvexlu.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float first = 0;\n    float second = 0;\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                first = numbers[i];\n              \
    \  second = numbers[j];\n            }\n        }\n    }\n    return tuple(first,\
    \ second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n \
    \   assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n  \
    \  assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf1hpikgh.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e35]

    ??:? void tmpf1hpikgh.__unittest_L28_C1() [0x428ea5]

    ??:? void tmpf1hpikgh.__modtest() [0x4298a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43237d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43282c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da2d]

    ??:? runModuleUnitTests [0x42e91d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = abs(numbers[0] -\
    \ numbers[1]);\n    float min_element1 = numbers[0];\n    float min_element2 =\
    \ numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        for\
    \ (int j = i + 1; j < numbers.length; j++) \n        {\n            float difference\
    \ = abs(numbers[i] - numbers[j]);\n            if (difference < min_difference)\
    \ \n            {\n                min_difference = difference;\n            \
    \    min_element1 = numbers[i];\n                min_element2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_element1, min_element2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw6985rrj.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpw6985rrj.__unittest_L29_C1() [0x428f65]

    ??:? void tmpw6985rrj.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a == b)\n                continue;\n            float diff = abs(a\
    \ - b);\n            if (diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                min_a = a;\n                min_b = b;\n          \
    \  }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpison9m47.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpison9m47.__unittest_L30_C1() [0x428e85]

    ??:? void tmpison9m47.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn3r6nluz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpn3r6nluz.__unittest_L29_C1() [0x428f49]

    ??:? void tmpn3r6nluz.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    foreach(i, number;\
    \ numbers)\n    {\n        foreach(j, other_number; numbers[i+1..$])\n       \
    \ {\n            float diff = abs(number - other_number);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   a = number;\n                b = other_number;\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5_xqjb91.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f99]

    ??:? void tmp5_xqjb91.__unittest_L29_C1() [0x428f51]

    ??:? void tmp5_xqjb91.__modtest() [0x42994c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432990]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43246d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db91]

    ??:? runModuleUnitTests [0x42ea81]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a45c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuyxl37jp.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpuyxl37jp.__unittest_L28_C1() [0x428e99]

    ??:? void tmpuyxl37jp.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length > 1);\n    float min_distance = abs(numbers[0] - numbers[1]);\n\
    \    float min_distance_index = 0;\n    for (int i = 0; i < numbers.length - 1;\
    \ i++) \n    {\n        float distance = abs(numbers[i] - numbers[i + 1]);\n \
    \       if (distance < min_distance) \n        {\n            min_distance = distance;\n\
    \            min_distance_index = i;\n        }\n    }\n    return tuple(numbers[min_distance_index],\
    \ numbers[min_distance_index + 1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9zruyi_c.d(22): Error: cannot implicitly convert expression `min_distance_index`
    of type `float` to `ulong`

    /tmp/tmp9zruyi_c.d(22): Error: cannot implicitly convert expression `min_distance_index
    + 1.00000F` of type `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zruyi_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.infinity;\n    float min_distance_a = 0.0;\n \
    \   float min_distance_b = 0.0;\n    foreach (a; numbers)\n    {\n        foreach\
    \ (b; numbers)\n        {\n            if (a == b) continue;\n            float\
    \ distance = abs(a - b);\n            if (distance < min_distance)\n         \
    \   {\n                min_distance = distance;\n                min_distance_a\
    \ = a;\n                min_distance_b = b;\n            }\n        }\n    }\n\
    \    return tuple(min_distance_a, min_distance_b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpphbut9ep.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpphbut9ep.__unittest_L29_C1() [0x428e85]

    ??:? void tmpphbut9ep.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = float.infinity;\n\
    \    float min_difference_first = 0.0;\n    float min_difference_second = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float difference = abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < min_difference)\n            {\n\
    \                min_difference = difference;\n                min_difference_first\
    \ = numbers[i];\n                min_difference_second = numbers[j];\n       \
    \     }\n        }\n    }\n    return tuple(min_difference_first, min_difference_second);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3xk3wabh.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f29]

    ??:? void tmp3xk3wabh.__unittest_L29_C1() [0x428ee1]

    ??:? void tmp3xk3wabh.__modtest() [0x4298dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db21]

    ??:? runModuleUnitTests [0x42ea11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float closest_distance = abs(numbers[0]\
    \ - numbers[1]);\n    int closest_index1 = 0;\n    int closest_index2 = 1;\n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float distance = abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance)\n            {\n\
    \                closest_distance = distance;\n                closest_index1\
    \ = i;\n                closest_index2 = j;\n            }\n        }\n    }\n\
    \    return tuple(numbers[closest_index1], numbers[closest_index2]);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp29gk3f6t.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f49]

    ??:? void tmp29gk3f6t.__unittest_L29_C1() [0x428f05]

    ??:? void tmp29gk3f6t.__modtest() [0x429900]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db6a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432491]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432940]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43241d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db41]

    ??:? runModuleUnitTests [0x42ea31]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a40c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptxh59tte.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmptxh59tte.__unittest_L29_C1() [0x428f49]

    ??:? void tmptxh59tte.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0.0;\n    float min_diff_b\
    \ = 0.0;\n    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for\
    \ (size_t j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                min_diff_a = numbers[i];\n\
    \                min_diff_b = numbers[j];\n            }\n        }\n    }\n \
    \   return tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv8msdigz.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e35]

    ??:? void tmpv8msdigz.__unittest_L28_C1() [0x428ea5]

    ??:? void tmpv8msdigz.__modtest() [0x4298a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43237d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43282c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da2d]

    ??:? runModuleUnitTests [0x42e91d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.max;\n    float min_distance_a = 0;\n    float\
    \ min_distance_b = 0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n\
    \        for (int j = i + 1; j < numbers.length; j++) \n        {\n          \
    \  float distance = abs(numbers[i] - numbers[j]);\n            if (distance <\
    \ min_distance) \n            {\n                min_distance = distance;\n  \
    \              min_distance_a = numbers[i];\n                min_distance_b =\
    \ numbers[j];\n            }\n        }\n    }\n    return tuple(min_distance_a,\
    \ min_distance_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprm7zacob.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmprm7zacob.__unittest_L28_C1() [0x428e99]

    ??:? void tmprm7zacob.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyrtpxqdj.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpyrtpxqdj.__unittest_L27_C1() [0x429041]

    ??:? void tmpyrtpxqdj.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n    float\
    \ min_diff_a = 0;\n    float min_diff_b = 0;\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (size_t j = i + 1; j < numbers.length; j++) \n   \
    \     {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff) \n            {\n                min_diff = diff;\n      \
    \          min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2sjfxont.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f31]

    ??:? void tmp2sjfxont.__unittest_L29_C1() [0x428eed]

    ??:? void tmp2sjfxont.__modtest() [0x4298e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db29]

    ??:? runModuleUnitTests [0x42ea19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqgvexlu.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpfqgvexlu.__unittest_L29_C1() [0x428f65]

    ??:? void tmpfqgvexlu.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b =\
    \ 0;\n    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n      \
    \  {\n            if (a != b) \n            {\n                float diff = abs(a\
    \ - b);\n                if (diff < min_diff) \n                {\n          \
    \          min_diff = diff;\n                    min_a = a;\n                \
    \    min_b = b;\n                }\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7o8liccz.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp7o8liccz.__unittest_L31_C1() [0x428e85]

    ??:? void tmp7o8liccz.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xhh2yo5.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp4xhh2yo5.__unittest_L28_C1() [0x428e99]

    ??:? void tmp4xhh2yo5.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float smallest_difference = float.infinity;\n\
    \    float first_number = 0;\n    float second_number = 0;\n    for (uint i =\
    \ 0; i < numbers.length; i++) \n    {\n        for (uint j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float difference = abs(numbers[i] - numbers[j]);\n\
    \            if (difference < smallest_difference) \n            {\n         \
    \       smallest_difference = difference;\n                first_number = numbers[i];\n\
    \                second_number = numbers[j];\n            }\n        }\n    }\n\
    \    return tuple(first_number, second_number);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8sat9az1.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f21]

    ??:? void tmp8sat9az1.__unittest_L29_C1() [0x428ed9]

    ??:? void tmp8sat9az1.__modtest() [0x4298d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432469]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432918]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db19]

    ??:? runModuleUnitTests [0x42ea09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    int min_index = 0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n\
    \        for (int j = i + 1; j < numbers.length; j++) \n        {\n          \
    \  float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_index\
    \ = i;\n            }\n        }\n    }\n    return tuple(numbers[min_index],\
    \ numbers[min_index + 1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpehz5y2k6.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f41]

    ??:? void tmpehz5y2k6.__unittest_L27_C1() [0x428efd]

    ??:? void tmpehz5y2k6.__modtest() [0x4298f8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db62]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432489]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432938]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432415]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db39]

    ??:? runModuleUnitTests [0x42ea29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a404]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a == b) continue;\n            float diff = abs(a - b);\n     \
    \       if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = a;\n                min_b = b;\n            }\n     \
    \   }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxe67wbs4.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpxe67wbs4.__unittest_L29_C1() [0x428e85]

    ??:? void tmpxe67wbs4.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = numbers[1] - numbers[0];\n\
    \    float min_difference_a = numbers[0];\n    float min_difference_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float difference = abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < min_difference)\n            {\n\
    \                min_difference = difference;\n                min_difference_a\
    \ = numbers[i];\n                min_difference_b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_difference_a, min_difference_b);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps8l_f8e6.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmps8l_f8e6.__unittest_L29_C1() [0x428f49]

    ??:? void tmps8l_f8e6.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b =\
    \ 0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n\
    \            if (a == b)\n                continue;\n            float diff =\
    \ abs(a - b);\n            if (diff < min_diff)\n            {\n             \
    \   min_diff = diff;\n                min_a = a;\n                min_b = b;\n\
    \            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvoxuld3a.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpvoxuld3a.__unittest_L30_C1() [0x428e85]

    ??:? void tmpvoxuld3a.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (size_t\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[i] -\
    \ numbers[j]);\n            if (diff < min_diff) \n            {\n           \
    \     min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqgpebb74.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a161]

    ??:? void tmpqgpebb74.__unittest_L27_C1() [0x429051]

    ??:? void tmpqgpebb74.__modtest() [0x429b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f15f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e06e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432995]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432921]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e045]

    ??:? runModuleUnitTests [0x42ef35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    int min_diff_index = 0;\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n    }\n    return tuple(numbers[min_diff_index - 1], numbers[min_diff_index]);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn_pv5t7t.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ea1]

    ??:? void tmpn_pv5t7t.__unittest_L24_C1() [0x428e65]

    ??:? void tmpn_pv5t7t.__modtest() [0x429854]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb8f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432874]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432351]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da75]

    ??:? runModuleUnitTests [0x42e965]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a364]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn3r6nluz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpn3r6nluz.__unittest_L29_C1() [0x428f49]

    ??:? void tmpn3r6nluz.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpan7ucz6s.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpan7ucz6s.__unittest_L29_C1() [0x428f65]

    ??:? void tmpan7ucz6s.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float first_element;\n    float second_element;\n\
    \    foreach (index, number; numbers)\n    {\n        if (index == 0) continue;\n\
    \        float diff = abs(number - numbers[index - 1]);\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            first_element = numbers[index\
    \ - 1];\n            second_element = number;\n        }\n    }\n    return tuple(first_element,\
    \ second_element);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsxfscbnp.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpsxfscbnp.__unittest_L26_C1() [0x428e81]

    ??:? void tmpsxfscbnp.__modtest() [0x42987c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43235d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43280c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4322e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da0d]

    ??:? runModuleUnitTests [0x42e8fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = float.infinity;\n\
    \    float min_first = 0;\n    float min_second = 0;\n    foreach (i, first; numbers)\n\
    \    {\n        foreach (second; numbers[i+1..$])\n        {\n            float\
    \ difference = abs(first - second);\n            if (difference < min_difference)\n\
    \            {\n                min_difference = difference;\n               \
    \ min_first = first;\n                min_second = second;\n            }\n  \
    \      }\n    }\n    return tuple(min_first, min_second);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_21_e6ba.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f21]

    ??:? void tmp_21_e6ba.__unittest_L29_C1() [0x428ed9]

    ??:? void tmp_21_e6ba.__modtest() [0x4298d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432469]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432918]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db19]

    ??:? runModuleUnitTests [0x42ea09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xhh2yo5.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp4xhh2yo5.__unittest_L28_C1() [0x428e99]

    ??:? void tmp4xhh2yo5.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_elem1 = numbers[0];\n    float min_elem2 = numbers[1];\n    for\
    \ (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_elem1 = numbers[i];\n           \
    \     min_elem2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_elem1,\
    \ min_elem2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpob4v658b.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f99]

    ??:? void tmpob4v658b.__unittest_L29_C1() [0x428f55]

    ??:? void tmpob4v658b.__modtest() [0x429950]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432990]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43246d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db91]

    ??:? runModuleUnitTests [0x42ea81]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a45c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b =\
    \ 0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n\
    \            if (a == b) continue;\n            float diff = abs(a - b);\n   \
    \         if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = a;\n                min_b = b;\n            }\n     \
    \   }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp055avcxd.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp055avcxd.__unittest_L29_C1() [0x428e85]

    ??:? void tmp055avcxd.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a == b)\n                continue;\n            float diff = abs(a\
    \ - b);\n            if (diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                min_a = a;\n                min_b = b;\n          \
    \  }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpison9m47.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpison9m47.__unittest_L30_C1() [0x428e85]

    ??:? void tmpison9m47.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd6dovaxe.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpd6dovaxe.__unittest_L28_C1() [0x428e99]

    ??:? void tmpd6dovaxe.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) min_pair = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_pair = tuple(numbers[i], numbers[j]);\n            }\n  \
    \      }\n    }\n    return min_pair;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo1wsdm07.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpo1wsdm07.__unittest_L27_C1() [0x429041]

    ??:? void tmpo1wsdm07.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a, min_b;\n    foreach (a;\
    \ numbers)\n    {\n        foreach (b; numbers)\n        {\n            if (a\
    \ == b) continue;\n            float diff = abs(a - b);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_a = a;\n                min_b = b;\n            }\n        }\n    }\n\
    \    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2irc3zdc.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmp2irc3zdc.__unittest_L28_C1() [0x428e7d]

    ??:? void tmp2irc3zdc.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.max;\n    float\
    \ min_diff_first = 0;\n    float min_diff_second = 0;\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_first = numbers[i];\n                min_diff_second\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_first,\
    \ min_diff_second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnkhap6g4.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f29]

    ??:? void tmpnkhap6g4.__unittest_L29_C1() [0x428ee1]

    ??:? void tmpnkhap6g4.__modtest() [0x4298dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db21]

    ??:? runModuleUnitTests [0x42ea11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] - numbers[1]);\n\
    \    int minIndex = 0;\n    for (int i = 0; i < numbers.length - 1; i++) \n  \
    \  {\n        float diff = abs(numbers[i] - numbers[i + 1]);\n        if (diff\
    \ < minDiff) \n        {\n            minDiff = diff;\n            minIndex =\
    \ i;\n        }\n    }\n    return tuple(numbers[minIndex], numbers[minIndex +\
    \ 1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4fv5h23m.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f31]

    ??:? void tmp4fv5h23m.__unittest_L24_C1() [0x428ee9]

    ??:? void tmp4fv5h23m.__modtest() [0x4298e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db29]

    ??:? runModuleUnitTests [0x42ea19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n    for\
    \ (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i +\
    \ 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[j]\
    \ - numbers[i]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwwwad1f.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a141]

    ??:? void tmpnwwwad1f.__unittest_L27_C1() [0x429031]

    ??:? void tmpnwwwad1f.__modtest() [0x429af4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f13f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e04e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432975]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e24]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432901]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e025]

    ??:? runModuleUnitTests [0x42ef15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a690]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_first = numbers[0];\n    float min_second = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_first = numbers[i];\n          \
    \      min_second = numbers[j];\n            }\n        }\n    }\n    return tuple(min_first,\
    \ min_second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp56qsmepu.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmp56qsmepu.__unittest_L29_C1() [0x428f49]

    ??:? void tmp56qsmepu.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xhh2yo5.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp4xhh2yo5.__unittest_L28_C1() [0x428e99]

    ??:? void tmp4xhh2yo5.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n   \
    \         float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpepo80ol0.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e95]

    ??:? void tmpepo80ol0.__unittest_L28_C1() [0x428f01]

    ??:? void tmpepo80ol0.__modtest() [0x4298fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eba7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43288c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432369]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da8d]

    ??:? runModuleUnitTests [0x42e97d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n      \
    \  {\n            if (a == b)\n                continue;\n            float diff\
    \ = abs(a - b);\n            if (diff < min_diff)\n            {\n           \
    \     min_diff = diff;\n                min_diff_a = a;\n                min_diff_b\
    \ = b;\n            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp60a4g_qf.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp60a4g_qf.__unittest_L30_C1() [0x428e85]

    ??:? void tmp60a4g_qf.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float min_first = numbers[0];\n\
    \    float min_second = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_first =\
    \ numbers[i];\n                min_second = numbers[j];\n            }\n     \
    \   }\n    }\n    return tuple(min_first, min_second);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpykupq2xx.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e95]

    ??:? void tmpykupq2xx.__unittest_L28_C1() [0x428f01]

    ??:? void tmpykupq2xx.__modtest() [0x4298fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eba7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43288c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432369]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da8d]

    ??:? runModuleUnitTests [0x42e97d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b =\
    \ 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyj7fqneu.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpyj7fqneu.__unittest_L28_C1() [0x428e99]

    ??:? void tmpyj7fqneu.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min = float.max;\n    float min_i = 0;\n    float min_j = 0;\n    foreach\
    \ (i, number; numbers) \n    {\n        foreach (j, other_number; numbers[i+1..$])\
    \ \n        {\n            float diff = abs(number - other_number);\n        \
    \    if (diff < min) \n            {\n                min = diff;\n          \
    \      min_i = i;\n                min_j = j + i + 1;\n            }\n       \
    \ }\n    }\n    return tuple(numbers[min_i], numbers[min_j]);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1l5hbqd.d(26): Error: cannot implicitly convert expression `min_i`
    of type `float` to `ulong`

    /tmp/tmpp1l5hbqd.d(26): Error: cannot implicitly convert expression `min_j` of
    type `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1l5hbqd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float first = numbers[0];\n    float second = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                first = numbers[i];\n                second = numbers[j];\n \
    \           }\n        }\n    }\n    return tuple(first, second);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph6mljv7r.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmph6mljv7r.__unittest_L29_C1() [0x428f49]

    ??:? void tmph6mljv7r.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a != b)\n            {\n                float diff = abs(a - b);\n\
    \                if (diff < min_diff)\n                {\n                   \
    \ min_diff = diff;\n                    min_a = a;\n                    min_b\
    \ = b;\n                }\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy6z3n5wd.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpy6z3n5wd.__unittest_L31_C1() [0x428e85]

    ??:? void tmpy6z3n5wd.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2xqu_jbd.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp2xqu_jbd.__unittest_L27_C1() [0x429041]

    ??:? void tmp2xqu_jbd.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) closest_elements = tuple(numbers[0], numbers[1]);\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                closest_elements = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpylu718_t.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a161]

    ??:? void tmpylu718_t.__unittest_L27_C1() [0x429051]

    ??:? void tmpylu718_t.__modtest() [0x429b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f15f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e06e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432995]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432921]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e045]

    ??:? runModuleUnitTests [0x42ef35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpel1iqswg.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e95]

    ??:? void tmpel1iqswg.__unittest_L28_C1() [0x428f01]

    ??:? void tmpel1iqswg.__modtest() [0x4298fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eba7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43288c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432369]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da8d]

    ??:? runModuleUnitTests [0x42e97d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn3r6nluz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpn3r6nluz.__unittest_L29_C1() [0x428f49]

    ??:? void tmpn3r6nluz.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n  \
    \      {\n            if (a == b) \n            {\n                continue;\n\
    \            }\n            float diff = abs(a - b);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = a;\n\
    \                min_b = b;\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptex0yd3p.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmptex0yd3p.__unittest_L32_C1() [0x428e85]

    ??:? void tmptex0yd3p.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n        {\n\
    \            if (a == b) continue;\n            float diff = abs(a - b);\n   \
    \         if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = a;\n                min_b = b;\n            }\n     \
    \   }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpod3wbya3.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpod3wbya3.__unittest_L29_C1() [0x428e85]

    ??:? void tmpod3wbya3.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a == b) continue;\n            float diff = abs(a - b);\n     \
    \       if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = a;\n                min_b = b;\n            }\n     \
    \   }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_qdiaiid.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp_qdiaiid.__unittest_L29_C1() [0x428e85]

    ??:? void tmp_qdiaiid.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfohjgp_o.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpfohjgp_o.__unittest_L28_C1() [0x428e99]

    ??:? void tmpfohjgp_o.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptxh59tte.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmptxh59tte.__unittest_L29_C1() [0x428f49]

    ??:? void tmptxh59tte.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach (a; numbers) \n    {\n        foreach (b; numbers) \n  \
    \      {\n            if (a == b) \n            {\n                continue;\n\
    \            }\n            float diff = abs(a - b);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = a;\n\
    \                min_b = b;\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptex0yd3p.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmptex0yd3p.__unittest_L32_C1() [0x428e85]

    ??:? void tmptex0yd3p.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_diff_1 = numbers[0];\n\
    \    float min_diff_2 = numbers[1];\n    foreach(i, number; numbers)\n    {\n\
    \        foreach(j, number2; numbers)\n        {\n            if(i != j)\n   \
    \         {\n                float diff = abs(number - number2);\n           \
    \     if(diff < min_diff)\n                {\n                    min_diff = diff;\n\
    \                    min_diff_1 = number;\n                    min_diff_2 = number2;\n\
    \                }\n            }\n        }\n    }\n    return tuple(min_diff_1,\
    \ min_diff_2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwk36htet.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e8d]

    ??:? void tmpwk36htet.__unittest_L31_C1() [0x428ef9]

    ??:? void tmpwk36htet.__modtest() [0x4298f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42daae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432884]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432361]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da85]

    ??:? runModuleUnitTests [0x42e975]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a350]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float first_element = 0;\n    float second_element\
    \ = 0;\n    foreach (i, number; numbers)\n    {\n        foreach (j, other_number;\
    \ numbers[i+1..$])\n        {\n            float diff = abs(number - other_number);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                first_element = number;\n                second_element = other_number;\n\
    \            }\n        }\n    }\n    return tuple(first_element, second_element);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0ihl50w3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e25]

    ??:? void tmp0ihl50w3.__unittest_L28_C1() [0x428e91]

    ??:? void tmp0ihl50w3.__modtest() [0x42988c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb37]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43236d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43281c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4322f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da1d]

    ??:? runModuleUnitTests [0x42e90d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_num1 = min(numbers[i], numbers[j]);\n                min_num2\
    \ = max(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ tuple(min_num1, min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpno2zosio.d(22): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpno2zosio.d(23): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpno2zosio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) min_pair = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_pair = tuple(numbers[i], numbers[j]);\n            }\n  \
    \      }\n    }\n    return min_pair;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo1wsdm07.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpo1wsdm07.__unittest_L27_C1() [0x429041]

    ??:? void tmpo1wsdm07.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float first_number = 0.0;\n    float second_number\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                first_number = numbers[i];\n       \
    \         second_number = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(first_number, second_number);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplyrdbhpq.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmplyrdbhpq.__unittest_L28_C1() [0x428e99]

    ??:? void tmplyrdbhpq.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.max;\n    Tuple!(float, float) closest_elements;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float distance = abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < min_distance) \n            {\n \
    \               min_distance = distance;\n                closest_elements = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoin66ti0.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fd5]

    ??:? void tmpoin66ti0.__unittest_L26_C1() [0x428f7d]

    ??:? void tmpoin66ti0.__modtest() [0x429a40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42efd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dee2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432809]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432cb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432795]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42deb9]

    ??:? runModuleUnitTests [0x42eda9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a524]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.infinity;\n    float min_distance_first = 0.0;\n\
    \    float min_distance_second = 0.0;\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (size_t j = i + 1; j < numbers.length; j++) \n   \
    \     {\n            float distance = abs(numbers[i] - numbers[j]);\n        \
    \    if (distance < min_distance) \n            {\n                min_distance\
    \ = distance;\n                min_distance_first = numbers[i];\n            \
    \    min_distance_second = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_distance_first, min_distance_second);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpskfg2xpu.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e35]

    ??:? void tmpskfg2xpu.__unittest_L28_C1() [0x428ea5]

    ??:? void tmpskfg2xpu.__modtest() [0x4298a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43237d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43282c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da2d]

    ??:? runModuleUnitTests [0x42e91d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n    \
    \    {\n            if (a == b)\n                continue;\n            float\
    \ diff = abs(a - b);\n            if (diff < min_diff)\n            {\n      \
    \          min_diff = diff;\n                min_a = a;\n                min_b\
    \ = b;\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0xh2w6vb.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp0xh2w6vb.__unittest_L30_C1() [0x428e85]

    ??:? void tmp0xh2w6vb.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi7wlk2rr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpi7wlk2rr.__unittest_L28_C1() [0x428e99]

    ??:? void tmpi7wlk2rr.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptxh59tte.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmptxh59tte.__unittest_L29_C1() [0x428f49]

    ??:? void tmptxh59tte.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqgvexlu.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpfqgvexlu.__unittest_L29_C1() [0x428f65]

    ??:? void tmpfqgvexlu.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4iy_i5bo.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a131]

    ??:? void tmp4iy_i5bo.__unittest_L27_C1() [0x429025]

    ??:? void tmp4iy_i5bo.__modtest() [0x429ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f12f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e03e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432965]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4328f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e015]

    ??:? runModuleUnitTests [0x42ef05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a680]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0.0;\n    float min_diff_b\
    \ = 0.0;\n    foreach (i, a; numbers)\n    {\n        foreach (j, b; numbers)\n\
    \        {\n            if (i == j) continue;\n            float diff = abs(a\
    \ - b);\n            if (diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                min_diff_a = a;\n                min_diff_b = b;\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppbgfb56c.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmppbgfb56c.__unittest_L29_C1() [0x428e7d]

    ??:? void tmppbgfb56c.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (size_t\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[i] -\
    \ numbers[j]);\n            if (diff < min_diff) \n            {\n           \
    \     min_diff = diff;\n                min_a = numbers[i];\n                min_b\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt1rod_z0.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb9]

    ??:? void tmpt1rod_z0.__unittest_L29_C1() [0x428f75]

    ??:? void tmpt1rod_z0.__modtest() [0x429970]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432501]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43248d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dbb1]

    ??:? runModuleUnitTests [0x42eaa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a47c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n    float\
    \ min_a = 0.0;\n    float min_b = 0.0;\n    foreach (a; numbers) \n    {\n   \
    \     foreach (b; numbers) \n        {\n            if (a != b) \n           \
    \ {\n                float diff = abs(a - b);\n                if (diff < min_diff)\
    \ \n                {\n                    min_diff = diff;\n                \
    \    min_a = a;\n                    min_b = b;\n                }\n         \
    \   }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg4io2tw1.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f11]

    ??:? void tmpg4io2tw1.__unittest_L32_C1() [0x428ec9]

    ??:? void tmpg4io2tw1.__modtest() [0x4298c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ebaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432894]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432371]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da95]

    ??:? runModuleUnitTests [0x42e985]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a360]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = float.max;\n    float\
    \ min_a = 0;\n    float min_b = 0;\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_a = numbers[i];\n                min_b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min(min_a, min_b), max(min_a, min_b));\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeeyg3okb.d(27): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpeeyg3okb.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeeyg3okb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a != b)\n            {\n                float diff = abs(a - b);\n\
    \                if (diff < min_diff)\n                {\n                   \
    \ min_diff = diff;\n                    min_a = a;\n                    min_b\
    \ = b;\n                }\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdnem9zl.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpjdnem9zl.__unittest_L31_C1() [0x428e85]

    ??:? void tmpjdnem9zl.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float smallest_difference = float.max;\n\
    \    float first_element = 0.0;\n    float second_element = 0.0;\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < smallest_difference)\n            {\n                smallest_difference\
    \ = diff;\n                first_element = numbers[i];\n                second_element\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(first_element,\
    \ second_element);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwxibndj3.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f29]

    ??:? void tmpwxibndj3.__unittest_L29_C1() [0x428ee1]

    ??:? void tmpwxibndj3.__modtest() [0x4298dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db21]

    ??:? runModuleUnitTests [0x42ea11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float a = 0.0;\n    float b = 0.0;\n   \
    \ foreach (i, x; numbers) \n    {\n        foreach (j, y; numbers[i+1..$]) \n\
    \        {\n            float diff = abs(x - y);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                a = x;\n\
    \                b = y;\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfybg4x1d.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e25]

    ??:? void tmpfybg4x1d.__unittest_L28_C1() [0x428e91]

    ??:? void tmpfybg4x1d.__modtest() [0x42988c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb37]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43236d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43281c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4322f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da1d]

    ??:? runModuleUnitTests [0x42e90d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a == b) continue;\n            float diff = abs(a - b);\n     \
    \       if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = a;\n                min_b = b;\n            }\n     \
    \   }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxe67wbs4.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpxe67wbs4.__unittest_L29_C1() [0x428e85]

    ??:? void tmpxe67wbs4.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n        {\n  \
    \          if (a != b)\n            {\n                float diff = abs(a - b);\n\
    \                if (diff < min_diff)\n                {\n                   \
    \ min_diff = diff;\n                    min_a = a;\n                    min_b\
    \ = b;\n                }\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjdnem9zl.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpjdnem9zl.__unittest_L31_C1() [0x428e85]

    ??:? void tmpjdnem9zl.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpunni9rsz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpunni9rsz.__unittest_L29_C1() [0x428f65]

    ??:? void tmpunni9rsz.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length - 1; i++) \n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[i] -\
    \ numbers[j]);\n            if (diff < min_diff) \n            {\n           \
    \     min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpul1fvw7r.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a139]

    ??:? void tmpul1fvw7r.__unittest_L27_C1() [0x429029]

    ??:? void tmpul1fvw7r.__modtest() [0x429aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f137]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e046]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43296d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4328f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e01d]

    ??:? runModuleUnitTests [0x42ef0d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a688]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.infinity;\n    float min_distance_a = 0.0;\n \
    \   float min_distance_b = 0.0;\n    foreach (a; numbers)\n    {\n        foreach\
    \ (b; numbers)\n        {\n            if (a != b)\n            {\n          \
    \      float distance = abs(a - b);\n                if (distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         min_distance_a = a;\n                    min_distance_b = b;\n     \
    \           }\n            }\n        }\n    }\n    return tuple(min_distance_a,\
    \ min_distance_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq015fehn.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpq015fehn.__unittest_L31_C1() [0x428e85]

    ??:? void tmpq015fehn.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.max;\n    float min_distance_first = 0;\n    float\
    \ min_distance_second = 0;\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     float distance = abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               min_distance_first = numbers[i];\n                min_distance_second\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_distance_first,\
    \ min_distance_second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp08fqupbe.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp08fqupbe.__unittest_L28_C1() [0x428e99]

    ??:? void tmp08fqupbe.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = std.math.fabs(numbers[0]\
    \ - numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = std.math.fabs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwvzndvi8.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f51]

    ??:? void tmpwvzndvi8.__unittest_L29_C1() [0x428f15]

    ??:? void tmpwvzndvi8.__modtest() [0x429904]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432499]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432948]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432425]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db49]

    ??:? runModuleUnitTests [0x42ea39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_distance = float.max;\n    float min_distance_first_element = 0;\n\
    \    float min_distance_second_element = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float distance = abs(numbers[i] - numbers[j]);\n           \
    \ if (distance < min_distance) \n            {\n                min_distance =\
    \ distance;\n                min_distance_first_element = numbers[i];\n      \
    \          min_distance_second_element = numbers[j];\n            }\n        }\n\
    \    }\n    return tuple(min_distance_first_element, min_distance_second_element);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd6uopn9a.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpd6uopn9a.__unittest_L28_C1() [0x428e99]

    ??:? void tmpd6uopn9a.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuyxl37jp.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpuyxl37jp.__unittest_L28_C1() [0x428e99]

    ??:? void tmpuyxl37jp.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeqh8e09p.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpeqh8e09p.__unittest_L29_C1() [0x428f49]

    ??:? void tmpeqh8e09p.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xhh2yo5.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp4xhh2yo5.__unittest_L28_C1() [0x428e99]

    ??:? void tmp4xhh2yo5.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnhrtg7ga.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpnhrtg7ga.__unittest_L29_C1() [0x428f49]

    ??:? void tmpnhrtg7ga.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164278
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpan7ucz6s.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpan7ucz6s.__unittest_L29_C1() [0x428f65]

    ??:? void tmpan7ucz6s.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (size_t\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[i] -\
    \ numbers[j]);\n            if (diff < min_diff) \n            {\n           \
    \     min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqgpebb74.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a161]

    ??:? void tmpqgpebb74.__unittest_L27_C1() [0x429051]

    ??:? void tmpqgpebb74.__modtest() [0x429b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f15f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e06e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432995]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432921]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e045]

    ??:? runModuleUnitTests [0x42ef35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    // sort the numbers\n    numbers.sort();\n    // find the closest two\n \
    \   float min_diff = numbers[1] - numbers[0];\n    Tuple!(float, float) closest_pair\
    \ = tuple(numbers[0], numbers[1]);\n    for (int i = 1; i < numbers.length - 1;\
    \ i++)\n    {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            closest_pair\
    \ = tuple(numbers[i], numbers[i + 1]);\n        }\n    }\n    return closest_pair;\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxd6vdvm3.d(11): Error: no property `sort` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxd6vdvm3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpan7ucz6s.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpan7ucz6s.__unittest_L29_C1() [0x428f65]

    ??:? void tmpan7ucz6s.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0_9v8lbz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp0_9v8lbz.__unittest_L29_C1() [0x428f65]

    ??:? void tmp0_9v8lbz.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n   \
    \         float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpepo80ol0.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e95]

    ??:? void tmpepo80ol0.__unittest_L28_C1() [0x428f01]

    ??:? void tmpepo80ol0.__modtest() [0x4298fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eba7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43288c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432369]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da8d]

    ??:? runModuleUnitTests [0x42e97d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i+1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_codaki4.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp_codaki4.__unittest_L28_C1() [0x428e99]

    ??:? void tmp_codaki4.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppi2zci42.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmppi2zci42.__unittest_L28_C1() [0x428e99]

    ??:? void tmppi2zci42.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    // sort the array\n    numbers.sort();\n    // find the minimum difference\n\
    \    float min_diff = numbers[1] - numbers[0];\n    // find the minimum difference\
    \ pair\n    float min_diff_pair[2] = [numbers[0], numbers[1]];\n    // loop through\
    \ the array\n    for (int i = 1; i < numbers.length; i++)\n    {\n        // find\
    \ the difference between the current and the previous element\n        float diff\
    \ = numbers[i] - numbers[i-1];\n        // if the difference is less than the\
    \ minimum difference\n        if (diff < min_diff)\n        {\n            //\
    \ update the minimum difference\n            min_diff = diff;\n            //\
    \ update the minimum difference pair\n            min_diff_pair[0] = numbers[i-1];\n\
    \            min_diff_pair[1] = numbers[i];\n        }\n    }\n    // return the\
    \ minimum difference pair\n    return tuple(min_diff_pair[0], min_diff_pair[1]);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the furthest from each\n    other and return them in order (smaller\
    \ number, larger number).\n*/\nTuple!(float, float) find_furthest_elements(float[]\
    \ numbers) \n{\n    // sort the array\n    numbers.sort();\n    // find the maximum\
    \ difference\n    float max_diff = numbers[numbers.length-1] - numbers[0];\n \
    \   // find the maximum difference pair\n    float max_diff_pair[2] = [numbers[0],\
    \ numbers[numbers.length-1]];\n    // loop through the array\n    for (int i =\
    \ 1; i < numbers.length; i++)\n    {\n        // find the difference between the\
    \ current and the previous element\n        float diff = numbers[i] - numbers[i-1];\n\
    \        // if the difference is greater than the maximum difference\n       \
    \ if (diff > max_diff)\n        {\n            // update the maximum difference\n\
    \            max_diff = diff;\n            // update the maximum difference pair\n\
    \            max_diff_pair[0] = numbers[i-1];\n            max_\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwuy1d1f3.d(15): Deprecation: instead of C-style syntax, use D-style
    syntax `float[2] min_diff_pair`

    /tmp/tmpwuy1d1f3.d(45): Deprecation: instead of C-style syntax, use D-style syntax
    `float[2] max_diff_pair`

    /tmp/tmpwuy1d1f3.d(59): Error: found `unittest` when expecting `;` following statement

    /tmp/tmpwuy1d1f3.d(69): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpwuy1d1f3.d(69): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpwuy1d1f3.d(69): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwuy1d1f3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float closest_difference = float.infinity;\n    float closest_a = 0;\n  \
    \  float closest_b = 0;\n    foreach (a; numbers)\n    {\n        foreach (b;\
    \ numbers)\n        {\n            if (a == b)\n                continue;\n  \
    \          float diff = abs(a - b);\n            if (diff < closest_difference)\n\
    \            {\n                closest_difference = diff;\n                closest_a\
    \ = a;\n                closest_b = b;\n            }\n        }\n    }\n    return\
    \ tuple(closest_a, closest_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9ja8wtts.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp9ja8wtts.__unittest_L30_C1() [0x428e85]

    ??:? void tmp9ja8wtts.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpan7ucz6s.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpan7ucz6s.__unittest_L29_C1() [0x428f65]

    ??:? void tmpan7ucz6s.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9q0q9afc.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp9q0q9afc.__unittest_L29_C1() [0x428f65]

    ??:? void tmp9q0q9afc.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    foreach (a; numbers)\n    {\n        foreach (b; numbers)\n      \
    \  {\n            if (a == b) continue;\n            float diff = abs(a - b);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = a;\n                min_diff_b = b;\n          \
    \  }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5cu640_5.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmp5cu640_5.__unittest_L29_C1() [0x428e85]

    ??:? void tmp5cu640_5.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = numbers[1] - numbers[0];\n\
    \    int min_difference_index = 0;\n    for (int i = 1; i < numbers.length - 1;\
    \ i++)\n    {\n        float difference = numbers[i + 1] - numbers[i];\n     \
    \   if (difference < min_difference)\n        {\n            min_difference =\
    \ difference;\n            min_difference_index = i;\n        }\n    }\n    return\
    \ tuple(numbers[min_difference_index], numbers[min_difference_index + 1]);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpopccpw_o.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ea1]

    ??:? void tmpopccpw_o.__unittest_L24_C1() [0x428e65]

    ??:? void tmpopccpw_o.__modtest() [0x429854]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb8f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432874]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432351]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da75]

    ??:? runModuleUnitTests [0x42e965]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a364]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_num1 = 0;\n    float min_num2\
    \ = 0;\n    foreach(num1; numbers)\n    {\n        foreach(num2; numbers)\n  \
    \      {\n            if(num1 == num2)\n                continue;\n          \
    \  float diff = abs(num1 - num2);\n            if(diff < min_diff)\n         \
    \   {\n                min_diff = diff;\n                min_num1 = num1;\n  \
    \              min_num2 = num2;\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpliy_bmwg.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e15]

    ??:? void tmpliy_bmwg.__unittest_L30_C1() [0x428e85]

    ??:? void tmpliy_bmwg.__modtest() [0x429880]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432798]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432275]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d999]

    ??:? runModuleUnitTests [0x42e889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a264]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2xqu_jbd.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp2xqu_jbd.__unittest_L27_C1() [0x429041]

    ??:? void tmp2xqu_jbd.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqgvexlu.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpfqgvexlu.__unittest_L29_C1() [0x428f65]

    ??:? void tmpfqgvexlu.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_difference = float.infinity;\n\
    \    float first_number = 0.0;\n    float second_number = 0.0;\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float difference = abs(numbers[i] - numbers[j]);\n\
    \            if (difference < min_difference) \n            {\n              \
    \  min_difference = difference;\n                first_number = numbers[i];\n\
    \                second_number = numbers[j];\n            }\n        }\n    }\n\
    \    return tuple(first_number, second_number);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps5nu5mus.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f29]

    ??:? void tmps5nu5mus.__unittest_L29_C1() [0x428ee1]

    ??:? void tmps5nu5mus.__modtest() [0x4298dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db21]

    ??:? runModuleUnitTests [0x42ea11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164281
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    // If there are less than two numbers, return an empty tuple\n    if (numbers.length\
    \ < 2)\n        return tuple(0.0f, 0.0f);\n    \n    // Initialize the closest\
    \ distance to the maximum possible distance\n    float closest_distance = float.max;\n\
    \    \n    // Initialize the closest elements to the first two elements\n    float\
    \ closest_element_1 = numbers[0];\n    float closest_element_2 = numbers[1];\n\
    \    \n    // Iterate over the numbers and find the closest two\n    foreach (index_1,\
    \ element_1; numbers)\n    {\n        foreach (index_2, element_2; numbers)\n\
    \        {\n            // Skip if the two indices are the same\n            if\
    \ (index_1 == index_2)\n                continue;\n            \n            //\
    \ Skip if the two elements are the same\n            if (element_1 == element_2)\n\
    \                continue;\n            \n            // Calculate the distance\
    \ between the two elements\n            float distance = abs(element_1 - element_2);\n\
    \            \n            // If the distance is smaller than the current closest\
    \ distance, update the closest distance and closest elements\n            if (distance\
    \ < closest_distance)\n            {\n                closest_distance = distance;\n\
    \                closest_element_1 = element_1;\n                closest_element_2\
    \ = element_2;\n            }\n        }\n    }\n    \n    // Return the closest\
    \ elements\n    return tuple(closest_element_1, closest_element_2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjc_6yvg1.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e7d]

    ??:? void tmpjc_6yvg1.__unittest_L50_C1() [0x428ee9]

    ??:? void tmpjc_6yvg1.__modtest() [0x4298e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb8f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432874]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432351]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da75]

    ??:? runModuleUnitTests [0x42e965]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a340]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164281
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float smallest_difference = float.max;\n\
    \    float smallest_number = 0;\n    float largest_number = 0;\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float difference = abs(numbers[i] - numbers[j]);\n\
    \            if (difference < smallest_difference) \n            {\n         \
    \       smallest_difference = difference;\n                smallest_number = min(numbers[i],\
    \ numbers[j]);\n                largest_number = max(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return tuple(smallest_number, largest_number);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo95dt578.d(22): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpo95dt578.d(23): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo95dt578.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164280
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length - 1; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             result = tuple(numbers[i], numbers[j]);\n            }\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp44l9oxmx.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a159]

    ??:? void tmp44l9oxmx.__unittest_L27_C1() [0x429049]

    ??:? void tmp44l9oxmx.__modtest() [0x429b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f157]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e066]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43298d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432919]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e03d]

    ??:? runModuleUnitTests [0x42ef2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164281
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min_diff = float.max;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwm6ng3ge.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpwm6ng3ge.__unittest_L28_C1() [0x428e99]

    ??:? void tmpwm6ng3ge.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164279
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2xqu_jbd.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp2xqu_jbd.__unittest_L27_C1() [0x429041]

    ??:? void tmp2xqu_jbd.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
