language: d
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(c.value\
    \ > max)\n        {\n            max = c.value;\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return result;\n    }\n    result = new long[string];\n\
    \    foreach(c; histogram)\n    {\n        if(c.value == max)\n        {\n   \
    \         result.get.put(c.key, c.value);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjnisrtaw.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpjnisrtaw.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpjnisrtaw.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpjnisrtaw.d(30): Error: no property `value` for type `long`

    /tmp/tmpjnisrtaw.d(32): Error: no property `value` for type `long`

    /tmp/tmpjnisrtaw.d(39): Error: cannot pass type `string` as a function argument

    /tmp/tmpjnisrtaw.d(42): Error: no property `value` for type `long`

    /tmp/tmpjnisrtaw.d(44): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjnisrtaw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(c.value\
    \ > max)\n        {\n            max = c.value;\n        }\n    }\n    foreach(c;\
    \ histogram)\n    {\n        if(c.value == max)\n        {\n            result.insert(c.key);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppl47w0bw.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmppl47w0bw.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmppl47w0bw.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmppl47w0bw.d(30): Error: no property `value` for type `long`

    /tmp/tmppl47w0bw.d(32): Error: no property `value` for type `long`

    /tmp/tmppl47w0bw.d(37): Error: no property `value` for type `long`

    /tmp/tmppl47w0bw.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl47w0bw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(hist.count(c))\n\
    \            hist[c]++;\n        else\n            hist[c] = 1;\n    }\n    return\
    \ hist;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw45j5f07.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpw45j5f07.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpw45j5f07.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpw45j5f07.d(22): Error: cannot implicitly convert expression `hist` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw45j5f07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test) \n    {\n        if(c in histo)\n            histo[c]++;\n        else\n\
    \            histo[c] = 1;\n    }\n    long max = 0;\n    foreach(c; histo) \n\
    \    {\n        if(histo[c] > max)\n            max = histo[c];\n    }\n    if(max\
    \ > 0) \n    {\n        result = Nullable!(long[string])(new long[string]);\n\
    \        foreach(c; histo) \n        {\n            if(histo[c] == max)\n    \
    \            result.get.put(c, histo[c]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyln0bd_e.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpyln0bd_e.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpyln0bd_e.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpyln0bd_e.d(26): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyln0bd_e.d(27): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyln0bd_e.d(31): Error: cannot pass type `string` as a function argument

    /tmp/tmpyln0bd_e.d(34): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyln0bd_e.d(35): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyln0bd_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test) \n    {\n        if(!histogram.contains(c)) \n\
    \        {\n            histogram[c] = 0;\n        }\n        histogram[c]++;\n\
    \        if(histogram[c] > max) \n        {\n            max = histogram[c];\n\
    \        }\n    }\n    if(max == 0) \n    {\n        return result;\n    }\n \
    \   foreach(c; histogram.keys) \n    {\n        if(histogram[c] == max) \n   \
    \     {\n            result.get.put(c, max);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbc7xw9h2.d(19): Error: no property `contains` for type `long[string]`

    /tmp/tmpbc7xw9h2.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbc7xw9h2.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbc7xw9h2.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbc7xw9h2.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbc7xw9h2.d(37): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbc7xw9h2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    if(max\
    \ > 0)\n    {\n        result = histogram;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpboy64odt.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpboy64odt.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpboy64odt.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpboy64odt.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpboy64odt.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpboy64odt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histogram;\n    foreach(c; test)\n    {\n        histogram[c]++;\n\
    \    }\n    long max = max(histogram.values);\n    Nullable!(long[string]) result;\n\
    \    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n    \
    \    {\n            result.insert(histogram);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsxhcjlv1.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpsxhcjlv1.d(19): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpsxhcjlv1.d(25): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxhcjlv1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    long max = 0;\n    foreach(c; test)\n   \
    \ {\n        if(c in result)\n        {\n            result[c]++;\n        }\n\
    \        else\n        {\n            result[c] = 1;\n        }\n        max =\
    \ max(max, result[c]);\n    }\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7j0ajl9b.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp7j0ajl9b.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp7j0ajl9b.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp7j0ajl9b.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp7j0ajl9b.d(30): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp7j0ajl9b.d(32): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7j0ajl9b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] maxes;\n    foreach(k, v; result)\n    {\n        if(v == max)\n\
    \        {\n            maxes[k] = v;\n        }\n    }\n    return maxes;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9utjhey3.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp9utjhey3.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9utjhey3.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9utjhey3.d(26): Error: undefined identifier `maxElement`

    /tmp/tmp9utjhey3.d(35): Error: cannot implicitly convert expression `maxes` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9utjhey3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[] hist = new long[256];\n    foreach(c; test)\n    {\n       \
    \ hist[c]++;\n    }\n    long max = maxElement(hist);\n    Nullable!(long[string])\
    \ result = new Nullable!(long[string]);\n    foreach(i, c; test)\n    {\n    \
    \    if(hist[c] == max)\n        {\n            result.set(hist);\n          \
    \  break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_swvdj6i.d(19): Error: undefined identifier `maxElement`

    /tmp/tmp_swvdj6i.d(20): Error: cannot implicitly convert expression `new Nullable!(long[string])(null,
    true)` of type `Nullable!(long[string])*` to `Nullable!(long[string])`

    /tmp/tmp_swvdj6i.d(20):        Perhaps remove the `new` keyword?

    /tmp/tmp_swvdj6i.d(25): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_swvdj6i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test) \n    {\n        if(result.count(c))\
    \ \n        {\n            result[c]++;\n        }\n        else \n        {\n\
    \            result[c] = 1;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcr9f0r9w.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpcr9f0r9w.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpcr9f0r9w.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpcr9f0r9w.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcr9f0r9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(k, v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.insert(k, v);\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpoqo2ah.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpdpoqo2ah.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpoqo2ah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    long max = 0;\n    long[string] histogram;\n\
    \    foreach (c; test)\n    {\n        if (c == ' ')\n        {\n            continue;\n\
    \        }\n        if (histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c] += 1;\n \
    \       }\n        max = max(max, histogram[c]);\n    }\n    if (max == 0)\n \
    \   {\n        return result;\n    }\n    long[string] result_array;\n    foreach\
    \ (c; test)\n    {\n        if (c == ' ')\n        {\n            continue;\n\
    \        }\n        if (histogram[c] == max)\n        {\n            result_array\
    \ ~= c;\n        }\n    }\n    result = result_array;\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5k1a3qty.d(27): Error: no property `count` for type `long[string]`

    /tmp/tmp5k1a3qty.d(29): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5k1a3qty.d(33): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5k1a3qty.d(35): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5k1a3qty.d(48): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5k1a3qty.d(50): Error: cannot append type `immutable(char)` to type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5k1a3qty.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in hist)\n\
    \            hist[c]++;\n        else\n            hist[c] = 1;\n    }\n    long\
    \ max = maxElement(hist.values);\n    long[string] result;\n    foreach(c; hist)\n\
    \    {\n        if(c.value == max)\n            result[c.key] = c.value;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjtt36yrg.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpjtt36yrg.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpjtt36yrg.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpjtt36yrg.d(22): Error: undefined identifier `maxElement`

    /tmp/tmpjtt36yrg.d(26): Error: no property `value` for type `long`

    /tmp/tmpjtt36yrg.d(27): Error: no property `key` for type `long`

    /tmp/tmpjtt36yrg.d(29): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtt36yrg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    long max = 0;\n    foreach(c; test)\n   \
    \ {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \        if(result[c] > max)\n        {\n            max = result[c];\n      \
    \  }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlztm2h0.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmphlztm2h0.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmphlztm2h0.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmphlztm2h0.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmphlztm2h0.d(28): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmphlztm2h0.d(33): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmphlztm2h0.d(35): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlztm2h0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(isAlpha(c))\n        {\n            hist[c]++;\n  \
    \      }\n    }\n    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n\
    \    {\n        if(v == max)\n        {\n            result.insert(k, v);\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpurwqmq3l.d(18): Error: undefined identifier `isAlpha`

    /tmp/tmpurwqmq3l.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpurwqmq3l.d(23): Error: undefined identifier `maxElement`

    /tmp/tmpurwqmq3l.d(28): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpurwqmq3l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    long[string] histogram = new long[string];\n\
    \    foreach (c; test)\n    {\n        if (c in histogram)\n        {\n      \
    \      histogram[c]++;\n        }\n        else\n        {\n            histogram[c]\
    \ = 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n    foreach\
    \ (c; histogram.keys)\n    {\n        if (histogram[c] == max)\n        {\n  \
    \          result.put(c, max);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt1cznqqk.d(19): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpt1cznqqk.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpt1cznqqk.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpt1cznqqk.d(28): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpt1cznqqk.d(31): Error: undefined identifier `maxElement`

    /tmp/tmpt1cznqqk.d(36): Error: no property `put` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1cznqqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhntly03.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpuhntly03.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpuhntly03.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpuhntly03.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpuhntly03.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhntly03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist = new long[string];\n    foreach(c; test) {\n   \
    \     hist[c]++;\n    }\n    long max = maxElement(hist.values);\n    if(max ==\
    \ 0) {\n        return null;\n    }\n    long[string] result = new long[string];\n\
    \    foreach(k, v; hist) {\n        if(v == max) {\n            result[k] = v;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2hq5r41w.d(14): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp2hq5r41w.d(16): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2hq5r41w.d(18): Error: undefined identifier `maxElement`

    /tmp/tmp2hq5r41w.d(22): Error: cannot pass type `string` as a function argument

    /tmp/tmp2hq5r41w.d(20): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp2hq5r41w.d(28): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2hq5r41w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist = new long[string];\n\
    \    foreach(c; test)\n    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n   \
    \         result.insert(c, hist[c]);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnm8wlxs6.d(15): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpnm8wlxs6.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpnm8wlxs6.d(20): Error: undefined identifier `maxElement`

    /tmp/tmpnm8wlxs6.d(25): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnm8wlxs6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    long[string] finalResult;\n\
    \    foreach(k, v; result)\n    {\n        if(v == max)\n        {\n         \
    \   finalResult[k] = v;\n        }\n    }\n    return finalResult;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdst9vp40.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdst9vp40.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdst9vp40.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdst9vp40.d(26): Error: undefined identifier `maxElement`

    /tmp/tmpdst9vp40.d(29): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpdst9vp40.d(39): Error: cannot implicitly convert expression `finalResult`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdst9vp40.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    long max = 0;\n   \
    \ foreach(c; result)\n    {\n        if(result[c] > max)\n        {\n        \
    \    max = result[c];\n        }\n    }\n    long[string] result2;\n    foreach(c;\
    \ result)\n    {\n        if(result[c] == max)\n        {\n            result2[c]\
    \ = result[c];\n        }\n    }\n    if(result2.length == 0)\n    {\n       \
    \ return null;\n    }\n    return result2;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3t5cbgj7.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmp3t5cbgj7.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp3t5cbgj7.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp3t5cbgj7.d(29): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp3t5cbgj7.d(31): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp3t5cbgj7.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp3t5cbgj7.d(39): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp3t5cbgj7.d(44): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp3t5cbgj7.d(46): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3t5cbgj7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c))\n\
    \        {\n            result[c]++;\n        }\n        else\n        {\n   \
    \         result[c] = 1;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8si4tpij.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmp8si4tpij.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp8si4tpij.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp8si4tpij.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8si4tpij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    long max\
    \ = 0;\n    foreach(c; test)\n    {\n        if(!hist.contains(c))\n         \
    \   hist[c] = 0;\n        hist[c]++;\n        if(hist[c] > max)\n            max\
    \ = hist[c];\n    }\n    foreach(c; test)\n    {\n        if(hist[c] == max)\n\
    \            result.insert(c);\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptpqlzi6f.d(19): Error: no property `contains` for type `long[string]`

    /tmp/tmptpqlzi6f.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmptpqlzi6f.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmptpqlzi6f.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmptpqlzi6f.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmptpqlzi6f.d(27): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmptpqlzi6f.d(28): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpqlzi6f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    long max = 0;\n    foreach(c; test)\n   \
    \ {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \        max = max(max, result[c]);\n    }\n    if(max == 0)\n    {\n        return\
    \ null;\n    }\n    long[string] ret;\n    foreach(c; result)\n    {\n       \
    \ if(c.value == max)\n        {\n            ret[c.key] = c.value;\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx88ygq9m.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpx88ygq9m.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpx88ygq9m.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpx88ygq9m.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpx88ygq9m.d(35): Error: no property `value` for type `long`

    /tmp/tmpx88ygq9m.d(37): Error: no property `key` for type `long`

    /tmp/tmpx88ygq9m.d(30): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpx88ygq9m.d(40): Error: cannot implicitly convert expression `ret` of type
    `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx88ygq9m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return result;\n    }\n    result = new long[string];\n\
    \    foreach(c; histogram)\n    {\n        if(histogram[c] == max)\n        {\n\
    \            result.get!(c) = max;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6o4bdaqm.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp6o4bdaqm.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6o4bdaqm.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6o4bdaqm.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp6o4bdaqm.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp6o4bdaqm.d(39): Error: cannot pass type `string` as a function argument

    /tmp/tmp6o4bdaqm.d(42): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp6o4bdaqm.d(44): Error: template instance `get!(c)` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6o4bdaqm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(!histogram.contains(c))\n        {\n            histogram[c]\
    \ = 0;\n        }\n        histogram[c]++;\n    }\n    long max = 0;\n    foreach(c;\
    \ histogram.keys)\n    {\n        if(histogram[c] > max)\n        {\n        \
    \    max = histogram[c];\n        }\n    }\n    if(max > 0)\n    {\n        result\
    \ = Nullable!(long[string])(histogram.filter!(x => x.value == max));\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp40oeoxdt.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmp40oeoxdt.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp40oeoxdt.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp40oeoxdt.d(34): Error: no property `filter` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40oeoxdt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    long[string] result2;\n\
    \    foreach(k, v; result)\n    {\n        if(v == max)\n        {\n         \
    \   result2[k] = v;\n        }\n    }\n    return result2;\n}\nunittest\n{\n \
    \   alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdn5pvn1c.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdn5pvn1c.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdn5pvn1c.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdn5pvn1c.d(26): Error: undefined identifier `maxElement`

    /tmp/tmpdn5pvn1c.d(29): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpdn5pvn1c.d(39): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdn5pvn1c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = max(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.set(histogram);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwfo53co9.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpwfo53co9.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwfo53co9.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwfo53co9.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpwfo53co9.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfo53co9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        if(histo.count(c) == 0)\n        {\n            histo[c]\
    \ = 1;\n        }\n        else\n        {\n            histo[c]++;\n        }\n\
    \    }\n    long max = 0;\n    foreach(k, v; histo)\n    {\n        if(v > max)\n\
    \        {\n            max = v;\n        }\n    }\n    if(max == 0)\n    {\n\
    \        return result;\n    }\n    result = new long[string];\n    foreach(k,\
    \ v; histo)\n    {\n        if(v == max)\n        {\n            result.get!(k)\
    \ = v;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbzxge7tw.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpbzxge7tw.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbzxge7tw.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbzxge7tw.d(39): Error: cannot pass type `string` as a function argument

    /tmp/tmpbzxge7tw.d(44): Error: template instance `get!(k)` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzxge7tw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n    {\n   \
    \     if(v == max)\n        {\n            result.insert(k);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi4u9vn8y.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpi4u9vn8y.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4u9vn8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c == '\
    \ ')\n            continue;\n        if(!hist.contains(c))\n            hist[c]\
    \ = 0;\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n \
    \   long[string] result;\n    foreach(c; hist.keys)\n    {\n        if(hist[c]\
    \ == max)\n            result[c] = max;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw6_qmy5.d(19): Error: no property `contains` for type `long[string]`

    /tmp/tmppw6_qmy5.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmppw6_qmy5.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmppw6_qmy5.d(23): Error: undefined identifier `maxElement`

    /tmp/tmppw6_qmy5.d(30): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw6_qmy5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histogram;\n    foreach(c; test)\n    {\n        histogram[c]++;\n\
    \    }\n    long max = max(histogram.values);\n    long[string] result;\n    foreach(k,\
    \ v; histogram)\n    {\n        if(v == max)\n        {\n            result[k]\
    \ = v;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0a75q0lz.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp0a75q0lz.d(19): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp0a75q0lz.d(28): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a75q0lz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(k, v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.insert(k, v);\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpoqo2ah.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpdpoqo2ah.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpoqo2ah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in hist)\n\
    \            hist[c] += 1;\n        else\n            hist[c] = 1;\n    }\n  \
    \  long max = 0;\n    foreach(k, v; hist)\n    {\n        if(v > max)\n      \
    \      max = v;\n    }\n    long[string] result;\n    foreach(k, v; hist)\n  \
    \  {\n        if(v == max)\n            result ~= k;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmgz2h1vu.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpmgz2h1vu.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpmgz2h1vu.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpmgz2h1vu.d(32): Error: cannot append type `string` to type `long[string]`

    /tmp/tmpmgz2h1vu.d(34): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmgz2h1vu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(!hist.contains(c))\n        {\n            hist[c]\
    \ = 0;\n        }\n        hist[c]++;\n    }\n    long max = 0;\n    foreach(c;\
    \ hist)\n    {\n        if(hist[c] > max)\n        {\n            max = hist[c];\n\
    \        }\n    }\n    foreach(c; hist)\n    {\n        if(hist[c] == max)\n \
    \       {\n            result.emplace(hist);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwn6bhznu.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmpwn6bhznu.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwn6bhznu.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwn6bhznu.d(27): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwn6bhznu.d(29): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwn6bhznu.d(34): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwn6bhznu.d(36): Error: no property `emplace` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwn6bhznu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxn92ihe4.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpxn92ihe4.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpxn92ihe4.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpxn92ihe4.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxn92ihe4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(hist.count(c) == 0)\n        {\n            hist[c]\
    \ = 1;\n        }\n        else\n        {\n            hist[c]++;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value > max)\n\
    \        {\n            max = c.value;\n        }\n    }\n    if(max == 0)\n \
    \   {\n        return result;\n    }\n    long[string] max_hist;\n    foreach(c;\
    \ hist)\n    {\n        if(c.value == max)\n        {\n            max_hist[c.key]\
    \ = c.value;\n        }\n    }\n    result = max_hist;\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzddno194.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpzddno194.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzddno194.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzddno194.d(30): Error: no property `value` for type `long`

    /tmp/tmpzddno194.d(32): Error: no property `value` for type `long`

    /tmp/tmpzddno194.d(42): Error: no property `value` for type `long`

    /tmp/tmpzddno194.d(44): Error: no property `key` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzddno194.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    Nullable!(long[string]) ret = new long[string];\n    foreach(key, value;\
    \ result)\n    {\n        if(value == max)\n        {\n            ret[key] =\
    \ value;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpug82q7b0.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpug82q7b0.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpug82q7b0.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpug82q7b0.d(26): Error: undefined identifier `maxElement`

    /tmp/tmpug82q7b0.d(27): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpug82q7b0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(c.isLetter)\n        {\n \
    \           histo[c]++;\n            if(histo[c] > max)\n            {\n     \
    \           max = histo[c];\n            }\n        }\n    }\n    if(max > 0)\n\
    \    {\n        result = new long[string];\n        foreach(c; test)\n       \
    \ {\n            if(c.isLetter)\n            {\n                if(histo[c] ==\
    \ max)\n                {\n                    result.get!(true)[c] = max;\n \
    \               }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt9imd4_m.d(19): Error: no property `isLetter` for type `immutable(char)`

    /tmp/tmpt9imd4_m.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpt9imd4_m.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpt9imd4_m.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpt9imd4_m.d(30): Error: cannot pass type `string` as a function argument

    /tmp/tmpt9imd4_m.d(33): Error: no property `isLetter` for type `immutable(char)`

    /tmp/tmpt9imd4_m.d(35): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpt9imd4_m.d(37): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt9imd4_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in hist)\n\
    \            hist[c]++;\n        else\n            hist[c] = 1;\n    }\n    long\
    \ max = hist.values.max;\n    if(max == 0)\n        return Nullable!(long[string])();\n\
    \    long[string] result;\n    foreach(c; hist.keys)\n    {\n        if(hist[c]\
    \ == max)\n            result[c] = max;\n    }\n    return Nullable!(long[string])(result);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfaban19v.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpfaban19v.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpfaban19v.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpfaban19v.d(22): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfaban19v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n    {\n   \
    \     if(v == max)\n        {\n            result.insert(k);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi4u9vn8y.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpi4u9vn8y.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4u9vn8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        hist[c]++;\n    }\n    long max = 0;\n    foreach(c; hist)\n\
    \    {\n        if(c.value > max)\n        {\n            max = c.value;\n   \
    \     }\n    }\n    foreach(c; hist)\n    {\n        if(c.value == max)\n    \
    \    {\n            result.insert(c.key, max);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23e26ycc.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp23e26ycc.d(23): Error: no property `value` for type `long`

    /tmp/tmp23e26ycc.d(25): Error: no property `value` for type `long`

    /tmp/tmp23e26ycc.d(30): Error: no property `value` for type `long`

    /tmp/tmp23e26ycc.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23e26ycc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ result)\n    {\n        if(result[c] > max)\n        {\n            max = result[c];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    long[string]\
    \ result2;\n    foreach(c; result)\n    {\n        if(result[c] == max)\n    \
    \    {\n            result2[c] = max;\n        }\n    }\n    return result2;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmped5aprnz.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmped5aprnz.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmped5aprnz.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmped5aprnz.d(29): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmped5aprnz.d(31): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmped5aprnz.d(41): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmped5aprnz.d(43): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmped5aprnz.d(36): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmped5aprnz.d(46): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmped5aprnz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c; test)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.put(histogram);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdlorfr4w.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpdlorfr4w.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdlorfr4w.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdlorfr4w.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpdlorfr4w.d(30): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdlorfr4w.d(32): Error: no property `put` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdlorfr4w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    long max = 0;\n    foreach(c; test)\n   \
    \ {\n        if(!result.contains(c))\n            result[c] = 0;\n        result[c]++;\n\
    \        max = max(max, result[c]);\n    }\n    if(max == 0)\n        return null;\n\
    \    return result.filter!(a => a.value == max);\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp429ayey0.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmp429ayey0.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp429ayey0.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp429ayey0.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp429ayey0.d(25): Error: no property `filter` for type `long[string]`

    /tmp/tmp429ayey0.d(24): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp429ayey0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = max(histogram.values);\n    foreach(k, v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.put(k, v);\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm9j3wg0r.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpm9j3wg0r.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpm9j3wg0r.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpm9j3wg0r.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpm9j3wg0r.d(32): Error: no property `put` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9j3wg0r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(ch;\
    \ test)\n    {\n        if(histogram.count(ch) == 0)\n        {\n            histogram[ch]\
    \ = 1;\n        }\n        else\n        {\n            histogram[ch]++;\n   \
    \     }\n    }\n    long max = 0;\n    foreach(ch; histogram.keys)\n    {\n  \
    \      if(histogram[ch] > max)\n        {\n            max = histogram[ch];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = Nullable!(long[string])(histogram);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd70zg2oh.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpd70zg2oh.d(20): Error: cannot implicitly convert expression `ch` of type
    `immutable(char)` to `string`

    /tmp/tmpd70zg2oh.d(24): Error: cannot implicitly convert expression `ch` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd70zg2oh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgt5u6chx.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpgt5u6chx.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgt5u6chx.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgt5u6chx.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgt5u6chx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = max(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpta0zkmib.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpta0zkmib.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpta0zkmib.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpta0zkmib.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpta0zkmib.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpta0zkmib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        if(histo.count(c))\n        {\n            histo[c]++;\n\
    \        }\n        else\n        {\n            histo[c] = 1;\n        }\n  \
    \  }\n    long max = 0;\n    foreach(c; histo)\n    {\n        if(histo[c] > max)\n\
    \        {\n            max = histo[c];\n        }\n    }\n    if(max == 0)\n\
    \    {\n        return result;\n    }\n    foreach(c; histo)\n    {\n        if(histo[c]\
    \ == max)\n        {\n            result.insert(c, histo[c]);\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwyv1byv3.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpwyv1byv3.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwyv1byv3.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwyv1byv3.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwyv1byv3.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwyv1byv3.d(41): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwyv1byv3.d(43): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwyv1byv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    long max = 0;\n    foreach(c; test)\n   \
    \ {\n        if(result.contains(c))\n        {\n            result[c]++;\n   \
    \     }\n        else\n        {\n            result[c] = 1;\n        }\n    \
    \    max = max(max, result[c]);\n    }\n    if(max == 0)\n    {\n        return\
    \ null;\n    }\n    else\n    {\n        return result.filter!(x => x.value ==\
    \ max).values;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ouopdn3.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmp8ouopdn3.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp8ouopdn3.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp8ouopdn3.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp8ouopdn3.d(34): Error: no property `filter` for type `long[string]`

    /tmp/tmp8ouopdn3.d(30): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ouopdn3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = hist.values.max;\n    foreach(k, v; hist)\n    {\n        if(v\
    \ == max)\n        {\n            result.set(hist);\n            break;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe2nri6f6.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpe2nri6f6.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpe2nri6f6.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpe2nri6f6.d(27): Error: no property `max` for type `long[]`

    /tmp/tmpe2nri6f6.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2nri6f6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    foreach(c;\
    \ histogram)\n    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfrmz7y_k.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpfrmz7y_k.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpfrmz7y_k.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpfrmz7y_k.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpfrmz7y_k.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpfrmz7y_k.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpfrmz7y_k.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrmz7y_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(hist.count(c) == 0)\n        {\n            hist[c]\
    \ = 1;\n        }\n        else\n        {\n            hist[c] += 1;\n      \
    \  }\n    }\n    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n\
    \    {\n        if(hist[c] == max)\n        {\n            result.set(hist);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppdc674xq.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmppdc674xq.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmppdc674xq.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmppdc674xq.d(27): Error: undefined identifier `maxElement`

    /tmp/tmppdc674xq.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdc674xq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test) \n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(c.value\
    \ > max)\n        {\n            max = c.value;\n        }\n    }\n    foreach(c;\
    \ histogram)\n    {\n        if(c.value == max)\n        {\n            result.insert(c.key);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunyipert.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpunyipert.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpunyipert.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpunyipert.d(30): Error: no property `value` for type `long`

    /tmp/tmpunyipert.d(32): Error: no property `value` for type `long`

    /tmp/tmpunyipert.d(37): Error: no property `value` for type `long`

    /tmp/tmpunyipert.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunyipert.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(!hist.contains(c))\n        {\n            hist[c]\
    \ = 0;\n        }\n        hist[c]++;\n    }\n    long max = 0;\n    foreach(c;\
    \ hist)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    foreach(c; hist)\n    {\n        if(c.value == max)\n \
    \       {\n            result.insert(c.key, max);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw1a83yxu.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmpw1a83yxu.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpw1a83yxu.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpw1a83yxu.d(27): Error: no property `value` for type `long`

    /tmp/tmpw1a83yxu.d(29): Error: no property `value` for type `long`

    /tmp/tmpw1a83yxu.d(34): Error: no property `value` for type `long`

    /tmp/tmpw1a83yxu.d(36): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1a83yxu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    long max = 0;\n    foreach(c; test)\n   \
    \ {\n        if(!result.count(c))\n            result[c] = 0;\n        result[c]++;\n\
    \        max = max(max, result[c]);\n    }\n    if(max == 0)\n        return null;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6wwr4wfw.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmp6wwr4wfw.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6wwr4wfw.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6wwr4wfw.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6wwr4wfw.d(24): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp6wwr4wfw.d(25): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6wwr4wfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test) \n    {\n        if(!histogram.contains(c)) \n\
    \        {\n            histogram[c] = 0;\n        }\n        histogram[c]++;\n\
    \        if(histogram[c] > max) \n        {\n            max = histogram[c];\n\
    \        }\n    }\n    if(max > 0) \n    {\n        result = histogram;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9u95aunp.d(19): Error: no property `contains` for type `long[string]`

    /tmp/tmp9u95aunp.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9u95aunp.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9u95aunp.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9u95aunp.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9u95aunp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        if (histo.count(c) == 0)\n        {\n            histo[c]\
    \ = 1;\n        }\n        else\n        {\n            histo[c]++;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histo)\n    {\n        if (c.value >\
    \ max)\n        {\n            max = c.value;\n        }\n    }\n    if (max >\
    \ 0)\n    {\n        result = Nullable!(long[string])(histo);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumto65u1.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpumto65u1.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpumto65u1.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpumto65u1.d(30): Error: no property `value` for type `long`

    /tmp/tmpumto65u1.d(32): Error: no property `value` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumto65u1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(histogram.count(c) == 0)\n\
    \        {\n            histogram[c] = 1;\n        }\n        else\n        {\n\
    \            histogram[c]++;\n        }\n        if(histogram[c] > max)\n    \
    \    {\n            max = histogram[c];\n        }\n    }\n    if(max > 0)\n \
    \   {\n        result = histogram;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl6bwl66x.d(19): Error: no property `count` for type `long[string]`

    /tmp/tmpl6bwl66x.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpl6bwl66x.d(25): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpl6bwl66x.d(27): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpl6bwl66x.d(29): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl6bwl66x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    if(max\
    \ > 0)\n    {\n        result = Nullable!(long[string])(histogram);\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n  \
    \      auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzapwsrqi.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpzapwsrqi.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzapwsrqi.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzapwsrqi.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpzapwsrqi.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzapwsrqi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1hle3e8.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpc1hle3e8.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpc1hle3e8.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpc1hle3e8.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpc1hle3e8.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1hle3e8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            result2[c] = max;\n        }\n    }\n    if(result2.length\
    \ == 0)\n    {\n        return null;\n    }\n    return result2;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4j1rk9e.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpe4j1rk9e.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpe4j1rk9e.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpe4j1rk9e.d(26): Error: undefined identifier `maxElement`

    /tmp/tmpe4j1rk9e.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpe4j1rk9e.d(39): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4j1rk9e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c in hist)\n\
    \            hist[c]++;\n        else\n            hist[c] = 1;\n    }\n    long\
    \ max = 0;\n    foreach(c; hist)\n    {\n        if(hist[c] > max)\n         \
    \   max = hist[c];\n    }\n    long[string] result;\n    foreach(c; hist)\n  \
    \  {\n        if(hist[c] == max)\n            result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr1pqrpc8.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpr1pqrpc8.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpr1pqrpc8.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpr1pqrpc8.d(25): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpr1pqrpc8.d(26): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpr1pqrpc8.d(31): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpr1pqrpc8.d(32): Error: cannot append type `long` to type `long[string]`

    /tmp/tmpr1pqrpc8.d(34): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1pqrpc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    long max\
    \ = 0;\n    foreach(c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(!hist.contains(c))\n            hist[c] = 0;\n        hist[c]++;\n\
    \        if(hist[c] > max)\n            max = hist[c];\n    }\n    if(max == 0)\n\
    \        return result;\n    result = hist;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ml1gm47.d(21): Error: no property `contains` for type `long[string]`

    /tmp/tmp_ml1gm47.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_ml1gm47.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_ml1gm47.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_ml1gm47.d(25): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ml1gm47.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    foreach(c;\
    \ histogram)\n    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfrmz7y_k.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpfrmz7y_k.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpfrmz7y_k.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpfrmz7y_k.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpfrmz7y_k.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpfrmz7y_k.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpfrmz7y_k.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrmz7y_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    long max = 0;\n    foreach(c; test)\n   \
    \ {\n        if(!result.contains(c))\n            result[c] = 0;\n        result[c]++;\n\
    \        max = max(max, result[c]);\n    }\n    return max > 0 ? result : null;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvpt1ddcb.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmpvpt1ddcb.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpvpt1ddcb.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpvpt1ddcb.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpvpt1ddcb.d(23): Error: cannot implicitly convert expression `max > 0L
    ? result : cast(long[string])null` of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpt1ddcb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value > max)\n \
    \       {\n            max = c.value;\n        }\n    }\n    if(max > 0)\n   \
    \ {\n        result = new long[string];\n        foreach(c; hist)\n        {\n\
    \            if(c.value == max)\n            {\n                result.get!(true).insert(c.key,\
    \ c.value);\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_w6nqft.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp4_w6nqft.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp4_w6nqft.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp4_w6nqft.d(30): Error: no property `value` for type `long`

    /tmp/tmp4_w6nqft.d(32): Error: no property `value` for type `long`

    /tmp/tmp4_w6nqft.d(37): Error: cannot pass type `string` as a function argument

    /tmp/tmp4_w6nqft.d(40): Error: no property `value` for type `long`

    /tmp/tmp4_w6nqft.d(42): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_w6nqft.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(!hist.contains(c))\n        {\n            hist[c]\
    \ = 0;\n        }\n        hist[c]++;\n    }\n    long max = 0;\n    foreach(c;\
    \ hist)\n    {\n        if(hist[c] > max)\n        {\n            max = hist[c];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n\
    \        foreach(c; hist)\n        {\n            if(hist[c] == max)\n       \
    \     {\n                result.get!(long[string])[c] = hist[c];\n           \
    \ }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptp0ecmis.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmptp0ecmis.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmptp0ecmis.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmptp0ecmis.d(27): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmptp0ecmis.d(29): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmptp0ecmis.d(34): Error: cannot pass type `string` as a function argument

    /tmp/tmptp0ecmis.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmptp0ecmis.d(39): Error: `inout` method `std.typecons.Nullable!(long[string]).Nullable.get!(long[string]).get`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptp0ecmis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test) \n    {\n        hist[c]++;\n\
    \    }\n    long max = maxElement(hist.values);\n    Nullable!(long[string]) result;\n\
    \    foreach(c; hist.keys) \n    {\n        if(hist[c] == max) \n        {\n \
    \           result.insert(c, hist[c]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp99jusnlo.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp99jusnlo.d(19): Error: undefined identifier `maxElement`

    /tmp/tmp99jusnlo.d(25): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99jusnlo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(hist.count(c) == 0)\n        {\n            hist[c]\
    \ = 1;\n        }\n        else\n        {\n            hist[c]++;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value > max)\n\
    \        {\n            max = c.value;\n        }\n    }\n    long[string] max_letters;\n\
    \    foreach(c; hist)\n    {\n        if(c.value == max)\n        {\n        \
    \    max_letters ~= c.key;\n        }\n    }\n    if(max_letters.length > 0)\n\
    \    {\n        result = max_letters;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6a35ctst.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmp6a35ctst.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6a35ctst.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6a35ctst.d(30): Error: no property `value` for type `long`

    /tmp/tmp6a35ctst.d(32): Error: no property `value` for type `long`

    /tmp/tmp6a35ctst.d(38): Error: no property `value` for type `long`

    /tmp/tmp6a35ctst.d(40): Error: no property `key` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a35ctst.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(k, v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.insert(k, v);\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpoqo2ah.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpdpoqo2ah.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpoqo2ah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test) \n    {\n        if(c ==\
    \ ' ') continue;\n        result[c]++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ceye_9b.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp9ceye_9b.d(20): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ceye_9b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        if(histo.count(c))\n        {\n            histo[c]++;\n\
    \        }\n        else\n        {\n            histo[c] = 1;\n        }\n  \
    \  }\n    long max = 0;\n    foreach(c; histo)\n    {\n        if(histo[c] > max)\n\
    \        {\n            max = histo[c];\n        }\n    }\n    if(max == 0)\n\
    \    {\n        return result;\n    }\n    foreach(c; histo)\n    {\n        if(histo[c]\
    \ == max)\n        {\n            result.insert(c, histo[c]);\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwyv1byv3.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpwyv1byv3.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwyv1byv3.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwyv1byv3.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwyv1byv3.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwyv1byv3.d(41): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwyv1byv3.d(43): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwyv1byv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(c == ' ') continue;\n    \
    \    if(!histo.contains(c))\n        {\n            histo[c] = 1;\n        }\n\
    \        else\n        {\n            histo[c]++;\n        }\n        if(histo[c]\
    \ > max)\n        {\n            max = histo[c];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return null;\n    }\n    result = new long[string];\n\
    \    foreach(c; histo.keys)\n    {\n        if(histo[c] == max)\n        {\n \
    \           result.get!(true)[c] = histo[c];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbs9kd8mq.d(20): Error: no property `contains` for type `long[string]`

    /tmp/tmpbs9kd8mq.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbs9kd8mq.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbs9kd8mq.d(28): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbs9kd8mq.d(30): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbs9kd8mq.d(37): Error: cannot pass type `string` as a function argument

    /tmp/tmpbs9kd8mq.d(42): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    /tmp/tmpbs9kd8mq.d(35): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbs9kd8mq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(hist.count(c))\n        {\n            hist[c]++;\n\
    \        }\n        else\n        {\n            hist[c] = 1;\n        }\n   \
    \ }\n    long max = max(hist.values);\n    foreach(c; hist.keys)\n    {\n    \
    \    if(hist[c] == max)\n        {\n            result.insert(c);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgvb9d6st.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpgvb9d6st.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgvb9d6st.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgvb9d6st.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpgvb9d6st.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvb9d6st.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histogram;\n    foreach(c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(histogram.count(c) == 0)\n      \
    \      histogram[c] = 1;\n        else\n            histogram[c]++;\n    }\n \
    \   long max = maxElement(histogram.values);\n    long[string] result;\n    foreach(c;\
    \ histogram.keys)\n    {\n        if(histogram[c] == max)\n            result[c]\
    \ = max;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpea6v9ick.d(19): Error: no property `count` for type `long[string]`

    /tmp/tmpea6v9ick.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpea6v9ick.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpea6v9ick.d(24): Error: undefined identifier `maxElement`

    /tmp/tmpea6v9ick.d(31): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpea6v9ick.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test) \n    {\n        if(c in histogram)\n       \
    \     histogram[c]++;\n        else\n            histogram[c] = 1;\n        if(histogram[c]\
    \ > max)\n            max = histogram[c];\n    }\n    if(max == 0)\n        return\
    \ result;\n    result = Nullable!(long[string])(histogram);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkzg85qbf.d(19): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpkzg85qbf.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpkzg85qbf.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpkzg85qbf.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpkzg85qbf.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzg85qbf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c] += 1;\n \
    \       }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n      \
    \  if(histogram[c] > max)\n        {\n            max = histogram[c];\n      \
    \  }\n    }\n    foreach(c; histogram)\n    {\n        if(histogram[c] == max)\n\
    \        {\n            result.insert(c);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp12qq97_i.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmp12qq97_i.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp12qq97_i.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp12qq97_i.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp12qq97_i.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp12qq97_i.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp12qq97_i.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp12qq97_i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(histo.count(c)\
    \ == 0)\n        {\n            histo[c] = 1;\n        }\n        else\n     \
    \   {\n            histo[c] += 1;\n        }\n    }\n    long max = maxElement(histo.values);\n\
    \    long[string] result;\n    foreach(c; histo.keys)\n    {\n        if(histo[c]\
    \ == max)\n        {\n            result[c] = max;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqu9a4fa1.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpqu9a4fa1.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpqu9a4fa1.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpqu9a4fa1.d(26): Error: undefined identifier `maxElement`

    /tmp/tmpqu9a4fa1.d(35): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqu9a4fa1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] max_letters;\n    foreach(k, v; result)\n    {\n        if(v\
    \ == max)\n        {\n            max_letters[k] = v;\n        }\n    }\n    if(max_letters.length\
    \ == 0)\n    {\n        return null;\n    }\n    return max_letters;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1qqlg7by.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp1qqlg7by.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp1qqlg7by.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp1qqlg7by.d(26): Error: undefined identifier `maxElement`

    /tmp/tmp1qqlg7by.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp1qqlg7by.d(39): Error: cannot implicitly convert expression `max_letters`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qqlg7by.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n    {\n   \
    \     if(v == max)\n        {\n            result.insert(k);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi4u9vn8y.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpi4u9vn8y.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4u9vn8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 0;\n        }\n        result[c]++;\n\
    \    }\n    long max = 0;\n    foreach(c; result)\n    {\n        if(result[c]\
    \ > max)\n        {\n            max = result[c];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return null;\n    }\n    long[string] result2;\n    foreach(c;\
    \ result)\n    {\n        if(result[c] == max)\n        {\n            result2[c]\
    \ = max;\n        }\n    }\n    return result2;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwfn9j_7l.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpwfn9j_7l.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwfn9j_7l.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwfn9j_7l.d(26): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwfn9j_7l.d(28): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwfn9j_7l.d(38): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwfn9j_7l.d(40): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpwfn9j_7l.d(33): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpwfn9j_7l.d(43): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfn9j_7l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test) \n    {\n        if(c in histogram) \n      \
    \  {\n            histogram[c]++;\n        }\n        else \n        {\n     \
    \       histogram[c] = 1;\n        }\n        if(histogram[c] > max) \n      \
    \  {\n            max = histogram[c];\n        }\n    }\n    if(max > 0) \n  \
    \  {\n        result = histogram;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwou_5jx5.d(19): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpwou_5jx5.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwou_5jx5.d(25): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwou_5jx5.d(27): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpwou_5jx5.d(29): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwou_5jx5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c] += 1;\n \
    \       }\n    }\n    long max = histogram.values.max;\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.set(histogram);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_khpxfz.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpy_khpxfz.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpy_khpxfz.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpy_khpxfz.d(27): Error: no property `max` for type `long[]`

    /tmp/tmpy_khpxfz.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_khpxfz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g2iubyo.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmp5g2iubyo.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5g2iubyo.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5g2iubyo.d(27): Error: undefined identifier `maxElement`

    /tmp/tmp5g2iubyo.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g2iubyo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.value[c]\
    \ = max;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08y2ofp8.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmp08y2ofp8.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp08y2ofp8.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp08y2ofp8.d(27): Error: undefined identifier `maxElement`

    /tmp/tmp08y2ofp8.d(32): Error: no property `value` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable._value`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08y2ofp8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] max_letters;\n    foreach(k, v; result)\n    {\n        if(v\
    \ == max)\n        {\n            max_letters[k] = v;\n        }\n    }\n    if(max_letters.length\
    \ == 0)\n    {\n        return null;\n    }\n    return max_letters;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbfkgvh7r.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpbfkgvh7r.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbfkgvh7r.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbfkgvh7r.d(26): Error: undefined identifier `maxElement`

    /tmp/tmpbfkgvh7r.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpbfkgvh7r.d(39): Error: cannot implicitly convert expression `max_letters`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbfkgvh7r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist = new long[string];\n    foreach(c; test) \n    {\n\
    \        if(c in hist) \n        {\n            hist[c]++;\n        } \n     \
    \   else \n        {\n            hist[c] = 1;\n        }\n    }\n    long max\
    \ = maxElement(hist.values);\n    if(max == 0) \n    {\n        return null;\n\
    \    }\n    long[string] result = new long[string];\n    foreach(c; hist) \n \
    \   {\n        if(hist[c] == max) \n        {\n            result[c] = max;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4x487w7y.d(14): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp4x487w7y.d(17): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp4x487w7y.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp4x487w7y.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp4x487w7y.d(26): Error: undefined identifier `maxElement`

    /tmp/tmp4x487w7y.d(31): Error: cannot pass type `string` as a function argument

    /tmp/tmp4x487w7y.d(34): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp4x487w7y.d(36): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp4x487w7y.d(29): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp4x487w7y.d(39): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4x487w7y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    auto hist = new long[string];\n    foreach(c; test)\n    {\n      \
    \  if(hist.count(c))\n            hist[c]++;\n        else\n            hist[c]\
    \ = 1;\n    }\n    return hist;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoms7k6b3.d(14): Error: cannot pass type `string` as a function
    argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoms7k6b3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]\
    \ += 1;\n        }\n        else\n        {\n            histogram[c] = 1;\n \
    \       }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n      \
    \  if(histogram[c] > max)\n        {\n            max = histogram[c];\n      \
    \  }\n    }\n    foreach(c; histogram)\n    {\n        if(histogram[c] == max)\n\
    \        {\n            result.insert(c, histogram[c]);\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyfw3hvod.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpyfw3hvod.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpyfw3hvod.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpyfw3hvod.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyfw3hvod.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyfw3hvod.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyfw3hvod.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyfw3hvod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = max(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.put(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptppjgmq6.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmptppjgmq6.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmptppjgmq6.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmptppjgmq6.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmptppjgmq6.d(32): Error: no property `put` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptppjgmq6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(c in histo)\n\
    \            histo[c]++;\n        else\n            histo[c] = 1;\n    }\n   \
    \ long max = maxElement(histo.values);\n    long[string] result;\n    foreach(k,\
    \ v; histo)\n    {\n        if(v == max)\n            result[k] = v;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1p32k_mi.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp1p32k_mi.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp1p32k_mi.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp1p32k_mi.d(22): Error: undefined identifier `maxElement`

    /tmp/tmp1p32k_mi.d(29): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p32k_mi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] dict;\n    foreach(c;\
    \ test)\n    {\n        if(c in dict)\n        {\n            dict[c]++;\n   \
    \     }\n        else\n        {\n            dict[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(dict.values);\n    foreach(key, value; dict)\n    {\n\
    \        if(value == max)\n        {\n            result.insert(key);\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1moptmt.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpa1moptmt.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpa1moptmt.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpa1moptmt.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpa1moptmt.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1moptmt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(hist.count(c))\n        {\n            hist[c]++;\n\
    \        }\n        else\n        {\n            hist[c] = 1;\n        }\n   \
    \ }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(hist[c] > max)\n\
    \        {\n            max = hist[c];\n        }\n    }\n    foreach(c; hist)\n\
    \    {\n        if(hist[c] == max)\n        {\n            result.insert(c);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuc2huds2.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpuc2huds2.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpuc2huds2.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpuc2huds2.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpuc2huds2.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpuc2huds2.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpuc2huds2.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuc2huds2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist = new long[string];\n\
    \    foreach(c; test)\n    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(key, value; hist)\n    {\n        if(value == max)\n        {\n \
    \           result.insert(key, value);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphzoltflf.d(15): Error: cannot pass type `string` as a function
    argument

    /tmp/tmphzoltflf.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmphzoltflf.d(20): Error: undefined identifier `maxElement`

    /tmp/tmphzoltflf.d(25): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzoltflf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    auto result = new long[string];\n    foreach(c; test) \n    {\n   \
    \     if(result.count(c) == 0)\n            result[c] = 0;\n        result[c]++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp70e6izii.d(14): Error: cannot pass type `string` as a function
    argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp70e6izii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    foreach(c;\
    \ histogram)\n    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0j2wo8j.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmps0j2wo8j.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmps0j2wo8j.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmps0j2wo8j.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmps0j2wo8j.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmps0j2wo8j.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmps0j2wo8j.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0j2wo8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(hist.count(c) == 0)\n        {\n            hist[c]\
    \ = 1;\n        }\n        else\n        {\n            hist[c] += 1;\n      \
    \  }\n    }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value\
    \ > max)\n        {\n            max = c.value;\n        }\n    }\n    foreach(c;\
    \ hist)\n    {\n        if(c.value == max)\n        {\n            result.insert(c.key);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkoipnh1y.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpkoipnh1y.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpkoipnh1y.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpkoipnh1y.d(30): Error: no property `value` for type `long`

    /tmp/tmpkoipnh1y.d(32): Error: no property `value` for type `long`

    /tmp/tmpkoipnh1y.d(37): Error: no property `value` for type `long`

    /tmp/tmpkoipnh1y.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkoipnh1y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long max = 0;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(!hist.contains(c))\n        {\n\
    \            hist[c] = 0;\n        }\n        hist[c]++;\n        if(hist[c] >\
    \ max)\n        {\n            max = hist[c];\n        }\n    }\n    foreach(c;\
    \ hist.keys)\n    {\n        if(hist[c] == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = hist;\n            }\n            else\n\
    \            {\n                result.get!().insert(c, hist[c]);\n          \
    \  }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7_9ekiv.d(19): Error: no property `contains` for type `long[string]`

    /tmp/tmp_7_9ekiv.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_7_9ekiv.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_7_9ekiv.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_7_9ekiv.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_7_9ekiv.d(39): Error: no property `insert` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7_9ekiv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        if(histo.count(c) == 0)\n        {\n            histo[c]\
    \ = 1;\n        }\n        else\n        {\n            histo[c] += 1;\n     \
    \   }\n    }\n    long max = maxElement(histo.values);\n    foreach(c; histo.keys)\n\
    \    {\n        if(histo[c] == max)\n        {\n            result.value[c] =\
    \ max;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn53gxznr.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpn53gxznr.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpn53gxznr.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpn53gxznr.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpn53gxznr.d(32): Error: no property `value` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable._value`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn53gxznr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ result.get.insert(k, v);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sk1h2eh.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp7sk1h2eh.d(20): Error: undefined identifier `maxElement`

    /tmp/tmp7sk1h2eh.d(25): Error: no property `insert` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sk1h2eh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        if(histo.count(c))\n        {\n            histo[c]++;\n\
    \        }\n        else\n        {\n            histo[c] = 1;\n        }\n  \
    \  }\n    long max = maxElement(histo.values);\n    foreach(c; histo.keys)\n \
    \   {\n        if(histo[c] == max)\n        {\n            result.insert(c);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmmvxkxpf.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpmmvxkxpf.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpmmvxkxpf.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpmmvxkxpf.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpmmvxkxpf.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmmvxkxpf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist = new long[string];\n\
    \    foreach(c; test)\n    {\n        hist[c]++;\n    }\n    long max = max(hist.values);\n\
    \    foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n   \
    \         result.insert(c);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcw2k0v5d.d(15): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpcw2k0v5d.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpcw2k0v5d.d(20): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpcw2k0v5d.d(25): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcw2k0v5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist = new long[string];\n    foreach(c; test)\n    {\n\
    \        if(c in hist)\n            hist[c]++;\n        else\n            hist[c]\
    \ = 1;\n    }\n    long max = maxElement(hist.values);\n    long[string] result\
    \ = new long[string];\n    foreach(c; hist)\n    {\n        if(hist[c] == max)\n\
    \            result[c] = max;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\"\
    );\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0aygxn6h.d(14): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp0aygxn6h.d(17): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp0aygxn6h.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp0aygxn6h.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp0aygxn6h.d(22): Error: undefined identifier `maxElement`

    /tmp/tmp0aygxn6h.d(23): Error: cannot pass type `string` as a function argument

    /tmp/tmp0aygxn6h.d(26): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp0aygxn6h.d(27): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp0aygxn6h.d(29): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0aygxn6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(c == '\
    \ ') continue;\n        if(histo.count(c) == 0)\n        {\n            histo[c]\
    \ = 1;\n        }\n        else\n        {\n            histo[c]++;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histo)\n    {\n        max = max(max,\
    \ c.value);\n    }\n    if(max == 0) return null;\n    long[string] result;\n\
    \    foreach(c; histo)\n    {\n        if(c.value == max)\n        {\n       \
    \     result[c.key] = c.value;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpji7hargu.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpji7hargu.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpji7hargu.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpji7hargu.d(30): Error: no property `value` for type `long`

    /tmp/tmpji7hargu.d(36): Error: no property `value` for type `long`

    /tmp/tmpji7hargu.d(38): Error: no property `key` for type `long`

    /tmp/tmpji7hargu.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpji7hargu.d(41): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpji7hargu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.put(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvbd_gqtc.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpvbd_gqtc.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpvbd_gqtc.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpvbd_gqtc.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpvbd_gqtc.d(32): Error: no property `put` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvbd_gqtc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    foreach(c;\
    \ histogram)\n    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0j2wo8j.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmps0j2wo8j.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmps0j2wo8j.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmps0j2wo8j.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmps0j2wo8j.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmps0j2wo8j.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmps0j2wo8j.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0j2wo8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(hist.count(c) == 0)\n        {\n            hist[c]\
    \ = 1;\n        }\n        else\n        {\n            hist[c] += 1;\n      \
    \  }\n    }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value\
    \ > max)\n        {\n            max = c.value;\n        }\n    }\n    foreach(c;\
    \ hist)\n    {\n        if(c.value == max)\n        {\n            result.insert(c.key,\
    \ c.value);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiinvi2vr.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpiinvi2vr.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpiinvi2vr.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpiinvi2vr.d(30): Error: no property `value` for type `long`

    /tmp/tmpiinvi2vr.d(32): Error: no property `value` for type `long`

    /tmp/tmpiinvi2vr.d(37): Error: no property `value` for type `long`

    /tmp/tmpiinvi2vr.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiinvi2vr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test) \n    {\n        if(c == ' ') continue;\n   \
    \     if(!histogram.contains(c)) \n        {\n            histogram[c] = 1;\n\
    \        }\n        else \n        {\n            histogram[c]++;\n        }\n\
    \        if(histogram[c] > max) \n        {\n            max = histogram[c];\n\
    \        }\n    }\n    if(max == 0) \n    {\n        return result;\n    }\n \
    \   foreach(c; histogram.keys) \n    {\n        if(histogram[c] == max) \n   \
    \     {\n            result.get.put(c, max);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yjprvnh.d(20): Error: no property `contains` for type `long[string]`

    /tmp/tmp5yjprvnh.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5yjprvnh.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5yjprvnh.d(28): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5yjprvnh.d(30): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5yjprvnh.d(41): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yjprvnh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(c in histo)\n\
    \            histo[c]++;\n        else\n            histo[c] = 1;\n    }\n   \
    \ long max = maxElement(histo.values);\n    long[string] result;\n    foreach(c;\
    \ histo)\n    {\n        if(c.value == max)\n            result[c.key] = c.value;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa17ecepb.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpa17ecepb.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpa17ecepb.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpa17ecepb.d(22): Error: undefined identifier `maxElement`

    /tmp/tmpa17ecepb.d(26): Error: no property `value` for type `long`

    /tmp/tmpa17ecepb.d(27): Error: no property `key` for type `long`

    /tmp/tmpa17ecepb.d(29): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa17ecepb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value > max)\n \
    \       {\n            max = c.value;\n        }\n    }\n    if(max > 0)\n   \
    \ {\n        result = new long[string];\n        foreach(c; hist)\n        {\n\
    \            if(c.value == max)\n            {\n                result.get.put(c.key,\
    \ c.value);\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_okfzzci.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp_okfzzci.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_okfzzci.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_okfzzci.d(30): Error: no property `value` for type `long`

    /tmp/tmp_okfzzci.d(32): Error: no property `value` for type `long`

    /tmp/tmp_okfzzci.d(37): Error: cannot pass type `string` as a function argument

    /tmp/tmp_okfzzci.d(40): Error: no property `value` for type `long`

    /tmp/tmp_okfzzci.d(42): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_okfzzci.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(!hist.contains(c))\n        {\n            hist[c]\
    \ = 0;\n        }\n        hist[c] += 1;\n    }\n    long max = 0;\n    foreach(k,\
    \ v; hist)\n    {\n        if(v > max)\n        {\n            max = v;\n    \
    \    }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n  \
    \      foreach(k, v; hist)\n        {\n            if(v == max)\n            {\n\
    \                result.get!(k) = v;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp877bv3kq.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmp877bv3kq.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp877bv3kq.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp877bv3kq.d(34): Error: cannot pass type `string` as a function argument

    /tmp/tmp877bv3kq.d(39): Error: template instance `get!(k)` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp877bv3kq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n    {\n \
    \       if(hist[c] == max)\n        {\n            result.insert(c);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2cp1bjb.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpp2cp1bjb.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2cp1bjb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c] += 1;\n \
    \       }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c;\
    \ histogram.keys)\n    {\n        if(histogram[c] == max)\n        {\n       \
    \     result.set(histogram);\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpusxz_lbh.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpusxz_lbh.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpusxz_lbh.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpusxz_lbh.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpusxz_lbh.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusxz_lbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(c in histogram)\n        {\n\
    \            histogram[c]++;\n        }\n        else\n        {\n           \
    \ histogram[c] = 1;\n        }\n        if(histogram[c] > max)\n        {\n  \
    \          max = histogram[c];\n        }\n    }\n    if(max > 0)\n    {\n   \
    \     result = histogram;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumc8z4yr.d(19): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpumc8z4yr.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpumc8z4yr.d(25): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpumc8z4yr.d(27): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpumc8z4yr.d(29): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumc8z4yr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n    {\n \
    \       if(hist[c] == max)\n        {\n            result.insert(c);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2cp1bjb.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpp2cp1bjb.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2cp1bjb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(c != '\
    \ ')\n        {\n            hist[c]++;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    long[string] result;\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ result[k] = v;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvvve8usy.d(19): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpvvve8usy.d(22): Error: undefined identifier `maxElement`

    /tmp/tmpvvve8usy.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpvvve8usy.d(35): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvve8usy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = max(histogram.values);\n    foreach(k, v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.set(histogram);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdnbt73rj.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdnbt73rj.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdnbt73rj.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdnbt73rj.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpdnbt73rj.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdnbt73rj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n    {\n   \
    \     if(v == max)\n        {\n            result.insert(k);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi4u9vn8y.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpi4u9vn8y.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpi4u9vn8y.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4u9vn8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histogram = new long[string];\n    foreach(c; test)\n\
    \    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 0;\n        }\n        histogram[c]++;\n    }\n    long max = maxElement(histogram.values);\n\
    \    long[string] result = new long[string];\n    foreach(k, v; histogram)\n \
    \   {\n        if(v == max)\n        {\n            result[k] = v;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_d_1kl41.d(14): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp_d_1kl41.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmp_d_1kl41.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_d_1kl41.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_d_1kl41.d(23): Error: undefined identifier `maxElement`

    /tmp/tmp_d_1kl41.d(24): Error: cannot pass type `string` as a function argument

    /tmp/tmp_d_1kl41.d(32): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_d_1kl41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    Nullable!(long[string]) r;\n    foreach(k, v; result)\n    {\n        if(v\
    \ == max)\n        {\n            if(r.isNull)\n            {\n              \
    \  r = new long[string];\n            }\n            r.get!(long[string])[k] =\
    \ v;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsaygpglu.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpsaygpglu.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpsaygpglu.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpsaygpglu.d(26): Error: undefined identifier `maxElement`

    /tmp/tmpsaygpglu.d(34): Error: cannot pass type `string` as a function argument

    /tmp/tmpsaygpglu.d(36): Error: `inout` method `std.typecons.Nullable!(long[string]).Nullable.get!(long[string]).get`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsaygpglu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test) \n    {\n        if(result.count(c)\
    \ == 0) \n        {\n            result[c] = 1;\n        }\n        else \n  \
    \      {\n            result[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ result) \n    {\n        if(result[c] > max) \n        {\n            max =\
    \ result[c];\n        }\n    }\n    long[string] result2;\n    foreach(c; result)\
    \ \n    {\n        if(result[c] == max) \n        {\n            result2[c] =\
    \ max;\n        }\n    }\n    if(result2.length == 0) \n    {\n        return\
    \ null;\n    }\n    return result2;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68k1cail.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmp68k1cail.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp68k1cail.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp68k1cail.d(29): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp68k1cail.d(31): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp68k1cail.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp68k1cail.d(39): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp68k1cail.d(44): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp68k1cail.d(46): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68k1cail.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        if(c in histo)\n        {\n            histo[c]++;\n \
    \       }\n        else\n        {\n            histo[c] = 1;\n        }\n   \
    \ }\n    long max = maxElement(histo.values);\n    foreach(c; histo.keys)\n  \
    \  {\n        if(histo[c] == max)\n        {\n            result.insert(c, histo);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2on035xe.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp2on035xe.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2on035xe.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2on035xe.d(27): Error: undefined identifier `maxElement`

    /tmp/tmp2on035xe.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2on035xe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histo;\n    foreach(c; test)\n    {\n        histo[c]++;\n\
    \    }\n    long max = max(histo.values);\n    Nullable!(long[string]) result;\n\
    \    if(max == 0)\n    {\n        return result;\n    }\n    result = new long[string];\n\
    \    foreach(c; histo.keys)\n    {\n        if(histo[c] == max)\n        {\n \
    \           result[c] = max;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdy55lqzb.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdy55lqzb.d(19): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpdy55lqzb.d(25): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdy55lqzb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]\
    \ += 1;\n        }\n        else\n        {\n            histogram[c] = 1;\n \
    \       }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c;\
    \ histogram.keys)\n    {\n        if(histogram[c] == max)\n        {\n       \
    \     result.insert(c, histogram);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzoervvaw.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpzoervvaw.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzoervvaw.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzoervvaw.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpzoervvaw.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzoervvaw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n    {\n \
    \       if(hist[c] == max)\n        {\n            result.insert(c);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2cp1bjb.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpp2cp1bjb.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2cp1bjb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(k, v; result)\n    {\n        if(v ==\
    \ max)\n        {\n            result2[k] = v;\n        }\n    }\n    if(result2.length\
    \ == 0)\n    {\n        return null;\n    }\n    return result2;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz4ad7x_r.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpz4ad7x_r.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpz4ad7x_r.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpz4ad7x_r.d(26): Error: undefined identifier `maxElement`

    /tmp/tmpz4ad7x_r.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpz4ad7x_r.d(39): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz4ad7x_r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(hist.count(c) == 0)\n        {\n            hist[c]\
    \ = 1;\n        }\n        else\n        {\n            hist[c] += 1;\n      \
    \  }\n    }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(hist[c]\
    \ > max)\n        {\n            max = hist[c];\n        }\n    }\n    foreach(c;\
    \ hist)\n    {\n        if(hist[c] == max)\n        {\n            result.get.insert(c,\
    \ hist[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp63oa2y_h.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmp63oa2y_h.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp63oa2y_h.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp63oa2y_h.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp63oa2y_h.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp63oa2y_h.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp63oa2y_h.d(39): Error: no property `insert` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63oa2y_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n    {\n \
    \       if(hist[c] == max)\n        {\n            result.insert(c);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2cp1bjb.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpp2cp1bjb.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2cp1bjb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzc52rn6r.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpzc52rn6r.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzc52rn6r.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzc52rn6r.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzc52rn6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeums06ed.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpeums06ed.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpeums06ed.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpeums06ed.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpeums06ed.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeums06ed.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = histogram.values.max;\n    if(max > 0)\n    {\n       \
    \ result = histogram.filter!(x => x.value == max);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp958f7mr5.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp958f7mr5.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp958f7mr5.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp958f7mr5.d(27): Error: no property `max` for type `long[]`

    /tmp/tmp958f7mr5.d(30): Error: no property `filter` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp958f7mr5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgt5u6chx.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpgt5u6chx.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgt5u6chx.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgt5u6chx.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgt5u6chx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    long max\
    \ = 0;\n    foreach(c; test)\n    {\n        if(!hist.contains(c))\n         \
    \   hist[c] = 0;\n        hist[c]++;\n        if(hist[c] > max)\n            max\
    \ = hist[c];\n    }\n    if(max == 0)\n        return result;\n    result = new\
    \ long[string];\n    foreach(c; test)\n    {\n        if(hist[c] == max)\n   \
    \         result.get.put(c, max);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_5md8vvs.d(19): Error: no property `contains` for type `long[string]`

    /tmp/tmp_5md8vvs.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_5md8vvs.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_5md8vvs.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_5md8vvs.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_5md8vvs.d(27): Error: cannot pass type `string` as a function argument

    /tmp/tmp_5md8vvs.d(30): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_5md8vvs.d(31): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_5md8vvs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] maxes;\n    foreach(k, v; result)\n    {\n        if(v == max)\n\
    \        {\n            maxes[k] = v;\n        }\n    }\n    return maxes;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9utjhey3.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp9utjhey3.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9utjhey3.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9utjhey3.d(26): Error: undefined identifier `maxElement`

    /tmp/tmp9utjhey3.d(35): Error: cannot implicitly convert expression `maxes` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9utjhey3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    if(max\
    \ > 0)\n    {\n        result = new long[string];\n        foreach(c; histogram)\n\
    \        {\n            if(histogram[c] == max)\n            {\n             \
    \   result.get!(true).put(c, max);\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgvztx3oq.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpgvztx3oq.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgvztx3oq.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgvztx3oq.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpgvztx3oq.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpgvztx3oq.d(37): Error: cannot pass type `string` as a function argument

    /tmp/tmpgvztx3oq.d(40): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpgvztx3oq.d(42): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvztx3oq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test) \n    {\n        if(c in hist) \n        {\n            hist[c]++;\n \
    \       }\n        else \n        {\n            hist[c] = 1;\n        }\n   \
    \ }\n    long max = maxElement(hist.values);\n    foreach(k, v; hist) \n    {\n\
    \        if(v == max) \n        {\n            result.insert(k);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpevwree6r.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpevwree6r.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpevwree6r.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpevwree6r.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpevwree6r.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpevwree6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeums06ed.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpeums06ed.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpeums06ed.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpeums06ed.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpeums06ed.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeums06ed.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test)\n    {\n        hist[c]++;\n\
    \    }\n    return hist;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp3zxaxb4.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpp3zxaxb4.d(19): Error: cannot implicitly convert expression `hist` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3zxaxb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] dict;\n    long max\
    \ = 0;\n    foreach(c; test)\n    {\n        if(c.isLetter)\n        {\n     \
    \       if(dict.count(c) == 0)\n            {\n                dict[c] = 1;\n\
    \            }\n            else\n            {\n                dict[c]++;\n\
    \            }\n            if(dict[c] > max)\n            {\n               \
    \ max = dict[c];\n            }\n        }\n    }\n    if(max > 0)\n    {\n  \
    \      result = dict;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqq5r79f.d(19): Error: no property `isLetter` for type `immutable(char)`

    /tmp/tmpbqq5r79f.d(21): Error: no property `count` for type `long[string]`

    /tmp/tmpbqq5r79f.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbqq5r79f.d(27): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbqq5r79f.d(29): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpbqq5r79f.d(31): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqq5r79f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = 0;\n    foreach(c; hist)\n    {\n        if(hist[c] > max)\n \
    \       {\n            max = hist[c];\n        }\n    }\n    foreach(c; hist)\n\
    \    {\n        if(hist[c] == max)\n        {\n            result.insert(c, hist[c]);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyll8v2p8.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpyll8v2p8.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpyll8v2p8.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpyll8v2p8.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyll8v2p8.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyll8v2p8.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyll8v2p8.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyll8v2p8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test) \n    {\n        histogram[c]++;\n    }\n    long max = 0;\n    foreach(k,\
    \ v; histogram) \n    {\n        if(v > max) \n        {\n            max = v;\n\
    \        }\n    }\n    if(max > 0) \n    {\n        result = new long[string];\n\
    \        foreach(k, v; histogram) \n        {\n            if(v == max) \n   \
    \         {\n                result.get!(string).put(k, v);\n            }\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvu9lri5j.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpvu9lri5j.d(30): Error: cannot pass type `string` as a function argument

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(2852):
    Error: incompatible types for `(fallback) : (this._value)`: `inout(string)` and
    `inout(long[string])`

    /tmp/tmpvu9lri5j.d(35): Error: template instance `std.typecons.Nullable!(long[string]).Nullable.get!string`
    error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvu9lri5j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    auto letters = test.split(\" \"\
    );\n    long[string] histogram;\n    foreach(letter; letters)\n    {\n       \
    \ if(histogram.count(letter) == 0)\n        {\n            histogram[letter] =\
    \ 1;\n        }\n        else\n        {\n            histogram[letter]++;\n \
    \       }\n    }\n    long max = maxElement(histogram.values);\n    foreach(key,\
    \ value; histogram)\n    {\n        if(value == max)\n        {\n            result.insert(key,\
    \ value);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2keybht1.d(15): Error: no property `split` for type `string`

    /tmp/tmp2keybht1.d(28): Error: undefined identifier `maxElement`

    /tmp/tmp2keybht1.d(33): Error: no property `insert` for type `Nullable!(long[string])`

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(!histogram.contains(c))\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = 0;\n    foreach(k,v; histogram)\n    {\n       \
    \ if(v > max)\n        {\n            max = v;\n        }\n    }\n    foreach(k,v;\
    \ histogram)\n    {\n        if(v == max)\n        {\n            result.insert(k);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__iccj93.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmp__iccj93.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp__iccj93.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp__iccj93.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__iccj93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            result2[c] = max;\n        }\n    }\n    return\
    \ result2;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph4tmtfoo.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmph4tmtfoo.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmph4tmtfoo.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmph4tmtfoo.d(26): Error: undefined identifier `maxElement`

    /tmp/tmph4tmtfoo.d(35): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4tmtfoo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test) \n    {\n        if(c in histogram) \n        {\n            histogram[c]++;\n\
    \        }\n        else \n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(k, v; histogram)\
    \ \n    {\n        if(v == max) \n        {\n            result.set(histogram);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdl1p5axi.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdl1p5axi.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdl1p5axi.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdl1p5axi.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpdl1p5axi.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdl1p5axi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    auto result = new long[string];\n    foreach(c; test) \n    {\n   \
    \     if(c in result) \n        {\n            result[c]++;\n        }\n     \
    \   else \n        {\n            result[c] = 1;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_hejfc1.d(14): Error: cannot pass type `string` as a function
    argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_hejfc1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long max = 0;\n    long[string]\
    \ hist;\n    foreach(c; test)\n    {\n        if(hist.count(c) == 0)\n       \
    \ {\n            hist[c] = 1;\n        }\n        else\n        {\n          \
    \  hist[c] += 1;\n        }\n        if(hist[c] > max)\n        {\n          \
    \  max = hist[c];\n        }\n    }\n    if(max > 0)\n    {\n        result =\
    \ hist;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpto0rgv16.d(19): Error: no property `count` for type `long[string]`

    /tmp/tmpto0rgv16.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpto0rgv16.d(25): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpto0rgv16.d(27): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpto0rgv16.d(29): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpto0rgv16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test) \n    {\n        if(c in hist) \n        {\n            hist[c]++;\n \
    \       }\n        else \n        {\n            hist[c] = 1;\n        }\n   \
    \ }\n    long max = maxElement(hist.values);\n    foreach(key, value; hist) \n\
    \    {\n        if(value == max) \n        {\n            result.set(hist);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1ylt5rx.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpp1ylt5rx.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp1ylt5rx.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp1ylt5rx.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpp1ylt5rx.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1ylt5rx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    long max = 0;\n    long[string] hist = new\
    \ long[string];\n    foreach (c; test)\n    {\n        hist[c]++;\n        max\
    \ = max(max, hist[c]);\n    }\n    foreach (c; test)\n    {\n        if (hist[c]\
    \ == max)\n        {\n            result.set(hist);\n            return result;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl731ky9j.d(20): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpl731ky9j.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpl731ky9j.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpl731ky9j.d(28): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpl731ky9j.d(30): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl731ky9j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        auto key = c.to!string;\n        if(!histo.contains(key))\n         \
    \   histo[key] = 0;\n        histo[key]++;\n        if(histo[key] > max)\n   \
    \         max = histo[key];\n    }\n    if(max == 0)\n        return result;\n\
    \    result.init();\n    foreach(key, value; histo)\n    {\n        if(value ==\
    \ max)\n            result.get.insert(key, value);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpguybng9n.d(21): Error: no property `to` for type `immutable(char)`

    /tmp/tmpguybng9n.d(22): Error: no property `contains` for type `long[string]`

    /tmp/tmpguybng9n.d(30): Error: function expected before `()`, not `Nullable(null,
    true).get()` of type `long[string]`

    /tmp/tmpguybng9n.d(34): Error: no property `insert` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguybng9n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzc52rn6r.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpzc52rn6r.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzc52rn6r.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzc52rn6r.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzc52rn6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histo = new long[string];\n    foreach(c; test)\n    {\n\
    \        if(c in histo)\n            histo[c]++;\n        else\n            histo[c]\
    \ = 1;\n    }\n    return histo;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkvv8cl7j.d(14): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpkvv8cl7j.d(17): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpkvv8cl7j.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpkvv8cl7j.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpkvv8cl7j.d(22): Error: cannot implicitly convert expression `histo` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvv8cl7j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(!histogram.contains(c))\n            histogram[c] = 0;\n        histogram[c]++;\n\
    \        if(histogram[c] > max)\n            max = histogram[c];\n    }\n    if(max\
    \ == 0)\n        return result;\n    result = new long[string];\n    foreach(c;\
    \ test)\n    {\n        if(c == ' ')\n            continue;\n        if(histogram[c]\
    \ == max)\n            result.get!true[c] = max;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uwzgat1.d(21): Error: no property `contains` for type `long[string]`

    /tmp/tmp6uwzgat1.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6uwzgat1.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6uwzgat1.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6uwzgat1.d(25): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6uwzgat1.d(29): Error: cannot pass type `string` as a function argument

    /tmp/tmp6uwzgat1.d(34): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp6uwzgat1.d(35): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uwzgat1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxn92ihe4.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpxn92ihe4.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpxn92ihe4.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpxn92ihe4.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxn92ihe4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164287
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    foreach(c; test)\n    {\n        if(hist.count(c)\
    \ == 0)\n        {\n            hist[c] = 1;\n        }\n        else\n      \
    \  {\n            hist[c] += 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    long[string] result;\n    foreach(key, value; hist)\n    {\n        if(value\
    \ == max)\n        {\n            result[key] = value;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo34503np.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpo34503np.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpo34503np.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpo34503np.d(26): Error: undefined identifier `maxElement`

    /tmp/tmpo34503np.d(35): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo34503np.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(!histogram.contains(c))\n        {\n            histogram[c]\
    \ = 0;\n        }\n        histogram[c]++;\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(k, v; histogram)\n    {\n        if(v == max)\n        {\n      \
    \      result.insert(k);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph2s9w512.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmph2s9w512.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmph2s9w512.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmph2s9w512.d(24): Error: undefined identifier `maxElement`

    /tmp/tmph2s9w512.d(29): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph2s9w512.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] hist;\n    long max = 0;\n    foreach(c; test)\n    {\n\
    \        if(c in hist)\n        {\n            hist[c]++;\n        }\n       \
    \ else\n        {\n            hist[c] = 1;\n        }\n        max = max(max,\
    \ hist[c]);\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n   \
    \ long[string] result;\n    foreach(c; hist)\n    {\n        if(hist[c] == max)\n\
    \        {\n            result[c] = max;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppufifia6.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmppufifia6.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmppufifia6.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmppufifia6.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmppufifia6.d(35): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmppufifia6.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmppufifia6.d(30): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmppufifia6.d(40): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppufifia6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        if(c in histo)\n        {\n            histo[c]++;\n \
    \       }\n        else\n        {\n            histo[c] = 1;\n        }\n   \
    \ }\n    long max = maxElement(histo.values);\n    foreach(c; histo.keys)\n  \
    \  {\n        if(histo[c] == max)\n        {\n            result.insert(c, histo);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2on035xe.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp2on035xe.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2on035xe.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2on035xe.d(27): Error: undefined identifier `maxElement`

    /tmp/tmp2on035xe.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2on035xe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test) \n    {\n        if(c in\
    \ result) \n        {\n            result[c]++;\n        }\n        else \n  \
    \      {\n            result[c] = 1;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp345wt1i.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpp345wt1i.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp345wt1i.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp345wt1i.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp345wt1i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(!histogram.contains(c))\n            histogram[c] = 0;\n        histogram[c]++;\n\
    \        if(histogram[c] > max)\n            max = histogram[c];\n    }\n    if(max\
    \ == 0)\n        return result;\n    result = new long[string];\n    foreach(c;\
    \ test)\n    {\n        if(c == ' ')\n            continue;\n        if(histogram[c]\
    \ == max)\n            result.get!(true)[c] = max;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2nh_xx42.d(21): Error: no property `contains` for type `long[string]`

    /tmp/tmp2nh_xx42.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2nh_xx42.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2nh_xx42.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2nh_xx42.d(25): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2nh_xx42.d(29): Error: cannot pass type `string` as a function argument

    /tmp/tmp2nh_xx42.d(34): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp2nh_xx42.d(35): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2nh_xx42.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    import std.algorithm : max, min;\n    import std.array : array;\n \
    \   import std.conv : to;\n    import std.range : iota;\n    import std.typecons\
    \ : Nullable;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : T\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpth4j67kf.d(61): Error: `;` expected

    /tmp/tmpth4j67kf.d(106): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpth4j67kf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(c.isLetter)\n\
    \        {\n            histo[c.toLower]++;\n        }\n    }\n    if(histo.empty)\n\
    \    {\n        return Nullable!(long[string]).init;\n    }\n    long max = histo.values.max;\n\
    \    long[string] result;\n    foreach(key, value; histo)\n    {\n        if(value\
    \ == max)\n        {\n            result[key] = value;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp40zd4yyu.d(17): Error: no property `isLetter` for type `immutable(char)`

    /tmp/tmp40zd4yyu.d(19): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp40zd4yyu.d(22): Error: no property `empty` for type `long[string]`

    /tmp/tmp40zd4yyu.d(26): Error: no property `max` for type `long[]`

    /tmp/tmp40zd4yyu.d(35): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40zd4yyu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(histogram[c]\
    \ > max)\n        {\n            max = histogram[c];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return result;\n    }\n    result = histogram;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyrdmxxu4.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpyrdmxxu4.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpyrdmxxu4.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpyrdmxxu4.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpyrdmxxu4.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyrdmxxu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(k, v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.insert(k, v);\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpoqo2ah.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpdpoqo2ah.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpoqo2ah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test) \n    {\n        if(result.count(c)\
    \ == 0) \n        {\n            result[c] = 1;\n        } \n        else \n \
    \       {\n            result[c]++;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(c; result.keys) \n    {\n        if(result[c]\
    \ == max) \n        {\n            result2[c] = max;\n        }\n    }\n    if(result2.length\
    \ == 0) \n    {\n        return Nullable!(long[string])();\n    }\n    return\
    \ Nullable!(long[string])(result2);\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9sfrh4e6.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmp9sfrh4e6.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9sfrh4e6.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9sfrh4e6.d(26): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9sfrh4e6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c))\n\
    \        {\n            result[c]++;\n        }\n        else\n        {\n   \
    \         result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] max_keys;\n    foreach(key, value; result)\n    {\n        if(value\
    \ == max)\n        {\n            max_keys[key] = value;\n        }\n    }\n \
    \   return max_keys;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps4wsk_q9.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmps4wsk_q9.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmps4wsk_q9.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmps4wsk_q9.d(26): Error: undefined identifier `maxElement`

    /tmp/tmps4wsk_q9.d(35): Error: cannot implicitly convert expression `max_keys`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps4wsk_q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g2iubyo.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmp5g2iubyo.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5g2iubyo.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp5g2iubyo.d(27): Error: undefined identifier `maxElement`

    /tmp/tmp5g2iubyo.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g2iubyo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test) \n    {\n        if(result.count(c)\
    \ == 0)\n            result[c] = 1;\n        else\n            result[c]++;\n\
    \    }\n    long max = maxElement(result.values);\n    long[string] result2;\n\
    \    foreach(k, v; result) \n    {\n        if(v == max)\n            result2[k]\
    \ = v;\n    }\n    if(result2.length == 0)\n        return null;\n    return result2;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbo_50kz.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpxbo_50kz.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpxbo_50kz.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpxbo_50kz.d(22): Error: undefined identifier `maxElement`

    /tmp/tmpxbo_50kz.d(30): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpxbo_50kz.d(31): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbo_50kz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhntly03.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpuhntly03.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpuhntly03.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpuhntly03.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpuhntly03.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhntly03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = histogram.values.max;\n    foreach(k, v; histogram)\n \
    \   {\n        if(v == max)\n        {\n            result.set(histogram);\n \
    \           break;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\"\
    );\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqu2i1f98.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpqu2i1f98.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpqu2i1f98.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpqu2i1f98.d(27): Error: no property `max` for type `long[]`

    /tmp/tmpqu2i1f98.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqu2i1f98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram[c]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhntly03.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpuhntly03.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpuhntly03.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpuhntly03.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpuhntly03.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhntly03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(c in hist)\n        {\n            hist[c]++;\n   \
    \     }\n        else\n        {\n            hist[c] = 1;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n    {\n \
    \       if(hist[c] == max)\n        {\n            result.insert(c);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2cp1bjb.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpp2cp1bjb.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpp2cp1bjb.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2cp1bjb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164291
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    else\n    {\n        long[string] histogram;\n\
    \        foreach (ch; test)\n        {\n            if (ch in histogram)\n   \
    \         {\n                histogram[ch]++;\n            }\n            else\n\
    \            {\n                histogram[ch] = 1;\n            }\n        }\n\
    \        long max = maxElement(histogram.values);\n        foreach (ch; histogram.keys)\n\
    \        {\n            if (histogram[ch] == max)\n            {\n           \
    \     result.insert(ch, histogram);\n            }\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpktna6156.d(24): Error: cannot implicitly convert expression `ch`
    of type `immutable(char)` to `string`

    /tmp/tmpktna6156.d(26): Error: cannot implicitly convert expression `ch` of type
    `immutable(char)` to `string`

    /tmp/tmpktna6156.d(30): Error: cannot implicitly convert expression `ch` of type
    `immutable(char)` to `string`

    /tmp/tmpktna6156.d(33): Error: undefined identifier `maxElement`

    /tmp/tmpktna6156.d(38): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpktna6156.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    long\
    \ max = 0;\n    foreach(c; test)\n    {\n        if(c.isLetter)\n        {\n \
    \           if(!histogram.contains(c))\n            {\n                histogram[c]\
    \ = 0;\n            }\n            histogram[c]++;\n            if(histogram[c]\
    \ > max)\n            {\n                max = histogram[c];\n            }\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = histogram;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpruo1al7n.d(19): Error: no property `isLetter` for type `immutable(char)`

    /tmp/tmpruo1al7n.d(21): Error: no property `contains` for type `long[string]`

    /tmp/tmpruo1al7n.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpruo1al7n.d(25): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpruo1al7n.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpruo1al7n.d(28): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruo1al7n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test) \n    {\n        if(c in histogram)\n            histogram[c]++;\n   \
    \     else\n            histogram[c] = 1;\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach(c; histogram.keys) \n    {\n        if(histogram[c] == max)\n   \
    \         result.insert(c);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf2k61gfz.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpf2k61gfz.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpf2k61gfz.d(21): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpf2k61gfz.d(23): Error: undefined identifier `maxElement`

    /tmp/tmpf2k61gfz.d(27): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2k61gfz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histo;\n    foreach(c; test)\n    {\n        histo[c]++;\n\
    \    }\n    long max = 0;\n    foreach(c; histo)\n    {\n        if(histo[c] >\
    \ max)\n        {\n            max = histo[c];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return null;\n    }\n    long[string] result;\n    foreach(c;\
    \ histo)\n    {\n        if(histo[c] == max)\n        {\n            result[c]\
    \ = max;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli92prfg.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpli92prfg.d(22): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpli92prfg.d(24): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpli92prfg.d(34): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpli92prfg.d(36): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpli92prfg.d(29): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpli92prfg.d(39): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli92prfg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    auto result = new long[string];\n    foreach(c; test)\n    {\n    \
    \    if(c in result)\n            result[c]++;\n        else\n            result[c]\
    \ = 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkss4vf4b.d(14): Error: cannot pass type `string` as a function
    argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkss4vf4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test)\n    {\n        if(!histo.contains(c))\n        {\n            histo[c]\
    \ = 0;\n        }\n        histo[c]++;\n    }\n    long max = histo.values.max;\n\
    \    if(max == 0)\n    {\n        return result;\n    }\n    result = new long[string];\n\
    \    foreach(c; histo.keys)\n    {\n        if(histo[c] == max)\n        {\n \
    \           result.get.put(c, histo[c]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy5txa3z6.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmpy5txa3z6.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpy5txa3z6.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpy5txa3z6.d(24): Error: no property `max` for type `long[]`

    /tmp/tmpy5txa3z6.d(29): Error: cannot pass type `string` as a function argument

    /tmp/tmpy5txa3z6.d(34): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5txa3z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    // Create a dictionary of the letters and their count.\n    Nullable!(long[string])\
    \ hist = new Nullable!(long[string])();\n    foreach(c; test)\n    {\n       \
    \ if(hist.isNull)\n        {\n            hist.init = new long[string]();\n  \
    \      }\n        if(!hist.get.containsKey(c))\n        {\n            hist.get[c]\
    \ = 0;\n        }\n        hist.get[c]++;\n    }\n    return hist;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo5yv3ivc.d(15): Error: cannot implicitly convert expression `new
    Nullable!(long[string])(null, true)` of type `Nullable!(long[string])*` to `Nullable!(long[string])`

    /tmp/tmpo5yv3ivc.d(15):        Perhaps remove the `new` keyword?

    /tmp/tmpo5yv3ivc.d(20): Error: cannot pass type `string` as a function argument

    /tmp/tmpo5yv3ivc.d(22): Error: no property `containsKey` for type `long[string]`

    /tmp/tmpo5yv3ivc.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpo5yv3ivc.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo5yv3ivc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = histogram.values.max;\n    foreach(k, v; histogram)\n \
    \   {\n        if(v == max)\n        {\n            result.assign(histogram);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ihjvoqn.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp4ihjvoqn.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp4ihjvoqn.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp4ihjvoqn.d(27): Error: no property `max` for type `long[]`

    /tmp/tmp4ihjvoqn.d(32): Error: no property `assign` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ihjvoqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(k, v; histogram)\n    {\n        if(v >\
    \ max)\n        {\n            max = v;\n        }\n    }\n    if(max > 0)\n \
    \   {\n        result = new long[string];\n        foreach(k, v; histogram)\n\
    \        {\n            if(v == max)\n            {\n                result.get!(true)[k]\
    \ = v;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqtf5lopu.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpqtf5lopu.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpqtf5lopu.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpqtf5lopu.d(37): Error: cannot pass type `string` as a function argument

    /tmp/tmpqtf5lopu.d(42): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqtf5lopu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164293
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(k, v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.put(k, v);\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0p4za6rb.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp0p4za6rb.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp0p4za6rb.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp0p4za6rb.d(27): Error: undefined identifier `maxElement`

    /tmp/tmp0p4za6rb.d(32): Error: no property `put` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0p4za6rb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] hist;\n    long max\
    \ = 0;\n    foreach(c; test)\n    {\n        if(c.isLetter)\n        {\n     \
    \       if(!hist.contains(c))\n            {\n                hist[c] = 0;\n \
    \           }\n            hist[c]++;\n            if(hist[c] > max)\n       \
    \     {\n                max = hist[c];\n            }\n        }\n    }\n   \
    \ if(max > 0)\n    {\n        result = new long[string];\n        foreach(c; hist)\n\
    \        {\n            if(hist[c] == max)\n            {\n                result.get.put(c,\
    \ max);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgf28dvjw.d(19): Error: no property `isLetter` for type `immutable(char)`

    /tmp/tmpgf28dvjw.d(21): Error: no property `contains` for type `long[string]`

    /tmp/tmpgf28dvjw.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgf28dvjw.d(25): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgf28dvjw.d(26): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgf28dvjw.d(28): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpgf28dvjw.d(34): Error: cannot pass type `string` as a function argument

    /tmp/tmpgf28dvjw.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpgf28dvjw.d(39): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgf28dvjw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) ret;\n    long[string] hist;\n    foreach(c;\
    \ test)\n    {\n        if(hist.count(c) == 0)\n        {\n            hist[c]\
    \ = 1;\n        }\n        else\n        {\n            hist[c] += 1;\n      \
    \  }\n    }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value\
    \ > max)\n        {\n            max = c.value;\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return ret;\n    }\n    ret = new long[string];\n    foreach(c;\
    \ hist)\n    {\n        if(c.value == max)\n        {\n            ret.get.put(c.key,\
    \ c.value);\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9sd1cf9v.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmp9sd1cf9v.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9sd1cf9v.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp9sd1cf9v.d(30): Error: no property `value` for type `long`

    /tmp/tmp9sd1cf9v.d(32): Error: no property `value` for type `long`

    /tmp/tmp9sd1cf9v.d(39): Error: cannot pass type `string` as a function argument

    /tmp/tmp9sd1cf9v.d(42): Error: no property `value` for type `long`

    /tmp/tmp9sd1cf9v.d(44): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9sd1cf9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c))\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(k,v; histogram)\n    {\n        if(v >\
    \ max)\n        {\n            max = v;\n        }\n    }\n    foreach(k,v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.insert(k,v);\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ug43vuh.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmp_ug43vuh.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_ug43vuh.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp_ug43vuh.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ug43vuh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) ret = null;\n    long[string] hist = new long[string];\n\
    \    foreach(c; test)\n    {\n        hist[c]++;\n    }\n    long max = 0;\n \
    \   foreach(c; hist)\n    {\n        if(hist[c] > max)\n        {\n          \
    \  max = hist[c];\n        }\n    }\n    if(max > 0)\n    {\n        ret = new\
    \ long[string];\n        foreach(c; hist)\n        {\n            if(hist[c] ==\
    \ max)\n            {\n                ret.get!(true)[c] = max;\n            }\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjckceam2.d(15): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpjckceam2.d(18): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpjckceam2.d(23): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpjckceam2.d(25): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpjckceam2.d(30): Error: cannot pass type `string` as a function argument

    /tmp/tmpjckceam2.d(33): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmpjckceam2.d(35): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjckceam2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c.isLetter)\n\
    \        {\n            result[c.toLower]++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvu3k0hn6.d(17): Error: no property `isLetter` for type `immutable(char)`

    /tmp/tmpvu3k0hn6.d(19): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpvu3k0hn6.d(22): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvu3k0hn6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.insert(c,\
    \ histogram);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1hle3e8.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpc1hle3e8.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpc1hle3e8.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpc1hle3e8.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpc1hle3e8.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1hle3e8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164288
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c]++;\n    \
    \    }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n        if(c.value\
    \ > max)\n        {\n            max = c.value;\n        }\n    }\n    foreach(c;\
    \ histogram)\n    {\n        if(c.value == max)\n        {\n            result.insert(c.key,\
    \ max);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg35g9715.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmpg35g9715.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpg35g9715.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpg35g9715.d(30): Error: no property `value` for type `long`

    /tmp/tmpg35g9715.d(32): Error: no property `value` for type `long`

    /tmp/tmpg35g9715.d(37): Error: no property `value` for type `long`

    /tmp/tmpg35g9715.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg35g9715.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test) \n    {\n        if(c in histogram) \n        {\n            histogram[c]++;\n\
    \        } \n        else \n        {\n            histogram[c] = 1;\n       \
    \ }\n    }\n    long max = 0;\n    foreach(c; histogram) \n    {\n        if(histogram[c]\
    \ > max) \n        {\n            max = histogram[c];\n        }\n    }\n    foreach(c;\
    \ histogram) \n    {\n        if(histogram[c] == max) \n        {\n          \
    \  result.insert(c, histogram[c]);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp70oxoaaz.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmp70oxoaaz.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp70oxoaaz.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmp70oxoaaz.d(30): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp70oxoaaz.d(32): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp70oxoaaz.d(37): Error: cannot implicitly convert expression `c` of type
    `long` to `string`

    /tmp/tmp70oxoaaz.d(39): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp70oxoaaz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(c; histogram.keys)\n\
    \    {\n        if(histogram[c] == max)\n        {\n            result.set(histogram);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7zhsyia.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmph7zhsyia.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmph7zhsyia.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmph7zhsyia.d(27): Error: undefined identifier `maxElement`

    /tmp/tmph7zhsyia.d(32): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7zhsyia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzc52rn6r.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpzc52rn6r.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzc52rn6r.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzc52rn6r.d(26): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzc52rn6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164292
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(histogram.count(c) == 0)\n        {\n            histogram[c]\
    \ = 1;\n        }\n        else\n        {\n            histogram[c] += 1;\n \
    \       }\n    }\n    long max = 0;\n    foreach(c; histogram)\n    {\n      \
    \  if(c.value > max)\n        {\n            max = c.value;\n        }\n    }\n\
    \    long[string] max_letters;\n    foreach(c; histogram)\n    {\n        if(c.value\
    \ == max)\n        {\n            max_letters[c.key] = c.value;\n        }\n \
    \   }\n    result = max_letters;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphr51qyb5.d(18): Error: no property `count` for type `long[string]`

    /tmp/tmphr51qyb5.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmphr51qyb5.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmphr51qyb5.d(30): Error: no property `value` for type `long`

    /tmp/tmphr51qyb5.d(32): Error: no property `value` for type `long`

    /tmp/tmphr51qyb5.d(38): Error: no property `value` for type `long`

    /tmp/tmphr51qyb5.d(40): Error: no property `key` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphr51qyb5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] histo;\n    foreach(c; test)\n    {\n        if(histo.count(c)\
    \ == 0)\n        {\n            histo[c] = 1;\n        }\n        else\n     \
    \   {\n            histo[c] += 1;\n        }\n    }\n    if(histo.length == 0)\n\
    \    {\n        return null;\n    }\n    long max = histo.values.max;\n    long[string]\
    \ result;\n    foreach(c; histo.keys)\n    {\n        if(histo[c] == max)\n  \
    \      {\n            result[c] = max;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnpcmxjyc.d(17): Error: no property `count` for type `long[string]`

    /tmp/tmpnpcmxjyc.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpnpcmxjyc.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpnpcmxjyc.d(30): Error: no property `max` for type `long[]`

    /tmp/tmpnpcmxjyc.d(28): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpnpcmxjyc.d(39): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnpcmxjyc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] histogram;\n    foreach(c;\
    \ test)\n    {\n        if(c in histogram)\n        {\n            histogram[c]++;\n\
    \        }\n        else\n        {\n            histogram[c] = 1;\n        }\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach(k, v; histogram)\n\
    \    {\n        if(v == max)\n        {\n            result.insert(k, v);\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpoqo2ah.d(18): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(24): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpdpoqo2ah.d(27): Error: undefined identifier `maxElement`

    /tmp/tmpdpoqo2ah.d(32): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpoqo2ah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164286
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    Nullable!(long[string]) result;\n    long[string] counts;\n    foreach(c;\
    \ test)\n    {\n        if(!counts.contains(c))\n        {\n            counts[c]\
    \ = 0;\n        }\n        counts[c]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach(c; counts.keys)\n    {\n        if(counts[c] == max)\n        {\n\
    \            result.set(counts);\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqq7_p5kj.d(18): Error: no property `contains` for type `long[string]`

    /tmp/tmpqq7_p5kj.d(20): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpqq7_p5kj.d(22): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpqq7_p5kj.d(24): Error: undefined identifier `maxElement`

    /tmp/tmpqq7_p5kj.d(29): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq7_p5kj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \                    \n    \n*/\nNullable!(long[string]) histogram(string test)\
    \ \n{\n    long[string] result;\n    foreach(c; test)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    if(max == 0)\n    {\n        return Nullable!(long[string])();\n    }\n \
    \   long[string] max_result;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            max_result[c] = max;\n        }\n    }\n   \
    \ return Nullable!(long[string])(max_result);\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl6iktq3d.d(17): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpl6iktq3d.d(19): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpl6iktq3d.d(23): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpl6iktq3d.d(26): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl6iktq3d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164294
