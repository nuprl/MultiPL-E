language: d
name: HumanEval_76_is_simple_power
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == 0) return false;\n    if (n == 1) return true;\n\
    \    if (n == 0) return false;\n    if (x < 0) return false;\n    if (n < 0) return\
    \ false;\n    if (x == n) return true;\n    if (x < n) return false;\n    if (x\
    \ % n != 0) return false;\n    if (x == n * n) return true;\n    if (x % (n *\
    \ n) == 0) return false;\n    if (x % n == 0) return is_simple_power(x / n, n);\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe765id4i.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpe765id4i.__unittest_L26_C1() [0x427b39]

    ??:? void tmpe765id4i.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(n == 1) return false;\n    if(x == n) return true;\n\
    \    if(x < n) return false;\n    if(x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ i = 0;\n    long result = 1;\n    while(result <= x)\n    {\n        result\
    \ = pow(n, i);\n        if(result == x)\n            return true;\n        i++;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == 0) return false;\n    if (n == 1) return true;\n\
    \    if (n == 0) return false;\n    if (x < 0) return false;\n    if (n < 0) return\
    \ false;\n    if (x == n) return true;\n    if (x < n) return false;\n    if (x\
    \ % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ i = 2;\n    long j = 1;\n    while(i <= x)\n    {\n        j = i;\n        i\
    \ *= n;\n    }\n    return j == x;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0v8gt27n.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmp0v8gt27n.__unittest_L21_C1() [0x427aed]

    ??:? void tmp0v8gt27n.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n\
    \    if (n < 0)\n        return false;\n    long i = 2;\n    long temp = n;\n\
    \    while (temp < x)\n    {\n        temp *= n;\n        i++;\n    }\n    if\
    \ (temp == x)\n        return true;\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ a = log(x) / log(n);\n    return pow(n, a) == x;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8os71750.d(12): Error: cannot implicitly convert expression `log(cast(real)x)
    / log(cast(real)n)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8os71750.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x\
    \ < n)\n        return false;\n    if (x % n != 0)\n        return false;\n  \
    \  return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(n == 1) return false;\n    if(x == n) return true;\n\
    \    if(x < n) return false;\n    if(x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == n) return true;\n    if (n == 1) return false;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ y = log(x) / log(n);\n    return pow(n, y) == x;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps7kkoise.d(12): Error: cannot implicitly convert expression `log(cast(real)x)
    / log(cast(real)n)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps7kkoise.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == 0)\n        return false;\n    if(n\
    \ == 1)\n        return true;\n    if(n == 0)\n        return false;\n    if(x\
    \ < 0)\n        return false;\n    if(n < 0)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x % n != 0)\n        return false;\n   \
    \ if(x % n == 0)\n        return is_simple_power(x / n, n);\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4101w2z1.d(10): Error: function `tmp4101w2z1.is_simple_power` no
    `return exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4101w2z1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==0)\n\
    \        return false;\n    if(n==0)\n        return false;\n    if(x==1)\n  \
    \      return true;\n    if(n==1)\n        return true;\n    if(x==n)\n      \
    \  return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n        return\
    \ false;\n    if(x==n*n)\n        return true;\n    if(x==n*n*n)\n        return\
    \ true;\n    if(x==n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n)\n    \
    \    return true;\n    if(x==n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n)\n        return true;\n\
    \    if(x==n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n\
    \    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqafj8_fg.d(55): Error: expression expected, not `unittest`

    /tmp/tmpqafj8_fg.d(56): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqafj8_fg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    return is_simple_power(x/n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9raxw48n.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmp9raxw48n.__unittest_L18_C1() [0x427b29]

    ??:? void tmp9raxw48n.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n   \
    \     return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n     \
    \   return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 0)\n        return false;\n    if(x == 1)\n        return true;\n    if(n\
    \ == 0)\n        return false;\n    if(n == 1)\n        return true;\n    if(n\
    \ == 2)\n    {\n        if(x == 2)\n            return true;\n        else\n \
    \           return false;\n    }\n    if(n == 3)\n    {\n        if(x == 3)\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  if(n == 4)\n    {\n        if(x == 4)\n            return true;\n        else\n\
    \            return false;\n    }\n    if(n == 5)\n    {\n        if(x == 5)\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  if(n == 6)\n    {\n        if(x == 6)\n            return true;\n        else\n\
    \            return false;\n    }\n    if(n == 7)\n    {\n        if(x == 7)\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  if(n == 8)\n    {\n        if(x == 8)\n            return true;\n        else\n\
    \            return false;\n    }\n    if(n == 9)\n    {\n        if(x == 9)\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  if(n == 10)\n    {\n        if(x == 10)\n            return true;\n       \
    \ else\n            return false;\n    }\n    if(n == 11)\n    {\n        if(x\
    \ == 11)\n            return true;\n        else\n            return false;\n\
    \    }\n    if(n == 12)\n    {\n        if(x == 12)\n            return true;\n\
    \        else\n            return false;\n    }\n    if(n == 13)\n    {\n    \
    \    if(x == 13)\n            return true;\n        else\n            return false;\n\
    \    }\n    if(n == 14)\n    {\n        if(x == 14)\n            return true;\n\
    \        else\n            return false;\n    }\n    if\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngwtlum6.d(112): Error: found `unittest` when expecting `(`

    /tmp/tmpngwtlum6.d(127): Error: found `void` when expecting `)`

    /tmp/tmpngwtlum6.d(127): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngwtlum6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x==1)\n        return true;\n    if(x==0)\n        return\
    \ false;\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n\
    \    if(x==n)\n        return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n\
    \        return false;\n    long y=x/n;\n    if(y%n==0)\n        return false;\n\
    \    return is_simple_power(y,n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphajadhni.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmphajadhni.__unittest_L32_C1() [0x427ac1]

    ??:? void tmphajadhni.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n \
    \   if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 0) \n        return false;\n    if(x == 1) \n        return true;\n    if(x\
    \ % n != 0) \n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == n) return true;\n    if(x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(n == 0)\n        return false;\n    if(x\
    \ == 0)\n        return false;\n    if(x < 0)\n        return false;\n    if(n\
    \ < 0)\n        return false;\n    if(x == n*n)\n        return true;\n    if(x\
    \ == n*n*n)\n        return true;\n    if(x == n*n*n*n)\n        return true;\n\
    \    if(x == n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n)\n    \
    \    return true;\n    if(x == n*n*n*n*n*n*n)\n        return true;\n    if(x\
    \ == n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n)\n        return true;\n\
    \    if(x == n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return\
    \ true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x\
    \ == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5f2yq204.d(55): Error: found `unittest` when expecting `)`

    /tmp/tmp5f2yq204.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f2yq204.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(n==1) return false;\n    if(x==n) return true;\n    if(x%n!=0)\
    \ return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ result = log(x) / log(n);\n    return result == cast(long)result;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppbbnubyj.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmppbbnubyj.__unittest_L15_C1() [0x427c03]

    ??:? void tmppbbnubyj.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa61]

    ??:? runModuleUnitTests [0x42b9cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n   \
    \     return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n     \
    \   return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0)\n        return false;\n    if (n == 0)\n        return false;\n    if\
    \ (n == 1)\n        return true;\n    if (x == 1)\n        return true;\n    if\
    \ (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n\
    \    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n\
    \        return true;\n    if (x == n * n * n * n * n)\n        return true;\n\
    \    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n\
    \ * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n *\
    \ n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n\
    \ * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n *\
    \ n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n\
    \ * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n *\
    \ n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n\
    \    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n\
    \        return true;\n    if (x == n * n *\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjqtm8v1v.d(53): Error: expression expected, not `unittest`

    /tmp/tmpjqtm8v1v.d(54): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqtm8v1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x > n)\n    {\n        if(x % n != 0)\n\
    \            return false;\n        else\n            return is_simple_power(x\
    \ / n, n);\n    }\n    else\n        return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(x==n)\n        return true;\n    if(x%n!=0)\n  \
    \      return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n   \
    \ alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x<n)\
    \ return false;\n    if(x%n!=0) return false;\n    return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(n\
    \ == 1)\n        return false;\n    if(x == 0)\n        return false;\n    if(x\
    \ < n)\n        return false;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, (int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbnq9z9od.d(12): Error: C style cast illegal, use `cast(int)log(x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbnq9z9od.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == 0)\n        return false;\n    if(n\
    \ == 1)\n        return false;\n    if(n == 0)\n        return false;\n    if(x\
    \ < 0)\n        return false;\n    if(n < 0)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv3elys37.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmpv3elys37.__unittest_L22_C1() [0x427b29]

    ??:? void tmpv3elys37.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ result = log(x) / log(n);\n    return result == int(result);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7pmm60jv.d(13): Error: cannot implicitly convert expression `result`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pmm60jv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(x==n) return true;\n    if(x<n) return false;\n    if(x%n!=0)\
    \ return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==0)\
    \ return false;\n    if(n==0) return false;\n    if(x==1) return true;\n    if(n==1)\
    \ return true;\n    if(x==n) return true;\n    if(x<n) return false;\n    if(x%n!=0)\
    \ return false;\n    if(x==n*n) return true;\n    if(x==n*n*n) return true;\n\
    \    if(x==n*n*n*n) return true;\n    if(x==n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5j_mtw9y.d(35): Error: found `unittest` when expecting `)`

    /tmp/tmp5j_mtw9y.d(50): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j_mtw9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n\
    \        return true;\n    if(x==1)\n        return true;\n    if(x==n)\n    \
    \    return true;\n    if(x%n!=0)\n        return false;\n    if(x%n==0)\n   \
    \ {\n        int i=2;\n        while(i<=x)\n        {\n            if(i==x)\n\
    \                return true;\n            i*=n;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9fzln2gv.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmp9fzln2gv.__unittest_L32_C1() [0x427b31]

    ??:? void tmp9fzln2gv.__modtest() [0x427c1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n   \
    \     return true;\n    if(x<n)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr7rmh023.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmpr7rmh023.__unittest_L22_C1() [0x427b29]

    ??:? void tmpr7rmh023.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ > n)\n    {\n        auto result = log(x) / log(n);\n        if(result == int(result))\n\
    \            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpduvbnncv.d(19): Error: cannot implicitly convert expression `result`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpduvbnncv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == n) return true;\n    if(x < n) return false;\n\
    \    if(x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(x==0) return false;\n    if(n==1) return false;\n    if(n==0)\
    \ return false;\n    if(x<0) return false;\n    if(n<0) return false;\n    if(x==n)\
    \ return true;\n    if(x%n!=0) return false;\n    return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(n==1) return false;\n    if(x==n) return true;\n    if(x<n)\
    \ return false;\n    if(x%n!=0) return false;\n    if(x==n*n) return true;\n \
    \   return is_simple_power(x/n,n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == n) return true;\n    if (x == 0) return false;\n\
    \    if (n == 0) return false;\n    if (n == 1) return false;\n    if (x < n)\
    \ return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n \
    \   if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x < 1) return false;\n    if (n == 1) return true;\n\
    \    if (n < 1) return false;\n    if (x == n) return true;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n  \
    \  alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ < n)\n        return false;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n   \
    \     return true;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x == 1) return true;\n    if(n == 1) return false;\n    if(x\
    \ == n) return true;\n    if(x < n) return false;\n    if(x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(n == 1) return false;\n    if(x == n) return true;\n\
    \    if(x < n) return false;\n    if(x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x%n!=0)\n \
    \       return false;\n    long y=x/n;\n    if(y==1)\n        return true;\n \
    \   return is_simple_power(y,n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x < n)\n        return false;\n    if (x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(long)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpknj3lt7k.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a9d]

    ??:? void tmpknj3lt7k.__unittest_L14_C1() [0x427db1]

    ??:? void tmpknj3lt7k.__modtest() [0x428820]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c87f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b712]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6e9]

    ??:? runModuleUnitTests [0x42c655]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x==1)\n        return true;\n    if(n==1)\n        return\
    \ false;\n    if(x==n)\n        return true;\n    if(x<n)\n        return false;\n\
    \    if(x%n!=0)\n        return false;\n    if(x%n==0)\n        return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpepvzm2p1.d(10): Error: function `tmpepvzm2p1.is_simple_power` no
    `return exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpepvzm2p1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ log = log2(x) / log2(n);\n    return log == cast(int)log;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwos8vwn_.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmpwos8vwn_.__unittest_L15_C1() [0x427bef]

    ??:? void tmpwos8vwn_.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc05]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb91]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa49]

    ??:? runModuleUnitTests [0x42b9b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == n) return true;\n    if(x < n) return false;\n\
    \    if(x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6vhbi3a.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a8d]

    ??:? void tmps6vhbi3a.__unittest_L14_C1() [0x427d9d]

    ??:? void tmps6vhbi3a.__modtest() [0x42880c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430821]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d9]

    ??:? runModuleUnitTests [0x42c645]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(n == 1) return false;\n    if(x == n) return true;\n\
    \    if(n == 0) return false;\n    if(x == 0) return false;\n    if(x < 0) return\
    \ false;\n    if(n < 0) return false;\n    if(x == n*n) return true;\n    if(x\
    \ == n*n*n) return true;\n    if(x == n*n*n*n) return true;\n    if(x == n*n*n*n*n)\
    \ return true;\n    if(x == n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n)\
    \ return true;\n    if(x == n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x == n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x ==\
    \ n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x\
    \ == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p7c67xk.d(35): Error: expression expected, not `unittest`

    /tmp/tmp7p7c67xk.d(36): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p7c67xk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    return\
    \ is_simple_power(x/n,n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == 0) return false;\n    if (n == 1) return false;\n\
    \    if (n == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x==1)\n        return true;\n    if(n==1)\n        return\
    \ false;\n    if(x==n)\n        return true;\n    if(x<n)\n        return false;\n\
    \    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == 0) return false;\n    if (n == 1) return true;\n\
    \    if (n == 0) return false;\n    if (x < 0) return false;\n    if (n < 0) return\
    \ false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n  \
    \  return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    return\
    \ is_simple_power(x/n,n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ i = 0;\n    long result = 1;\n    while(result < x)\n    {\n        result =\
    \ n ** i;\n        i++;\n    }\n    if(result == x)\n        return true;\n  \
    \  else\n        return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3fli4sb6.d(16): Error: can only `*` a pointer, not a `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fli4sb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n   \
    \     return true;\n    if(n==0)\n        return false;\n    if(x<n)\n       \
    \ return false;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(n == 1) return false;\n    if(x == n) return true;\n\
    \    if(x < n) return false;\n    if(n == 0) return false;\n    if(x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    auto result = log(x) / log(n);\n    return result == (int)result;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxuwrjj8o.d(14): Error: C style cast illegal, use `cast(int)result`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxuwrjj8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == 0) return false;\n    if(n == 1) return true;\n\
    \    if(n == 0) return false;\n    if(n == x) return true;\n    if(n < 0) return\
    \ false;\n    if(x < 0) return false;\n    if(n == 2)\n    {\n        if(x ==\
    \ 2) return true;\n        if(x == 4) return true;\n        if(x == 8) return\
    \ true;\n        if(x == 16) return true;\n        if(x == 32) return true;\n\
    \        if(x == 64) return true;\n        if(x == 128) return true;\n       \
    \ if(x == 256) return true;\n        if(x == 512) return true;\n        if(x ==\
    \ 1024) return true;\n        if(x == 2048) return true;\n        if(x == 4096)\
    \ return true;\n        if(x == 8192) return true;\n        if(x == 16384) return\
    \ true;\n        if(x == 32768) return true;\n        if(x == 65536) return true;\n\
    \        if(x == 131072) return true;\n        if(x == 262144) return true;\n\
    \        if(x == 524288) return true;\n        if(x == 1048576) return true;\n\
    \        if(x == 2097152) return true;\n        if(x == 4194304) return true;\n\
    \        if(x == 8388608) return true;\n        if(x == 16777216) return true;\n\
    \        if(x == 33554432) return true;\n        if(x == 67108864) return true;\n\
    \        if(x == 134217728) return true;\n        if(x == 268435456) return true;\n\
    \        if(x == 536870912) return true;\n        if(x == 1073741824) return true;\n\
    \        if(x == 2147483648) return true;\n        if(x == 4294967296) return\
    \ true;\n        if(x == 8589934592) return true;\n        if(x == 17179869\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxl6tbb41.d(55): Error: found `unittest` when expecting `)`

    /tmp/tmpxl6tbb41.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpxl6tbb41.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxl6tbb41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0)\n        return false;\n    if (x == 1)\n        return true;\n    if\
    \ (n == 0)\n        return false;\n    if (n == 1)\n        return true;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x<n)\n    \
    \    return false;\n    if(n==0)\n        return false;\n    if(x==n)\n      \
    \  return true;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    if(x == n * n)\n        return true;\n\
    \    return is_simple_power(x, n * n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    else if(x == 0)\n        return false;\n  \
    \  else if(n == 1)\n        return false;\n    else if(n == 0)\n        return\
    \ false;\n    else\n    {\n        long y = log(x) / log(n);\n        if(pow(n,\
    \ y) == x)\n            return true;\n        else\n            return false;\n\
    \    }\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpif_buc_9.d(22): Error: cannot implicitly convert expression `log(cast(real)x)
    / log(cast(real)n)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpif_buc_9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    return\
    \ is_simple_power(x/n,n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x < n) return false;\n    if(x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x < n)\n        return false;\n    long\
    \ y = n;\n    while(y < x)\n    {\n        y *= n;\n    }\n    return y == x;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ i = 0;\n    long result = 1;\n    while(result <= x)\n    {\n        result\
    \ = n.pow(i);\n        if(result == x)\n            return true;\n        i++;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == 0)\n        return false;\n    if(n\
    \ == 1)\n        return false;\n    if(n == 0)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == 0) return false;\n    if(n == 1) return false;\n\
    \    if(n == 0) return false;\n    if(x < 0) return false;\n    if(n < 0) return\
    \ false;\n    if(x == n) return true;\n    if(x % n != 0) return false;\n    return\
    \ is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6vhbi3a.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a8d]

    ??:? void tmps6vhbi3a.__unittest_L14_C1() [0x427d9d]

    ??:? void tmps6vhbi3a.__modtest() [0x42880c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430821]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d9]

    ??:? runModuleUnitTests [0x42c645]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(n==1) return false;\n    if(x==n) return true;\n    if(x<n)\
    \ return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgb4ly4kr.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmpgb4ly4kr.__unittest_L18_C1() [0x427b29]

    ??:? void tmpgb4ly4kr.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(n == 1) return false;\n    if(x == n) return true;\n\
    \    if(x < n) return false;\n    if(x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == 0) return false;\n    if(n == 1) return true;\n\
    \    if(n == 0) return false;\n    if(x == n) return true;\n    if(n == 2) return\
    \ x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 ||\
    \ x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 ||\
    \ x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x ==\
    \ 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 ||\
    \ x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912\
    \ || x == 1073741824 || x == 2147483648 || x == 4294967296 || x == 8589934592\
    \ || x == 17179869184 || x == 34359738368 || x == 68719476736 || x == 137438953472\
    \ || x == 274877906944 || x == 549755813888 || x == 1099511627776 || x == 2199023255552\
    \ || x == 4398046511104 || x == 8796093022208 || x == 17592186044416 || x == 35184372088832\
    \ || x == 70368744177664 || x == 140737488355328 || x == 281474976710656 || x\
    \ == 562949953421312 || x == 1125899906842624 || x == 2251799813685248 || x ==\
    \ 4503599627370496 || x == 9007199254740992 || x == 18014398509481984 || x ==\
    \ 36028797018963968 || x == 72057594037927936 || x == 144115188075855872 || x\
    \ == 288230376151711744 || x == 576460752303423488 || x == 1152921504606846976\
    \ || x == 2305843009213693952 || x == 46\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph045fhiu.d(18): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmph045fhiu.d(33): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph045fhiu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ i = cast(int)log(x) / log(n);\n    return pow(n, i) == x;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3fmd4ig_.d(19): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a8d]

    ??:? void tmp3fmd4ig_.__unittest_L15_C1() [0x427da1]

    ??:? void tmp3fmd4ig_.__modtest() [0x428810]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430821]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d9]

    ??:? runModuleUnitTests [0x42c645]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(n\
    \ == 0)\n        return false;\n    if(x == 0)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x<=0\
    \ || n<=0) return false;\n    if(x==1) return true;\n    if(n==1) return false;\n\
    \    if(x==n) return true;\n    if(x%n!=0) return false;\n    return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(n==1) return false;\n    if(x==n) return true;\n    if(x<n)\
    \ return false;\n    if(x%n!=0) return false;\n    return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(n == 1) return false;\n    if(x == n) return true;\n\
    \    if(x < n) return false;\n    if(x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long\
    \ ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag =\
    \ 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n\
    \    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long\
    \ ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at =\
    \ 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n\
    \    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long\
    \ bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg =\
    \ 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n\
    \    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long\
    \ bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt =\
    \ 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n\
    \    long by = 0;\n    long bz = 0;\n    long ca = 0;\n    long c\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd76gczvk.d(82): Error: semicolon expected, not `unittest`

    /tmp/tmpd76gczvk.d(82): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd76gczvk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x < n)\n        return false;\n    auto\
    \ log = log2(x) / log2(n);\n    return log == cast(long)log;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (x < 0)\n        return false;\n    if (n == 0)\n        return false;\n   \
    \ if (n == 1)\n        return true;\n    if (n < 0)\n        return false;\n \
    \   if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    if (x % n == 0)\n    {\n    \
    \    return is_simple_power(x / n, n);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo2b764e7.d(10): Error: function `tmpo2b764e7.is_simple_power` no
    `return exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2b764e7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n  \
    \      return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n   \
    \ alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    return\
    \ is_simple_power(x/n,n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == 0)\n        return false;\n    if(n\
    \ == 1)\n        return true;\n    if(n == 0)\n        return false;\n    if(x\
    \ < 0 || n < 0)\n        return false;\n    long i = 2;\n    while(i <= x)\n \
    \   {\n        if(pow(n, i) == x)\n            return true;\n        i++;\n  \
    \  }\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(n == 1) return false;\n    if(n == 0) return false;\n\
    \    if(x == 0) return false;\n    if(x == n) return true;\n    if(x < n) return\
    \ false;\n    if(x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x < 1 || n < 1)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n  \
    \      return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n   \
    \ alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x == 1)\n        return true;\n    if(n == 1)\n        return\
    \ false;\n    if(n == 0)\n        return false;\n    if(x == 0)\n        return\
    \ false;\n    if(n == x)\n        return true;\n    if(n == -1)\n        return\
    \ false;\n    if(x == -1)\n        return true;\n    if(n == -x)\n        return\
    \ true;\n    if(x == -n)\n        return true;\n    if(n == 2)\n    {\n      \
    \  if(x == 4)\n            return true;\n        if(x == 8)\n            return\
    \ true;\n        if(x == 16)\n            return true;\n        if(x == 32)\n\
    \            return true;\n        if(x == 64)\n            return true;\n   \
    \     if(x == 128)\n            return true;\n        if(x == 256)\n         \
    \   return true;\n        if(x == 512)\n            return true;\n        if(x\
    \ == 1024)\n            return true;\n        if(x == 2048)\n            return\
    \ true;\n        if(x == 4096)\n            return true;\n        if(x == 8192)\n\
    \            return true;\n        if(x == 16384)\n            return true;\n\
    \        if(x == 32768)\n            return true;\n        if(x == 65536)\n  \
    \          return true;\n        if(x == 131072)\n            return true;\n \
    \       if(x == 262144)\n            return true;\n        if(x == 524288)\n \
    \           return true;\n        if(x == 1048576)\n            return true;\n\
    \        if(x == 2097152)\n            return true;\n        if(x == 4194304)\n\
    \            return true;\n        if(x == 8388608)\n            return true;\n\
    \        if(x == 16777216)\n            return true;\n        if(x == 33554432)\n\
    \            return true;\n        if(x == 67108864)\n            return true;\n\
    \        if(x == 134217728)\n            return true;\n        if(x\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngryy9l8.d(86): Error: found `unittest` when expecting `)`

    /tmp/tmpngryy9l8.d(101): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpngryy9l8.d(101): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngryy9l8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0) return false;\n    if (n == 0) return false;\n    if (x == 1) return true;\n\
    \    if (n == 1) return true;\n    if (x == n) return true;\n    if (n == 2) return\
    \ (x & (x - 1)) == 0;\n    if (n == 3) return (x == 1) || (x == 3) || (x == 9);\n\
    \    if (n == 4) return (x & (x - 1)) == 0;\n    if (n == 5) return (x == 1) ||\
    \ (x == 5) || (x == 25);\n    if (n == 6) return (x == 1) || (x == 6) || (x ==\
    \ 36);\n    if (n == 7) return (x == 1) || (x == 7) || (x == 49);\n    if (n ==\
    \ 8) return (x & (x - 1)) == 0;\n    if (n == 9) return (x == 1) || (x == 9) ||\
    \ (x == 81);\n    if (n == 10) return (x == 1) || (x == 10) || (x == 100);\n \
    \   if (n == 11) return (x == 1) || (x == 11) || (x == 121);\n    if (n == 12)\
    \ return (x == 1) || (x == 12) || (x == 144);\n    if (n == 13) return (x == 1)\
    \ || (x == 13) || (x == 169);\n    if (n == 14) return (x == 1) || (x == 14) ||\
    \ (x == 196);\n    if (n == 15) return (x == 1) || (x == 15) || (x == 225);\n\
    \    if (n == 16) return (x & (x - 1)) == 0;\n    if (n == 17) return (x == 1)\
    \ || (x == 17) || (x == 289);\n    if (n == 18) return (x == 1) || (x == 18) ||\
    \ (x == 324);\n    if (n == 19) return (x == 1) || (x == 19) || (x == 361);\n\
    \    if (n == 20) return (x\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4vaizgs7.d(35): Error: found `unittest` when expecting `)`

    /tmp/tmp4vaizgs7.d(37): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4vaizgs7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x < 1) return false;\n    if (n == 1) return false;\n\
    \    if (n == 0) return false;\n    if (n == x) return true;\n    if (n == -1)\
    \ return false;\n    if (n == -x) return true;\n    if (n < 0) return is_simple_power(x,\
    \ -n);\n    if (n == 2) return isPowerOfTwo(x);\n    if (n == 3) return isPowerOfThree(x);\n\
    \    if (n == 4) return isPowerOfFour(x);\n    if (n == 5) return isPowerOfFive(x);\n\
    \    if (n == 6) return isPowerOfSix(x);\n    if (n == 7) return isPowerOfSeven(x);\n\
    \    if (n == 8) return isPowerOfEight(x);\n    if (n == 9) return isPowerOfNine(x);\n\
    \    if (n == 10) return isPowerOfTen(x);\n    if (n == 11) return isPowerOfEleven(x);\n\
    \    if (n == 12) return isPowerOfTwelve(x);\n    if (n == 13) return isPowerOfThirteen(x);\n\
    \    if (n == 14) return isPowerOfFourteen(x);\n    if (n == 15) return isPowerOfFifteen(x);\n\
    \    if (n == 16) return isPowerOfSixteen(x);\n    if (n == 17) return isPowerOfSeventeen(x);\n\
    \    if (n == 18) return isPowerOfEighteen(x);\n    if (n == 19) return isPowerOfNineteen(x);\n\
    \    if (n == 20) return isPowerOfTwenty(x);\n    if (n == 21) return isPowerOfTwentyOne(x);\n\
    \    if (n == 22) return isPowerOfTwentyTwo(x);\n    if (n == 23) return isPowerOfTwentyThree(x);\n\
    \    if (n == 24) return isPowerOfTwentyFour(x);\n    if (n == 25) return isPowerOfTwentyFive(x);\n\
    \    if (n == 26) return isPowerOf\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprdw3o28i.d(45): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmprdw3o28i.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdw3o28i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x==0)\n        return false;\n    if(n==0)\n        return\
    \ false;\n    if(x==1)\n        return true;\n    if(n==1)\n        return true;\n\
    \    if(x==n)\n        return true;\n    if(x<n)\n        return false;\n    if(x>n)\n\
    \    {\n        if(x%n!=0)\n            return false;\n        else\n        {\n\
    \            long temp=x/n;\n            if(temp==n)\n                return true;\n\
    \            else\n                return is_simple_power(temp,n);\n        }\n\
    \    }\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv98pbtcq.d(10): Error: function `tmpv98pbtcq.is_simple_power` no
    `return exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv98pbtcq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ < n)\n        return false;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n   \
    \     return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n     \
    \   return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == 0) return false;\n    if (n == 1) return false;\n\
    \    if (n == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    if (x % n == 0)\n    {\n    \
    \    return is_simple_power(x / n, n);\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ < n)\n        return false;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ nn = n;\n    long xx = x;\n    long i = 0;\n    while(nn < xx)\n    {\n    \
    \    nn *= n;\n        i++;\n    }\n    if(nn == xx)\n        return true;\n \
    \   else\n        return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv8qjn7si.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmpv8qjn7si.__unittest_L25_C1() [0x427bb7]

    ??:? void tmpv8qjn7si.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x < n)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (x % n != 0)\n        return false;\n  \
    \  return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == n) return true;\n    if(x < n) return false;\n\
    \    if(x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp54vgcxik.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmp54vgcxik.__unittest_L20_C1() [0x427bb3]

    ??:? void tmp54vgcxik.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (x < 0)\n        return false;\n    if (n == 0)\n        return false;\n   \
    \ if (n == 1)\n        return true;\n    if (n < 0)\n        return false;\n \
    \   if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    long tmp = n;\n    while (tmp < x)\n    {\n        tmp *= n;\n        if\
    \ (tmp == x)\n            return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (x < 0)\n        return false;\n    if (n == 0)\n        return false;\n   \
    \ if (n == 1)\n        return true;\n    if (n < 0)\n        return false;\n \
    \   if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    if (x % n == 0)\n    {\n    \
    \    return is_simple_power(x / n, n);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo2b764e7.d(10): Error: function `tmpo2b764e7.is_simple_power` no
    `return exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2b764e7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ < n)\n        return false;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == n) return true;\n    if(x < n) return false;\n\
    \    return is_simple_power(x/n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_j2pcbuw.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e3d]

    ??:? void tmp_j2pcbuw.__unittest_L17_C1() [0x427b1d]

    ??:? void tmp_j2pcbuw.__modtest() [0x427bc0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430038]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]

    ??:? runModuleUnitTests [0x42b939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42828c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ i = 0;\n    while (pow(n, i) <= x)\n    {\n        if (pow(n, i) == x)\n   \
    \         return true;\n        i++;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (x < 0)\
    \ return false;\n    if (n < 0) return false;\n    long i = 2;\n    long result\
    \ = n;\n    while (result <= x)\n    {\n        if (result == x) return true;\n\
    \        result = n * result;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == 0) return false;\n    if(n == 1) return true;\n\
    \    if(n == 0) return false;\n    if(x < 0) return false;\n    if(n < 0) return\
    \ false;\n    if(x == n) return true;\n    long y = n;\n    while(y < x)\n   \
    \ {\n        y *= n;\n        if(y == x) return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x==1) return true;\n    if(n==1) return false;\n    if(x==n)\
    \ return true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    return\
    \ is_simple_power(x/n,n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ log = log10(x) / log10(n);\n    return log == cast(int)log;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp58ledujc.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmp58ledujc.__unittest_L15_C1() [0x427bef]

    ??:? void tmp58ledujc.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc05]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb91]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa49]

    ??:? runModuleUnitTests [0x42b9b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==0)\
    \ return false;\n    if(n==0) return false;\n    if(x==1) return true;\n    if(n==1)\
    \ return true;\n    if(x==n) return true;\n    if(x<n) return false;\n    if(x%n!=0)\
    \ return false;\n    if(x==n*n) return true;\n    if(x==n*n*n) return true;\n\
    \    if(x==n*n*n*n) return true;\n    if(x==n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5j_mtw9y.d(35): Error: found `unittest` when expecting `)`

    /tmp/tmp5j_mtw9y.d(50): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j_mtw9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ log = log2(x) / log2(n);\n    return log == cast(long)log;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvg035aad.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpvg035aad.__unittest_L15_C1() [0x427c03]

    ??:? void tmpvg035aad.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa61]

    ??:? runModuleUnitTests [0x42b9cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == 0) return false;\n    if(n == 1) return false;\n\
    \    if(n == 0) return false;\n    if(x == n) return true;\n    if(x < n) return\
    \ false;\n    if(x % n != 0) return false;\n    if(x % n == 0)\n    {\n      \
    \  long y = x / n;\n        return is_simple_power(y, n);\n    }\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2r49r_7.d(10): Error: function `tmpp2r49r_7.is_simple_power` no
    `return exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2r49r_7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    long y = n;\n    while(y < x)\n    {\n        y *= n;\n    }\n\
    \    return y == x;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm9i1ppe2.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e3d]

    ??:? void tmpm9i1ppe2.__unittest_L20_C1() [0x427ba7]

    ??:? void tmpm9i1ppe2.__modtest() [0x427bbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430038]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]

    ??:? runModuleUnitTests [0x42b939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42828c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == 0)\n        return false;\n    if(n\
    \ == 1)\n        return false;\n    if(n == 0)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    if(n == 2)\n        return true;\n   \
    \ if(n == 3)\n        return true;\n    if(n == 5)\n        return true;\n   \
    \ if(n == 7)\n        return true;\n    if(n == 11)\n        return true;\n  \
    \  if(n == 13)\n        return true;\n    if(n == 17)\n        return true;\n\
    \    if(n == 19)\n        return true;\n    if(n == 23)\n        return true;\n\
    \    if(n == 29)\n        return true;\n    if(n == 31)\n        return true;\n\
    \    if(n == 37)\n        return true;\n    if(n == 41)\n        return true;\n\
    \    if(n == 43)\n        return true;\n    if(n == 47)\n        return true;\n\
    \    if(n == 53)\n        return true;\n    if(n == 59)\n        return true;\n\
    \    if(n == 61)\n        return true;\n    if(n == 67)\n        return true;\n\
    \    if(n == 71)\n        return true;\n    if(n == 73)\n        return true;\n\
    \    if(n == 79)\n        return true;\n    if(n == 83)\n        return true;\n\
    \    if(n == 89)\n        return true;\n    if(n == 97)\n        return true;\n\
    \    if(n == 101)\n        return true;\n    if(n == 103)\n        return true;\n\
    \    if(n == 107)\n        return true;\n    if(n == 109)\n        return true;\n\
    \    if(n == 113)\n        return true;\n    if(n == 127)\n        return true;\n\
    \    if(n == 131)\n        return true;\n\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1wx32het.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wx32het.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (n == -1)\n        return false;\n    if (x == 0)\n        return false;\n\
    \    if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x % n == 0)\n    {\n        long a = x / n;\n        if (a % n == 0)\n\
    \        {\n            return is_simple_power(a, n);\n        }\n        else\n\
    \            return false;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==0)\n\
    \        return false;\n    if(x==1)\n        return true;\n    if(n==0)\n   \
    \     return false;\n    if(n==1)\n        return true;\n    if(x<0)\n       \
    \ return false;\n    if(n<0)\n        return false;\n    if(x==n)\n        return\
    \ true;\n    if(x>n)\n    {\n        if(x%n!=0)\n            return false;\n \
    \       else\n            return is_simple_power(x/n,n);\n    }\n    else\n  \
    \      return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ nn = n;\n    long xx = x;\n    long i = 1;\n    while (xx > nn)\n    {\n   \
    \     nn *= n;\n        i++;\n    }\n    if (xx == nn)\n        return true;\n\
    \    else\n        return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw00hgoh3.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmpw00hgoh3.__unittest_L25_C1() [0x427bb7]

    ??:? void tmpw00hgoh3.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ res = log(x) / log(n);\n    return res == cast(long)res;\n}\nunittest\n{\n \
    \   alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbfrbj71c.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpbfrbj71c.__unittest_L15_C1() [0x427c03]

    ??:? void tmpbfrbj71c.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa61]

    ??:? runModuleUnitTests [0x42b9cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x==1)\n        return true;\n    if(x==0)\n        return\
    \ false;\n    if(n==0)\n        return false;\n    if(n==1)\n        return false;\n\
    \    if(x<0)\n        return false;\n    if(n<0)\n        return false;\n    if(x==n)\n\
    \        return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n  \
    \      return false;\n    if(x%n==0)\n    {\n        if(x/n==1)\n            return\
    \ true;\n        else\n            return is_simple_power(x/n,n);\n    }\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgo9ofmes.d(10): Error: function `tmpgo9ofmes.is_simple_power` no
    `return exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgo9ofmes.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ result = log(x) / log(n);\n    return result == cast(long)result;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppbbnubyj.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmppbbnubyj.__unittest_L15_C1() [0x427c03]

    ??:? void tmppbbnubyj.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa61]

    ??:? runModuleUnitTests [0x42b9cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ log = log2(x) / log2(n);\n    return log == cast(int)log;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwos8vwn_.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmpwos8vwn_.__unittest_L15_C1() [0x427bef]

    ??:? void tmpwos8vwn_.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc05]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb91]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa49]

    ??:? runModuleUnitTests [0x42b9b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3dod0xdz.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e3d]

    ??:? void tmp3dod0xdz.__unittest_L17_C1() [0x427b1d]

    ??:? void tmp3dod0xdz.__modtest() [0x427bc0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430038]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]

    ??:? runModuleUnitTests [0x42b939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42828c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0) return false;\n    if (n == 0) return false;\n    if (x == 1) return true;\n\
    \    if (n == 1) return true;\n    if (x == n) return true;\n    if (x == n*n)\
    \ return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return\
    \ true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return\
    \ true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x ==\
    \ n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if\
    \ (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n\
    \    if (x == n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivi0vqjd.d(34): Error: found `unittest` when expecting `)`

    /tmp/tmpivi0vqjd.d(49): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivi0vqjd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x == 1)\n        return true;\n    if(n == 1)\n        return\
    \ false;\n    if(x == n)\n        return true;\n    if(x < n)\n        return\
    \ false;\n    if(x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ < n)\n        return false;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (x < n) return false;\n    if (x == n) return true;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x==0)\n        return false;\n    if(x==1)\n        return\
    \ true;\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n\
    \    if(x==n)\n        return true;\n    long a=0;\n    long b=0;\n    long c=0;\n\
    \    long d=0;\n    long e=0;\n    long f=0;\n    long g=0;\n    long h=0;\n \
    \   long i=0;\n    long j=0;\n    long k=0;\n    long l=0;\n    long m=0;\n  \
    \  long o=0;\n    long p=0;\n    long q=0;\n    long r=0;\n    long s=0;\n   \
    \ long t=0;\n    long u=0;\n    long v=0;\n    long w=0;\n    long y=0;\n    long\
    \ z=0;\n    long aa=0;\n    long ab=0;\n    long ac=0;\n    long ad=0;\n    long\
    \ ae=0;\n    long af=0;\n    long ag=0;\n    long ah=0;\n    long ai=0;\n    long\
    \ aj=0;\n    long ak=0;\n    long al=0;\n    long am=0;\n    long ao=0;\n    long\
    \ ap=0;\n    long aq=0;\n    long ar=0;\n    long as=0;\n    long at=0;\n    long\
    \ au=0;\n    long av=0;\n    long aw=0;\n    long ay=0;\n    long az=0;\n    long\
    \ aaa=0;\n    long aab=0;\n    long aac=0;\n    long aad=0;\n    long aae=0;\n\
    \    long aaf=0;\n    long aag=0;\n    long aah=0;\n    long aai=0;\n    long\
    \ aaj=0;\n    long aak=0;\n    long aal=0;\n\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4p6bzwz.d(84): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4p6bzwz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    // your\
    \ code here\n    if(x==1)\n        return true;\n    if(x==n)\n        return\
    \ true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n        return false;\n\
    \    return is_simple_power(x/n,n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ result = log(x) / log(n);\n    return result == int(result);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7pmm60jv.d(13): Error: cannot implicitly convert expression `result`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pmm60jv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == 0) return false;\n    if(n == 1) return true;\n\
    \    if(n == 0) return false;\n    if(x < 0) return false;\n    if(n < 0) return\
    \ false;\n    if(x == n) return true;\n    if(x % n != 0) return false;\n    return\
    \ is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(x<1) return false;\n    if(n==1) return true;\n    if(n<1)\
    \ return false;\n    long i=2;\n    while(pow(n,i)<=x)\n    {\n        if(pow(n,i)==x)\
    \ return true;\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n   \
    \     return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n     \
    \   return false;\n    return is_simple_power(x/n,n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n \
    \   if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6vhbi3a.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a8d]

    ??:? void tmps6vhbi3a.__unittest_L14_C1() [0x427d9d]

    ??:? void tmps6vhbi3a.__modtest() [0x42880c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430821]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d9]

    ??:? runModuleUnitTests [0x42c645]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ < n)\n        return false;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ < n)\n        return false;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    auto\
    \ result = log(x) / log(n);\n    return result == cast(long)result;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppbbnubyj.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmppbbnubyj.__unittest_L15_C1() [0x427c03]

    ??:? void tmppbbnubyj.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa61]

    ??:? runModuleUnitTests [0x42b9cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(n == 1) return false;\n    if(x == n) return true;\n\
    \    if(x < n) return false;\n    if(x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == 0) return false;\n    if(n == 1) return false;\n\
    \    if(n == 0) return false;\n    if(x == n) return true;\n    if(x < n) return\
    \ false;\n    if(x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (n == 0) return false;\n    if (x == 0) return false;\n    if (x < 0)\
    \ return false;\n    if (n < 0) return false;\n    if (x == 2) return true;\n\
    \    if (n == 2) return false;\n    if (x == 3) return true;\n    if (n == 3)\
    \ return false;\n    if (x == 4) return true;\n    if (n == 4) return false;\n\
    \    if (x == 5) return true;\n    if (n == 5) return false;\n    if (x == 6)\
    \ return true;\n    if (n == 6) return false;\n    if (x == 7) return true;\n\
    \    if (n == 7) return false;\n    if (x == 8) return true;\n    if (n == 8)\
    \ return false;\n    if (x == 9) return true;\n    if (n == 9) return false;\n\
    \    if (x == 10) return true;\n    if (n == 10) return false;\n    if (x == 11)\
    \ return true;\n    if (n == 11) return false;\n    if (x == 12) return true;\n\
    \    if (n == 12) return false;\n    if (x == 13) return true;\n    if (n == 13)\
    \ return false;\n    if (x == 14) return true;\n    if (n == 14) return false;\n\
    \    if (x == 15) return true;\n    if (n == 15) return false;\n    if (x == 16)\
    \ return true;\n    if (n == 16) return false;\n    if (x == 17) return true;\n\
    \    if (n == 17) return false;\n    if (x == 18) return true;\n    if (n == 18)\
    \ return false;\n    if (x == 19) return true;\n    if (n == 19) return false;\n\
    \    if (x == 20) return true;\n    if (n == 20) return false;\n    if (x == 21)\
    \ return true;\n    if (\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp59_kj0e6.d(59): Error: expression expected, not `unittest`

    /tmp/tmp59_kj0e6.d(60): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59_kj0e6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0) return false;\n    if (n == 0) return false;\n    if (x == 1) return true;\n\
    \    if (n == 1) return true;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    if (x == n * n) return true;\n\
    \    if (x % (n * n) == 0) return false;\n    if (x % (n * n) != 0) return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpomvlq32o.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmpomvlq32o.__unittest_L24_C1() [0x427b11]

    ??:? void tmpomvlq32o.__modtest() [0x427c68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282bb]

    ??:? _d_run_main [0x428226]

    ??:? main [0x427c7b]

    ??:? __libc_start_main [0x46311554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0) return false;\n    if (n == 0) return false;\n    if (x == 1) return true;\n\
    \    if (n == 1) return true;\n    if (x == n) return true;\n    if (x == n*n)\
    \ return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return\
    \ true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return\
    \ true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x ==\
    \ n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if\
    \ (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n\
    \    if (x == n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivi0vqjd.d(34): Error: found `unittest` when expecting `)`

    /tmp/tmpivi0vqjd.d(49): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivi0vqjd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x\
    \ < n)\n        return false;\n    if(x % n != 0)\n        return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6vhbi3a.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a8d]

    ??:? void tmps6vhbi3a.__unittest_L14_C1() [0x427d9d]

    ??:? void tmps6vhbi3a.__modtest() [0x42880c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430821]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d9]

    ??:? runModuleUnitTests [0x42c645]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x\
    \ == 1) return true;\n    if(x == 0) return false;\n    if(n == 1) return false;\n\
    \    if(n == 0) return false;\n    if(n == x) return true;\n    if(n == -1) return\
    \ true;\n    if(n == -x) return true;\n    if(n == 2)\n    {\n        if(x ==\
    \ 2) return true;\n        if(x == 4) return true;\n        if(x == 8) return\
    \ true;\n        if(x == 16) return true;\n        if(x == 32) return true;\n\
    \        if(x == 64) return true;\n        if(x == 128) return true;\n       \
    \ if(x == 256) return true;\n        if(x == 512) return true;\n        if(x ==\
    \ 1024) return true;\n        if(x == 2048) return true;\n        if(x == 4096)\
    \ return true;\n        if(x == 8192) return true;\n        if(x == 16384) return\
    \ true;\n        if(x == 32768) return true;\n        if(x == 65536) return true;\n\
    \        if(x == 131072) return true;\n        if(x == 262144) return true;\n\
    \        if(x == 524288) return true;\n        if(x == 1048576) return true;\n\
    \        if(x == 2097152) return true;\n        if(x == 4194304) return true;\n\
    \        if(x == 8388608) return true;\n        if(x == 16777216) return true;\n\
    \        if(x == 33554432) return true;\n        if(x == 67108864) return true;\n\
    \        if(x == 134217728) return true;\n        if(x == 268435456) return true;\n\
    \        if(x == 536870912) return true;\n        if(x == 1073741824) return true;\n\
    \        if(x == 2147483648) return true;\n        if(x == 4294967296) return\
    \ true;\n        if(x == 8589934592) return true;\n        if(x == 1717\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwjk0ysbw.d(55): Error: found `unittest` when expecting `)`

    /tmp/tmpwjk0ysbw.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpwjk0ysbw.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwjk0ysbw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (n == 1)\n        return false;\n    if (n == 0)\n        return false;\n  \
    \  if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n \
    \   if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    long\
    \ y = x;\n    long z = n;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x1 = 0;\n    long y1 = 0;\n    long z1 = 0;\n    long\
    \ a1 = 0;\n    long b1 = 0;\n    long c1 = 0;\n    long d1 = 0;\n    long e1 =\
    \ 0;\n    long f1 = 0;\n    long g1 = 0;\n    long h1 = 0;\n    long i1 = 0;\n\
    \    long j1 = 0;\n    long k1 = 0;\n    long l1 = 0;\n    long m1 = 0;\n    long\
    \ o1 = 0;\n    long p1 = 0;\n    long q1 = 0;\n    long r1 = 0;\n    long s1 =\
    \ 0;\n    long t1 = 0;\n    long u1 = 0;\n    long v1 = 0;\n    long w1 = 0;\n\
    \    long x2 = 0;\n    long y2 = 0;\n    long z2 = 0;\n    long a2 = 0;\n    long\
    \ b2 = 0;\n    long c2 = 0;\n    long d2 = 0;\n    long e2 = 0;\n    long f2 =\
    \ 0;\n    long g2 = 0;\n    long h2 = 0;\n    long i2 = 0;\n    long j2 = 0;\n\
    \    long k2 = 0;\n    long l2 = 0;\n    long m2 = 0;\n    long o2 = 0;\n    long\
    \ p2 =\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibvb4xj5.d(79): Error: expression expected, not `unittest`

    /tmp/tmpibvb4xj5.d(80): Error: semicolon expected, not `{`

    /tmp/tmpibvb4xj5.d(94): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibvb4xj5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6vhbi3a.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a8d]

    ??:? void tmps6vhbi3a.__unittest_L14_C1() [0x427d9d]

    ??:? void tmps6vhbi3a.__modtest() [0x42880c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b702]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430895]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430821]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d9]

    ??:? runModuleUnitTests [0x42c645]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\
    \ return true;\n    if(x==0) return false;\n    if(n==0) return false;\n    if(n==1)\
    \ return true;\n    if(x==n) return true;\n    if(n==2) return isPowerOfTwo(x);\n\
    \    if(n==3) return isPowerOfThree(x);\n    if(n==4) return isPowerOfFour(x);\n\
    \    if(n==5) return isPowerOfFive(x);\n    if(n==6) return isPowerOfSix(x);\n\
    \    if(n==7) return isPowerOfSeven(x);\n    if(n==8) return isPowerOfEight(x);\n\
    \    if(n==9) return isPowerOfNine(x);\n    if(n==10) return isPowerOfTen(x);\n\
    \    if(n==11) return isPowerOfEleven(x);\n    if(n==12) return isPowerOfTwelve(x);\n\
    \    if(n==13) return isPowerOfThirteen(x);\n    if(n==14) return isPowerOfFourteen(x);\n\
    \    if(n==15) return isPowerOfFifteen(x);\n    if(n==16) return isPowerOfSixteen(x);\n\
    \    if(n==17) return isPowerOfSeventeen(x);\n    if(n==18) return isPowerOfEighteen(x);\n\
    \    if(n==19) return isPowerOfNineteen(x);\n    if(n==20) return isPowerOfTwenty(x);\n\
    \    if(n==21) return isPowerOfTwentyOne(x);\n    if(n==22) return isPowerOfTwentyTwo(x);\n\
    \    if(n==23) return isPowerOfTwentyThree(x);\n    if(n==24) return isPowerOfTwentyFour(x);\n\
    \    if(n==25) return isPowerOfTwentyFive(x);\n    if(n==26) return isPowerOfTwentySix(x);\n\
    \    if(n==27) return isPowerOfTwentySeven(x);\n    if(n==28) return isPowerOfTwentyEight(x);\n\
    \    if(n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv0lta9s1.d(45): Error: found `unittest` when expecting `)`

    /tmp/tmpv0lta9s1.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0lta9s1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x < n)\n        return false;\n    if (x == n)\n        return true;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n       \
    \                     \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x\
    \ == 0)\n        return false;\n    if (n == 0)\n        return false;\n    if\
    \ (x == 1)\n        return true;\n    if (n == 1)\n        return true;\n    if\
    \ (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long\
    \ temp = n;\n    while (temp <= x)\n    {\n        if (temp == x)\n          \
    \  return true;\n        temp *= n;\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
