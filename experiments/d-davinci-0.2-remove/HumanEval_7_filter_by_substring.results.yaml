language: d
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] ret;\n    foreach(string s; strings)\
    \ {\n        if (s.contains(substring)) {\n            ret ~= s;\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ioyshx9.d(11): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ioyshx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_2(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(a => a.contains(substring))();\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring_3(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(a => a.contains(substring)).array();\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_4(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(a => a.contains(substring)).array;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_5(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(a => a.contains(substring)).array();\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_6(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(a => a.contains(substring)).array;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_7(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(a => a.contains(substring)).array();\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_8(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(a => a.contains(substring)).array;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_sub\nunittest\n{\n    alias candidate =\
    \ filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplk7prhl_.d(72): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk7prhl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164124
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings) \n    {\n        if (s.contains(substring)) \n        {\n      \
    \      filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7c0e9z5r.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c0e9z5r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(a => a.contains(substring))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn8dncpol.d(9): Error: template instance `filter!((a) => a.contains(substring))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn8dncpol.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] ret;\n    foreach(string s; strings)\n\
    \    {\n        if(s.contains(substring))\n        {\n            ret ~= s;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpspjm1eki.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpspjm1eki.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(s => s.contains(substring))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4z_9_8sz.d(9): Error: template instance `filter!((s) => s.contains(substring))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4z_9_8sz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings) \n    {\n        if (s.contains(substring)) \n        {\n      \
    \      filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7c0e9z5r.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c0e9z5r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(a => a.contains(substring))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn8dncpol.d(9): Error: template instance `filter!((a) => a.contains(substring))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn8dncpol.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings) \n    {\n        if (s.contains(substring)) \n        {\n      \
    \      filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7c0e9z5r.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c0e9z5r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] ret;\n    foreach(string s; strings)\n\
    \    {\n        if(s.contains(substring))\n        {\n            ret ~= s;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpspjm1eki.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpspjm1eki.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(a => a.contains(substring))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4focm9k5.d(74): Error: expression expected, not `unittest`

    /tmp/tmp4focm9k5.d(75): Error: found `{` when expecting `)` following template
    argument list

    /tmp/tmp4focm9k5.d(76): Error: found `alias` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4focm9k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164124
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings) \n    {\n        if (s.contains(substring)) \n        {\n      \
    \      filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7c0e9z5r.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c0e9z5r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    /*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string[] substrings)\
    \ \n{\n    string[] filtered_strings;\n    foreach(string s; strings)\n    {\n\
    \        foreach(string sub; substrings)\n        {\n            if(s.contains(sub))\n\
    \            {\n                filtered_strings ~= s;\n            }\n      \
    \  }\n    }\n    return filtered_strings;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string[] substrings, string[] exclude_substrings) \n{\n    string[]\
    \ filtered_strings;\n    foreach(string s; strings)\n    {\n        bool exclude\
    \ = false;\n        foreach(string sub; exclude_substrings)\n        {\n     \
    \       if(s.contains(sub))\n            {\n                exclude = true;\n\
    \            }\n        }\n        if(exclude)\n        {\n            continue;\n\
    \        }\n        foreach(string sub; substrings)\n        {\n            if(s.contains(sub))\n\
    \            {\n                filtered_strings ~= s;\n            }\n      \
    \  }\n    }\n    return filtered_strings;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string[] substrings, string[] exclude_substrings, string[] exclude_strings)\
    \ \n{\n    string[] filtered_strings;\n    foreach(string s; strings)\n    {\n\
    \        bool exclude = false;\n        foreach(string sub; exclude_substrings)\n\
    \        {\n            if(s.contains(sub))\n            {\n                exclude\
    \ = true;\n            }\n        }\n        foreach(string sub; exclude_strings)\n\
    \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqqvsqy5.d(88): Error: found `unittest` instead of statement

    /tmp/tmpiqqvsqy5.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqqvsqy5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164124
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.find(substring) != -1)\n        {\n          \
    \  filtered ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp13h91bgx.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h91bgx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings) \n    {\n        if (s.contains(substring)) \n        {\n      \
    \      filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7c0e9z5r.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c0e9z5r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxb1glsph.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxb1glsph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    /*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string[] substrings)\
    \ \n{\n    string[] filtered_strings;\n    foreach(string s; strings)\n    {\n\
    \        foreach(string ss; substrings)\n        {\n            if(s.contains(ss))\n\
    \            {\n                filtered_strings ~= s;\n            }\n      \
    \  }\n    }\n    return filtered_strings;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string[] substrings, string[] exclude_substrings) \n{\n    string[]\
    \ filtered_strings;\n    foreach(string s; strings)\n    {\n        foreach(string\
    \ ss; substrings)\n        {\n            if(s.contains(ss))\n            {\n\
    \                filtered_strings ~= s;\n            }\n        }\n    }\n   \
    \ foreach(string s; strings)\n    {\n        foreach(string ss; exclude_substrings)\n\
    \        {\n            if(s.contains(ss))\n            {\n                filtered_strings\
    \ ~= s;\n            }\n        }\n    }\n    return filtered_strings;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string[] substrings,\
    \ string[] exclude_substrings, string[] exclude_strings) \n{\n    string[] filtered_strings;\n\
    \    foreach(string s; strings)\n    {\n        foreach(string ss; substrings)\n\
    \        {\n            if(s.contains(ss))\n            {\n                filtered_strings\
    \ ~= s;\n            }\n        }\n    }\n    foreach(string s; strings)\n   \
    \ {\n        foreach(string ss;\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf438p4bu.d(87): Error: expression expected, not `unittest`

    /tmp/tmpf438p4bu.d(88): Error: found `{` when expecting `)`

    /tmp/tmpf438p4bu.d(96): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf438p4bu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(a => a.contains(substring))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4focm9k5.d(74): Error: expression expected, not `unittest`

    /tmp/tmp4focm9k5.d(75): Error: found `{` when expecting `)` following template
    argument list

    /tmp/tmp4focm9k5.d(76): Error: found `alias` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4focm9k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164124
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = [];\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   result ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf021qsov.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf021qsov.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    /*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string[] substrings)\
    \ \n{\n    string[] filtered_strings;\n    foreach(string s; strings)\n    {\n\
    \        foreach(string sub; substrings)\n        {\n            if(s.contains(sub))\n\
    \            {\n                filtered_strings ~= s;\n            }\n      \
    \  }\n    }\n    return filtered_strings;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string[] substrings, string[] substrings_to_exclude) \n{\n    string[]\
    \ filtered_strings;\n    foreach(string s; strings)\n    {\n        bool exclude\
    \ = false;\n        foreach(string sub; substrings_to_exclude)\n        {\n  \
    \          if(s.contains(sub))\n            {\n                exclude = true;\n\
    \            }\n        }\n        if(exclude)\n        {\n            continue;\n\
    \        }\n        foreach(string sub; substrings)\n        {\n            if(s.contains(sub))\n\
    \            {\n                filtered_strings ~= s;\n            }\n      \
    \  }\n    }\n    return filtered_strings;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string[] substrings, string[] substrings_to_exclude, string[] substrings_to_include)\
    \ \n{\n    string[] filtered_strings;\n    foreach(string s; strings)\n    {\n\
    \        bool exclude = false;\n        foreach(string sub; substrings_to_exclude)\n\
    \        {\n            if(s.contains(sub))\n            {\n                exclude\
    \ = true;\n            }\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfzb1629g.d(86): Error: found `unittest` instead of statement

    /tmp/tmpfzb1629g.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpfzb1629g.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfzb1629g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_2(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(s => s.contains(substring)).array;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_3(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(s => s.contains(substring)).array();\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_4(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(s => s.contains(substring)).arrayof;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_5(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(s => s.contains(substring)).arrayof();\n}\n\
    /*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_6(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(s => s.contains(substring)).dup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring_7(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(s => s.contains(substring)).dup();\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring_8(string[] strings, string substring)\
    \ \n{\n    return strings.filter!(s => s.contains(substring)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6iomj5lq.d(72): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6iomj5lq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings) \n    {\n        if (s.contains(substring)) \n        {\n         \
    \   filtered ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n \
    \   alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiboyj_ot.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiboyj_ot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain given substring\n            \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string[] substrings) \n{\n    string[]\
    \ filtered;\n    foreach(string s; strings)\n    {\n        foreach(string sub;\
    \ substrings)\n        {\n            if(s.contains(sub))\n            {\n   \
    \             filtered ~= s;\n            }\n        }\n    }\n    return filtered;\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string[] substrings,\
    \ string[] substrings2) \n{\n    string[] filtered;\n    foreach(string s; strings)\n\
    \    {\n        foreach(string sub; substrings)\n        {\n            if(s.contains(sub))\n\
    \            {\n                foreach(string sub2; substrings2)\n          \
    \      {\n                    if(s.contains(sub2))\n                    {\n  \
    \                      filtered ~= s;\n                    }\n               \
    \ }\n            }\n        }\n    }\n    return filtered;\n}\n/*\n Filter an\
    \ input list of strings only for ones that contain given substring\n         \
    \   \n*/\nstring[] filter_by_substring(string[] strings, string[] substrings,\
    \ string[] substrings2, string[] substrings3) \n{\n    string[] filtered;\n  \
    \  foreach(string s; strings)\n    {\n        foreach(string sub; substrings)\n\
    \        {\n            if(s.contains(sub))\n            {\n                foreach(string\
    \ sub2; substrings2)\n                {\n                    if(s.contains(sub2))\n\
    \                    {\n                        foreach(string sub3; substrings3)\n\
    \                        {\n                            if(s.contains(sub3))\n\
    \                            {\n                                filtered ~= s;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0zrp9a5o.d(89): Error: found `unittest` instead of statement

    /tmp/tmp0zrp9a5o.d(98): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp0zrp9a5o.d(98): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp0zrp9a5o.d(98): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0zrp9a5o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that contain given substring\n            \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string[] substrings) \n{\n    string[]\
    \ result;\n    foreach(string s; strings)\n    {\n        foreach(string substring;\
    \ substrings)\n        {\n            if(s.contains(substring))\n            {\n\
    \                result ~= s;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string[] substrings,\
    \ bool case_sensitive) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        foreach(string substring; substrings)\n        {\n           \
    \ if(case_sensitive)\n            {\n                if(s.contains(substring))\n\
    \                {\n                    result ~= s;\n                }\n    \
    \        }\n            else\n            {\n                if(s.toLower().contains(substring.toLower()))\n\
    \                {\n                    result ~= s;\n                }\n    \
    \        }\n        }\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain given substring\n            \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string[] substrings, bool case_sensitive,\
    \ bool remove_duplicates) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        foreach(string substring; substrings)\n        {\n           \
    \ if(case_sensitive)\n            {\n                if(s.contains(substring))\n\
    \                {\n                    result ~= s;\n                }\n    \
    \        }\n            else\n            {\n                if(s.toLower().contains(substring.toLower()))\n\
    \                {\n                    result ~= s;\n                }\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu9foynw0.d(91): Error: found `unittest` instead of statement

    /tmp/tmpu9foynw0.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpu9foynw0.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpu9foynw0.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu9foynw0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result\
    \ ~= s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ylgtpe3.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ylgtpe3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings) \n    {\n        if (s.contains(substring)) \n        {\n         \
    \   filtered ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n \
    \   alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiboyj_ot.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiboyj_ot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            filtered\
    \ ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp215rumv0.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp215rumv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(s => s.contains(substring))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4z_9_8sz.d(9): Error: template instance `filter!((s) => s.contains(substring))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4z_9_8sz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rifhyzx.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rifhyzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1t5yu04.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1t5yu04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] filtered;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.find(substring) != -1)\n        {\n          \
    \  filtered ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp13h91bgx.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13h91bgx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmveh339q.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmveh339q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164125
