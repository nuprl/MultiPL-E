{
  "language": "d",
  "name": "HumanEval_117_select_words",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuhyfbwki.d(14): Error: undefined identifier `split`\n/tmp/tmpuhyfbwki.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhyfbwki.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164576
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] ret = new string[];\n    foreach(string w; words)\n    {\n        if(countConsonants(w) == n)\n            ret ~= w;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdqjnx6zn.d(14): Error: undefined identifier `split`\n/tmp/tmpdqjnx6zn.d(15): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\n/tmp/tmpdqjnx6zn.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqjnx6zn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwg83yc7.d(14): Error: no property `split` for type `string`\n/tmp/tmpgwg83yc7.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwg83yc7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    auto result = new string[];\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmsnma5wj.d(14): Error: undefined identifier `split`\n/tmp/tmpmsnma5wj.d(15): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\n/tmp/tmpmsnma5wj.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsnma5wj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuhyfbwki.d(14): Error: undefined identifier `split`\n/tmp/tmpuhyfbwki.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhyfbwki.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164576
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.length == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppwnrzhmm.d(14): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwnrzhmm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuhyfbwki.d(14): Error: undefined identifier `split`\n/tmp/tmpuhyfbwki.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhyfbwki.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164576
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] result;\n    string[] words = split(s);\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7g4ssu0f.d(15): Error: undefined identifier `split`\n/tmp/tmp7g4ssu0f.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g4ssu0f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp232uwdio.d(14): Error: no property `split` for type `string`\n/tmp/tmp232uwdio.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp232uwdio.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp232uwdio.d(14): Error: no property `split` for type `string`\n/tmp/tmp232uwdio.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp232uwdio.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptn3ow4kk.d(14): Error: no property `split` for type `string`\n/tmp/tmptn3ow4kk.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptn3ow4kk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptn3ow4kk.d(14): Error: no property `split` for type `string`\n/tmp/tmptn3ow4kk.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptn3ow4kk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdsupzpwo.d(14): Error: undefined identifier `split`\n/tmp/tmpdsupzpwo.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdsupzpwo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] res;\n    foreach(word; words)\n    {\n        if(word.count!(c => c.isConsonant) == n)\n            res ~= word;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb86y6bqp.d(14): Error: no property `split` for type `string`\n/tmp/tmpb86y6bqp.d(18): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb86y6bqp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[0];\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzesiioza.d(14): Error: no property `split` for type `string`\n/tmp/tmpzesiioza.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzesiioza.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.length == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpym54vn5y.d(14): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpym54vn5y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsvq__9xg.d(83): Error: identifier expected following `package`\n/tmp/tmpsvq__9xg.d(83): Error: `;` expected\n/tmp/tmpsvq__9xg.d(95): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvq__9xg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164576
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwg83yc7.d(14): Error: no property `split` for type `string`\n/tmp/tmpgwg83yc7.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwg83yc7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(w; words)\n    {\n        if(countConsonants(w) == n)\n        {\n            result ~= w;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpivrwpjnf.d(14): Error: undefined identifier `split`\n/tmp/tmpivrwpjnf.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpivrwpjnf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp36j4crln.d(14): Error: no property `split` for type `string`\n/tmp/tmp36j4crln.d(15): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\n/tmp/tmp36j4crln.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36j4crln.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6bhp2n2a.d(14): Error: no property `split` for type `string`\n/tmp/tmp6bhp2n2a.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bhp2n2a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.length == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpji97vbyx.d(14): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpji97vbyx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwg83yc7.d(14): Error: no property `split` for type `string`\n/tmp/tmpgwg83yc7.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwg83yc7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwg83yc7.d(14): Error: no property `split` for type `string`\n/tmp/tmpgwg83yc7.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwg83yc7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps2gskun3.d(14): Error: no property `split` for type `string`\n/tmp/tmps2gskun3.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2gskun3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgcks_avi.d(14): Error: undefined identifier `split`\n/tmp/tmpgcks_avi.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcks_avi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.length == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppwnrzhmm.d(14): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwnrzhmm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_8p6g_th.d(14): Error: undefined identifier `split`\n/tmp/tmp_8p6g_th.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8p6g_th.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwg83yc7.d(14): Error: no property `split` for type `string`\n/tmp/tmpgwg83yc7.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwg83yc7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split();\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8t9dlpv2.d(14): Error: no property `split` for type `string`\n/tmp/tmp8t9dlpv2.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t9dlpv2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptn3ow4kk.d(14): Error: no property `split` for type `string`\n/tmp/tmptn3ow4kk.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptn3ow4kk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!('a','e','i','o','u') == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8vzoczw_.d(14): Error: no property `split` for type `string`\n/tmp/tmp8vzoczw_.d(18): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vzoczw_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptn3ow4kk.d(14): Error: no property `split` for type `string`\n/tmp/tmptn3ow4kk.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptn3ow4kk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[0];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjc9ky44k.d(14): Error: no property `split` for type `string`\n/tmp/tmpjc9ky44k.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc9ky44k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6bhp2n2a.d(14): Error: no property `split` for type `string`\n/tmp/tmp6bhp2n2a.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bhp2n2a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuhyfbwki.d(14): Error: undefined identifier `split`\n/tmp/tmpuhyfbwki.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhyfbwki.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164576
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    auto words = split(s);\n    auto result = filter!(w => count_consonants(w) == n)(words);\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6ak0h5hr.d(14): Error: undefined identifier `split`\n/tmp/tmp6ak0h5hr.d(15): Error: template instance `filter!((w) => count_consonants(w) == n)` template `filter` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ak0h5hr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp87eqoqbo.d(14): Error: undefined identifier `split`\n/tmp/tmp87eqoqbo.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp87eqoqbo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    import std.algorithm : filter, map;\n    import std.range : zip;\n    import std.array : array;\n    import std.conv : to;\n    import std.string : split;\n    import std.range : iota;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n    import std.traits : isFloatingPoint;\n    import std.range : take;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_bl_tmjj.d(67): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_bl_tmjj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptwwfit0q.d(14): Error: no property `split` for type `string`\n/tmp/tmptwwfit0q.d(15): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\n/tmp/tmptwwfit0q.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwwfit0q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6bhp2n2a.d(14): Error: no property `split` for type `string`\n/tmp/tmp6bhp2n2a.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bhp2n2a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!('a','e','i','o','u','y') == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8jwby1pe.d(14): Error: undefined identifier `split`\n/tmp/tmp8jwby1pe.d(18): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jwby1pe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgcks_avi.d(14): Error: undefined identifier `split`\n/tmp/tmpgcks_avi.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcks_avi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp232uwdio.d(14): Error: no property `split` for type `string`\n/tmp/tmp232uwdio.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp232uwdio.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps2gskun3.d(14): Error: no property `split` for type `string`\n/tmp/tmps2gskun3.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2gskun3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!(c => c.isConsonant) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjou4rhfv.d(14): Error: no property `split` for type `string`\n/tmp/tmpjou4rhfv.d(18): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjou4rhfv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp232uwdio.d(14): Error: no property `split` for type `string`\n/tmp/tmp232uwdio.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp232uwdio.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6y7navxo.d(14): Error: no property `split` for type `string`\n/tmp/tmp6y7navxo.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6y7navxo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_8p6g_th.d(14): Error: undefined identifier `split`\n/tmp/tmp_8p6g_th.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8p6g_th.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    auto words = split(s);\n    auto result = words.filter!(w => count_consonants(w) == n);\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfc255xhp.d(14): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfc255xhp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!('a','e','i','o','u','y') == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphdi_2_vs.d(14): Error: no property `split` for type `string`\n/tmp/tmphdi_2_vs.d(18): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphdi_2_vs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_8p6g_th.d(14): Error: undefined identifier `split`\n/tmp/tmp_8p6g_th.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8p6g_th.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp232uwdio.d(14): Error: no property `split` for type `string`\n/tmp/tmp232uwdio.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp232uwdio.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgcks_avi.d(14): Error: undefined identifier `split`\n/tmp/tmpgcks_avi.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcks_avi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!('a','e','i','o','u','A','E','I','O','U') == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvq0__frp.d(14): Error: no property `split` for type `string`\n/tmp/tmpvq0__frp.d(18): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvq0__frp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp232uwdio.d(14): Error: no property `split` for type `string`\n/tmp/tmp232uwdio.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp232uwdio.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!('a','e','i','o','u') == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8vzoczw_.d(14): Error: no property `split` for type `string`\n/tmp/tmp8vzoczw_.d(18): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vzoczw_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7b8crq1k.d(14): Error: no property `split` for type `string`\n/tmp/tmp7b8crq1k.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7b8crq1k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!(c => c.isConsonant) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbs87lbcg.d(14): Error: undefined identifier `split`\n/tmp/tmpbs87lbcg.d(18): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbs87lbcg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuhyfbwki.d(14): Error: undefined identifier `split`\n/tmp/tmpuhyfbwki.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhyfbwki.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164576
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"];\n    string[] result;\n    foreach(string word; words)\n    {\n        long count = 0;\n        foreach(string letter; word)\n        {\n            if(letter in consonants)\n            {\n                count++;\n            }\n        }\n        if(count == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4o7ede9f.d(14): Error: undefined identifier `split`\n/tmp/tmp4o7ede9f.d(20): Error: cannot implicitly convert expression `__r75[__key76]` of type `immutable(char)` to `string`\n/tmp/tmp4o7ede9f.d(22): Error: incompatible types for `(letter) in (consonants)`: `string` and `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4o7ede9f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    auto words = split(s, \" \");\n    auto result = new string[];\n    foreach(word; words)\n    {\n        auto consonants = 0;\n        foreach(c; word)\n        {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                consonants++;\n        }\n        if(consonants == n)\n            result ~= word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp75bhow1r.d(14): Error: undefined identifier `split`\n/tmp/tmp75bhow1r.d(15): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75bhow1r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] res;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            res ~= word;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpljg2w914.d(14): Error: undefined identifier `split`\n/tmp/tmpljg2w914.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljg2w914.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[0];\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzesiioza.d(14): Error: no property `split` for type `string`\n/tmp/tmpzesiioza.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzesiioza.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps2gskun3.d(14): Error: no property `split` for type `string`\n/tmp/tmps2gskun3.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2gskun3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps2gskun3.d(14): Error: no property `split` for type `string`\n/tmp/tmps2gskun3.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2gskun3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps2gskun3.d(14): Error: no property `split` for type `string`\n/tmp/tmps2gskun3.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2gskun3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr1ch7u9z.d(14): Error: no property `split` for type `string`\n/tmp/tmpr1ch7u9z.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1ch7u9z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdsupzpwo.d(14): Error: undefined identifier `split`\n/tmp/tmpdsupzpwo.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdsupzpwo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6bhp2n2a.d(14): Error: no property `split` for type `string`\n/tmp/tmp6bhp2n2a.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bhp2n2a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_8p6g_th.d(14): Error: undefined identifier `split`\n/tmp/tmp_8p6g_th.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8p6g_th.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        long count = 0;\n        foreach(letter; word)\n        {\n            if(!isVowel(letter))\n            {\n                count++;\n            }\n        }\n        if(count == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjyqczswg.d(14): Error: undefined identifier `split`\n/tmp/tmpjyqczswg.d(21): Error: undefined identifier `isVowel`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyqczswg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    import std.algorithm : filter, map;\n    import std.range : zip;\n    import std.array : array;\n    import std.conv : to;\n    import std.string : split;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n    import std.stdio : writeln;\n    import std.range : take;\n    import std.range : drop;\n    import std.range : cycle;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range :\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9qmsmd5i.d(70): Error: identifier expected following `:`\n/tmp/tmp9qmsmd5i.d(70): Error: `;` expected\n/tmp/tmp9qmsmd5i.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qmsmd5i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6bhp2n2a.d(14): Error: no property `split` for type `string`\n/tmp/tmp6bhp2n2a.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bhp2n2a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgcks_avi.d(14): Error: undefined identifier `split`\n/tmp/tmpgcks_avi.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcks_avi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6bhp2n2a.d(14): Error: no property `split` for type `string`\n/tmp/tmp6bhp2n2a.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bhp2n2a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptn3ow4kk.d(14): Error: no property `split` for type `string`\n/tmp/tmptn3ow4kk.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptn3ow4kk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps2gskun3.d(14): Error: no property `split` for type `string`\n/tmp/tmps2gskun3.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2gskun3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7b8crq1k.d(14): Error: no property `split` for type `string`\n/tmp/tmp7b8crq1k.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7b8crq1k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp232uwdio.d(14): Error: no property `split` for type `string`\n/tmp/tmp232uwdio.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp232uwdio.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatyjl5e5.d(14): Error: undefined identifier `split`\n/tmp/tmpatyjl5e5.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatyjl5e5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6rac81ti.d(14): Error: undefined identifier `split`\n/tmp/tmp6rac81ti.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rac81ti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ytkm7mr.d(14): Error: undefined identifier `split`\n/tmp/tmp4ytkm7mr.d(18): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytkm7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    auto words = split(s);\n    auto result = filter!(w => count_consonants(w) == n)(words);\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6ak0h5hr.d(14): Error: undefined identifier `split`\n/tmp/tmp6ak0h5hr.d(15): Error: template instance `filter!((w) => count_consonants(w) == n)` template `filter` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ak0h5hr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpale5_65z.d(14): Error: undefined identifier `split`\n/tmp/tmpale5_65z.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpale5_65z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] result;\n    string[] words = split(s);\n    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzwnaebfr.d(15): Error: undefined identifier `split`\n/tmp/tmpzwnaebfr.d(18): Error: undefined identifier `countConsonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwnaebfr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countUntil(\"aeiou\") == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzsi2ys5h.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x44cd45]\n??:? void tmpzsi2ys5h.__unittest_L32_C1() [0x43c38e]\n??:? void tmpzsi2ys5h.__modtest() [0x44ab80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x456247]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x44c372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x452311]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4523a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45229d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x44c349]\n??:? runModuleUnitTests [0x45601d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x44daa0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164579
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n                        \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps2gskun3.d(14): Error: no property `split` for type `string`\n/tmp/tmps2gskun3.d(18): Error: no property `countConsonants` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2gskun3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164577
    }
  ]
}