name: HumanEval_89_encrypt
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that\
  \ takes a string as an argument and\n    returns a string encrypted with the alphabet\
  \ being rotated. \n    The alphabet should be rotated in a manner such that the\
  \ letters \n    shift down by two multiplied to two places.\n    For example:\n\
  \                    \n*/\nstring encrypt(string s) \n"
tests: "unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
  ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
  gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
  faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
  ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
  a\") == \"e\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    foreach(char c; s)\n    {\n     \
    \   if(c == ' ')\n        {\n            result ~= ' ';\n        }\n        else\n\
    \        {\n            int index = c - 'a';\n            index = (index + 2 *\
    \ 2) % 26;\n            result ~= 'a' + index;\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a'\
    \ && c <= 'z')\n        {\n            result ~= (char)((c - 'a' + 2*2) % 26 +\
    \ 'a');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (char)((c - 'A' + 2*2) % 26 + 'A');\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n  \
    \          encrypted ~= ' ';\n        }\n        else\n        {\n           \
    \ encrypted ~= alphabet[(cast(int)c - 97 + 4) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n  \
    \      if(c == ' ')\n        {\n            result ~= c;\n        }\n        else\n\
    \        {\n            result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n  \
    \      }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n        else if(c\
    \ == 'y')\n            result ~= 'a';\n        else\n            result ~= chr(c\
    \ + 2 * 2);\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        encrypted ~= alphabet[(index + 2*2) % alphabet.length];\n\
    \    }\n    return encrypted;\n}", "{\n    string result;\n    foreach(char c;\
    \ s)\n    {\n        if(c.isAlpha)\n        {\n            if(c.isUpper)\n   \
    \         {\n                result ~= (cast(char)(((c - 'A' + 2) * 2) % 26 +\
    \ 'A'));\n            }\n            else\n            {\n                result\
    \ ~= (cast(char)(((c - 'a' + 2) * 2) % 26 + 'a'));\n            }\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   if(c == ' ')\n        {\n            result ~= ' ';\n        }\n        else\n\
    \        {\n            result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n      \
    \  }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ')\
    \ \n        {\n            result ~= ' ';\n        }\n        else \n        {\n\
    \            int index = alphabet.indexOf(c);\n            int newIndex = (index\
    \ + 2*2) % alphabet.length;\n            result ~= alphabet[newIndex];\n     \
    \   }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= ' ';\n        }\n        else\n  \
    \      {\n            int index = alphabet.indexOf(c);\n            int newIndex\
    \ = (index + (2 * 2)) % 26;\n            encrypted ~= alphabet[newIndex];\n  \
    \      }\n    }\n    return encrypted;\n}", "{\n    string result = \"\";\n  \
    \  foreach(char c; s)\n    {\n        if(c.isAlpha)\n        {\n            result\
    \ ~= c.toUpper.rotate(2 * 2);\n        }\n        else\n        {\n          \
    \  result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            result ~=\
    \ (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n   \
    \ return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n\
    \        if(c == ' ')\n        {\n            result ~= c;\n        }\n      \
    \  else\n        {\n            result ~= c + 2 * 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n\
    \        if(c == 'z')\n            result ~= 'b';\n        else if(c == 'y')\n\
    \            result ~= 'a';\n        else\n            result ~= c + 2;\n    }\n\
    \    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= ' ';\n        }\n        else\n  \
    \      {\n            int index = alphabet.indexOf(c);\n            encrypted\
    \ ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n    return encrypted;\n\
    }", "{\n    string result;\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            result ~= c.toLower.rotate(2*2);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (c - 'a' + 2) % 26 + 'a';\n        }\n     \
    \   else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' +\
    \ 2) % 26 + 'A';\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == '\
    \ ')\n        {\n            result ~= c;\n        }\n        else\n        {\n\
    \            int index = alphabet.indexOf(c);\n            int newIndex = (index\
    \ + 2 * 2) % alphabet.length;\n            result ~= alphabet[newIndex];\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~=\
    \ (c + 2 > 'z') ? (c + 2 - 'z' + 'a' - 1) : (c + 2);\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c + 2 > 'Z') ? (c\
    \ + 2 - 'Z' + 'A' - 1) : (c + 2);\n        }\n        else\n        {\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n    returns a string decrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n                    \n*/\nstring decrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (c - 2 < 'a') ? (c - 2 + 'z' - 'a' + 1) : (c\
    \ - 2);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (c - 2 < 'A') ? (c - 2 + 'Z' - 'A' + 1) : (c - 2);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\n/*\nCreate a function that takes a string as an argument and returns\
    \ \n    a string with the first letter of each word capitalized.\n    For example:\n\
    \                    \n*/\nstring capitalize(string s) \n{\n    string result\
    \ = \"\";\n    bool capitalize = true;\n    foreach(c; s)\n    {\n        if(capitalize)\n\
    \        {\n            result ~= toupper(c);\n            capitalize = false;\n\
    \        }\n        else\n        {\n            result ~= c;\n        }", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(c.isUpper)\n            {\n                result ~=\
    \ (cast(char)(((c - 'A' + 2) % 26) + 'A'));\n            }\n            else\n\
    \            {\n                result ~= (cast(char)(((c - 'a' + 2) % 26) + 'a'));\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(char c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n   \
    \         result ~= (cast(char)(((c - 'a' + 2) * 2) % 26 + 'a'));\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (cast(char)(((c\
    \ - 'A' + 2) * 2) % 26 + 'A'));\n        }\n        else\n        {\n        \
    \    result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            result ~=\
    \ rotate(c, 2*2);\n        }\n    }\n    return result;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted ~= ' ';\n\
    \        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2) * 2;\n            encrypted ~= alphabet[newIndex\
    \ % alphabet.length];\n        }\n    }\n    return encrypted;\n}", "{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 4) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n  \
    \      result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n    \
    \    {\n            result ~= c;\n        }\n        else\n        {\n       \
    \     result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (char)((c - 'a' + 2*2) % 26 + 'a');\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (char)((c - 'A' + 2*2) % 26 + 'A');\n        }\n        else\n        {\n  \
    \          result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= char(c + 2 * 2);\n        }\n    }\n    return result;\n}", "{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n    \
    \    if(index != -1)\n        {\n            int newIndex = (index + (2 * 2))\
    \ % alphabet.length;\n            encrypted ~= alphabet[newIndex];\n        }\n\
    \        else\n        {\n            encrypted ~= c;\n        }\n    }\n    return\
    \ encrypted;\n}", "{\n    string result;\n    foreach(char c; s)\n    {\n    \
    \    if(c.isAlpha)\n        {\n            result ~= c.toLower.rotate(2 * 2);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            result ~= (char)((c - 'a' + 2 *\
    \ 2) % 26 + 'a');\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        int index = alphabet.indexOf(c);\n        if(index !=\
    \ -1)\n        {\n            encrypted ~= alphabet[(index + 2*2) % alphabet.length];\n\
    \        }\n        else\n        {\n            encrypted ~= c;\n        }\n\
    \    }\n    return encrypted;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            result ~= ' ';\n        }\n        else\n        {\n \
    \           int index = alphabet.indexOf(c);\n            result ~= alphabet[(index\
    \ + (2 * 2)) % 26];\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            result ~=\
    \ (c + 2 * 2).to!char;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else\n  \
    \      {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n        result ~=\
    \ (cast(char)(c + 2 * 2));\n    }\n    return result;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted ~= ' ';\n\
    \        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n\
    \    {\n        if(c.isAlpha)\n        {\n            result ~= (c.isUpper ? 'A'\
    \ : 'a') + ((c - (c.isUpper ? 'A' : 'a') + 2 * 2) % 26);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == '\
    \ ')\n        {\n            result ~= ' ';\n        }\n        else if(c == 'z')\n\
    \        {\n            result ~= 'b';\n        }\n        else if(c == 'y')\n\
    \        {\n            result ~= 'a';\n        }\n        else\n        {\n \
    \           result ~= (char)(c + 2);\n        }\n    }\n    return result;\n}",
  "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        if(index != -1)\n        {\n            encrypted ~= alphabet[(index\
    \ + (2 * 2)) % alphabet.length];\n        }\n        else\n        {\n       \
    \     encrypted ~= c;\n        }\n    }\n    return encrypted;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n\
    \            result ~= c;\n        }\n        else \n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            result ~= c;\n        }\n        else\n        {\n   \
    \         int index = alphabet.indexOf(c);\n            int newIndex = (index\
    \ + 2 * 2) % alphabet.length;\n            result ~= alphabet[newIndex];\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        if(c == ' ') \n        {\n            result ~= ' ';\n \
    \       } \n        else \n        {\n            int index = c - 'a';\n     \
    \       index = (index + 2 * 2) % 26;\n            result ~= char(index + 'a');\n\
    \        }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= ' ';\n        }\n        else\n  \
    \      {\n            int index = alphabet.indexOf(c);\n            encrypted\
    \ ~= alphabet[(index + 2 * 2) % 26];\n        }\n    }\n    return encrypted;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == '\
    \ ')\n        {\n            result ~= c;\n        }\n        else\n        {\n\
    \            result ~= (cast(char)(((cast(int)(c) - 97 + 2*2) % 26) + 97));\n\
    \        }\n    }\n    return result;\n}", "{\n    string res;\n    foreach(c;\
    \ s)\n    {\n        res ~= (c == ' ') ? ' ' : 'a' + ((c - 'a' + 2*2) % 26);\n\
    \    }\n    return res;\n}", "{\n    string result = \"\";\n    foreach(char c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= c;\n     \
    \   }\n        else\n        {\n            result ~= (char)(((c - 'a' + 2) %\
    \ 26) + 'a');\n        }\n    }\n    return result;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            result ~= alphabet[(index + 2 * 2) % alphabet.length];\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            result ~= (char)(((c - 'a' + 2)\
    \ % 26) + 'a');\n        }\n    }\n    return result;\n}\n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n    returns a string decrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n*/\n\
    string decrypt(string s) \n{\n    string result = \"\";\n    foreach(c; s)\n \
    \   {\n        if(c == ' ')\n        {\n            result ~= ' ';\n        }\n\
    \        else\n        {\n            result ~= (char)(((c - 'a' - 2) % 26) +\
    \ 'a');\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n            result\
    \ ~= ' ';\n        } \n        else \n        {\n            result ~= char(cast(int)c\
    \ + 2 * 2);\n        }\n    }\n    return result;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        int index = alphabet.indexOf(c);\n        if(index !=\
    \ -1)\n        {\n            encrypted ~= alphabet[(index + 2*2) % alphabet.length];\n\
    \        }\n        else\n        {\n            encrypted ~= c;\n        }\n\
    \    }\n    return encrypted;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        if(c == ' ') \n        {\n            result ~= ' ';\n\
    \        } \n        else \n        {\n            result ~= char(mod(cast(int)c\
    \ + 2 * 2, 26) + 'a');\n        }\n    }\n    return result;\n}", "{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n     \
    \   }\n    }\n    return encrypted;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n        else if(c\
    \ == 'y')\n            result ~= 'a';\n        else\n            result ~= c +\
    \ 2;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        if(c == ' ') \n        {\n            result ~= ' ';\n \
    \       } \n        else \n        {\n            result ~= (cast(char)((c - 'a'\
    \ + 2) % 26 + 'a'));\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s) \n \
    \   {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= (cast(char)((c\
    \ - 'a' + 2) % 26 + 'a'));\n        }\n        else if(c >= 'A' && c <= 'Z') \n\
    \        {\n            result ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n  \
    \      }\n        else \n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s) \n \
    \   {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= (cast(char)((c\
    \ - 'a' + 2) % 26 + 'a'));\n        }\n        else if(c >= 'A' && c <= 'Z') \n\
    \        {\n            result ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n  \
    \      }\n        else \n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (cast(char)('a'\
    \ + (c - 'a' + 2 * 2) % 26));\n        }\n        else if(c >= 'A' && c <= 'Z')\n\
    \        {\n            result ~= (cast(char)('A' + (c - 'A' + 2 * 2) % 26));\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n\
    \    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n        }\n\
    \        else\n        {\n            result ~= (c + 2 * 2);\n        }\n    }\n\
    \    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= ' ';\n        }\n        else\n  \
    \      {\n            int index = alphabet.indexOf(c);\n            encrypted\
    \ ~= alphabet[(index + 2 * 2) % alphabet.length];\n        }\n    }\n    return\
    \ encrypted;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n  \
    \      if(c.isAlpha)\n        {\n            result ~= (c.toLower.isUpper ? 'a'\
    \ : 'A') + (c.toLower - 'a' + 2 * 2) % 26;\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\n/*\nCreate a function decrypt that takes a string as\
    \ an argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n*/\nstring decrypt(string\
    \ s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string decrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n  \
    \          decrypted ~= ' ';\n        }\n        else\n        {\n           \
    \ int index = alphabet.indexOf(c);\n            decrypted ~= alphabet[(index -\
    \ (2 * 2)) % 26];\n        }\n    }\n    return decrypted;\n}\n/*\nCreate a function\
    \ encrypt that takes a string as an argument and\n    returns a string encrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\n/*\nCreate a function decrypt that takes a string as\
    \ an argument and\n    returns a string decrypted", "{\n    string alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted ~= ' ';\n\
    \        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * 2)) % 26;\n            encrypted ~=\
    \ alphabet[newIndex];\n        }\n    }\n    return encrypted;\n}", "{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2 * 2) % alphabet.length;\n            encrypted\
    \ ~= alphabet[newIndex];\n        }\n    }\n    return encrypted;\n}", "{\n  \
    \  string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n\
    \            result ~= 'b';\n        else if(c == 'y')\n            result ~=\
    \ 'a';\n        else\n            result ~= c + 2;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            if(c.isUpper)\n            {\n                result ~=\
    \ (((c - 'A' + 2) % 26) + 'A');\n            }\n            else\n           \
    \ {\n                result ~= (((c - 'a' + 2) % 26) + 'a');\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\
    \ \n    {\n        if(c == ' ') \n        {\n            result ~= c;\n      \
    \  }\n        else \n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c\
    \ <= 'z')\n        {\n            result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (char)((c - 'A' + 2 * 2) % 26 + 'A');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        result ~= (cast(char)((c\
    \ - 'a' + 2 * 2) % 26 + 'a'));\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (char)((c - 'a' + 2*2) % 26 + 'a');\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            if(c.isUpper)\n            {\n                result ~=\
    \ (cast(char)((c - 'A' + 2*2) % 26 + 'A'));\n            }\n            else\n\
    \            {\n                result ~= (cast(char)((c - 'a' + 2*2) % 26 + 'a'));\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            result ~=\
    \ c;\n        }\n        else\n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ + 2 * 2)));\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            result ~=\
    \ char(cast(int)c + 2*2);\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= c;\n        }\n        else\n        {\n         \
    \   int index = c - 'a';\n            index = (index + 2*2) % 26;\n          \
    \  result ~= 'a' + index;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s) \n    {\n        int index = alphabet.indexOf(c);\n   \
    \     if(index != -1) \n        {\n            encrypted ~= alphabet[(index +\
    \ 2 * 2) % alphabet.length];\n        }\n        else \n        {\n          \
    \  encrypted ~= c;\n        }\n    }\n    return encrypted;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (c + (2 * 2));\n        }\n    }\n    return result;\n}", "{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 4) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}", "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n\
    \        result ~= (cast(char)((cast(int)c + 2 * 2) % 256));\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n\
    \        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (char)((c\
    \ - 'a' + 2 * 2) % 26 + 'a');\n        }\n        else if(c >= 'A' && c <= 'Z')\n\
    \        {\n            result ~= (char)((c - 'A' + 2 * 2) % 26 + 'A');\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string encrypted = \"\";\n    foreach(char c;\
    \ s)\n    {\n        encrypted ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n  \
    \  }\n    return encrypted;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            result ~= c;\n  \
    \      }\n        else\n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ + 2*2 - 97) % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n    \
    \    {\n            result ~= ' ';\n        }\n        else\n        {\n     \
    \       result ~= (char)(((c - 'a' + 2 * 2) % 26) + 'a');\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s) \n \
    \   {\n        result ~= cast(char)(cast(int)c + 2 * 2);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s) \n    {\n        if(c >=\
    \ 'a' && c <= 'z') \n        {\n            result ~= char(mod(c - 'a' + 2 * 2,\
    \ 26) + 'a');\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n\
    \            result ~= char(mod(c - 'A' + 2 * 2, 26) + 'A');\n        }\n    \
    \    else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   if(c == ' ')\n        {\n            result ~= ' ';\n        }\n        else\n\
    \        {\n            result ~= (c + 2 * 2);\n        }\n    }\n    return result;\n\
    }", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n  \
    \          encrypted ~= ' ';\n        }\n        else\n        {\n           \
    \ int index = alphabet.indexOf(c);\n            encrypted ~= alphabet[(index +\
    \ 4) % 26];\n        }\n    }\n    return encrypted;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted ~= ' ';\n\
    \        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n   \
    \     }\n    }\n    return encrypted;\n}", "{\n    string result = \"\";\n   \
    \ foreach(c; s) \n    {\n        if(c == ' ') \n        {\n            result\
    \ ~= ' ';\n        }\n        else \n        {\n            result ~= (cast(char)(((cast(int)(c)\
    \ - 97 + 2) * 2) % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n\
    \    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\
    \";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n           \
    \ result ~= ' ';\n        }\n        else \n        {\n            int index =\
    \ alphabet.indexOf(c);\n            result ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \        }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= ' ';\n        }\n        else\n  \
    \      {\n            int index = alphabet.indexOf(c);\n            encrypted\
    \ ~= alphabet[(index + 4) % 26];\n        }\n    }\n    return encrypted;\n}",
  "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            result ~= ' ';\n        }\n        else\n        {\n \
    \           result ~= (c - 'a' + 2 * 2) % 26 + 'a';\n        }\n    }\n    return\
    \ result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ string encrypted = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n \
    \       {\n            encrypted ~= c;\n        }\n        else\n        {\n \
    \           int index = alphabet.indexOf(c);\n            encrypted ~= alphabet[(index\
    \ + 4) % 26];\n        }\n    }\n    return encrypted;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n      \
    \  {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c\
    \ <= 'z')\n        {\n            result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n \
    \       {\n            result ~= ' ';\n        }\n        else\n        {\n  \
    \          result ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n  \
    \      }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            result ~= (char)((c + 2 * 2 - 'a')\
    \ % 26 + 'a');\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n      \
    \  {\n            result ~= (char)('a' + (c - 'a' + 2 * 2) % 26);\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)('A'\
    \ + (c - 'A' + 2 * 2) % 26);\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n  \
    \          result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= 'a' + ((c - 'a' + 2 * 2) % 26);\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            if(c.isUpper)\n            {\n                result ~=\
    \ (cast(char)((cast(int)(c) + 2 * 2 - 65) % 26 + 65));\n            }\n      \
    \      else\n            {\n                result ~= (cast(char)((cast(int)(c)\
    \ + 2 * 2 - 97) % 26 + 97));\n            }\n        }\n        else\n       \
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted =\
    \ \"\";\n    foreach(char c; s) \n    {\n        int index = alphabet.indexOf(c);\n\
    \        if(index == -1) \n        {\n            encrypted ~= c;\n        }\n\
    \        else \n        {\n            encrypted ~= alphabet[(index + 2 * 2) %\
    \ alphabet.length];\n        }\n    }\n    return encrypted;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (c + 2 * 2);\n        }\n    }\n    return result;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        int index = alphabet.indexOf(c);\n        if(index !=\
    \ -1)\n        {\n            encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \        }\n        else\n        {\n            encrypted ~= c;\n        }\n\
    \    }\n    return encrypted;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ - 97 + 2*2) % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            result ~= ' ';\n        }\n        else\n        {\n \
    \           result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n\
    \    return result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n  \
    \      if(c == ' ')\n        {\n            result ~= ' ';\n        }\n      \
    \  else\n        {\n            result ~= (cast(char)((cast(int)(c) - 97 + 2*2)\
    \ % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            result\
    \ ~= c;\n            continue;\n        }\n        else if(c == 'z')\n       \
    \ {\n            result ~= 'b';\n            continue;\n        }\n        else\
    \ if(c == 'y')\n        {\n            result ~= 'a';\n            continue;\n\
    \        }\n        else\n        {\n            result ~= c + 2;\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; s) \n    {\n        if(c >= 'a' &&\
    \ c <= 'z') \n        {\n            result ~= (cast(char)((c - 'a' + 2 * 2) %\
    \ 26 + 'a'));\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n\
    \            result ~= (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   if(c == ' ')\n        {\n            result ~= c;\n        }\n        else\n\
    \        {\n            result ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26\
    \ + 97));\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            result\
    \ ~= ' ';\n        }\n        else\n        {\n            result ~= (cast(char)((c\
    \ - 'a' + 2 * 2) % 26 + 'a'));\n        }\n    }\n    return result;\n}", "{\n\
    \    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n    \
    \        encrypted ~= ' ';\n        }\n        else\n        {\n            int\
    \ index = alphabet.indexOf(c);\n            encrypted ~= alphabet[(index + 4)\
    \ % 26];\n        }\n    }\n    return encrypted;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            result ~= c;\n  \
    \      }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2) * 2;\n            if(newIndex > 25)\n\
    \            {\n                newIndex = newIndex - 26;\n            }\n   \
    \         result ~= alphabet[newIndex];\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; s) \n    {\n        if(c\
    \ == ' ') \n        {\n            result ~= c;\n        }\n        else \n  \
    \      {\n            int ascii = c;\n            ascii += 2 * 2;\n          \
    \  if(ascii > 122) \n            {\n                ascii -= 26;\n           \
    \ }\n            result ~= cast(char)ascii;\n        }\n    }\n    return result;\n\
    }\n/*\nCreate a function decrypt that takes a string as an argument and\n    returns\
    \ a string decrypted with the alphabet being rotated. \n    The alphabet should\
    \ be rotated in a manner such that the letters \n    shift up by two multiplied\
    \ to two places.\n    For example:\n                    \n*/\nstring decrypt(string\
    \ s) \n{\n    string result = \"\";\n    foreach(char c; s) \n    {\n        if(c\
    \ == ' ') \n        {\n            result ~= c;\n        }\n        else \n  \
    \      {\n            int ascii = c;\n            ascii -= 2 * 2;\n          \
    \  if(ascii < 97) \n            {\n                ascii += 26;\n            }\n\
    \            result ~= cast(char)ascii;\n        }\n    }\n    return result;\n\
    }\n/*\nCreate a function that takes a string as an argument and returns a string\
    \ \n    with the alphabet being rotated. The alphabet should be rotated in a \n\
    \    manner such that the letters shift by a certain amount.\n    For example:\n\
    \                    \n*/\nstring rotate(string s, int shift) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        if(c == ' ') \n    \
    \    {\n            result ~= c;\n        }\n        else \n        {\n      \
    \      int ascii = c;\n            ascii += shift;\n            if(ascii > 122)\
    \ \n            {\n                ascii -= 26;\n            }\n            else\
    \ if(ascii < 97) \n            {\n                ascii += 26;\n            }\n\
    \            result ~= cast", "{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            int index\
    \ = alphabet.indexOf(c);\n            int newIndex = (index + 2) * 2;\n      \
    \      if(newIndex > 25)\n            {\n                newIndex = newIndex -\
    \ 26;\n            }\n            result ~= alphabet[newIndex];\n        }\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n\
    \    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n        }\n\
    \        else\n        {\n            result ~= (cast(char)(((cast(int)(c) - 97\
    \ + 2) * 2) % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= char(mod(c - 'a' + 2 * 2, 26) + 'a');\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ char(mod(c - 'A' + 2 * 2, 26) + 'A');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        result ~= (c == ' ') ? ' '\
    \ : (c + 2 * 2);\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ - 65 + 2 * 2) % 26 + 65));\n        }\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n  \
    \      {\n            result ~= ' ';\n        }\n        else\n        {\n   \
    \         result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(char c; s)\
    \ \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~=\
    \ (char)('a' + (c - 'a' + 2*2) % 26);\n        } \n        else if(c >= 'A' &&\
    \ c <= 'Z') \n        {\n            result ~= (char)('A' + (c - 'A' + 2*2) %\
    \ 26);\n        } \n        else \n        {\n            result ~= c;\n     \
    \   }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n\
    \        }\n        else\n        {\n            result ~= (char)((c - 'a' + 2\
    \ * 2) % 26 + 'a');\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n\
    \            if(c.isUpper)\n            {\n                result ~= (c + 2).toUpper;\n\
    \            }\n            else\n            {\n                result ~= (c\
    \ + 2).toLower;\n            }\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            result ~=\
    \ (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n   \
    \ return result;\n}", "{\n    string result;\n    foreach(char c; s)\n    {\n\
    \        result ~= (cast(char)(c + 2 * 2));\n    }\n    return result;\n}", "{\n\
    \    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n    \
    \        encrypted ~= c;\n        }\n        else\n        {\n            int\
    \ index = alphabet.indexOf(c);\n            int newIndex = (index + (2 * 2)) %\
    \ alphabet.length;\n            encrypted ~= alphabet[newIndex];\n        }\n\
    \    }\n    return encrypted;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    int index = 0;\n    foreach(char c; s)\n\
    \    {\n        if(c == ' ')\n        {\n            encrypted ~= ' ';\n     \
    \   }\n        else\n        {\n            index = alphabet.indexOf(c);\n   \
    \         encrypted ~= alphabet[(index + 2) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n  \
    \      if(c == ' ')\n        {\n            result ~= ' ';\n        }\n      \
    \  else\n        {\n            result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            result\
    \ ~= ' ';\n        }\n        else\n        {\n            result ~= (char)((c\
    \ - 'a' + 2) % 26 + 'a');\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        if(c >= 'a' && c <=\
    \ 'z') \n        {\n            result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n\
    \        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n        } \n        else \n    \
    \    {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s) \n    {\n        if(c.isAlpha) \n\
    \        {\n            result ~= c.toLower.rotate(2 * 2);\n        }\n      \
    \  else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        if(index != -1)\n        {\n            encrypted ~= alphabet[(index\
    \ + 2 * 2) % alphabet.length];\n        }\n        else\n        {\n         \
    \   encrypted ~= c;\n        }\n    }\n    return encrypted;\n}", "{\n    string\
    \ result;\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n     \
    \       result ~= ' ';\n        }\n        else \n        {\n            result\
    \ ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n    return result;\n\
    }", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n  \
    \          encrypted ~= ' ';\n        }\n        else\n        {\n           \
    \ int index = alphabet.indexOf(c);\n            encrypted ~= alphabet[(index +\
    \ (2 * 2)) % 26];\n        }\n    }\n    return encrypted;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26\
    \ + 97));\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n     \
    \       result ~= (cast(char)((cast(int)(c) - 65 + 2 * 2) % 26 + 65));\n     \
    \   }\n        else\n        {\n            result ~= c;\n        }\n    }\n \
    \   return result;\n}\n/*\nCreate a function decrypt that takes a string as an\
    \ argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n             \
    \       \n*/\nstring decrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~=\
    \ (cast(char)((cast(int)(c) - 97 - 2 * 2 + 26) % 26 + 97));\n        }\n     \
    \   else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ - 65 - 2 * 2 + 26) % 26 + 65));\n        }\n        else\n        {\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function\
    \ encrypt that takes a string as an argument and\n    returns a string encrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26\
    \ + 97));\n", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n      \
    \  if(c == ' ')\n        {\n            result ~= ' ';\n        }\n        else\n\
    \        {\n            result ~= (c + 2 * 2);\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            result ~= (c.toLower.to!int + 2 * 2).to!char;\n      \
    \  }\n        else\n        {\n            result ~= c;\n        }\n    }\n  \
    \  return result;\n}", "{\n    string result = \"\";\n    foreach(char c; s)\n\
    \    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n        }\n\
    \        else\n        {\n            result ~= (char)((c - 'a' + 2*2) % 26 +\
    \ 'a');\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            result\
    \ ~= ' ';\n        }\n        else\n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ - 97 + 2*2) % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    foreach(c; s)\n    {\n        if (c == ' ')\n   \
    \     {\n            result ~= ' ';\n        }\n        else\n        {\n    \
    \        result ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result\
    \ ~= (cast(char)((c - 'a' + 2*2) % 26 + 'a'));\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= (cast(char)((c - 'A' + 2*2)\
    \ % 26 + 'A'));\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= ' ';\n        }\n        else\n  \
    \      {\n            int index = alphabet.indexOf(c);\n            encrypted\
    \ ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n    return encrypted;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == '\
    \ ')\n        {\n            result ~= ' ';\n        }\n        else\n       \
    \ {\n            result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~=\
    \ (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= (cast(char)((c - 'A' + 2\
    \ * 2) % 26 + 'A'));\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            result\
    \ ~= c;\n        }\n        else\n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ + 2 * 2 - 65) % 26 + 65));\n        }\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(c; s) \n    {\n        if (c == ' ') \n\
    \        {\n            result ~= ' ';\n        }\n        else \n        {\n\
    \            result ~= (cast(char)(((cast(int)(c) - 97 + 2) % 26) + 97));\n  \
    \      }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        if(c.isAlpha) \n        {\n            result ~= (c.toLower.isLower\
    \ ? 'a' : 'A') + (c.toLower - 'a' + 2) % 26;\n        }\n        else \n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n            continue;\n        }\n        int index\
    \ = c - 'a';\n        index = (index + 2 * 2) % 26;\n        result ~= 'a' + index;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result\
    \ ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z') \n        {\n            result ~= (char)((c - 'A' + 2 * 2) % 26\
    \ + 'A');\n        }\n        else \n        {\n            result ~= c;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index == -1)\n        {\n            encrypted\
    \ ~= c;\n        }\n        else\n        {\n            encrypted ~= alphabet[(index\
    \ + 2*2) % alphabet.length];\n        }\n    }\n    return encrypted;\n}", "{\n\
    \    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted =\
    \ \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n       \
    \     encrypted ~= ' ';\n        }\n        else \n        {\n            int\
    \ index = alphabet.indexOf(c);\n            encrypted ~= alphabet[(index + (2\
    \ * 2)) % 26];\n        }\n    }\n    return encrypted;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted ~= ' ';\n\
    \        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n   \
    \     }\n    }\n    return encrypted;\n}", "{\n    string result = \"\";\n   \
    \ foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            result ~=\
    \ ' ';\n        }\n        else\n        {\n            result ~= char(cast(int)c\
    \ + 2 * 2);\n        }\n    }\n    return result;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * 2)) % 26;\n            result ~= alphabet[newIndex];\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n        \
    \    result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(((c - 'A' + 2)\
    \ % 26) + 'A');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            result ~=\
    \ ' ';\n        }\n        else\n        {\n            result ~= (cast(char)(((cast(int)(c)\
    \ - 97 + 2 * 2) % 26) + 97));\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            result ~= ' ';\n        }\n        else\n        {\n \
    \           result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(c.isAlpha)\n        {\n            result ~= (c.toUpper.to!int\
    \ + 2 * 2).to!char;\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}", "{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        int index = alphabet.find(c);\n        if(index != -1)\n\
    \        {\n            encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \        }\n        else\n        {\n            encrypted ~= c;\n        }\n\
    \    }\n    return encrypted;\n}", "{\n    string result;\n    foreach(c; s) \n\
    \    {\n        if(c == ' ') \n        {\n            result ~= ' ';\n       \
    \ } \n        else \n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(c; s)\n    {\n        if(c == 'z')\n  \
    \          result ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n\
    \        else\n            result ~= c + 2;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n \
    \       {\n            result ~= c;\n        }\n        else\n        {\n    \
    \        result ~= (cast(char)((cast(int)(c) + 2*2 - 97) % 26 + 97));\n      \
    \  }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= c;\n        }\n        else\n    \
    \    {\n            int index = alphabet.indexOf(c);\n            int newIndex\
    \ = (index + (2 * 2)) % alphabet.length;\n            encrypted ~= alphabet[newIndex];\n\
    \        }\n    }\n    return encrypted;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == '\
    \ ')\n        {\n            result ~= ' ';\n        }\n        else\n       \
    \ {\n            int index = alphabet.indexOf(c);\n            int newIndex =\
    \ (index + 2 * 2) % 26;\n            result ~= alphabet[newIndex];\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n        else if(c\
    \ == 'y')\n            result ~= 'a';\n        else\n            result ~= c +\
    \ 2;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result\
    \ ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z') \n        {\n            result ~= (cast(char)((c - 'A'\
    \ + 2 * 2) % 26 + 'A'));\n        }\n        else \n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function decrypt\
    \ that takes a string as an argument and\n    returns a string decrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n                    \n*/\nstring decrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= (cast(char)((c - 'a' - 2 * 2 + 26) % 26 +\
    \ 'a'));\n        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n     \
    \       result ~= (cast(char)((c - 'A' - 2 * 2 + 26) % 26 + 'A'));\n        }\n\
    \        else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\n/*\nCreate a function encrypt that takes a string as an argument\
    \ and\n    returns a string encrypted with the alphabet being rotated. \n    The\
    \ alphabet should be rotated in a manner such that the letters \n    shift down\
    \ by two multiplied to two places.\n    For example:\n                    \n*/\n\
    string encrypt(string s) \n{\n    string result = \"\";\n    foreach(c; s) \n\
    \    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result ~= (cast(char)((c\
    \ - 'a' + 2 * 2) % 26 +", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            encrypted ~= ' ';\n        }\n        else\n        {\n\
    \            int index = alphabet.indexOf(c);\n            encrypted ~= alphabet[(index\
    \ + 2 * 2) % alphabet.length];\n        }\n    }\n    return encrypted;\n}", "{\n\
    \    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted =\
    \ \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n         \
    \   encrypted ~= c;\n        }\n        else\n        {\n            int index\
    \ = alphabet.indexOf(c);\n            encrypted ~= alphabet[(index + (2 * 2))\
    \ % alphabet.length];\n        }\n    }\n    return encrypted;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= (char)((c - 'a' + 2) % 26 + 'a');\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~=\
    \ (char)((c - 'A' + 2) % 26 + 'A');\n        }\n        else \n        {\n   \
    \         result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n        }\n    }\n  \
    \  return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == '\
    \ ')\n        {\n            result ~= ' ';\n        }\n        else\n       \
    \ {\n            int index = alphabet.indexOf(c);\n            result ~= alphabet[(index\
    \ + 2 * 2) % alphabet.length];\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n \
    \       {\n            result ~= c;\n        }\n        else\n        {\n    \
    \        result ~= (cast(char)(((cast(int)(c) - 97 + 2 * 2) % 26) + 97));\n  \
    \      }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result\
    \ ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z') \n        {\n            result ~= (cast(char)((c - 'A'\
    \ + 2 * 2) % 26 + 'A'));\n        }\n        else \n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n            result\
    \ ~= c.toUpper.rotate(2 * 2);\n        }\n        else\n        {\n          \
    \  result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if (c >= 'a' && c <= 'z')\n     \
    \   {\n            c = (c - 'a' + 2 * 2) % 26 + 'a';\n        }\n        else\
    \ if (c >= 'A' && c <= 'Z')\n        {\n            c = (c - 'A' + 2 * 2) % 26\
    \ + 'A';\n        }\n        result ~= c;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n \
    \       {\n            result ~= ' ';\n        }\n        else\n        {\n  \
    \          result ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n    \
    \    }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            result ~= ' ';\n        }\n        else\n        {\n \
    \           int index = alphabet.indexOf(c);\n            result ~= alphabet[(index\
    \ + 2*2) % alphabet.length];\n        }\n    }\n    return result;\n}", "{\n \
    \   string result;\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else\n  \
    \      {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            result ~= ' ';\n        }\n        else\n        {\n \
    \           result ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n \
    \       }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        if(c == ' ') \n        {\n            result ~= ' ';\n \
    \       }\n        else \n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n  \
    \      {\n            result ~= ' ';\n        }\n        else\n        {\n   \
    \         result ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n     \
    \   }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        if(c == ' ') \n        {\n            result ~= c;\n   \
    \     }\n        else \n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n  \
    \      {\n            result ~= ' ';\n        }\n        else\n        {\n   \
    \         result ~= (cast(char)((c - 'a' + 2*2) % 26 + 'a'));\n        }\n   \
    \ }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == '\
    \ ')\n        {\n            result ~= ' ';\n        }\n        else\n       \
    \ {\n            int index = alphabet.indexOf(c);\n            int newIndex =\
    \ (index + 2) * 2;\n            if(newIndex > 25)\n            {\n           \
    \     newIndex = newIndex - 26;\n            }\n            result ~= alphabet[newIndex];\n\
    \        }\n    }\n    return result;\n}", "{\n    int len = s.length;\n    string\
    \ result = \"\";\n    foreach(i; 0..len)\n    {\n        if(s[i] == ' ')\n   \
    \     {\n            result ~= ' ';\n        }\n        else\n        {\n    \
    \        int ascii = s[i];\n            ascii += 4;\n            if(ascii > 122)\n\
    \            {\n                ascii -= 26;\n            }\n            result\
    \ ~= cast(char)ascii;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n        }\n    }\n  \
    \  return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= ' ';\n        }\n        else\n  \
    \      {\n            int index = alphabet.indexOf(c);\n            int newIndex\
    \ = (index + (2 * 2)) % 26;\n            encrypted ~= alphabet[newIndex];\n  \
    \      }\n    }\n    return encrypted;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= ' ';\n        }\n        else\n  \
    \      {\n            int index = alphabet.indexOf(c);\n            encrypted\
    \ ~= alphabet[(index + 2 * 2) % alphabet.length];\n        }\n    }\n    return\
    \ encrypted;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index != -1)\n        {\n            encrypted\
    \ ~= alphabet[(index + 4) % 26];\n        }\n        else\n        {\n       \
    \     encrypted ~= c;\n        }\n    }\n    return encrypted;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if (c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= (c + 2).to!char;\n        }\n        else\
    \ if (c >= 'A' && c <= 'Z') \n        {\n            result ~= (c + 2).to!char;\n\
    \        }\n        else \n        {\n            result ~= c;\n        }\n  \
    \  }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            encrypted ~= ' ';\n        }\n        else\n  \
    \      {\n            int index = alphabet.indexOf(c);\n            int newIndex\
    \ = (index + (2 * 2)) % 26;\n            encrypted ~= alphabet[newIndex];\n  \
    \      }\n    }\n    return encrypted;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        if(index != -1)\n        {\n            encrypted\
    \ ~= alphabet[(index + 2 * 2) % alphabet.length];\n        }\n        else\n \
    \       {\n            encrypted ~= c;\n        }\n    }\n    return encrypted;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c\
    \ == ' ')\n        {\n            result ~= ' ';\n        }\n        else\n  \
    \      {\n            result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n      \
    \  }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            result ~= c;\n        }\n        else\n        {\n   \
    \         int index = alphabet.indexOf(c);\n            int newIndex = (index\
    \ + 2 * 2) % alphabet.length;\n            result ~= alphabet[newIndex];\n   \
    \     }\n    }\n    return result;\n}", "{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        if (c == ' ')\n\
    \        {\n            result ~= ' ';\n            continue;\n        }\n   \
    \     int index = alphabet.indexOf(c);\n        int newIndex = (index + 2 * 2)\
    \ % alphabet.length;\n        result ~= alphabet[newIndex];\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   if(c >= 'a' && c <= 'z')\n        {\n            result ~= (cast(char)((c\
    \ - 'a' + 2) % 26 + 'a'));\n        }\n        else if(c >= 'A' && c <= 'Z')\n\
    \        {\n            result ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n  \
    \      }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
