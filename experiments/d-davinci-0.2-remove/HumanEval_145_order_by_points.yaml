name: HumanEval_145_order_by_points
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
  \ sorts the given list of integers\n    in ascending order according to the sum\
  \ of their digits.\n    Note: if there are several items with similar sum of their\
  \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
  \            \n*/\nlong[] order_by_points(long[] nums) \n"
tests: "unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
  \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
  \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
  \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
  \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L,\
  \ -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L,\
  \ 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
  \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[nums.length];\n    long[] sums = new\
    \ long[nums.length];\n    long[] indices = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        indices[i] = i;\n        long sum\
    \ = 0;\n        while (nums[i] > 0)\n        {\n            sum += nums[i] % 10;\n\
    \            nums[i] /= 10;\n        }\n        sums[i] = sum;\n    }\n    sort(sums,\
    \ indices);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[(int)indices[i]];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n        for (int\
    \ j = 0; j < nums[i].to!string.length; j++)\n        {\n            sum += nums[i].to!string[j]\
    \ - '0';\n        }\n        sums[i] = sum;\n    }\n    int[] sorted = sums.dup;\n\
    \    sorted.sort;\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = 0; j < nums.length; j++)\n        {\n            if (sums[j] == sorted[i])\n\
    \            {\n                result[i] = nums[j];\n                sums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto sums = nums.map!(a => a.to!string().sum!(a => a.to!int() - '0'.to!int()));\n\
    \    auto result = new long[](nums.length);\n    foreach(i, ref n; nums)\n   \
    \ {\n        auto min = sums.min;\n        auto index = sums.indexOf(min);\n \
    \       result[i] = nums[index];\n        sums[index] = sums.max;\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    long[] index = new long[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        sum[i] = 0;\n       \
    \ index[i] = i;\n        while (nums[i] > 0)\n        {\n            sum[i] +=\
    \ nums[i] % 10;\n            nums[i] /= 10;\n        }\n    }\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        for (int j = i + 1; j < nums.length;\
    \ j++)\n        {\n            if (sum[i] > sum[j])\n            {\n         \
    \       long temp = sum[i];\n                sum[i] = sum[j];\n              \
    \  sum[j] = temp;\n                temp = nums[i];\n                nums[i] =\
    \ nums[j];\n                nums[j] = temp;\n                temp = index[i];\n\
    \                index[i] = index[j];\n                index[j] = temp;\n    \
    \        }\n            else if (sum[i] == sum[j])\n            {\n          \
    \      if (index[i] > index[j])\n                {\n                    long temp\
    \ = sum[i];\n                    sum[i] = sum[j];\n                    sum[j]\
    \ = temp;\n                    temp = nums[i];\n                    nums[i] =\
    \ nums[j];\n                    nums[j] = temp;\n                    temp = index[i];\n\
    \                    index[i] = index[j];\n                    index[j] = temp;\n\
    \                }\n            }\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[i];\n    }\n    return result;\n}", "{\n\
    \    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n  \
    \  {\n        long temp = nums[i];\n        while (temp > 0)\n        {\n    \
    \        sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n   \
    \ long[] temp = sum.dup;\n    temp.sort;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n        {\n    \
    \        if (temp[i] == sum[j])\n            {\n                result[i] = nums[j];\n\
    \                sum[j] = -1;\n                break;\n            }\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    long[] index = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \     sum[i] = sumDigits(nums[i]);\n    }\n    sort(sum, index);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n \
    \   }\n    return result;\n}\nlong sumDigits(long n)\n{\n    long sum = 0;\n \
    \   while (n > 0)\n    {\n        sum += n % 10;\n        n /= 10;\n    }\n  \
    \  return sum;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    foreach(i, v; nums)\n    {\n        sum[i]\
    \ = 0;\n        while(v != 0)\n        {\n            sum[i] += v % 10;\n    \
    \        v /= 10;\n        }\n    }\n    foreach(i, v; nums)\n    {\n        long\
    \ min = sum[i];\n        long min_index = i;\n        foreach(j, u; sum[i..$])\n\
    \        {\n            if(u < min)\n            {\n                min = u;\n\
    \                min_index = j;\n            }\n        }\n        result[i] =\
    \ nums[min_index];\n        sum[min_index] = max(sum);\n    }\n    return result;\n\
    }", "{\n    auto nums_with_points = nums.map!(n => tuple(n, n.to!string.map!(c\
    \ => c.to!long - '0'.to!long).sum));\n    nums_with_points.sort!((a, b) => a[1]\
    \ < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(t\
    \ => t[0]).array;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        sums[i] = sum;\n    }\n    auto sorted = sort(zip(sums, nums));\n\
    \    foreach (i, item; sorted)\n    {\n        result[i] = item[1];\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    long[] indices = new long[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        indices[i] = i;\n        long sum = 0;\n\
    \        while(n > 0)\n        {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        sums[i] = sum;\n    }\n    sort(sums, indices);\n  \
    \  foreach(i, n; indices)\n    {\n        result[i] = nums[n];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    long[] sum\
    \ = new long[nums.length];\n    long[] index = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n        sum[i]\
    \ = 0;\n        long temp = nums[i];\n        while (temp > 0)\n        {\n  \
    \          sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n \
    \   sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n    \
    \    result[i] = nums[index[i]];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sum_digits(nums[i]);\n\
    \    }\n    auto tup = tuple(nums, sums);\n    tup = tup.sort!((a, b) => a[1]\
    \ < b[1]);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = tup[i][0];\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i];\n        while (sums[i] > 9)\n     \
    \   {\n            sums[i] = sums[i] % 10 + sums[i] / 10;\n        }\n    }\n\
    \    long[] sorted = sums.dup;\n    sort(sorted);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n        {\n    \
    \        if (sorted[i] == sums[j])\n            {\n                result[i] =\
    \ nums[j];\n                sums[j] = -1;\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    long[] index = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \     sum[i] = 0;\n        long temp = nums[i];\n        while (temp > 0)\n  \
    \      {\n            sum[i] += temp % 10;\n            temp /= 10;\n        }\n\
    \    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j =\
    \ i + 1; j < nums.length; j++)\n        {\n            if (sum[i] > sum[j])\n\
    \            {\n                long temp = sum[i];\n                sum[i] =\
    \ sum[j];\n                sum[j] = temp;\n                temp = nums[i];\n \
    \               nums[i] = nums[j];\n                nums[j] = temp;\n        \
    \        temp = index[i];\n                index[i] = index[j];\n            \
    \    index[j] = temp;\n            }\n            else if (sum[i] == sum[j])\n\
    \            {\n                if (index[i] > index[j])\n                {\n\
    \                    long temp = sum[i];\n                    sum[i] = sum[j];\n\
    \                    sum[j] = temp;\n                    temp = nums[i];\n   \
    \                 nums[i] = nums[j];\n                    nums[j] = temp;\n  \
    \                  temp = index[i];\n                    index[i] = index[j];\n\
    \                    index[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[i];\n    }\n    return result;\n}", "{\n    auto nums_with_points = zip(nums,\
    \ map!(sum_digits)(nums));\n    sort!((a, b) => a[1] < b[1] || (a[1] == b[1] &&\
    \ a[0] < b[0]))(nums_with_points);\n    return map!(a => a[0])(nums_with_points);\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long temp =\
    \ nums[i];\n        while (temp > 0)\n        {\n            sum[i] += temp %\
    \ 10;\n            temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n\
    \            if (sum[i] > sum[j])\n            {\n                long temp =\
    \ sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n\
    \                temp = nums[i];\n                nums[i] = nums[j];\n       \
    \         nums[j] = temp;\n                temp = index[i];\n                index[i]\
    \ = index[j];\n                index[j] = temp;\n            }\n            else\
    \ if (sum[i] == sum[j])\n            {\n                if (index[i] > index[j])\n\
    \                {\n                    long temp = sum[i];\n                \
    \    sum[i] = sum[j];\n                    sum[j] = temp;\n                  \
    \  temp = nums[i];\n                    nums[i] = nums[j];\n                 \
    \   nums[j] = temp;\n                    temp = index[i];\n                  \
    \  index[i] = index[j];\n                    index[j] = temp;\n              \
    \  }\n            }\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[i];\n    }\n    return result;\n}", "{\n    long[]\
    \ points = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        points[i] = nums[i];\n        while (points[i] > 0)\n        {\n\
    \            points[i] = points[i] % 10 + points[i] / 10;\n        }\n    }\n\
    \    return nums.sort!((a, b) => points[a] < points[b] || (points[a] == points[b]\
    \ && a < b));\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n  \
    \  {\n        long temp = nums[i];\n        while (temp > 0)\n        {\n    \
    \        sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n   \
    \ long[] sorted = sum.dup;\n    sorted.sort();\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n        {\n    \
    \        if (sorted[i] == sum[j])\n            {\n                result[i] =\
    \ nums[j];\n                sum[j] = -1;\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    auto sumDigits = (long\
    \ n) => n.to!string.map!(a => a.to!long).sum;\n    return nums.sort!((a, b) =>\
    \ sumDigits(a) > sumDigits(b) || (sumDigits(a) == sumDigits(b) && a > b));\n}",
  "{\n    auto result = nums.dup;\n    auto sums = nums.map!(a => a.to!string.sum!(a\
    \ => a.to!int - '0'));\n    auto indices = iota(nums.length);\n    sort(result,\
    \ indices, (a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n  \
    \  return result;\n}", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indexes = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sum_of_digits(nums[i]);\n        indexes[i] =\
    \ i;\n    }\n    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}",
  "{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n\
    \    return result;\n}", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b)\
    \ || (sumDigits(a) == sumDigits(b) && a < b));\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    int[] sum = new int[nums.length];\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        int s = 0;\n        while (nums[i]\
    \ > 0)\n        {\n            s += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n        sum[i] = s;\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int min = sum[i];\n        int min_index = i;\n        for (int\
    \ j = i; j < nums.length; j++)\n        {\n            if (sum[j] < min)\n   \
    \         {\n                min = sum[j];\n                min_index = j;\n \
    \           }\n        }\n        result[i] = nums[min_index];\n        sum[min_index]\
    \ = sum[i];\n        sum[i] = min;\n    }\n    return result;\n}", "{\n    auto\
    \ list = new long[nums.length];\n    auto sum = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        list[i] = nums[i];\n     \
    \   sum[i] = 0;\n        while (nums[i] > 0)\n        {\n            sum[i] +=\
    \ nums[i] % 10;\n            nums[i] /= 10;\n        }\n    }\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        for (int j = i + 1; j < nums.length;\
    \ j++)\n        {\n            if (sum[i] > sum[j])\n            {\n         \
    \       auto temp = sum[i];\n                sum[i] = sum[j];\n              \
    \  sum[j] = temp;\n                temp = list[i];\n                list[i] =\
    \ list[j];\n                list[j] = temp;\n            }\n        }\n    }\n\
    \    return list;\n}", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    }", "{\n    auto arr = nums.dup;\n    auto sum = new long[arr.length];\n    foreach(i,\
    \ ref e; arr)\n    {\n        while(e > 0)\n        {\n            sum[i] += e\
    \ % 10;\n            e /= 10;\n        }\n    }\n    auto result = new long[arr.length];\n\
    \    foreach(i, ref e; arr)\n    {\n        auto min = sum[0];\n        auto index\
    \ = 0;\n        foreach(j, ref e1; sum)\n        {\n            if(e1 < min)\n\
    \            {\n                min = e1;\n                index = j;\n      \
    \      }\n        }\n        result[i] = arr[index];\n        sum[index] = max(sum);\n\
    \    }\n    return result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, v; nums)\n    {\n        sums[i] = sumDigits(v);\n    }\n    foreach(i,\
    \ v; nums)\n    {\n        long min = sums[i];\n        long index = i;\n    \
    \    foreach(j, v2; sums[i..$])\n        {\n            if(v2 < min)\n       \
    \     {\n                min = v2;\n                index = j;\n            }\n\
    \        }\n        result[i] = nums[index];\n        sums[index] = long.max;\n\
    \    }\n    return result;\n}\nlong sumDigits(long n)\n{\n    long sum = 0;\n\
    \    while(n > 0)\n    {\n        sum += n % 10;\n        n /= 10;\n    }\n  \
    \  return sum;\n}", "{\n    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n\
    \    return nums.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long n = nums[i];\n        while (n > 0)\n        {\n            sum +=\
    \ n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  auto p = zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n    foreach\
    \ (i, v; p)\n    {\n        result[i] = v[0];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num > 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    // sort sums\n    for (int i = 0; i < sums.length; i++)\n    {\n   \
    \     for (int j = i + 1; j < sums.length; j++)\n        {\n            if (sums[i]\
    \ > sums[j])\n            {\n                long temp = sums[i];\n          \
    \      sums[i] = sums[j];\n                sums[j] = temp;\n                temp\
    \ = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n\
    \            }\n        }\n    }\n    return nums;\n}", "{\n    long[] points\
    \ = nums.map!(x => x.to!string.map!(y => y.to!long).sum).array;\n    long[] result\
    \ = new long[nums.length];\n    foreach(i, n; nums)\n    {\n        result[points[i]]\
    \ = n;\n    }\n    return result;\n}", "{\n    // your code here\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ temp = nums[i];\n        while (temp != 0)\n        {\n            sum += temp\
    \ % 10;\n            temp /= 10;\n        }\n        sums[i] = sum;\n    }\n \
    \   long[] sortedSums = sums.dup;\n    sortedSums.sort;\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sortedSums[i] == sums[j])\n            {\n       \
    \         result[i] = nums[j];\n                sums[j] = -1;\n              \
    \  break;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num > 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    auto p = zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n   \
    \ foreach (i, e; p)\n    {\n        result[i] = e[0];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        sums[i] = n.sumDigits;\n    }\n    auto\
    \ sorted = sort(sums);\n    foreach(i, n; sorted)\n    {\n        result[i] =\
    \ nums[n.indexOf];\n    }\n    return result;\n}", "{\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        sums[i] = n.sumDigits;\n    }\n    return\
    \ nums.sort(sums);\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    long[] index = new long[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n     \
    \   sum[i] = 0;\n        long n = nums[i];\n        while (n != 0)\n        {\n\
    \            sum[i] += n % 10;\n            n /= 10;\n        }\n    }\n    sort(sum,\
    \ index);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[index[i]];\n    }\n    return result;\n}", "{\n    auto points = nums.map!(n\
    \ => n.to!string.map!(c => c.to!long).sum).array;\n    return nums.sort!((a, b)\
    \ => points[a] < points[b] || (points[a] == points[b] && a < b));\n}", "{\n  \
    \  long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num > 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] indices = new int[nums.length];\n    for (int i = 0; i < indices.length;\
    \ i++)\n        indices[i] = i;\n    sort(sums, indices);\n    for (int i = 0;\
    \ i < indices.length; i++)\n        result[i] = nums[indices[i]];\n    return\
    \ result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n    return result;\n\
    }", "{\n    auto points = nums.map!(n => n.to!string().sum!q{a => a.to!long()});\n\
    \    return nums.zip(points).sort!q{a, b => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0])}.map!(a => a[0]).array;\n}", "{\n    auto s = nums.map!(a => tuple(a,\
    \ a.sumOfDigits())).sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n\
    \    return s.map!(a => a[0]).array;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while\
    \ (num > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    long[] sortedSums = sums.dup;\n\
    \    sortedSums.sort;\n    for (int i = 0; i < nums.length; i++)\n    {\n    \
    \    for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[j]\
    \ == sortedSums[i])\n            {\n                result[i] = nums[j];\n   \
    \             sums[j] = -1;\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    return nums.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        long num = nums[i];\n        long sum = 0;\n        while (num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        sums[i] = sum;\n    }\n    auto t = tuple(nums, sums);\n    t.sort!((a,\
    \ b) => a[1] < b[1]);\n    for (int i = 0; i < nums.length; i++)\n    {\n    \
    \    result[i] = t[i][0];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sum[i] = nums[i] % 10 + nums[i] / 10;\n        index[i] = i;\n\
    \    }\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        result[i] = nums[index[i]];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] points = new long[nums.length];\n\
    \    long[] indexes = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indexes[i] = i;\n        long sum = 0;\n        while (nums[i]\
    \ > 0)\n        {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n        points[i] = sum;\n    }\n    sort(points);\n    sort(indexes);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n    }\n    sort(sums);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (sums[i] == sumDigits(nums[j]))\n\
    \            {\n                result[i] = nums[j];\n                nums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    // your code here\n    long[] result = new long[nums.length];\n  \
    \  long[] sums = new long[nums.length];\n    foreach(i, v; nums)\n    {\n    \
    \    sums[i] = v.sumDigits();\n    }\n    auto t = tuple(sums, nums);\n    t.sort!(\"\
    a[0] < b[0] || (a[0] == b[0] && a[1] < b[1])\");\n    foreach(i, v; t)\n    {\n\
    \        result[i] = v[1];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sum[i] = 0;\n        index[i] = i;\n        while (nums[i] > 0)\n\
    \        {\n            sum[i] += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n    }\n    sort(sum, index);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return result;\n\
    }", "{\n    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n   \
    \ auto arr = nums.map!(a => tuple(a, sum(a))).sort!((a, b) => a[1] < b[1] || (a[1]\
    \ == b[1] && a[0] < b[0]));\n    return arr.map!(a => a[0]).array;\n}", "{\n \
    \   auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    return\
    \ nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    auto sum = (long\
    \ x) => x.to!string.map!(a => a.to!long).sum;\n    return nums.enumerate.sort!((a,\
    \ b) => sum(a[1]) < sum(b[1]) || (sum(a[1]) == sum(b[1]) && a[0] < b[0])).map!(a\
    \ => a[1]).array;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a, b)\
    \ => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    auto result\
    \ = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n    return result;\n}", "{\n    long[] result;\n\
    \    long[] sum;\n    long[] index;\n    long[] temp;\n    long[] temp2;\n   \
    \ long[] temp3;\n    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n   \
    \ long[] temp7;\n    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n  \
    \  long[] temp11;\n    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n\
    \    long[] temp15;\n    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n\
    \    long[] temp19;\n    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n\
    \    long[] temp23;\n    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n\
    \    long[] temp27;\n    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n\
    \    long[] temp31;\n    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n\
    \    long[] temp35;\n    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n\
    \    long[] temp39;\n    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n\
    \    long[] temp43;\n    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n\
    \    long[] temp47;\n    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n\
    \    long[] temp51;\n    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n\
    \    long[] temp55;\n    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n\
    \    long[] temp59;\n    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n\
    \    long[] temp63;\n    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n\
    \    long[] temp67;\n    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n\
    \    long", "{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ > sumDigits(b));\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        foreach (c; nums[i].to!string)\n\
    \        {\n            if (c.isDigit)\n            {\n                sum +=\
    \ c.to!long - '0'.to!long;\n            }\n        }\n        sums[i] = sum;\n\
    \    }\n    auto sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = 0; j < nums.length; j++)\n        {\n           \
    \ if (sums[j] == sorted[i])\n            {\n                result[i] = nums[j];\n\
    \                sums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum[i] = nums[i];\n        while (sum[i] > 0)\n       \
    \ {\n            sum[i] = sum[i] / 10;\n            sum[i] += nums[i] % 10;\n\
    \            nums[i] = nums[i] / 10;\n        }\n    }\n    int[] order = new\
    \ int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n      \
    \  order[i] = i;\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      for (int j = i + 1; j < nums.length; j++)\n        {\n            if (sum[i]\
    \ > sum[j])\n            {\n                long temp = sum[i];\n            \
    \    sum[i] = sum[j];\n                sum[j] = temp;\n                int temp2\
    \ = order[i];\n                order[i] = order[j];\n                order[j]\
    \ = temp2;\n            }\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[order[i]];\n    }\n    return result;\n\
    }", "{\n    return nums.sort!((a, b) => \n    {\n        long sumA = 0;\n    \
    \    long sumB = 0;\n        foreach(digit; a.to!string)\n        {\n        \
    \    sumA += digit.to!long;\n        }\n        foreach(digit; b.to!string)\n\
    \        {\n            sumB += digit.to!long;\n        }\n        return sumA\
    \ < sumB;\n    });\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        sums[i] = nums[i];\n        while (sums[i] > 0)\n        {\n  \
    \          sums[i] = sums[i] / 10;\n            sums[i] += nums[i] % 10;\n   \
    \         nums[i] = nums[i] / 10;\n        }\n    }\n    long[] sorted = sums.dup;\n\
    \    sort(sorted);\n    for (int i = 0; i < nums.length; i++)\n    {\n       \
    \ for (int j = 0; j < nums.length; j++)\n        {\n            if (sorted[i]\
    \ == sums[j])\n            {\n                result[i] = nums[j];\n         \
    \       sums[j] = -1;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    long[] index = new long[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        sum[i] = 0;\n       \
    \ index[i] = i;\n        while (nums[i] > 0)\n        {\n            sum[i] +=\
    \ nums[i] % 10;\n            nums[i] /= 10;\n        }\n    }\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        for (int j = i + 1; j < nums.length;\
    \ j++)\n        {\n            if (sum[i] > sum[j])\n            {\n         \
    \       long temp = sum[i];\n                sum[i] = sum[j];\n              \
    \  sum[j] = temp;\n                temp = nums[i];\n                nums[i] =\
    \ nums[j];\n                nums[j] = temp;\n                temp = index[i];\n\
    \                index[i] = index[j];\n                index[j] = temp;\n    \
    \        }\n            else if (sum[i] == sum[j])\n            {\n          \
    \      if (index[i] > index[j])\n                {\n                    long temp\
    \ = sum[i];\n                    sum[i] = sum[j];\n                    sum[j]\
    \ = temp;\n                    temp = nums[i];\n                    nums[i] =\
    \ nums[j];\n                    nums[j] = temp;\n                    temp = index[i];\n\
    \                    index[i] = index[j];\n                    index[j] = temp;\n\
    \                }\n            }\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[i];\n    }\n    return result;\n}", "{\n\
    \    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n    auto res\
    \ = nums.dup;\n    res.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b) &&\
    \ a < b));\n    return res;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long n = nums[i];\n        while\
    \ (n > 0)\n        {\n            sum += n % 10;\n            n /= 10;\n     \
    \   }\n        sums[i] = sum;\n    }\n    auto sorted = sort(zip(nums, sums));\n\
    \    foreach (i, e; sorted)\n    {\n        result[i] = e[0];\n    }\n    return\
    \ result;\n}", "{\n    auto points = new long[nums.length];\n    foreach(i, n;\
    \ nums)\n    {\n        points[i] = n.sumDigits;\n    }\n    return nums.sort(points);\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indexes = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sum_digits(nums[i]);\n        indexes[i] = i;\n\
    \    }\n    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}",
  "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    long[] index = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum[i] = 0;\n     \
    \   index[i] = i;\n        while (nums[i] > 0)\n        {\n            sum[i]\
    \ += nums[i] % 10;\n            nums[i] /= 10;\n        }\n    }\n    sort(index,\
    \ sum);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] =\
    \ nums[index[i]];\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    long[] sum = new long[nums.length];\n    long[] index\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        index[i] = i;\n        long temp = nums[i];\n        while (temp > 0)\n\
    \        {\n            sum[i] += temp % 10;\n            temp /= 10;\n      \
    \  }\n    }\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[index[i]];\n    }\n    return result;\n}", "{\n\
    \    // your code here\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    long[] index = new long[nums.length];\n  \
    \  for(int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n      \
    \  sum[i] = 0;\n        long num = nums[i];\n        while(num > 0)\n        {\n\
    \            sum[i] += num % 10;\n            num /= 10;\n        }\n    }\n \
    \   for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i + 1; j\
    \ < nums.length; j++)\n        {\n            if(sum[i] > sum[j])\n          \
    \  {\n                long temp = sum[i];\n                sum[i] = sum[j];\n\
    \                sum[j] = temp;\n                temp = nums[i];\n           \
    \     nums[i] = nums[j];\n                nums[j] = temp;\n                temp\
    \ = index[i];\n                index[i] = index[j];\n                index[j]\
    \ = temp;\n            }\n            else if(sum[i] == sum[j])\n            {\n\
    \                if(index[i] > index[j])\n                {\n                \
    \    long temp = sum[i];\n                    sum[i] = sum[j];\n             \
    \       sum[j] = temp;\n                    temp = nums[i];\n                \
    \    nums[i] = nums[j];\n                    nums[j] = temp;\n               \
    \     temp = index[i];\n                    index[i] = index[j];\n           \
    \         index[j] = temp;\n                }\n            }\n        }\n    }\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    return result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    auto result\
    \ = nums.dup;\n    auto sums = nums.map!((x) => x.sumDigits());\n    result.sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n    return result;\n\
    }", "{\n    auto result = nums.dup;\n    auto sum = new long[result.length];\n\
    \    foreach(i, e; result)\n    {\n        while(e > 0)\n        {\n         \
    \   sum[i] += e % 10;\n            e /= 10;\n        }\n    }\n    sort!((a, b)\
    \ => sum[a] < sum[b] || (sum[a] == sum[b] && a < b))(result);\n    return result;\n\
    }", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long num =\
    \ nums[i];\n        while (num > 0)\n        {\n            sum[i] += num % 10;\n\
    \            num /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \        indexes[i] = i;\n    }\n    sort!((a, b) => a < b)(sums, indexes);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}", "{\n    // your code here\n    long[] result =\
    \ new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\
    \ {\n        indices[i] = i;\n        sums[i] = 0;\n        long n = nums[i];\n\
    \        while (n > 0) {\n            sums[i] += n % 10;\n            n /= 10;\n\
    \        }\n    }\n    sort(sums, indices);\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = nums[i] == 0 ? 0 : nums[i]\
    \ % 10 + order_by_points(nums[i] / 10);\n    }\n    sort(sums, indices);\n   \
    \ for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long n = nums[i];\n        while\
    \ (n > 0)\n        {\n            sum += n % 10;\n            n /= 10;\n     \
    \   }\n        sums[i] = sum;\n    }\n    Tuple!(long, long)[] tuples = new Tuple!(long,\
    \ long)[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n    \
    \    tuples[i] = tuple(sums[i], nums[i]);\n    }\n    tuples.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] < b[1]));\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = tuples[i][1];\n    }\n    return result;\n}",
  "{\n    auto s = nums.map!(a => tuple(a, a.sumOfDigits())).sort!((a, b) => a[1]\
    \ < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return s.map!(a => a[0]).array;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] - sums[i]\
    \ % 10;\n            sums[i] = sums[i] / 10;\n        }\n    }\n    return result;\n\
    }", "{\n    // your code here\n    long[] sums = new long[nums.length];\n    foreach(i,\
    \ n; nums)\n    {\n        long sum = 0;\n        foreach(c; to!string(n))\n \
    \       {\n            sum += c.to!long - '0'.to!long;\n        }\n        sums[i]\
    \ = sum;\n    }\n    auto sorted = sort(zip(sums, nums));\n    return sorted.map!(a\
    \ => a[1]).array;\n}", "{\n    /*\n        1. Create a tuple of the number and\
    \ the sum of its digits\n        2. Sort the tuple by the sum of the digits\n\
    \        3. Return the original number from the tuple\n    */\n    return nums.map!(n\
    \ => tuple(n, n.sumDigits()))\n                .sort!((a, b) => a[1] < b[1])\n\
    \                .map!(t => t[0]);\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    foreach(i, v; nums)\n    {\n  \
    \      sums[i] = v.sumDigits();\n    }\n    auto sorted = sort(sums);\n    foreach(i,\
    \ v; sorted)\n    {\n        result[i] = nums[v.index];\n    }\n    return result;\n\
    }", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n\
    \    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b)\
    \ || (sumDigits(a) == sumDigits(b) && a < b));\n    return result;\n}", "{\n \
    \   auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        sums[i] = nums[i];\n        while (sums[i] > 0)\n        {\n  \
    \          sums[i] = sums[i] - sums[i] % 10;\n            sums[i] = sums[i] /\
    \ 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[i]\
    \ < sums[j])\n            {\n                long temp = sums[i];\n          \
    \      sums[i] = sums[j];\n                sums[j] = temp;\n                temp\
    \ = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n\
    \            }\n        }\n    }\n    return nums;\n}", "{\n    // Type alias\
    \ for a tuple of long and int\n    alias Tuple = Tuple!(long, int);\n    // Create\
    \ a tuple array to hold the numbers and their indices\n    Tuple[] tuples = new\
    \ Tuple[nums.length];\n    // Fill the tuple array with the numbers and their\
    \ indices\n    foreach(i, num; nums)\n    {\n        tuples[i] = tuple(num, i);\n\
    \    }\n    // Sort the tuple array based on the sum of the digits of the numbers\n\
    \    // and their indices\n    sort!((a, b) => a[0].sumDigits() < b[0].sumDigits()\
    \ ||\n                 (a[0].sumDigits() == b[0].sumDigits() && a[1] < b[1]))(tuples);\n\
    \    // Create a long array to hold the sorted numbers\n    long[] sorted = new\
    \ long[nums.length];\n    // Fill the sorted array with the sorted numbers\n \
    \   foreach(i, t; tuples)\n    {\n        sorted[i] = t[0];\n    }\n    // Return\
    \ the sorted array\n    return sorted;\n}\n/*\n    This solution is based on the\
    \ following:\n    1. Create a tuple array to hold the numbers and their indices.\n\
    \    2. Fill the tuple array with the numbers and their indices.\n    3. Sort\
    \ the tuple array based on the sum of the digits of the numbers\n       and their\
    \ indices.\n    4. Create a long array to hold the sorted numbers.\n    5. Fill\
    \ the sorted array with the sorted numbers.\n    6. Return the sorted array.\n\
    */", "{\n    auto nums_with_points = zip(nums, map!(sum_digits)(nums));\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return map!(a => a[0])(nums_with_points);\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indexes = new long[nums.length];\n    foreach(i, n; nums)\n    {\n\
    \        indexes[i] = i;\n        sums[i] = sumDigits(n);\n    }\n    sort!((a,\
    \ b) => a > b)(sums, indexes);\n    foreach(i, n; indexes)\n    {\n        result[i]\
    \ = nums[n];\n    }\n    return result;\n}", "{\n    return nums.sort!((a, b)\
    \ => sumDigits(a) < sumDigits(b));\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \        indexes[i] = i;\n    }\n    sort(sums, indexes);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    long[] indices = new long[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        indices[i] = i;\n        sums[i] = sumDigits(n);\n\
    \    }\n    sort!(\"a < b\", indices, sums);\n    foreach(i, n; indices)\n   \
    \ {\n        result[i] = nums[n];\n    }\n    return result;\n}", "{\n    auto\
    \ result = nums.dup;\n    auto sums = new long[nums.length];\n    foreach (i,\
    \ n; nums)\n    {\n        auto sum = 0L;\n        foreach (c; to!string(n))\n\
    \        {\n            sum += c.to!long - '0'.to!long;\n        }\n        sums[i]\
    \ = sum;\n    }\n    sort!((a, b) => a < b)(sums, result);\n    return result;\n\
    }", "{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) <\
    \ sumDigits(b));\n    return result;\n}", "{\n    auto sum = (long n) => \n  \
    \  {\n        long sum = 0;\n        while (n != 0) \n        {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        return sum;\n    };\n \
    \   return nums.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sum_of_digits(nums[i]);\n        index[i] = i;\n\
    \    }\n    sort(sums, index);\n    for (int i = 0; i < nums.length; i++)\n  \
    \  {\n        result[i] = nums[index[i]];\n    }\n    return result;\n}\nlong\
    \ sum_of_digits(long n)\n{\n    long sum = 0;\n    while (n > 0)\n    {\n    \
    \    sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}", "{\n    return\
    \ nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sortedSums = sums.dup;\n    sort(sortedSums);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int index = sums.indexOf(sortedSums[i]);\n\
    \        result[i] = nums[index];\n    }\n    return result;\n}", "{\n    return\
    \ nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}", "{\n    return nums.sort!((a, b) =>\
    \ sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n}",
  "{\n    long[] result = nums.dup;\n    sort!((a, b) => sumDigits(a) < sumDigits(b))(result);\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    long[] indices = new long[nums.length];\n\
    \    for (long i = 0; i < nums.length; i++)\n    {\n        indices[i] = i;\n\
    \        sums[i] = 0;\n        long n = nums[i];\n        while (n > 0)\n    \
    \    {\n            sums[i] += n % 10;\n            n /= 10;\n        }\n    }\n\
    \    sort(sums, indices);\n    for (long i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[indices[i]];\n    }\n    return result;\n}", "{\n  \
    \  long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    foreach(i, item; nums)\n    {\n\
    \        index[i] = i;\n        sum[i] = 0;\n        while(item > 0)\n       \
    \ {\n            sum[i] += item % 10;\n            item /= 10;\n        }\n  \
    \  }\n    sort(sum, index);\n    foreach(i, item; index)\n    {\n        result[i]\
    \ = nums[item];\n    }\n    return result;\n}", "{\n    /*\n        1. Create\
    \ a struct to hold the index and the sum of the digits\n        2. Create a new\
    \ array of the structs\n        3. Sort the array\n        4. Create a new array\
    \ of the sorted indices\n        5. Return the new array\n    */\n    struct IndexSum\n\
    \    {\n        long index;\n        long sum;\n    }\n    IndexSum[] indexSums;\n\
    \    foreach(i, num; nums)\n    {\n        indexSums ~= IndexSum(i, sumDigits(num));\n\
    \    }\n    indexSums.sort!((a, b) => a.sum < b.sum);\n    long[] sortedIndices;\n\
    \    foreach(indexSum; indexSums)\n    {\n        sortedIndices ~= indexSum.index;\n\
    \    }\n    return sortedIndices;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while\
    \ (num > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    auto sorted = zip(sums, nums).sort!((a,\
    \ b) => a[0] < b[0]);\n    foreach (i, item; sorted)\n    {\n        result[i]\
    \ = item[1];\n    }\n    return result;\n}", "{\n    auto points = nums.map!((x)\
    \ => x.to!string.map!((y) => y.to!long).sum).array;\n    return nums.zip(points).sort!((a,\
    \ b) => a[1] > b[1] || (a[1] == b[1] && a[0] > b[0])).map!((x) => x[0]).array;\n\
    }", "{\n    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n   \
    \ return nums.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n\
    }", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n}", "{\n    auto sum = (long x) => x.to!string.map!(a\
    \ => a.to!long).sum;\n    auto res = nums.dup;\n    res.sort!((a, b) => (sum(a)\
    \ == sum(b)) ? (a < b) : (sum(a) < sum(b)));\n    return res;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sum = new long[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        while (temp > 0)\n        {\n            sum[i] += temp % 10;\n     \
    \       temp /= 10;\n        }\n    }\n    long[] temp = sum.dup;\n    temp.sort;\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (temp[i] == sum[j])\n         \
    \   {\n                result[i] = nums[j];\n                sum[j] = -1;\n  \
    \              break;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    auto s = nums.map!(a => tuple(a, a.sumDigits())).sort!((a, b) => a[1] <\
    \ b[1] || a[1] == b[1] && a[0] < b[0]);\n    return s.map!(a => a[0]).array;\n\
    }", "{\n    return nums.sort!((a, b) => (sumDigits(a) == sumDigits(b)) ? a < b\
    \ : sumDigits(a) < sumDigits(b));\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] %\
    \ 10 + nums[i] / 10;\n        indexes[i] = i;\n    }\n    sort(sums, indexes);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sum = new long[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        while (temp > 0)\n        {\n            sum[i] += temp % 10;\n     \
    \       temp /= 10;\n        }\n    }\n    long[] temp = sum.dup;\n    temp.sort;\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (temp[i] == sum[j])\n         \
    \   {\n                result[i] = nums[j];\n                sum[j] = -1;\n  \
    \              break;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    auto result = nums.dup;\n    auto sums = new long[result.length];\n    foreach\
    \ (i, n; result)\n    {\n        sums[i] = sumDigits(n);\n    }\n    sort!((a,\
    \ b) => a < b)(result, sums);\n    return result;\n}", "{\n    long[] result =\
    \ new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    foreach(i, n; nums)\n    {\n        indices[i]\
    \ = i;\n        sums[i] = n.sumDigits();\n    }\n    sort!((a, b) => a > b)(sums,\
    \ indices);\n    foreach(i, n; indices)\n    {\n        result[i] = nums[n];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int temp = nums[i];\n        while (temp != 0)\n        {\n  \
    \          sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n \
    \   int[] sorted = sum.dup;\n    sort(sorted);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n        {\n    \
    \        if (sum[j] == sorted[i])\n            {\n                result[i] =\
    \ nums[j];\n                sum[j] = -1;\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    auto result = nums.dup;\n\
    \    auto sums = nums.map!(a => a.to!string.map!(a => a.to!long).sum).array;\n\
    \    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(result);\n\
    \    return result;\n}", "{\n    auto result = nums.dup;\n    std.algorithm.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b))(result);\n    return result;\n}", "{\n  \
    \  // your code here\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        long sum = 0;\n        foreach (c; nums[i].to!string)\n        {\n  \
    \          sum += c.to!long - '0'.to!long;\n        }\n        sums[i] = sum;\n\
    \    }\n    auto sorted = sort!((a, b) => a > b)(sums);\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        foreach (j; 0 .. nums.length)\n        {\n\
    \            if (sums[j] == sorted[i])\n            {\n                result[i]\
    \ = nums[j];\n                sums[j] = -1;\n                break;\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \        indexes[i] = i;\n    }\n    sort!(\"a < b\")(sums, indexes);\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] nums_copy = nums.dup;\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    long[] indices_copy = new long[nums.length];\n\
    \    int i = 0;\n    foreach(n; nums)\n    {\n        indices[i] = i;\n      \
    \  indices_copy[i] = i;\n        i++;\n    }\n    i = 0;\n    foreach(n; nums)\n\
    \    {\n        long sum = 0;\n        foreach(d; n.to!string)\n        {\n  \
    \          sum += d.to!long - 48;\n        }\n        sums[i] = sum;\n       \
    \ i++;\n    }\n    sort!(\"a < b\", \"a\", \"b\")(sums, indices);\n    i = 0;\n\
    \    foreach(n; nums)\n    {\n        result[indices[i]] = nums_copy[indices_copy[i]];\n\
    \        i++;\n    }\n    return result;\n}", "{\n    auto result = nums.dup;\n\
    \    result.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b)\
    \ && a < b));\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \        indexes[i] = i;\n    }\n    sort(sums, indexes);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n\
    \    return result;\n}\nlong sumDigits(long n)\n{\n    long result = 0;\n    while\
    \ (n > 0)\n    {\n        result += n % 10;\n        n /= 10;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        long sum = 0;\n        long num = nums[i];\n        while (num > 0)\n\
    \        {\n            sum += num % 10;\n            num /= 10;\n        }\n\
    \        sums[i] = sum;\n    }\n    for (int i = 0; i < nums.length; i++)\n  \
    \  {\n        long min = sums[i];\n        int minIndex = i;\n        for (int\
    \ j = i + 1; j < nums.length; j++)\n        {\n            if (sums[j] < min)\n\
    \            {\n                min = sums[j];\n                minIndex = j;\n\
    \            }\n        }\n        sums[minIndex] = sums[i];\n        sums[i]\
    \ = min;\n        result[i] = nums[minIndex];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indexes = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n        indexes[i] = i;\n\
    \    }\n    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}",
  "{\n    long[] ret = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        ret[i] = nums[sorted[i]];\n    }\n    return ret;\n}", "{\n  \
    \  auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    foreach(i, v; nums)\n    {\n        sums[i]\
    \ = sumDigits(v);\n    }\n    sort(sums);\n    foreach(i, v; sums)\n    {\n  \
    \      result[i] = nums[v];\n    }\n    return result;\n}", "{\n    auto nums_with_points\
    \ = nums.map!(a => tuple(a, a.to!string.map!(a => a.to!long).sum));\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(a\
    \ => a[0]).array;\n}", "{\n    auto nums_with_points = zip(nums, map!(n => n.sumOfDigits())(nums));\n\
    \    return nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0])).map!(a => a[0]).array;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sum = new long[nums.length];\n \
    \   long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return\
    \ result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}", "{\n    auto result = nums.dup;\n\
    \    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long num =\
    \ nums[i];\n        while (num > 0)\n        {\n            sum[i] += num % 10;\n\
    \            num /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n \
    \   }\n    return result;\n}", "{\n    return nums.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n}", "{\n    return\
    \ nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    int[]\
    \ indexes = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        indexes[i] = i;\n    }\n    indexes.sort!((a, b) => sums[a] <\
    \ sums[b] || (sums[a] == sums[b] && a < b));\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }", "{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) <\
    \ sumDigits(b));\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    foreach(i, v; nums)\n    {\n        long sum = 0;\n        foreach(c; v.to!string)\n\
    \        {\n            sum += c.to!long - '0'.to!long;\n        }\n        sums[i]\
    \ = sum;\n        indexes[i] = i;\n    }\n    sort!(\"a < b\", sums, indexes);\n\
    \    foreach(i, v; indexes)\n    {\n        result[i] = nums[v];\n    }\n    return\
    \ result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}", "{\n    long[] result;\n    foreach(i;\
    \ 0 .. nums.length)\n    {\n        long sum = 0;\n        foreach(j; 0 .. nums[i].to!string.length)\n\
    \        {\n            sum += nums[i].to!string[j].to!long;\n        }\n    \
    \    result ~= sum;\n    }\n    return result;\n}", "{\n    auto sum = (long n)\
    \ => n.digits.sum;\n    auto cmp = (long a, long b) => sum(a) < sum(b) ? -1 :\
    \ sum(a) > sum(b) ? 1 : a < b ? -1 : a > b ? 1 : 0;\n    return nums.sort!cmp;\n\
    }", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n\
    \    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    long[]\
    \ res = new long[nums.length];\n    int[] sum = new int[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n    \
    \    while (temp != 0)\n        {\n            sum[i] += temp % 10;\n        \
    \    temp /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \ }\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        res[i] = nums[index[i]];\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indexes = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sum_digits(nums[i]);\n        indexes[i] = i;\n\
    \    }\n    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long n = nums[i];\n        while (n > 0)\n        {\n            sum +=\
    \ n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  auto p = zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n    foreach\
    \ (i, e; p)\n    {\n        result[i] = e[0];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, e; nums)\n    {\n        long sum = 0;\n        foreach(c; to!string(e))\n\
    \        {\n            sum += c.to!long - '0'.to!long;\n        }\n        sums[i]\
    \ = sum;\n    }\n    auto sorted = sort(sums);\n    foreach(i, e; sorted)\n  \
    \  {\n        auto index = sums.indexOf(e);\n        result[i] = nums[index];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long temp = nums[i];\n        while (temp != 0)\n     \
    \   {\n            sum[i] += temp % 10;\n            temp /= 10;\n        }\n\
    \    }\n    long[] sorted = sum.dup;\n    sort(sorted);\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sorted[i] == sum[j])\n            {\n            \
    \    result[i] = nums[j];\n                sum[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    auto nums_with_points\
    \ = zip(nums, map!((x) => sum(map!(to!int)(to!string(x))))(nums));\n    auto sorted_nums_with_points\
    \ = sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]))(nums_with_points);\n\
    \    return map!((x) => x[0])(sorted_nums_with_points);\n}", "{\n    auto result\
    \ = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[nums.length];\n    long[] indexes = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] % 10 + nums[i]\
    \ / 10;\n        indexes[i] = i;\n    }\n    sort(sums, indexes);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}", "{\n    auto a = nums.map!(a => tuple(a, a.digits.sum)).sort!((a,\
    \ b) => a[1] < b[1]);\n    return a.map!(a => a[0]).array;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = 0;\n        long n =\
    \ nums[i];\n        while (n > 0)\n        {\n            sums[i] += n % 10;\n\
    \            n /= 10;\n        }\n    }\n    sort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    foreach(i, v; nums)\n    {\n  \
    \      sums[i] = sumDigits(v);\n    }\n    foreach(i, v; nums)\n    {\n      \
    \  long min = sums[i];\n        long minIndex = i;\n        foreach(j, v2; sums[i..$])\n\
    \        {\n            if(v2 < min)\n            {\n                min = v2;\n\
    \                minIndex = j + i;\n            }\n        }\n        result[i]\
    \ = nums[minIndex];\n        sums[minIndex] = sums[i];\n    }\n    return result;\n\
    }", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n\
    \    long[] result;\n    long[] temp;\n    long sum = 0;\n    long[] sums;\n \
    \   int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll\
    \ = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n \
    \   int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu\
    \ = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n \
    \   int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd\
    \ = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n \
    \   int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int\
    \ mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int qqq\
    \ = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n",
  "{\n    auto result = nums.dup;\n    result.sort!((a, b) => a.sumDigits() < b.sumDigits());\n\
    \    return result;\n}", "{\n    return nums.sort!((a, b) => (a.sumDigits() <\
    \ b.sumDigits()));\n}", "{\n    int[] sums = new int[nums.length];\n    foreach(i,n;\
    \ nums)\n    {\n        int sum = 0;\n        while(n != 0)\n        {\n     \
    \       sum += n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n\
    \    }\n    return nums.sort(sums);\n}", "{\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    foreach (c; nums[i].to!string)\n        {\n            sum += c.to!int -\
    \ '0';\n        }\n        sums[i] = sum;\n    }\n    return nums.dup.sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n}", "{\n    auto\
    \ result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        sums[i] = sum;\n    }\n    int[] indices = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        indices[i] = i;\n \
    \   }\n    sort(sums, indices);\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num > 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    auto p = zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n   \
    \ foreach (i, e; p)\n    {\n        result[i] = e[0];\n    }\n    return result;\n\
    }", "{\n    auto nums_with_points = zip(nums, map!(sum_digits)(nums));\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return map!(a => a[0])(nums_with_points);\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = 0;\n        long num\
    \ = nums[i];\n        while (num > 0)\n        {\n            sums[i] += num %\
    \ 10;\n            num /= 10;\n        }\n    }\n    mergeSort(sums, indices);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    foreach(i, n; nums)\n    {\n  \
    \      sums[i] = n.sumDigits();\n    }\n    auto sorted = sort(sums);\n    foreach(i,\
    \ s; sorted)\n    {\n        foreach(j, n; nums)\n        {\n            if(n.sumDigits()\
    \ == s)\n            {\n                result[i] = n;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    auto result\
    \ = nums.dup;\n    sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b))(result);\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indexes = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indexes[i] = i;\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    indexes = sort(indexes, (a, b) => sums[a] < sums[b]);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}\nlong sumDigits(long n)\n{\n    long sum = 0;\n\
    \    while (n > 0)\n    {\n        sum += n % 10;\n        n /= 10;\n    }\n \
    \   return sum;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        sums[i] = sumDigits(nums[i]);\n    }\n    long[] sortedSums = sums.dup;\n\
    \    sort(sortedSums);\n    for (int i = 0; i < nums.length; i++)\n    {\n   \
    \     for (int j = 0; j < nums.length; j++)\n        {\n            if (sortedSums[i]\
    \ == sums[j])\n            {\n                result[i] = nums[j];\n         \
    \       sums[j] = -1;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\nlong sumDigits(long n)\n{\n    long sum = 0;\n    while\
    \ (n > 0)\n    {\n        sum += n % 10;\n        n /= 10;\n    }\n    return\
    \ sum;\n}", "{\n    auto arr = nums.dup;\n    auto sum = 0;\n    auto sum_arr\
    \ = new long[arr.length];\n    foreach(i, num; arr)\n    {\n        sum = 0;\n\
    \        while(num != 0)\n        {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        sum_arr[i] = sum;\n    }\n    auto index = new\
    \ long[arr.length];\n    foreach(i, num; arr)\n    {\n        index[i] = i;\n\
    \    }\n    auto temp = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n \
    \       for(int j = i + 1; j < arr.length; j++)\n        {\n            if(sum_arr[i]\
    \ > sum_arr[j])\n            {\n                temp = sum_arr[i];\n         \
    \       sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n       \
    \         temp = arr[i];\n                arr[i] = arr[j];\n                arr[j]\
    \ = temp;\n                temp = index[i];\n                index[i] = index[j];\n\
    \                index[j] = temp;\n            }\n            else if(sum_arr[i]\
    \ == sum_arr[j])\n            {\n                if(index[i] > index[j])\n   \
    \             {\n                    temp = sum_arr[i];\n                    sum_arr[i]\
    \ = sum_arr[j];\n                    sum_arr[j] = temp;\n                    temp\
    \ = arr[i];\n                    arr[i] = arr[j];\n                    arr[j]\
    \ = temp;\n                    temp = index[i];\n                    index[i]\
    \ = index[j];\n                    index[j] = temp;\n                }\n     \
    \       }\n        }\n    }\n    return arr;\n}", "{\n    auto result = nums.dup;\n\
    \    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    long num = nums[i];\n        while (num > 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int index = indexOf(sums, sorted[i]);\n        result[i] = nums[index];\n\
    \    }\n    return result;\n}\n/*\n    Example:\n    order_by_points([51, 32,\
    \ 43]) == [32, 43, 51]\n    order_by_points([17, 13, 27, 49]) == [17, 13, 27,\
    \ 49]\n    order_by_points([]) == []\n*/", "{\n    auto result = nums.dup;\n \
    \   result.sort!((a, b) =>\n    {\n        auto aSum = a.to!string.map!(c => c.to!long).sum;\n\
    \        auto bSum = b.to!string.map!(c => c.to!long).sum;\n        return aSum\
    \ == bSum ? a.idup.compare(b.idup) : aSum.compare(bSum);\n    });\n    return\
    \ result;\n}", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b)\
    \ || (sumDigits(a) == sumDigits(b) && a < b));\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    long[] sums = new long[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n \
    \   }\n    sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n   \
    \     for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[i]\
    \ == sumDigits(nums[j]))\n            {\n                result[i] = nums[j];\n\
    \                nums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n    }\n    int[] sorted\
    \ = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[sorted[i]];\n    }\n    return result;\n}", "{\n    auto points = nums.map!(a\
    \ => a.sumDigits).array;\n    return nums.sort!((a, b) => points[a] < points[b]).array;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long n = nums[i];\n        while (n > 0)\n        {\n            sum +=\
    \ n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  auto p = zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n    foreach\
    \ (i, e; p)\n    {\n        result[i] = e[0];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num > 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sortedSums = sums.dup;\n    sortedSums.sort;\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        long sum = sortedSums[i];\n     \
    \   for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[j]\
    \ == sum)\n            {\n                result[i] = nums[j];\n             \
    \   sums[j] = -1;\n                break;\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    long[] index = new long[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n     \
    \   sum[i] = nums[i];\n        while (sum[i] > 9)\n        {\n            sum[i]\
    \ = sum[i] % 10 + sum[i] / 10;\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n\
    \            if (sum[i] > sum[j])\n            {\n                long temp =\
    \ sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n\
    \                temp = nums[i];\n                nums[i] = nums[j];\n       \
    \         nums[j] = temp;\n                temp = index[i];\n                index[i]\
    \ = index[j];\n                index[j] = temp;\n            }\n            else\
    \ if (sum[i] == sum[j])\n            {\n                if (index[i] > index[j])\n\
    \                {\n                    long temp = sum[i];\n                \
    \    sum[i] = sum[j];\n                    sum[j] = temp;\n                  \
    \  temp = nums[i];\n                    nums[i] = nums[j];\n                 \
    \   nums[j] = temp;\n                    temp = index[i];\n                  \
    \  index[i] = index[j];\n                    index[j] = temp;\n              \
    \  }\n            }\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[i];\n    }\n    return result;\n}", "{\n    auto\
    \ result = nums.dup;\n    sort!((a, b) => sumDigits(a) < sumDigits(b))(result);\n\
    \    return result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, v; nums)\n    {\n        long sum = 0;\n        foreach(c; to!string(v))\n\
    \        {\n            sum += c.to!long - '0'.to!long;\n        }\n        sums[i]\
    \ = sum;\n    }\n    long[] sorted = sums.dup;\n    sort(sorted);\n    foreach(i,\
    \ v; sorted)\n    {\n        foreach(j, w; sums)\n        {\n            if(v\
    \ == w)\n            {\n                result[i] = nums[j];\n               \
    \ sums[j] = -1;\n                break;\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    auto result = nums.dup;\n    auto sums = nums.map!(a\
    \ => a.sumDigits);\n    result.sort!((a, b) => sums[a] < sums[b] || (sums[a] ==\
    \ sums[b] && a < b));\n    return result;\n}", "{\n    auto result = nums.dup;\n\
    \    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
