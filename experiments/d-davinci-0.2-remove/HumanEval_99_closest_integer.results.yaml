language: d
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = floor(d);\n    double d_frac = d -\
    \ d_int;\n    if (d_frac == 0.5)\n    {\n        if (d > 0)\n        {\n     \
    \       result = cast(long)d_int + 1;\n        }\n        else\n        {\n  \
    \          result = cast(long)d_int - 1;\n        }\n    }\n    else\n    {\n\
    \        result = cast(long)round(d);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbrdt9pm.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbrdt9pm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long) (d\
    \ - 0.5);\n    }\n    else\n    {\n        result = cast(long) (d + 0.5);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiuptb23v.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiuptb23v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84edhfzc.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84edhfzc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d1 = floor(d);\n    double d2 = ceil(d);\n\
    \    double diff1 = abs(d - d1);\n    double diff2 = abs(d - d2);\n    if (diff1\
    \ < diff2)\n        result = cast(long)d1;\n    else\n        result = cast(long)d2;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprx_ej5_2.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprx_ej5_2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(value);\n    if (d - l > 0.5)\n        return l + 1;\n \
    \   else if (d - l < -0.5)\n        return l - 1;\n    else\n        return l;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9wr37u8f.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp9wr37u8f.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9wr37u8f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = cast(double) cast(long) d;\n    double\
    \ d_frac = d - d_int;\n    if (d_frac == 0.5)\n    {\n        if (d > 0)\n   \
    \     {\n            result = cast(long) d + 1;\n        }\n        else\n   \
    \     {\n            result = cast(long) d - 1;\n        }\n    }\n    else\n\
    \    {\n        result = cast(long) d;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe7gpqgsw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7gpqgsw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!long(d));\n    if (d_int\
    \ == d)\n        return to!long(d);\n    else if (d_int < d)\n        return to!long(d_int\
    \ + 1);\n    else\n        return to!long(d_int - 1);\n}\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6gjb_rr.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpp6gjb_rr.d(22): Error: template instance `to!double` template `to` is
    not defined, did you mean No?

    /tmp/tmpp6gjb_rr.d(24): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpp6gjb_rr.d(26): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpp6gjb_rr.d(28): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6gjb_rr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmm5m8t.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmm5m8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long) (d\
    \ + 0.5);\n    }\n    else\n    {\n        result = cast(long) (d - 0.5);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp974oponw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp974oponw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)floor(d);\n\
    \        if (d - result == 0.5)\n            result--;\n    }\n    else\n    {\n\
    \        result = cast(long)ceil(d);\n        if (result - d == 0.5)\n       \
    \     result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1b9amsk.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1b9amsk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_e2b84a.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_e2b84a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = floor(d);\n    double d_frac = d -\
    \ d_int;\n    if (d_frac < 0.5)\n        result = cast(long)d_int;\n    else\n\
    \        result = cast(long)d_int + 1;\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7q4vq7f8.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7q4vq7f8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_abs = abs(d);\n    long l = to!long(d_abs);\n\
    \    double d_diff = d_abs - l;\n    if (d_diff < 0.5)\n    {\n        result\
    \ = l;\n    }\n    else\n    {\n        result = l + 1;\n    }\n    if (d < 0)\n\
    \    {\n        result = -result;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3a2ba64e.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp3a2ba64e.d(23): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3a2ba64e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    auto floor = cast(long)num;\n    auto ceil = floor + 1;\n    if (abs(num\
    \ - floor) < abs(num - ceil))\n        return floor;\n    else\n        return\
    \ ceil;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm9aobcd2.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9aobcd2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d +\
    \ 1;\n    }\n    else\n    {\n        result = cast(long)d - 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa67wj7x5.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa67wj7x5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fractional = d - cast(long)d;\n    if (fractional\
    \ >= 0.5)\n    {\n        result = cast(long)d + 1;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqiiiyyy.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqiiiyyy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = cast(double) cast(long) d;\n    double\
    \ d_frac = d - d_int;\n    if (d_frac > 0.5)\n        result = cast(long) ceil(d);\n\
    \    else if (d_frac < -0.5)\n        result = cast(long) floor(d);\n    else\n\
    \        result = cast(long) round(d);\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu564dbha.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu564dbha.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long) d\
    \ - 1;\n    }\n    else\n    {\n        result = cast(long) d + 1;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc_bwx07t.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc_bwx07t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    auto floor = cast(long)num;\n    auto ceil = floor + 1;\n    auto diff_floor\
    \ = abs(num - floor);\n    auto diff_ceil = abs(num - ceil);\n    return diff_floor\
    \ < diff_ceil ? floor : ceil;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcapr8ytc.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcapr8ytc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_abs = abs(d);\n    double d_floor = floor(d_abs);\n\
    \    double d_ceil = ceil(d_abs);\n    double d_floor_diff = d_abs - d_floor;\n\
    \    double d_ceil_diff = d_ceil - d_abs;\n    if (d_floor_diff == d_ceil_diff)\n\
    \    {\n        if (d > 0)\n        {\n            result = cast(long)d_ceil;\n\
    \        }\n        else\n        {\n            result = cast(long)d_floor;\n\
    \        }\n    }\n    else if (d_floor_diff < d_ceil_diff)\n    {\n        result\
    \ = cast(long)d_floor;\n    }\n    else\n    {\n        result = cast(long)d_ceil;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc3fzxgse.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3fzxgse.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long v = to!long(value);\n\
    \    long r = v - v.floor;\n    if (r == 0.5)\n        return v > 0 ? v.ceil :\
    \ v.floor;\n    return v.round;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdgwsy9fo.d(20): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    /tmp/tmpdgwsy9fo.d(21): Error: `std.math.floor` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4394):     `std.math.floor(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4487):     `std.math.floor(float
    x)`

    /tmp/tmpdgwsy9fo.d(23): Error: `std.math.ceil` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4266):     `std.math.ceil(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math'
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    long l = to!long(value);\n    double diff = d - l;\n\
    \    if (diff < 0)\n    {\n        diff = -diff;\n    }\n    if (diff >= 0.5)\n\
    \    {\n        if (d > 0)\n        {\n            result = l + 1;\n        }\n\
    \        else\n        {\n            result = l - 1;\n        }\n    }\n    else\n\
    \    {\n        result = l;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeqjyhm6e.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpeqjyhm6e.d(22): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeqjyhm6e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    return cast(long)round(num);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b3xbpuc.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b3xbpuc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d == 0.0)\n        return 0;\n    if(d < 0.0)\n\
    \    {\n        d = -d;\n        result = cast(long)d;\n        if(d - result\
    \ > 0.5)\n            result--;\n        return -result;\n    }\n    result =\
    \ cast(long)d;\n    if(d - result > 0.5)\n        result++;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3ipz4ta.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3ipz4ta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto v = to!double(value);\n\
    \    return cast(long)round(v);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd62ic0sx.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd62ic0sx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fraction = d - cast(long)d;\n    if (fraction\
    \ < 0.5)\n    {\n        result = cast(long)d;\n    }\n    else\n    {\n     \
    \   result = cast(long)d + 1;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbhas8cbd.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbhas8cbd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldz27vt3.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldz27vt3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptl3y6jfh.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptl3y6jfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto v = to!double(value);\n\
    \    return cast(long)round(v);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd62ic0sx.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd62ic0sx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_e2b84a.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_e2b84a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    real\
    \ num = to!real(value);\n    long int_part = cast(long)num;\n    real dec_part\
    \ = num - int_part;\n    if (dec_part < 0.5)\n        result = int_part;\n   \
    \ else if (dec_part > 0.5)\n        result = int_part + 1;\n    else\n       \
    \ result = abs(int_part) > abs(int_part + 1) ? int_part : int_part + 1;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy2gvgtjd.d(21): Error: template instance `to!real` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2gvgtjd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f == c - d)\n    {\n        if (d < 0)\n            result = cast(long)f;\n\
    \        else\n            result = cast(long)c;\n    }\n    else\n    {\n   \
    \     if (d - f < c - d)\n            result = cast(long)f;\n        else\n  \
    \          result = cast(long)c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsg758v25.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsg758v25.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpftnn_qd6.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftnn_qd6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldz27vt3.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldz27vt3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)floor(d);\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)ceil(d);\n        if (result - d > 0.5)\n        \
    \    result--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw7ev_qu.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw7ev_qu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    return cast(long)round(num);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b3xbpuc.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b3xbpuc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    // TODO\n    return 0;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprqksonrc.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmprqksonrc.__unittest_L23_C1() [0x427a36]

    ??:? void tmprqksonrc.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fraction = d - cast(long)d;\n    if (fraction\
    \ == 0.5)\n    {\n        result = cast(long)d;\n        if (result > 0)\n   \
    \         result++;\n        else\n            result--;\n    }\n    else\n  \
    \  {\n        result = cast(long)d;\n        if (fraction > 0.5)\n           \
    \ result++;\n        else if (fraction < -0.5)\n            result--;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwzrb4o_r.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwzrb4o_r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ dbl = to!double(value);\n    double dbl_int = cast(double) cast(long) dbl;\n\
    \    double dbl_frac = dbl - dbl_int;\n    if (dbl_frac < 0.5)\n        result\
    \ = cast(long) dbl_int;\n    else\n        result = cast(long) dbl_int + 1;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zaynq0z.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zaynq0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto f = to!double(value);\n\
    \    auto i = cast(long)f;\n    if (f - i > 0.5)\n        return i + 1;\n    else\
    \ if (f - i < -0.5)\n        return i - 1;\n    else\n        return i;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9yn3vx_l.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9yn3vx_l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zug6qln.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zug6qln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fractional = d - cast(long)d;\n    if (fractional\
    \ < 0.5)\n    {\n        result = cast(long)d;\n    }\n    else\n    {\n     \
    \   result = cast(long)d + 1;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0x21vvg6.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0x21vvg6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptl3y6jfh.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptl3y6jfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d >= 0)\n    {\n        result = cast(long) d;\n\
    \        if (d - result >= 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long) d;\n        if (result - d >= 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2u5vy8g.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2u5vy8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_e2b84a.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_e2b84a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zug6qln.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zug6qln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(value);\n    if (d - l > 0.5)\n        return l + 1;\n \
    \   else if (d - l < -0.5)\n        return l - 1;\n    else\n        return l;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9wr37u8f.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp9wr37u8f.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9wr37u8f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long) (d\
    \ - 0.5);\n    }\n    else\n    {\n        result = cast(long) (d + 0.5);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiuptb23v.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiuptb23v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    // TODO: Implement this\
    \ function\n    return 0;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwj5aruwm.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpwj5aruwm.__unittest_L23_C1() [0x427a36]

    ??:? void tmpwj5aruwm.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        d = -d;\n        result\
    \ = cast(long)d;\n        if (d - result > 0.5)\n            result++;\n     \
    \   result = -result;\n    }\n    else\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1igjvu9.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1igjvu9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value[1..$];\n\
    \    }\n    auto dot = value.find('.');\n    if (dot == -1) {\n        result\
    \ = to!long(value);\n    } else {\n        auto integer = value[0..dot];\n   \
    \     auto fraction = value[dot+1..$];\n        result = to!long(integer);\n \
    \       if (fraction.length > 0) {\n            auto frac = to!double(fraction);\n\
    \            if (frac >= 0.5) {\n                result++;\n            }\n  \
    \      }\n    }\n    return result * sign;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxan87255.d(26): Error: no property `find` for type `string`

    /tmp/tmpxan87255.d(28): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpxan87255.d(32): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpxan87255.d(34): Error: template instance `to!double` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxan87255.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ number = to!double(value);\n    if(number > 0)\n    {\n        result = cast(long)number;\n\
    \        if(number - result > 0.5)\n        {\n            result++;\n       \
    \ }\n    }\n    else\n    {\n        result = cast(long)number;\n        if(result\
    \ - number > 0.5)\n        {\n            result--;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk1t6_xd9.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1t6_xd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long ret;\n    double d\
    \ = to!double(value);\n    if (d < 0)\n    {\n        ret = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        ret = cast(long)floor(d);\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4ynsbvt.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4ynsbvt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto val = to!double(value);\n\
    \    auto int_val = cast(long)val;\n    if(val - int_val > 0.5)\n        return\
    \ int_val + 1;\n    else if(val - int_val < -0.5)\n        return int_val - 1;\n\
    \    else\n        return int_val;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpguw4mq1g.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguw4mq1g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f < c - d)\n        result = cast(long)f;\n    else\n        result\
    \ = cast(long)c;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2np_ivm.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2np_ivm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f < c - d)\n        result = cast(long)f;\n    else\n        result\
    \ = cast(long)c;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2np_ivm.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2np_ivm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1nc95qk.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1nc95qk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long ret = 0;\n    double\
    \ val = to!double(value);\n    if(val > 0)\n    {\n        ret = cast(long)ceil(val);\n\
    \    }\n    else\n    {\n        ret = cast(long)floor(val);\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp8gl8uoi.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp8gl8uoi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(value);\n    if (d - l > 0.5)\n        return l + 1;\n \
    \   else if (d - l < -0.5)\n        return l - 1;\n    else\n        return l;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9wr37u8f.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp9wr37u8f.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9wr37u8f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fraction = d - cast(long)d;\n    if (fraction\
    \ < 0.5)\n    {\n        result = cast(long)d;\n    }\n    else\n    {\n     \
    \   result = cast(long)d + 1;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbhas8cbd.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbhas8cbd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = cast(double) cast(long) d;\n    if\
    \ (d - d_int > 0.5)\n        result = cast(long) d + 1;\n    else if (d - d_int\
    \ < -0.5)\n        result = cast(long) d - 1;\n    else\n        result = cast(long)\
    \ d;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0o3ucbww.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0o3ucbww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long number = to!long(value);\n\
    \    double fraction = to!double(value) - number;\n    if (fraction > 0.5)\n \
    \       return number + 1;\n    else if (fraction < -0.5)\n        return number\
    \ - 1;\n    else\n        return number;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq7c2rzb3.d(20): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    /tmp/tmpq7c2rzb3.d(21): Error: template instance `to!double` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7c2rzb3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldz27vt3.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldz27vt3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = cast(double) cast(long) d;\n    double\
    \ d_frac = d - d_int;\n    if (d_frac >= 0.5)\n        result = cast(long) ceil(d);\n\
    \    else\n        result = cast(long) floor(d);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppszvk2kl.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppszvk2kl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d >= 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjciou1fu.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjciou1fu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)d;\n\
    \        if(d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if(result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmrarqhh.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmrarqhh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    result = cast(long)d;\n    if (d - result > 0.5)\n\
    \        result++;\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd_ih19cf.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_ih19cf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_abs = abs(d);\n    long l = to!long(d_abs);\n\
    \    double d_diff = d_abs - l;\n    if (d_diff == 0.5)\n    {\n        if (d\
    \ > 0)\n        {\n            result = l + 1;\n        }\n        else\n    \
    \    {\n            result = l - 1;\n        }\n    }\n    else\n    {\n     \
    \   result = to!long(d);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp89io8exi.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp89io8exi.d(23): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmp89io8exi.d(38): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89io8exi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!long(d));\n    if (d_int\
    \ == d)\n        return to!long(d);\n    else\n    {\n        double d_int_plus_one\
    \ = d_int + 1;\n        if (abs(d_int_plus_one - d) < abs(d_int - d))\n      \
    \      return to!long(d_int_plus_one);\n        else\n            return to!long(d_int);\n\
    \    }\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtz63npn.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpxtz63npn.d(22): Error: template instance `to!double` template `to` is
    not defined, did you mean No?

    /tmp/tmpxtz63npn.d(24): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpxtz63npn.d(29): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpxtz63npn.d(31): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtz63npn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto val = to!double(value);\n\
    \    return val > 0 ? cast(long)ceil(val) : cast(long)floor(val);\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7u6ny2s0.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7u6ny2s0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   double d1 = abs(d - f);\n    double d2 = abs(d - c);\n    if (d1 < d2)\n \
    \       result = cast(long)f;\n    else\n        result = cast(long)c;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiyek_o25.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiyek_o25.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d < 0)\n    {\n        result = cast(long) ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long) floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpheqn9iim.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpheqn9iim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    // convert the string to\
    \ a double\n    double d = to!double(value);\n    // if the double is positive,\
    \ round up\n    if (d >= 0)\n        return cast(long) ceil(d);\n    // if the\
    \ double is negative, round down\n    else\n        return cast(long) floor(d);\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96moh13t.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96moh13t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphb51m3bm.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphb51m3bm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    return cast(long) d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp4ingjf.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp4ingjf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphb51m3bm.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphb51m3bm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    auto i = to!long(d);\n    auto f = d - i;\n    if (f > 0.5)\n        return\
    \ i + 1;\n    else if (f < -0.5)\n        return i - 1;\n    else\n        return\
    \ i;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhu0ur5n.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpuhu0ur5n.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhu0ur5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)floor(d);\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)ceil(d);\n        if (result - d > 0.5)\n        \
    \    result--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw7ev_qu.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw7ev_qu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f < c - d)\n        result = cast(long)f;\n    else\n        result\
    \ = cast(long)c;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2np_ivm.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2np_ivm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto parsed = to!double(value);\n\
    \    return cast(long)parsed;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp38i9qe5i.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp38i9qe5i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(d);\n    if (d - l >= 0.5)\n        return l + 1;\n    else\n\
    \        return l;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph4bp_h1i.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmph4bp_h1i.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4bp_h1i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    return cast(long)num;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_t8dnjmz.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_t8dnjmz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long ret = 0;\n    double\
    \ d = to!double(value);\n    long l = to!long(value);\n    if(d - l == 0.5)\n\
    \    {\n        ret = l + 1;\n    }\n    else if(d - l == -0.5)\n    {\n     \
    \   ret = l - 1;\n    }\n    else\n    {\n        ret = round(d);\n    }\n   \
    \ return ret;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptc3a5jff.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmptc3a5jff.d(22): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmptc3a5jff.d(33): Error: cannot implicitly convert expression `round(cast(real)d)`
    of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptc3a5jff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpftnn_qd6.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftnn_qd6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto val = to!double(value);\n\
    \    auto int_val = to!long(val);\n    auto diff = abs(val - int_val);\n    if\
    \ (diff == 0.5)\n    {\n        if (val > 0)\n            return int_val + 1;\n\
    \        else\n            return int_val - 1;\n    }\n    return int_val;\n}\n\
    unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_zvchzh.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpx_zvchzh.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_zvchzh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = cast(double) cast(long) d;\n    double\
    \ d_int_plus_one = d_int + 1;\n    double d_int_minus_one = d_int - 1;\n    double\
    \ d_int_plus_one_diff = abs(d_int_plus_one - d);\n    double d_int_minus_one_diff\
    \ = abs(d_int_minus_one - d);\n    double d_int_diff = abs(d_int - d);\n    if\
    \ (d_int_plus_one_diff < d_int_minus_one_diff)\n    {\n        if (d_int_plus_one_diff\
    \ < d_int_diff)\n        {\n            result = cast(long) d_int_plus_one;\n\
    \        }\n        else\n        {\n            result = cast(long) d_int;\n\
    \        }\n    }\n    else\n    {\n        if (d_int_minus_one_diff < d_int_diff)\n\
    \        {\n            result = cast(long) d_int_minus_one;\n        }\n    \
    \    else\n        {\n            result = cast(long) d_int;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx30bq0ju.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx30bq0ju.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fraction = d - cast(long)d;\n    if (fraction\
    \ > 0.5)\n    {\n        result = cast(long)d + 1;\n    }\n    else if (fraction\
    \ < -0.5)\n    {\n        result = cast(long)d - 1;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplxbr6n0o.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxbr6n0o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    // TODO: Implement this\
    \ function\n    return 0;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwj5aruwm.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpwj5aruwm.__unittest_L23_C1() [0x427a36]

    ??:? void tmpwj5aruwm.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long number = to!long(value);\n\
    \    long decimal = to!long(value.split(\".\")[1]);\n    long result = number;\n\
    \    if (decimal >= 5)\n    {\n        result += 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdhyfp9un.d(20): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    /tmp/tmpdhyfp9un.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhyfp9un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zug6qln.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zug6qln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fractional = d - cast(long)d;\n    if (fractional\
    \ < 0.5)\n    {\n        result = cast(long)d;\n    }\n    else\n    {\n     \
    \   result = cast(long)d + 1;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0x21vvg6.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0x21vvg6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!int(d));\n    double\
    \ d_frac = d - d_int;\n    if (d_frac == 0.5)\n    {\n        if (d > 0)\n   \
    \     {\n            result = to!int(d) + 1;\n        }\n        else\n      \
    \  {\n            result = to!int(d) - 1;\n        }\n    }\n    else\n    {\n\
    \        result = to!int(d);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16wtlr2a.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp16wtlr2a.d(22): Error: template instance `to!double` template `to` is
    not defined, did you mean No?

    /tmp/tmp16wtlr2a.d(28): Error: template instance `to!int` template `to` is not
    defined, did you mean No?

    /tmp/tmp16wtlr2a.d(32): Error: template instance `to!int` template `to` is not
    defined, did you mean No?

    /tmp/tmp16wtlr2a.d(37): Error: template instance `to!int` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16wtlr2a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldz27vt3.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldz27vt3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fraction = d - cast(long)d;\n    if (fraction\
    \ == 0.5)\n    {\n        result = cast(long)d;\n        if (d > 0)\n        \
    \    result++;\n        else\n            result--;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (fraction > 0.5)\n            result++;\n\
    \        else if (fraction < -0.5)\n            result--;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1rci9nem.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rci9nem.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = cast(double) cast(long) d;\n    double\
    \ d_frac = d - d_int;\n    if (d_frac == 0.5)\n    {\n        result = cast(long)\
    \ d;\n        if (result < 0)\n            result--;\n        else\n         \
    \   result++;\n    }\n    else\n    {\n        result = cast(long) round(d);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplviz0j3r.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplviz0j3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    result = cast(long)d;\n    if (d - result > 0.5)\n\
    \        result++;\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd_ih19cf.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_ih19cf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!long(d));\n    double\
    \ d_frac = d - d_int;\n    if (d_frac == 0.5)\n    {\n        if (d > 0)\n   \
    \     {\n            result = to!long(d_int + 1);\n        }\n        else\n \
    \       {\n            result = to!long(d_int - 1);\n        }\n    }\n    else\n\
    \    {\n        result = to!long(d);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpduld3jjv.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpduld3jjv.d(22): Error: template instance `to!double` template `to` is
    not defined, did you mean No?

    /tmp/tmpduld3jjv.d(28): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpduld3jjv.d(32): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpduld3jjv.d(37): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpduld3jjv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto v = to!double(value);\n\
    \    auto i = cast(long)v;\n    if(v - i > 0.5)\n        return i + 1;\n    else\
    \ if(v - i < -0.5)\n        return i - 1;\n    else\n        return i;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbbzg_1t8.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbbzg_1t8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptl3y6jfh.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptl3y6jfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(d);\n    if (d - l >= 0.5)\n        return l + 1;\n    else\n\
    \        return l;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph4bp_h1i.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmph4bp_h1i.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4bp_h1i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f < c - d)\n        result = cast(long)f;\n    else\n        result\
    \ = cast(long)c;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2np_ivm.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2np_ivm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptl3y6jfh.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptl3y6jfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3ek_z4q.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3ek_z4q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zug6qln.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zug6qln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphb51m3bm.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphb51m3bm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long) ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long) floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qdmzooi.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qdmzooi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmm5m8t.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmm5m8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    return cast(long)round(num);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b3xbpuc.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b3xbpuc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghlytud4.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghlytud4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_e2b84a.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_e2b84a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_abs = abs(d);\n    long l = to!long(d_abs);\n\
    \    double d_diff = d_abs - l;\n    if (d_diff >= 0.5)\n    {\n        if (d\
    \ > 0)\n        {\n            result = l + 1;\n        }\n        else\n    \
    \    {\n            result = -(l + 1);\n        }\n    }\n    else\n    {\n  \
    \      if (d > 0)\n        {\n            result = l;\n        }\n        else\n\
    \        {\n            result = -l;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpopkh2aor.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpopkh2aor.d(23): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopkh2aor.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmm5m8t.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmm5m8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_abs = abs(d);\n    double d_floor = floor(d_abs);\n\
    \    double d_ceil = ceil(d_abs);\n    double d_floor_diff = d_abs - d_floor;\n\
    \    double d_ceil_diff = d_ceil - d_abs;\n    if (d_floor_diff == d_ceil_diff)\n\
    \    {\n        result = d < 0 ? -d_ceil : d_ceil;\n    }\n    else\n    {\n \
    \       result = d_floor_diff < d_ceil_diff ? d_floor : d_ceil;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp58tjjbq1.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp58tjjbq1.d(29): Error: cannot implicitly convert expression `d < 0.00000
    ? -d_ceil : d_ceil` of type `double` to `long`

    /tmp/tmp58tjjbq1.d(33): Error: cannot implicitly convert expression `d_floor_diff
    < d_ceil_diff ? d_floor : d_ceil` of type `double` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58tjjbq1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long ret = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        ret = cast(long) ceil(d);\n\
    \    }\n    else\n    {\n        ret = cast(long) floor(d);\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdgp5ciws.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdgp5ciws.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(value);\n    if (d - l >= 0.5)\n        return l + 1;\n\
    \    else\n        return l;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc3jskt_4.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpc3jskt_4.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3jskt_4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ dbl = to!double(value);\n    double intpart = 0;\n    double fracpart = modf(dbl,\
    \ &intpart);\n    if (fracpart == 0.5)\n    {\n        result = cast(long)intpart;\n\
    \        if (dbl < 0)\n            result -= 1;\n        else\n            result\
    \ += 1;\n    }\n    else\n    {\n        result = cast(long)round(dbl);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32ulbwi9.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp32ulbwi9.d(23): Error: function `std.math.modf(real x, ref real i)` is
    not callable using argument types `(double, double*)`

    /tmp/tmp32ulbwi9.d(23):        cannot pass rvalue argument `& intpart` of type
    `double*` to parameter `ref real i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32ulbwi9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmm5m8t.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmm5m8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double intpart = 0;\n    double fractpart = modf(d,\
    \ &intpart);\n    if (fractpart == 0.5)\n    {\n        if (d > 0)\n        {\n\
    \            result = cast(long)intpart + 1;\n        }\n        else\n      \
    \  {\n            result = cast(long)intpart - 1;\n        }\n    }\n    else\n\
    \    {\n        result = cast(long)d;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cy8zint.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp7cy8zint.d(23): Error: function `std.math.modf(real x, ref real i)` is
    not callable using argument types `(double, double*)`

    /tmp/tmp7cy8zint.d(23):        cannot pass rvalue argument `& intpart` of type
    `double*` to parameter `ref real i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cy8zint.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d1 = floor(d);\n    double d2 = ceil(d);\n\
    \    if (d1 == d2)\n        return cast(long)d;\n    else if (d - d1 < d2 - d)\n\
    \        return cast(long)d1;\n    else\n        return cast(long)d2;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe0e77t08.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0e77t08.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(value);\n    if (d - l > 0.5)\n        return l + 1;\n \
    \   else if (d - l < -0.5)\n        return l - 1;\n    else\n        return l;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9wr37u8f.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp9wr37u8f.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9wr37u8f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    long l = to!long(value);\n    if (d - l == 0.5)\n\
    \    {\n        result = l + 1;\n    }\n    else if (d - l == -0.5)\n    {\n \
    \       result = l - 1;\n    }\n    else\n    {\n        result = l;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5jqqjzcp.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp5jqqjzcp.d(22): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jqqjzcp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d1 = floor(d);\n    double d2 = ceil(d);\n\
    \    if (d - d1 == d2 - d)\n    {\n        if (d > 0)\n            result = cast(long)d2;\n\
    \        else\n            result = cast(long)d1;\n    }\n    else\n    {\n  \
    \      if (d - d1 < d2 - d)\n            result = cast(long)d1;\n        else\n\
    \            result = cast(long)d2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxv930xw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxv930xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result >= 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d >= 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmputvq4bbw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmputvq4bbw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f < c - d)\n        result = cast(long)f;\n    else\n        result\
    \ = cast(long)c;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2np_ivm.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2np_ivm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = cast(double) cast(long) d;\n    double\
    \ d_frac = d - d_int;\n    if (d_frac < 0.5)\n        result = cast(long) d_int;\n\
    \    else\n        result = cast(long) d_int + 1;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8xsr9r09.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8xsr9r09.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f < c - d)\n        result = cast(long)f;\n    else\n        result\
    \ = cast(long)c;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2np_ivm.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2np_ivm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long) (d\
    \ - 0.5);\n    }\n    else\n    {\n        result = cast(long) (d + 0.5);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiuptb23v.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiuptb23v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    auto num_int = to!long(num);\n    auto num_frac = num - num_int;\n    if\
    \ (num_frac == 0.5)\n    {\n        if (num_int < 0)\n            return num_int\
    \ - 1;\n        else\n            return num_int + 1;\n    }\n    else\n    {\n\
    \        return num_int;\n    }\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptz6qw_do.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmptz6qw_do.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptz6qw_do.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3ek_z4q.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3ek_z4q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmm5m8t.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmm5m8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)floor(d);\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)ceil(d);\n        if (result - d > 0.5)\n        \
    \    result--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw7ev_qu.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw7ev_qu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else if (d < 0)\n    {\n        result = cast(long)floor(d);\n   \
    \ }\n    else\n    {\n        result = 0;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy4jsu2gn.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4jsu2gn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    auto int_part = to!long(num);\n    auto frac_part = num - int_part;\n   \
    \ if (frac_part >= 0.5)\n        return int_part + 1;\n    else if (frac_part\
    \ <= -0.5)\n        return int_part - 1;\n    else\n        return int_part;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3zu_3d0q.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp3zu_3d0q.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zu_3d0q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    auto floor = cast(long) floor(num);\n    auto ceil = cast(long) ceil(num);\n\
    \    return abs(num - floor) < abs(num - ceil) ? floor : ceil;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplmmypgkp.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplmmypgkp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    return cast(long)round(num);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b3xbpuc.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b3xbpuc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmm5m8t.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmm5m8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    // TODO: Implement this\
    \ function\n    return 0;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwj5aruwm.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpwj5aruwm.__unittest_L23_C1() [0x427a36]

    ??:? void tmpwj5aruwm.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    return cast(long)d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkuytug8f.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkuytug8f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghlytud4.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghlytud4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    return cast(long) (num > 0 ? num + 0.5 : num - 0.5);\n}\nunittest\n{\n  \
    \  alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9wz7wa6.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9wz7wa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmm5m8t.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmm5m8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f < c - d)\n        result = to!long(f);\n    else\n        result\
    \ = to!long(c);\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0w0e37s0.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp0w0e37s0.d(25): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmp0w0e37s0.d(27): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0w0e37s0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    auto floor = cast(long)num;\n    auto ceil = cast(long)num + 1;\n    auto\
    \ diff_floor = abs(num - floor);\n    auto diff_ceil = abs(num - ceil);\n    return\
    \ diff_floor < diff_ceil ? floor : ceil;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3w46328c.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3w46328c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_e2b84a.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_e2b84a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmm5m8t.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmm5m8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmm5m8t.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmm5m8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    // TODO: implement this\
    \ function\n    return 0;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_ynxdkhk.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmp_ynxdkhk.__unittest_L23_C1() [0x427a36]

    ??:? void tmp_ynxdkhk.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    result = cast(long)d;\n    if (abs(d - result) >=\
    \ 0.5)\n    {\n        result += (d > 0) ? 1 : -1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptxbe60ve.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxbe60ve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptl3y6jfh.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptl3y6jfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    return round(num);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphns1u0ut.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphns1u0ut.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else if (d < 0)\n    {\n        result = cast(long)floor(d);\n   \
    \ }\n    else\n    {\n        result = 0;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy4jsu2gn.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4jsu2gn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(value);\n    double d2 = to!double(l);\n    if (d == d2)\
    \ return l;\n    else if (d > d2) return l + 1;\n    else return l - 1;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpquymzjea.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpquymzjea.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpquymzjea.d(22): Error: template instance `to!double` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpquymzjea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k8er8xj.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k8er8xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!long(d));\n    double\
    \ d_frac = d - d_int;\n    if (d_frac == 0.5)\n    {\n        if (d > 0)\n   \
    \     {\n            result = to!long(d + 0.5);\n        }\n        else\n   \
    \     {\n            result = to!long(d - 0.5);\n        }\n    }\n    else\n\
    \    {\n        result = to!long(d);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7pfb9tn3.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp7pfb9tn3.d(22): Error: template instance `to!double` template `to` is
    not defined, did you mean No?

    /tmp/tmp7pfb9tn3.d(28): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmp7pfb9tn3.d(32): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmp7pfb9tn3.d(37): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pfb9tn3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpepavz_6w.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpepavz_6w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double intpart = 0;\n    double fractpart = modf(d,\
    \ &intpart);\n    if (fractpart == 0.5)\n    {\n        if (d > 0)\n        {\n\
    \            result = cast(long)intpart + 1;\n        }\n        else\n      \
    \  {\n            result = cast(long)intpart - 1;\n        }\n    }\n    else\n\
    \    {\n        result = cast(long)d;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cy8zint.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp7cy8zint.d(23): Error: function `std.math.modf(real x, ref real i)` is
    not callable using argument types `(double, double*)`

    /tmp/tmp7cy8zint.d(23):        cannot pass rvalue argument `& intpart` of type
    `double*` to parameter `ref real i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cy8zint.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long) ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long) floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp761chtd6.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp761chtd6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1nc95qk.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1nc95qk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3ek_z4q.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3ek_z4q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) (d > 0 ? ceil(d) : floor(d));\n}\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp41p9nlx5.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41p9nlx5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long) (d\
    \ - 0.5);\n    }\n    else\n    {\n        result = cast(long) (d + 0.5);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiuptb23v.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiuptb23v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghlytud4.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghlytud4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto x = to!double(value);\n\
    \    return cast(long)round(x);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl4298l7j.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl4298l7j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7p0sgw.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7p0sgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164569
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    // TODO: Implement me\n\
    \    return 0;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n   \
    \ assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0j6z22_0.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmp0j6z22_0.__unittest_L23_C1() [0x427a36]

    ??:? void tmp0j6z22_0.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ number = to!long(value);\n    long fraction = to!long(value.split(\".\")[1]);\n\
    \    if (fraction >= 50)\n    {\n        result = number + 1;\n    }\n    else\n\
    \    {\n        result = number;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ftxq32d.d(21): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    /tmp/tmp6ftxq32d.d(22): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ftxq32d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double intpart = 0;\n    double fractpart = modf(d,\
    \ &intpart);\n    if (fractpart == 0.5)\n    {\n        if (intpart > 0)\n   \
    \     {\n            result = cast(long)intpart + 1;\n        }\n        else\n\
    \        {\n            result = cast(long)intpart - 1;\n        }\n    }\n  \
    \  else\n    {\n        result = cast(long)intpart;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprbvdp_cx.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmprbvdp_cx.d(23): Error: function `std.math.modf(real x, ref real i)` is
    not callable using argument types `(double, double*)`

    /tmp/tmprbvdp_cx.d(23):        cannot pass rvalue argument `& intpart` of type
    `double*` to parameter `ref real i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprbvdp_cx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    return cast(long) round(num);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwknmc7yn.d(20): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwknmc7yn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long) ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long) floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qdmzooi.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qdmzooi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f < c - d)\n        result = cast(long)f;\n    else\n        result\
    \ = cast(long)c;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2np_ivm.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2np_ivm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!long(d));\n    double\
    \ d_frac = d - d_int;\n    if (d_frac < 0.5)\n        result = to!long(d_int);\n\
    \    else\n        result = to!long(d_int + 1);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph42sbf_v.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmph42sbf_v.d(22): Error: template instance `to!double` template `to` is
    not defined, did you mean No?

    /tmp/tmph42sbf_v.d(25): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmph42sbf_v.d(27): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph42sbf_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_abs = abs(d);\n    double d_floor = floor(d_abs);\n\
    \    double d_ceil = ceil(d_abs);\n    double d_diff_floor = d_abs - d_floor;\n\
    \    double d_diff_ceil = d_ceil - d_abs;\n    if (d_diff_floor < d_diff_ceil)\n\
    \    {\n        result = cast(long)d_floor;\n    }\n    else if (d_diff_floor\
    \ > d_diff_ceil)\n    {\n        result = cast(long)d_ceil;\n    }\n    else\n\
    \    {\n        result = cast(long)d_ceil;\n    }\n    if (d < 0)\n    {\n   \
    \     result = -result;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8dnkw6oo.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dnkw6oo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   double d1 = abs(d - f);\n    double d2 = abs(d - c);\n    if (d1 == d2)\n\
    \    {\n        result = (d < 0) ? f : c;\n    }\n    else\n    {\n        result\
    \ = (d1 < d2) ? f : c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpng4y6tna.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmpng4y6tna.d(28): Error: cannot implicitly convert expression `d < 0.00000
    ? f : c` of type `double` to `long`

    /tmp/tmpng4y6tna.d(32): Error: cannot implicitly convert expression `d1 < d2 ?
    f : c` of type `double` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpng4y6tna.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f == 0.5)\n    {\n        result = (d > 0) ? c : f;\n    }\n    else\n\
    \    {\n        result = (d - f < c - d) ? f : c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s00xdzh.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    /tmp/tmp3s00xdzh.d(26): Error: cannot implicitly convert expression `d > 0.00000
    ? c : f` of type `double` to `long`

    /tmp/tmp3s00xdzh.d(30): Error: cannot implicitly convert expression `d - f < c
    - d ? f : c` of type `double` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s00xdzh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long) d;\n\
    \        if(d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long) d;\n        if(d - result < -0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ktm6o2y.d(21): Error: template instance `to!double` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ktm6o2y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
    \ that if the given number is equidistant\n    from two integers, the one you\
    \ should return is the one that is the\n    farthest from zero. For example closest_integer(\"\
    14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = 0.0;\n    double fractional = 0.0;\n    double integral = 0.0;\n    double\
    \ fractional_abs = 0.0;\n    double integral_abs = 0.0;\n    double fractional_abs_ceil\
    \ = 0.0;\n    double integral_abs_ceil = 0.0;\n    double fractional_abs_floor\
    \ = 0.0;\n    double integral_abs_floor = 0.0;\n    double fractional_abs_ceil_abs\
    \ = 0.0;\n    double integral_abs_ceil_abs = 0.0;\n    double fractional_abs_floor_abs\
    \ = 0.0;\n    double integral_abs_floor_abs = 0.0;\n    double fractional_abs_ceil_abs_diff\
    \ = 0.0;\n    double integral_abs_ceil_abs_diff = 0.0;\n    double fractional_abs_floor_abs_diff\
    \ = 0.0;\n    double integral_abs_floor_abs_diff = 0.0;\n    double fractional_abs_ceil_abs_diff_abs\
    \ = 0.0;\n    double integral_abs_ceil_abs_diff_abs = 0.0;\n    double fractional_abs_floor_abs_diff_abs\
    \ = 0.0;\n    double integral_abs_floor_abs_diff_abs = 0.0;\n    double fractional_abs_ceil_abs_diff_abs_min\
    \ = 0.0;\n    double integral_abs_ceil_abs_diff_abs_min = 0.0;\n    double fractional_abs_floor_abs_diff_abs_min\
    \ = 0.0;\n    double integral_abs_floor_abs_diff_abs_min = 0.0;\n    double fractional_abs_ceil_abs_diff_abs_min_abs\
    \ = 0.0;\n    double integral_abs_ceil_abs_diff_abs_min_abs = 0.0;\n    double\
    \ fractional_abs_floor_abs_diff_abs_min_abs = 0.0;\n    double integral_abs_floor_abs_diff_abs_min_abs\
    \ =\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpceybnoyj.d(50): Error: expression expected, not `unittest`

    /tmp/tmpceybnoyj.d(51): Error: semicolon expected, not `{`

    /tmp/tmpceybnoyj.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpceybnoyj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
