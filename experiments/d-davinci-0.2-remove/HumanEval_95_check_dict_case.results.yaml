language: d
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) \n\
    \    {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            all_lower = false;\n        } \n        else if (key.isLower)\
    \ \n        {\n            all_upper = false;\n        } \n        else \n   \
    \     {\n            return false;\n        }\n    }\n    return all_lower ||\
    \ all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp72xnw5u1.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp72xnw5u1.d(25): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72xnw5u1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9jpkwlye.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp9jpkwlye.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9jpkwlye.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ upper = false;\n        if(key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1_ic9xzq.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp1_ic9xzq.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_ic9xzq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    bool isLower = true;\n    bool isUpper = true;\n \
    \   foreach(key; dict.keys)\n    {\n        isLower = isLower && key.isLower;\n\
    \        isUpper = isUpper && key.isUpper;\n    }\n    return isLower || isUpper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeyeuxfnf.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpeyeuxfnf.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeyeuxfnf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ all_lower = false;\n        if(key.isLower) all_upper = false;\n    }\n    return\
    \ all_lower || all_upper;\n}\n/*\n    Given a dictionary, return True if all keys\
    \ are strings in lower \n    case or all keys are strings in upper case, else\
    \ return False.\n    The function should return False is the given dictionary\
    \ is empty.\n    Examples:\n                        \n*/\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2g1qh_v.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpg2g1qh_v.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2g1qh_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_lower = is_lower && key.isLower;\n        is_upper = is_upper\
    \ && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovxcupou.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpovxcupou.d(22): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovxcupou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7a8rssj2.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp7a8rssj2.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7a8rssj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\n            all_lower\
    \ = false;\n        else if(key.isLower)\n            all_upper = false;\n   \
    \     else\n            return false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgalegxiy.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpgalegxiy.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgalegxiy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n            lower = false;\n\
    \        if (key.isLower)\n            upper = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkfkl544k.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpkfkl544k.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfkl544k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach(key; dict.keys)\n    {\n        is_lower &= key.isLower;\n      \
    \  is_upper &= key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp108cg_bf.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp108cg_bf.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp108cg_bf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcdji3ogs.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpcdji3ogs.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdji3ogs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = false;\n    bool upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower)\n            lower = true;\n        if (key.isUpper)\n\
    \            upper = true;\n    }\n    return lower ^ upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6etiopk.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpt6etiopk.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6etiopk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_upper = true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_upper = is_upper && key.isUpper;\n        is_lower = is_lower\
    \ && key.isLower;\n    }\n    return is_upper || is_lower;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8tmzvt0u.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8tmzvt0u.d(22): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tmzvt0u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_upper = true;\n    bool all_lower = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        else\n\
    \            all_upper = false;\n    }\n    return all_upper || all_lower;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzd2__kjk.d(21): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzd2__kjk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isLower)\n            upper = false;\n        else if (key.isUpper)\n\
    \            lower = false;\n        else\n            return false;\n    }\n\
    \    return lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpse62wg8p.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpse62wg8p.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpse62wg8p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7a8rssj2.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp7a8rssj2.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7a8rssj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    \n    if (dict.length == 0)\n        return false;\n\
    \    \n    bool all_lower = true;\n    bool all_upper = true;\n    \n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n            all_lower = false;\n\
    \        else\n            all_upper = false;\n    }\n    \n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnbvg3l9f.d(24): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnbvg3l9f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool isLower = true;\n    bool isUpper = true;\n \
    \   foreach (key; dict.keys)\n    {\n        isLower = isLower && key.isLower;\n\
    \        isUpper = isUpper && key.isUpper;\n    }\n    return isLower || isUpper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wd02rjs.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp8wd02rjs.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wd02rjs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool lower = true;\n  \
    \  bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ upper = false;\n        if (key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5ffetbi.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpu5ffetbi.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5ffetbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7a8rssj2.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp7a8rssj2.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7a8rssj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_upper = true;\n        if (key.isLower)\n\
    \            is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp25mvg8v.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpp25mvg8v.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp25mvg8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxs4u09m.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpmxs4u09m.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxs4u09m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach(key; dict.keys)\n    {\n        if(key.isLower)\
    \ is_lower = true;\n        if(key.isUpper) is_upper = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\n/*\n    Given a dictionary, return True if all keys\
    \ are strings in lower \n    case or all keys are strings in upper case, else\
    \ return False.\n    The function should return False is the given dictionary\
    \ is empty.\n    Examples:\n                        \n*/\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp53hbv10y.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp53hbv10y.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp53hbv10y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ false;\n    if (dict.isEmpty) return false;\n    bool all_lower = true;\n  \
    \  bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \        {\n            all_lower = false;\n        }\n        else\n        {\n\
    \            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdteh27ir.d(14): Error: no property `isEmpty` for type `Nullable!(string[string])`

    /tmp/tmpdteh27ir.d(19): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdteh27ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_lower = is_lower && key.isLower;\n        is_upper = is_upper\
    \ && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovxcupou.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpovxcupou.d(22): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovxcupou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isLower)\
    \ is_lower = true;\n        if (key.isUpper) is_upper = true;\n    }\n    return\
    \ is_lower != is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp995pq9oj.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp995pq9oj.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp995pq9oj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach(key, value; dict)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9_bzhjv9.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp9_bzhjv9.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_bzhjv9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool isUpper = false;\n\
    \    bool isLower = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ isUpper = true;\n        if (key.isLower) isLower = true;\n    }\n    return\
    \ isUpper ^ isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9ifwup4.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmps9ifwup4.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9ifwup4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_upper = true;\n        if (key.isLower) is_lower = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpobf8b11w.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpobf8b11w.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobf8b11w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n            lower = false;\n\
    \        if (key.isLower)\n            upper = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkfkl544k.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpkfkl544k.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfkl544k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    foreach (key; dict.get.keys)\n    {\n        if (key.isUpper)\n         \
    \   is_upper = true;\n        else if (key.isLower)\n            is_lower = true;\n\
    \        else\n            return false;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi08qbriu.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpi08qbriu.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi08qbriu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_upper = true;\n        if (key.isLower) is_lower = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpobf8b11w.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpobf8b11w.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobf8b11w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        is_lower &= key.isLower;\n        is_upper &= key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpafzcvttj.d(18): Error: no property `isLower` for type `string`

    /tmp/tmpafzcvttj.d(19): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpafzcvttj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    if(dict.length == 0)\n        return false;\n    bool\
    \ lower = true;\n    bool upper = true;\n    foreach(key; dict.keys)\n    {\n\
    \        if(!isLower(key))\n            lower = false;\n        if(!isUpper(key))\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgtpl6qz.d(21): Error: undefined identifier `isLower`

    /tmp/tmpzgtpl6qz.d(23): Error: undefined identifier `isUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgtpl6qz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_f7dca3w.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp_f7dca3w.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_f7dca3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b_s59z5.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp3b_s59z5.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b_s59z5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcdji3ogs.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpcdji3ogs.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdji3ogs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b_s59z5.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp3b_s59z5.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b_s59z5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b_s59z5.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp3b_s59z5.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b_s59z5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\n\
    \        {\n            lower = false;\n        }\n        else\n        {\n \
    \           upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_5baome.d(19): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_5baome.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        all_lower = all_lower && key.isLower;\n\
    \        all_upper = all_upper && key.isUpper;\n    }\n    return all_lower ||\
    \ all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpac07hnmc.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpac07hnmc.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpac07hnmc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = false;\n    foreach (k, v; dict)\n\
    \    {\n        if (is_lower)\n        {\n            if (k != toLower(k))\n \
    \               return false;\n        }\n        else\n        {\n          \
    \  if (k != toUpper(k))\n                return false;\n            is_lower =\
    \ true;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9y7welp.d(20): Error: undefined identifier `toLower`

    /tmp/tmpn9y7welp.d(25): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9y7welp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(!isLower(key))\
    \ is_lower = false;\n        if(!isUpper(key)) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghrlaly5.d(19): Error: undefined identifier `isLower`, did you
    mean variable `is_lower`?

    /tmp/tmpghrlaly5.d(20): Error: undefined identifier `isUpper`, did you mean variable
    `is_upper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghrlaly5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7a8rssj2.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp7a8rssj2.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7a8rssj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool lower = true;\n  \
    \  bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ upper = false;\n        if (key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5ffetbi.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpu5ffetbi.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5ffetbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ upper = false;\n        if(key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1_ic9xzq.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp1_ic9xzq.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_ic9xzq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\n\
    \        {\n            all_lower = false;\n        }\n        else\n        {\n\
    \            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6q6f_0e.d(19): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6q6f_0e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool isLower = false;\n\
    \    bool isUpper = false;\n    foreach (k, v; dict)\n    {\n        if (k.isLower)\
    \ isLower = true;\n        if (k.isUpper) isUpper = true;\n    }\n    return isLower\
    \ ^ isUpper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps2njmmxx.d(19): Error: no property `isLower` for type `string`

    /tmp/tmps2njmmxx.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps2njmmxx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = false;\n    bool upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower)\n            lower = true;\n        if (key.isUpper)\n\
    \            upper = true;\n    }\n    return lower ^ upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6etiopk.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpt6etiopk.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6etiopk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcdji3ogs.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpcdji3ogs.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdji3ogs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool lower = false;\n \
    \   bool upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isLower)\
    \ lower = true;\n        if (key.isUpper) upper = true;\n    }\n    return lower\
    \ ^ upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgcujils5.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpgcujils5.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgcujils5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = false;\n    bool upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower)\n            lower = true;\n        if (key.isUpper)\n\
    \            upper = true;\n    }\n    return lower ^ upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6etiopk.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpt6etiopk.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6etiopk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (k, v; dict)\n    {\n        is_lower\
    \ &= k.isLower;\n        is_upper &= k.isUpper;\n    }\n    return is_lower ||\
    \ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjfs64wq_.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpjfs64wq_.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfs64wq_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_upper = true;\n    bool is_lower = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_upper = is_upper && (key == to!string(key.toUpper));\n\
    \        is_lower = is_lower && (key == to!string(key.toLower));\n    }\n    return\
    \ is_upper || is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw6sebbl6.d(19): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpw6sebbl6.d(20): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6sebbl6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b_s59z5.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp3b_s59z5.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b_s59z5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b_s59z5.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp3b_s59z5.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b_s59z5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        all_lower = all_lower && key.isLower;\n        all_upper = all_upper\
    \ && key.isUpper;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyue8tfif.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpyue8tfif.d(22): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyue8tfif.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_upper = true;\n    bool is_lower = true;\n\
    \    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n            is_lower\
    \ = false;\n        else if (key.isLower)\n            is_upper = false;\n   \
    \     else\n            return false;\n    }\n    return is_upper || is_lower;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvoykyn7j.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpvoykyn7j.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvoykyn7j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b_s59z5.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp3b_s59z5.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b_s59z5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb4hnnfzu.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpb4hnnfzu.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4hnnfzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    if(dict.length == 0)\n        return false;\n    bool\
    \ lower = false;\n    bool upper = false;\n    foreach(key; dict.keys)\n    {\n\
    \        if(key.isLower)\n            lower = true;\n        if(key.isUpper)\n\
    \            upper = true;\n    }\n    return lower ^ upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkeqnqlj8.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpkeqnqlj8.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkeqnqlj8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (k, v; dict)\n    {\n        is_lower\
    \ &= k.isLower;\n        is_upper &= k.isUpper;\n    }\n    return is_lower ||\
    \ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjfs64wq_.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpjfs64wq_.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfs64wq_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = false;\n    bool upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower)\n            lower = true;\n        if (key.isUpper)\n\
    \            upper = true;\n    }\n    return lower ^ upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6etiopk.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpt6etiopk.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6etiopk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    foreach (k,\
    \ v; dict)\n    {\n        is_lower &= k.isLower;\n        is_upper &= k.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwy7zu59i.d(18): Error: no property `isLower` for type `string`

    /tmp/tmpwy7zu59i.d(19): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwy7zu59i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ false;\n    auto keys = dict.get.keys;\n    if (keys.length == 0) return false;\n\
    \    auto first = keys[0];\n    if (first.isUpper)\n    {\n        foreach (key;\
    \ keys)\n        {\n            if (key.isLower) return false;\n        }\n  \
    \  }\n    else if (first.isLower)\n    {\n        foreach (key; keys)\n      \
    \  {\n            if (key.isUpper) return false;\n        }\n    }\n    else\n\
    \    {\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68quzfxy.d(17): Error: no property `isUpper` for type `string`

    /tmp/tmp68quzfxy.d(21): Error: no property `isLower` for type `string`

    /tmp/tmp68quzfxy.d(24): Error: no property `isLower` for type `string`

    /tmp/tmp68quzfxy.d(28): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68quzfxy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_f7dca3w.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp_f7dca3w.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_f7dca3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \        {\n            all_lower = false;\n        }\n        else\n        {\n\
    \            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8utvibkn.d(19): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8utvibkn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && (key == toLower(key));\n\
    \        is_upper = is_upper && (key == toUpper(key));\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9t13p7mn.d(19): Error: undefined identifier `toLower`

    /tmp/tmp9t13p7mn.d(20): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9t13p7mn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        lower = lower && key.isLower;\n        upper\
    \ = upper && key.isUpper;\n    }\n    return lower || upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbg3ckctb.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpbg3ckctb.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbg3ckctb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (!key.isLower)\
    \ all_lower = false;\n        if (!key.isUpper) all_upper = false;\n    }\n  \
    \  return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdm2app2z.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpdm2app2z.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdm2app2z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    if(dict.length == 0)\n        return false;\n    bool\
    \ all_lower = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(!isLower(key))\n            all_lower = false;\n        if(!isUpper(key))\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt2rztrqy.d(21): Error: undefined identifier `isLower`

    /tmp/tmpt2rztrqy.d(23): Error: undefined identifier `isUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2rztrqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    if(dict.length == 0)\n        return false;\n    bool\
    \ lower = true;\n    bool upper = true;\n    foreach(key; dict.keys)\n    {\n\
    \        if(!key.isLower)\n            lower = false;\n        if(!key.isUpper)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpca2lef68.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpca2lef68.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpca2lef68.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n    {\n\
    \        if (key.isLower != is_lower)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsm01obyd.d(17): Error: no property `isLower` for type `string`

    /tmp/tmpsm01obyd.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsm01obyd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n            lower = false;\n\
    \        if (key.isLower)\n            upper = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkfkl544k.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpkfkl544k.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfkl544k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool lower = true;\n  \
    \  bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (!key.isLower)\
    \ lower = false;\n        if (!key.isUpper) upper = false;\n    }\n    return\
    \ lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuyxxh8t2.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpuyxxh8t2.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyxxh8t2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_lower = is_lower && key.isLower;\n        is_upper = is_upper\
    \ && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovxcupou.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpovxcupou.d(22): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovxcupou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    bool isUpper = true;\n    bool isLower = true;\n    foreach (key;\
    \ dict.keys)\n    {\n        isUpper = isUpper && key.isUpper;\n        isLower\
    \ = isLower && key.isLower;\n    }\n    return isUpper || isLower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvbkphwo_.d(18): Error: no property `isUpper` for type `string`

    /tmp/tmpvbkphwo_.d(19): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvbkphwo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7a8rssj2.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp7a8rssj2.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7a8rssj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) \n\
    \    {\n        return false;\n    }\n    else if (dict.length == 0) \n    {\n\
    \        return false;\n    }\n    else \n    {\n        bool lower = true;\n\
    \        bool upper = true;\n        foreach (key; dict.keys) \n        {\n  \
    \          if (key.isUpper) \n            {\n                lower = false;\n\
    \            }\n            else if (key.isLower) \n            {\n          \
    \      upper = false;\n            }\n            else \n            {\n     \
    \           return false;\n            }\n        }\n        return lower || upper;\n\
    \    }\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo6uj86gu.d(27): Error: no property `isUpper` for type `string`

    /tmp/tmpo6uj86gu.d(31): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6uj86gu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7a8rssj2.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp7a8rssj2.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7a8rssj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isLower)\
    \ is_lower = true;\n        if (key.isUpper) is_upper = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiwh5ac5i.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpiwh5ac5i.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwh5ac5i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool lower = true;\n  \
    \  bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ upper = false;\n        if (key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5ffetbi.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpu5ffetbi.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5ffetbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    foreach\
    \ (key; dict.get.keys)\n    {\n        if (key.isUpper)\n            lower = false;\n\
    \        else if (key.isLower)\n            upper = false;\n        else\n   \
    \         return false;\n    }\n    return lower || upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bc3xurz.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp8bc3xurz.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bc3xurz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool lower = true;\n  \
    \  bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ upper = false;\n        if (key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5ffetbi.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpu5ffetbi.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5ffetbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_lower = false;\n        if(key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptpven5r1.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmptpven5r1.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpven5r1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_lower = is_lower && key.isLower;\n        is_upper = is_upper\
    \ && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovxcupou.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpovxcupou.d(22): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovxcupou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ all_lower = false;\n        if(key.isLower) all_upper = false;\n    }\n    return\
    \ all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswcdjn2.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpbswcdjn2.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswcdjn2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\
    \ is_upper = true;\n        if (k.isLower) is_lower = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbycxat8a.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpbycxat8a.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbycxat8a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && (key == toLower(key));\n        is_upper = is_upper && (key ==\
    \ toUpper(key));\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n  \
    \  alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgt7t26_l.d(19): Error: undefined identifier `toLower`

    /tmp/tmpgt7t26_l.d(20): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgt7t26_l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (k, v; dict)\n\
    \    {\n        if (k.isUpper)\n            all_lower = false;\n        if (k.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdr970sy.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpxdr970sy.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdr970sy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_lower = is_lower && key.isLower;\n        is_upper = is_upper\
    \ && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovxcupou.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpovxcupou.d(22): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovxcupou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool lower = true;\n   \
    \ bool upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ upper = false;\n        if(key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1_ic9xzq.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp1_ic9xzq.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_ic9xzq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_lower = false;\n        if(key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptpven5r1.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmptpven5r1.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpven5r1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcdji3ogs.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpcdji3ogs.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdji3ogs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (!isLower(key))\n            lower = false;\n\
    \        if (!isUpper(key))\n            upper = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8feym5n0.d(19): Error: undefined identifier `isLower`

    /tmp/tmp8feym5n0.d(21): Error: undefined identifier `isUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8feym5n0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_upper = true;\n        if (key.isLower)\n\
    \            is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp25mvg8v.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpp25mvg8v.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp25mvg8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) \n\
    \    {\n        return false;\n    }\n    if (dict.length == 0) \n    {\n    \
    \    return false;\n    }\n    bool lower = true;\n    bool upper = true;\n  \
    \  foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n        {\n  \
    \          lower = false;\n        }\n        if (key.isLower) \n        {\n \
    \           upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc0exswn6.d(25): Error: no property `isUpper` for type `string`

    /tmp/tmpc0exswn6.d(29): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0exswn6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_upper = true;\n        if(key.isLower) is_lower = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq6uevmr6.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpq6uevmr6.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq6uevmr6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7a8rssj2.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp7a8rssj2.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7a8rssj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_lower = is_lower && key.isLower;\n        is_upper = is_upper\
    \ && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovxcupou.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpovxcupou.d(22): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovxcupou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1uc_armg.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp1uc_armg.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1uc_armg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool lower = true;\n  \
    \  bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ upper = false;\n        if (key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5ffetbi.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpu5ffetbi.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5ffetbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) \n\
    \    {\n        return false;\n    }\n    else \n    {\n        bool all_lower\
    \ = true;\n        bool all_upper = true;\n        foreach (key; dict.keys) \n\
    \        {\n            if (key.isUpper) \n            {\n                all_lower\
    \ = false;\n            }\n            else if (key.isLower) \n            {\n\
    \                all_upper = false;\n            }\n            else \n      \
    \      {\n                return false;\n            }\n        }\n        return\
    \ all_lower || all_upper;\n    }\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp14lrjaiz.d(23): Error: no property `isUpper` for type `string`

    /tmp/tmp14lrjaiz.d(27): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp14lrjaiz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    if(dict.length == 0)\n        return false;\n    bool\
    \ is_upper = dict.keys[0].isUpper;\n    foreach(key; dict.keys)\n    {\n     \
    \   if(key.isUpper != is_upper)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc9_pc0ns.d(17): Error: no property `isUpper` for type `string`

    /tmp/tmpc9_pc0ns.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc9_pc0ns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\
    \ is_lower = false;\n        if(key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptpven5r1.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmptpven5r1.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpven5r1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    foreach (k, v; dict)\n\
    \    {\n        if (k.isLower)\n            is_lower = true;\n        if (k.isUpper)\n\
    \            is_upper = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnyn9gysp.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpnyn9gysp.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnyn9gysp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_lower = false;\n        if (key.isLower) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb4hnnfzu.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpb4hnnfzu.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4hnnfzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) \n\
    \    {\n        return false;\n    }\n    bool lower = true;\n    bool upper =\
    \ true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n   \
    \     {\n            lower = false;\n        }\n        else if (key.isLower)\
    \ \n        {\n            upper = false;\n        }\n        else \n        {\n\
    \            return false;\n        }\n    }\n    return lower || upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmnkivjjj.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpmnkivjjj.d(25): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnkivjjj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool isUpper = false;\n    bool isLower = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            isUpper = true;\n        if (key.isLower)\n\
    \            isLower = true;\n    }\n    return isUpper ^ isLower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe60n4fv8.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpe60n4fv8.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe60n4fv8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    foreach\
    \ (key; dict.keys) \n    {\n        lower = lower && key.isLower;\n        upper\
    \ = upper && key.isUpper;\n    }\n    return lower || upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ntpielv.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp1ntpielv.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ntpielv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    foreach(key;\
    \ dict.keys)\n    {\n        if(key.isUpper)\n            lower = false;\n   \
    \     if(key.isLower)\n            upper = false;\n    }\n    return lower ||\
    \ upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ok7wd99.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp6ok7wd99.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ok7wd99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_upper = true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_upper || is_lower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8_94iuqn.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8_94iuqn.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_94iuqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict.isNull)\n \
    \       return false;\n    bool isUpper = true;\n    bool isLower = true;\n  \
    \  foreach(key; dict.get.keys)\n    {\n        isUpper = isUpper && key.isUpper;\n\
    \        isLower = isLower && key.isLower;\n    }\n    return isUpper || isLower;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zenlc1u.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp6zenlc1u.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zenlc1u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_upper = false;\n\
    \    bool is_lower = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_upper = true;\n        if (key.isLower) is_lower = true;\n    }\n    return\
    \ is_upper ^ is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2uhmj5g0.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp2uhmj5g0.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2uhmj5g0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_upper = true;\n\
    \    bool is_lower = true;\n    foreach(k, v; dict)\n    {\n        is_upper =\
    \ is_upper && (k == k.toUpper);\n        is_lower = is_lower && (k == k.toLower);\n\
    \    }\n    return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2wvvvqe.d(19): Error: no property `toUpper` for type `string`

    /tmp/tmpn2wvvvqe.d(20): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2wvvvqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1uc_armg.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp1uc_armg.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1uc_armg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1uc_armg.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp1uc_armg.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1uc_armg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \        {\n            all_lower = false;\n        }\n        else\n        {\n\
    \            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8utvibkn.d(19): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8utvibkn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    if(dict.length == 0)\n        return false;\n    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isLower)\n            is_lower = true;\n        if(key.isUpper)\n\
    \            is_upper = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpispu68rh.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpispu68rh.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpispu68rh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n\
    \        {\n            all_lower = false;\n        }\n        else\n        {\n\
    \            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8utvibkn.d(19): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8utvibkn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null) return\
    \ false;\n    if(dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n        if(!isLower(key))\
    \ is_lower = false;\n        if(!isUpper(key)) is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghrlaly5.d(19): Error: undefined identifier `isLower`, did you
    mean variable `is_lower`?

    /tmp/tmpghrlaly5.d(20): Error: undefined identifier `isUpper`, did you mean variable
    `is_upper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghrlaly5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\n            all_lower\
    \ = false;\n        else\n            all_upper = false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp302602ge.d(19): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp302602ge.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_upper = true;\n        if (key.isLower) is_lower = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpobf8b11w.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpobf8b11w.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobf8b11w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_upper = true;\n        if (key.isLower)\n\
    \            is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp25mvg8v.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpp25mvg8v.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp25mvg8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool lower = true;\n  \
    \  bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (lower\
    \ && !isLower(key)) lower = false;\n        if (upper && !isUpper(key)) upper\
    \ = false;\n    }\n    return lower || upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi9lb70q3.d(19): Error: undefined identifier `isLower`

    /tmp/tmpi9lb70q3.d(20): Error: undefined identifier `isUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9lb70q3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) is_upper = true;\n        if (key.isLower) is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjiedyfqw.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpjiedyfqw.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjiedyfqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    if(dict.length == 0)\n        return false;\n    bool\
    \ lower = true;\n    bool upper = true;\n    foreach(key; dict.keys)\n    {\n\
    \        if(key.isUpper)\n            lower = false;\n        if(key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\n/*\n    Given\
    \ a dictionary, return a new dictionary with the same keys but \n    with the\
    \ values multiplied by 2.\n    Examples:\n*/\nNullable!(string[string]) dict_multiply(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return null;\n    Nullable!(string[string])\
    \ result = new Nullable!(string[string]);\n    foreach(key; dict.keys)\n    {\n\
    \        result[key] = dict[key] * 2;\n    }\n    return result;\n}\n/*\n    Given\
    \ a dictionary, return a new dictionary with the same keys but \n    with the\
    \ values multiplied by 2.\n    Examples:\n*/\nNullable!(string[string]) dict_multiply(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return null;\n    Nullable!(string[string])\
    \ result = new Nullable!(string[string]);\n    foreach(key; dict.keys)\n    {\n\
    \        result[key] = dict[key] * 2;\n    }\n    return result;\n}\n/*\n    Given\
    \ a dictionary, return a new dictionary with the same keys but \n    with the\
    \ values multiplied by 2.\n    Examples:\n*/\nNullable!(string[string]) dict_multiply(Nullable!(string[string])\
    \ dict) \n{\n    if(dict is null)\n        return null;\n    Nullable!(string[string])\
    \ result = new Nullable!(string[string]);\n    foreach(key; dict.keys)\n    {\n\
    \        result[key] = dict[key] * 2;\n    }\n    return result;\n}\n/*\n    Given\
    \ a dictionary, return a new dictionary\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79s40jkm.d(76): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79s40jkm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\n/*\n    Given a list of strings, return a list of strings with the same \n\
    \    length as the given list, but with the strings in reverse order.\n    Examples:\n\
    */\nstring[] reverse_list(string[] list)\n{\n    string[] result = new string[list.length];\n\
    \    foreach (i, s; list)\n        result[list.length - i - 1] = s;\n    return\
    \ result;\n}\n/*\n    Given a list of strings, return a list of strings with the\
    \ same \n    length as the given list, but with the strings in reverse order.\n\
    \    Examples:\n*/\nstring[] reverse_list(string[] list)\n{\n    string[] result\
    \ = new string[list.length];\n    foreach (i, s; list)\n        result[list.length\
    \ - i - 1] = s;\n    return result;\n}\n/*\n    Given a list of strings, return\
    \ a list of strings with the same \n    length as the given list, but with the\
    \ strings in reverse order.\n    Examples:\n*/\nstring[] reverse_list(string[]\
    \ list)\n{\n    string[] result = new string[list.length];\n    foreach (i, s;\
    \ list)\n        result[list.length - i - 1] = s;\n    return result;\n}\n/*\n\
    \    Given a list of strings, return a list of strings with the same \n    length\
    \ as the given list, but with the strings in reverse order.\n    Examples:\n*/\n\
    string[] reverse_list(string[] list)\n{\n    string[] result = new string[list.length];\n\
    \    foreach (i, s; list)\n        result[list.length - i - 1] = s;\n    return\
    \ result;\n}\n/*\n    Given a list of strings, return a list of strings with the\
    \ same\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5hky2g1.d(72): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5hky2g1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.length == 0)\n            return false;\n        if (key[0].isUpper)\n\
    \            all_lower = false;\n        if (key[0].isLower)\n            all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppxb0a574.d(23): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmppxb0a574.d(25): Error: no property `isLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxb0a574.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uuoisy4.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmp8uuoisy4.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uuoisy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    if(dict.length == 0)\n        return false;\n    bool\
    \ all_upper = true;\n    bool all_lower = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            all_lower = false;\n        else\n\
    \            all_upper = false;\n    }\n    return all_upper || all_lower;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfefhgkyq.d(21): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfefhgkyq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_f7dca3w.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp_f7dca3w.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_f7dca3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (k, v; dict) {\n        if (k.isUpper)\
    \ all_lower = false;\n        if (k.isLower) all_upper = false;\n    }\n    return\
    \ all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37o_8dat.d(18): Error: no property `isUpper` for type `string`

    /tmp/tmp37o_8dat.d(19): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37o_8dat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxs4u09m.d(19): Error: no property `isLower` for type `string`

    /tmp/tmpmxs4u09m.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxs4u09m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool isUpper = true;\n    bool isLower = true;\n \
    \   foreach (key; dict.keys)\n    {\n        isUpper = isUpper && key.isUpper;\n\
    \        isLower = isLower && key.isLower;\n    }\n    return isUpper || isLower;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpblfp78zu.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpblfp78zu.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpblfp78zu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b_s59z5.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp3b_s59z5.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b_s59z5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3b_s59z5.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp3b_s59z5.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b_s59z5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (k, v; dict)\n    {\n\
    \        if (k.isUpper)\n            lower = false;\n        if (k.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_hqbdsc.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpq_hqbdsc.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_hqbdsc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = false;\n    bool upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower)\n            lower = true;\n        if (key.isUpper)\n\
    \            upper = true;\n    }\n    return lower ^ upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6etiopk.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpt6etiopk.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6etiopk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\n\
    \        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach (key; dict.get.keys)\n    {\n        if (key.isUpper)\n         \
    \   all_lower = false;\n        else if (key.isLower)\n            all_upper =\
    \ false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsa8xye04.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpsa8xye04.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa8xye04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool all_upper = true;\n    bool all_lower = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        else\n\
    \            all_upper = false;\n    }\n    return all_upper || all_lower;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzd2__kjk.d(21): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzd2__kjk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ is_upper = true;\n        if (key.isLower) is_lower = true;\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpobf8b11w.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpobf8b11w.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobf8b11w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\
    \ all_lower = false;\n        if (k.isLower) all_upper = false;\n    }\n    return\
    \ all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_4mlgkc6.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp_4mlgkc6.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4mlgkc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcdji3ogs.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpcdji3ogs.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdji3ogs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool lower = true;\n  \
    \  bool upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ upper = false;\n        if (key.isLower) lower = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5ffetbi.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpu5ffetbi.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5ffetbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower)\n            is_lower = true;\n        if (key.isUpper)\n\
    \            is_upper = true;\n    }\n    return is_lower != is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6qhgo85.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpi6qhgo85.d(23): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6qhgo85.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n        if (k.isUpper)\
    \ all_lower = false;\n        if (k.isLower) all_upper = false;\n    }\n    return\
    \ all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_4mlgkc6.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp_4mlgkc6.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4mlgkc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    bool lower = true;\n    bool upper = true;\n    foreach (k,v; dict)\n\
    \    {\n        lower = lower && isLower(k);\n        upper = upper && isUpper(k);\n\
    \    }\n    return lower || upper;\n}\n/*\n    Given a dictionary, return True\
    \ if all keys are strings in lower \n    case or all keys are strings in upper\
    \ case, else return False.\n    The function should return False is the given\
    \ dictionary is empty.\n    Examples:\n                        \n*/\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzt7mkkhy.d(18): Error: undefined identifier `isLower`

    /tmp/tmpzt7mkkhy.d(19): Error: undefined identifier `isUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzt7mkkhy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n        is_lower\
    \ = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n  \
    \  }\n    return is_lower || is_upper;\n}\n/*\n    Given a dictionary, return\
    \ a new dictionary with all keys in lower \n    case or all keys in upper case.\n\
    \    The function should return an empty dictionary if the given dictionary \n\
    \    is empty.\n    Examples:\n*/\nNullable!(string[string]) change_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return null;\n    if (dict.length == 0) return\
    \ new string[string]();\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    if (is_lower) return\
    \ dict;\n    if (is_upper) return dict;\n    auto result = new string[string]();\n\
    \    foreach (key; dict.keys)\n    {\n        result[key.toLower] = dict[key];\n\
    \    }\n    return result;\n}\n/*\n    Given a dictionary, return a new dictionary\
    \ with all keys in lower \n    case or all keys in upper case.\n    The function\
    \ should return an empty dictionary if the given dictionary \n    is empty.\n\
    \    Examples:\n*/\nNullable!(string[string]) change_dict_case2(Nullable!(string[string])\
    \ dict) \n{\n    if (dict is null) return null;\n    if (dict.length == 0) return\
    \ new string[string]();\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxd23zavg.d(68): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpxd23zavg.d(80): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpxd23zavg.d(80): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxd23zavg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    if (dict.length == 0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n \
    \   {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkf16tw7.d(21): Error: no property `isUpper` for type `string`

    /tmp/tmpqkf16tw7.d(23): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkf16tw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) \n\
    \    {\n        return false;\n    }\n    bool lower = true;\n    bool upper =\
    \ true;\n    foreach (key; dict.keys) \n    {\n        lower = lower && key.isLower;\n\
    \        upper = upper && key.isUpper;\n    }\n    return lower || upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxiy7i12.d(21): Error: no property `isLower` for type `string`

    /tmp/tmpnxiy7i12.d(22): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxiy7i12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    foreach\
    \ (key; dict.keys)\n    {\n        if (key.isUpper)\n            lower = false;\n\
    \        if (key.isLower)\n            upper = false;\n    }\n    return lower\
    \ || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkfkl544k.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpkfkl544k.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfkl544k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ all_lower = false;\n        if (key.isLower) all_upper = false;\n    }\n   \
    \ return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj32jtr50.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpj32jtr50.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj32jtr50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict is null)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach(key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5jv1aqtc.d(19): Error: no property `isLower` for type `string`

    /tmp/tmp5jv1aqtc.d(20): Error: no property `isUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jv1aqtc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null)\n\
    \        return false;\n    bool lower = false;\n    bool upper = false;\n   \
    \ foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n            upper\
    \ = true;\n        else if (key.isLower)\n            lower = true;\n        else\n\
    \            return false;\n    }\n    return lower ^ upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxizcf2g3.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpxizcf2g3.d(21): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxizcf2g3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool isUpper = true;\n\
    \    bool isLower = true;\n    foreach (key; dict.keys)\n    {\n        isUpper\
    \ = isUpper && key.isUpper;\n        isLower = isLower && key.isLower;\n    }\n\
    \    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67f_4p1f.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp67f_4p1f.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67f_4p1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool isUpper = false;\n\
    \    bool isLower = false;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\
    \ isUpper = true;\n        if (key.isLower) isLower = true;\n    }\n    return\
    \ (isUpper && !isLower) || (!isUpper && isLower);\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsj1bef0o.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmpsj1bef0o.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsj1bef0o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict is null) return\
    \ false;\n    if (dict.length == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_f7dca3w.d(19): Error: no property `isUpper` for type `string`

    /tmp/tmp_f7dca3w.d(20): Error: no property `isLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_f7dca3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
