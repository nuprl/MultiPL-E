language: d
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagoipr_w.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagoipr_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != string.npos) {\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpe2mqkb.d(11): Error: no property `find` for type `string`

    /tmp/tmpdpe2mqkb.d(11): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpe2mqkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bb9w33d.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bb9w33d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1)\n            break;\n\
    \        count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmznbsu97.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmznbsu97.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6f2r51.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6f2r51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while(true)\n    {\n        pos =\
    \ string.find(substring, pos);\n        if(pos == -1)\n            break;\n  \
    \      count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvioa5bka.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvioa5bka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bb9w33d.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bb9w33d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1)\n            break;\n\
    \        count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmznbsu97.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmznbsu97.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) {\n            break;\n        }\n        count++;\n\
    \        pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph87r8pqa.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph87r8pqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) {\n        count++;\n        pos += substring.length;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgzj4a3yo.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgzj4a3yo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagoipr_w.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagoipr_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1)\n    {\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpviql0z0p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpviql0z0p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagoipr_w.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagoipr_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long len = string.length;\n    long sublen = substring.length;\n\
    \    long i = 0;\n    while (i < len) \n    {\n        if (string[i..i+sublen]\
    \ == substring) \n        {\n            count++;\n            i += sublen;\n\
    \        }\n        else\n            i++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpw9k5dkaf.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428016]

    ??:? long tmpw9k5dkaf.how_many_times(immutable(char)[], immutable(char)[]) [0x427ac0]

    ??:? void tmpw9k5dkaf.__unittest_L25_C1() [0x427bda]

    ??:? void tmpw9k5dkaf.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagoipr_w.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagoipr_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long string_length = string.length;\n    long substring_length\
    \ = substring.length;\n    long i = 0;\n    while (i < string_length) {\n    \
    \    if (string[i .. i + substring_length] == substring) {\n            count++;\n\
    \            i += substring_length;\n        } else {\n            i++;\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpaxxux4y9.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428016]

    ??:? long tmpaxxux4y9.how_many_times(immutable(char)[], immutable(char)[]) [0x427ac0]

    ??:? void tmpaxxux4y9.__unittest_L23_C1() [0x427bda]

    ??:? void tmpaxxux4y9.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) {\n            break;\n        }\n        count++;\n\
    \        pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph87r8pqa.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph87r8pqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagoipr_w.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagoipr_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long string_length = string.length;\n    long substring_length\
    \ = substring.length;\n    for (long i = 0; i < string_length; i++) \n    {\n\
    \        if (string[i .. i + substring_length] == substring) \n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpkql2zo28.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427ffe]

    ??:? long tmpkql2zo28.how_many_times(immutable(char)[], immutable(char)[]) [0x427abc]

    ??:? void tmpkql2zo28.__unittest_L21_C1() [0x427bc6]

    ??:? void tmpkql2zo28.__modtest() [0x427cd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long string_len = string.length;\n    long substring_len\
    \ = substring.length;\n    for (long i = 0; i < string_len; i++) \n    {\n   \
    \     if (string[i .. i + substring_len] == substring) \n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpqh3f1zxx.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427ffe]

    ??:? long tmpqh3f1zxx.how_many_times(immutable(char)[], immutable(char)[]) [0x427abc]

    ??:? void tmpqh3f1zxx.__unittest_L21_C1() [0x427bc6]

    ??:? void tmpqh3f1zxx.__modtest() [0x427cd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bb9w33d.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bb9w33d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagoipr_w.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagoipr_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        ++count;\n        ++pos;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpirm9ot30.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirm9ot30.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1)\n            break;\n\
    \        count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmznbsu97.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmznbsu97.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bb9w33d.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bb9w33d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) \n    {\n        ++count;\n        ++pos;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwj59fb2.d(11): Error: no property `find` for type `string`

    /tmp/tmpcwj59fb2.d(11): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwj59fb2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) break;\n        ++count;\n        ++pos;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6cjvqqg.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6cjvqqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) \n    {\n        ++count;\n        ++pos;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwj59fb2.d(11): Error: no property `find` for type `string`

    /tmp/tmpcwj59fb2.d(11): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwj59fb2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        ++count;\n        ++index;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8drqbbf8.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8drqbbf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) \n    {\n        ++count;\n        ++pos;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwj59fb2.d(11): Error: no property `find` for type `string`

    /tmp/tmpcwj59fb2.d(11): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwj59fb2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(index != -1) \n    {\n  \
    \      index = string.find(substring, index);\n        if(index != -1) \n    \
    \    {\n            count++;\n            index++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2xyd_70k.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xyd_70k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while(true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if(pos == -1) \n        {\n        \
    \    break;\n        }\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1r51c9ts.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1r51c9ts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) {\n            break;\n        }\n        count++;\n\
    \        pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph87r8pqa.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph87r8pqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yg2yjv5.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yg2yjv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) \n    {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_0e892n.d(11): Error: no property `find` for type `string`

    /tmp/tmp5_0e892n.d(11): Error: no property `npos` for type `string`

    /tmp/tmp5_0e892n.d(14): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_0e892n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long string_size = string.length;\n    long substring_size\
    \ = substring.length;\n    long i = 0;\n    while (i < string_size) \n    {\n\
    \        if (string[i .. i + substring_size] == substring) \n        {\n     \
    \       count++;\n            i += substring_size;\n        } \n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpy0l1ffqo.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428016]

    ??:? long tmpy0l1ffqo.how_many_times(immutable(char)[], immutable(char)[]) [0x427ac0]

    ??:? void tmpy0l1ffqo.__unittest_L27_C1() [0x427bda]

    ??:? void tmpy0l1ffqo.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long i = 0;\n    while (true) \n    {\n        i = string.find(substring,\
    \ i);\n        if (i == -1) break;\n        ++count;\n        ++i;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n  \
    \  assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplrm4jalw.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplrm4jalw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yg2yjv5.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yg2yjv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yg2yjv5.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yg2yjv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bb9w33d.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bb9w33d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6f2r51.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6f2r51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bb9w33d.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bb9w33d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6f2r51.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6f2r51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) {\n        ++count;\n        ++pos;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv55my1jp.d(11): Error: no property `find` for type `string`

    /tmp/tmpv55my1jp.d(11): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv55my1jp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) {\n        count++;\n        pos += substring.length;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgzj4a3yo.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgzj4a3yo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) {\n            break;\n        }\n        count++;\n\
    \        pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph87r8pqa.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph87r8pqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) break;\n        ++count;\n        ++pos;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6cjvqqg.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6cjvqqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long start = 0;\n    while (true) \n    {\n        start\
    \ = string.find(substring, start);\n        if (start == -1)\n            break;\n\
    \        count++;\n        start += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1_pjyml_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_pjyml_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) break;\n        count++;\n        pos++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsm385jb.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsm385jb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) break;\n        count++;\n        pos++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsm385jb.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsm385jb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n                \n*/\nlong how_many_times(string string,\
    \ string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while (true)\
    \ \n    {\n        pos = string.find(substring, pos);\n        if (pos == -1)\
    \ \n        {\n            break;\n        }\n        count++;\n        pos++;\n\
    \    }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n                \n*/\n\
    long how_many_times(string string, string substring) \n{\n    long count = 0;\n\
    \    long pos = 0;\n    while (true) \n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) \n        {\n            break;\n        }\n \
    \       count++;\n        pos++;\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n                \n*/\nlong how_many_times(string string, string substring)\
    \ \n{\n    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n    \
    \    pos = string.find(substring, pos);\n        if (pos == -1) \n        {\n\
    \            break;\n        }\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true) \n    {\n       \nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyhdeisqw.d(94): Error: found `unittest` instead of statement

    /tmp/tmpyhdeisqw.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhdeisqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6f2r51.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6f2r51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (index != -1) \n    {\n \
    \       index = string.find(substring, index);\n        if (index != -1) \n  \
    \      {\n            ++count;\n            ++index;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpveehs90y.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpveehs90y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while(true)\n    {\n        pos =\
    \ string.find(substring, pos);\n        if(pos == -1)\n            break;\n  \
    \      count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvioa5bka.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvioa5bka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8z89_dkh.d(11): Error: no property `find` for type `string`

    /tmp/tmp8z89_dkh.d(11): Error: no property `npos` for type `string`

    /tmp/tmp8z89_dkh.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8z89_dkh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        index += 1;\n        count += 1;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxo257cmx.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo257cmx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count += 1;\n        index += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjpe3n63s.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpe3n63s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    for (long i = 0; i < string.length - substring.length\
    \ + 1; i++) \n    {\n        if (string[i .. i + substring.length - 1] == substring)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe3r85s2k.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f4d]

    ??:? void tmpe3r85s2k.__unittest_L19_C1() [0x427b9b]

    ??:? void tmpe3r85s2k.__modtest() [0x427cd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428410]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        ++count;\n        ++index;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8drqbbf8.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8drqbbf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) break;\n        count++;\n        pos++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsm385jb.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsm385jb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagoipr_w.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagoipr_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long substring_length = substring.length;\n    long\
    \ string_length = string.length;\n    long i = 0;\n    while (i < string_length)\
    \ \n    {\n        if (string[i..i+substring_length] == substring) \n        {\n\
    \            count++;\n            i += substring_length;\n        }\n       \
    \ else \n        {\n            i++;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmprpisvhxa.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428016]

    ??:? long tmprpisvhxa.how_many_times(immutable(char)[], immutable(char)[]) [0x427ac0]

    ??:? void tmprpisvhxa.__unittest_L27_C1() [0x427bda]

    ??:? void tmprpisvhxa.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        ++count;\n        ++index;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8drqbbf8.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8drqbbf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while(true)\n    {\n        pos =\
    \ string.find(substring, pos);\n        if(pos == -1)\n            break;\n  \
    \      count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvioa5bka.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvioa5bka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        index += 1;\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2152e1wm.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2152e1wm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) break;\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86fpduh6.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86fpduh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) \n    {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkt2qj25r.d(11): Error: no property `find` for type `string`

    /tmp/tmpkt2qj25r.d(11): Error: no property `npos` for type `string`

    /tmp/tmpkt2qj25r.d(14): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkt2qj25r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yg2yjv5.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yg2yjv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        ++count;\n        ++pos;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpirm9ot30.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirm9ot30.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while(true)\n    {\n        pos =\
    \ string.find(substring, pos);\n        if(pos == -1)\n            break;\n  \
    \      count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvioa5bka.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvioa5bka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) break;\n        count++;\n        pos++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsm385jb.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsm385jb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long len = string.length;\n    long sub_len = substring.length;\n\
    \    for (long i = 0; i < len; i++) \n    {\n        if (string[i..i+sub_len]\
    \ == substring) \n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmprs3_mrbt.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427ffe]

    ??:? long tmprs3_mrbt.how_many_times(immutable(char)[], immutable(char)[]) [0x427abc]

    ??:? void tmprs3_mrbt.__unittest_L21_C1() [0x427bc6]

    ??:? void tmprs3_mrbt.__modtest() [0x427cd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) \n    {\n        ++count;\n        ++pos;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwj59fb2.d(11): Error: no property `find` for type `string`

    /tmp/tmpcwj59fb2.d(11): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwj59fb2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        index += 1;\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2152e1wm.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2152e1wm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) {\n        count++;\n        pos += substring.length;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgzj4a3yo.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgzj4a3yo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1)\n            break;\n\
    \        count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmznbsu97.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmznbsu97.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6f2r51.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6f2r51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6f2r51.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6f2r51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sno57b7.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sno57b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6f2r51.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6f2r51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) {\n            break;\n        }\n        count++;\n\
    \        pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph87r8pqa.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph87r8pqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagoipr_w.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagoipr_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        ++count;\n        ++index;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3zrkfoj9.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zrkfoj9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) {\n        ++count;\n        ++pos;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpocxhf1pj.d(11): Error: no property `find` for type `string`

    /tmp/tmpocxhf1pj.d(11): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpocxhf1pj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    for (long i = 0; i < string.length; i++) \n    {\n \
    \       if (string[i..$] == substring) \n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_u7fy2he.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmp_u7fy2he.__unittest_L19_C1() [0x427b87]

    ??:? void tmp_u7fy2he.__modtest() [0x427cbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab6a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430130]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab41]

    ??:? runModuleUnitTests [0x42ba31]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428400]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yg2yjv5.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yg2yjv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bb9w33d.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bb9w33d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        ++count;\n        ++pos;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpirm9ot30.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirm9ot30.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = string.find(substring);\n    while (index\
    \ != -1) {\n        count++;\n        index = string.find(substring, index + 1);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpul8snx7m.d(10): Error: no property `find` for type `string`

    /tmp/tmpul8snx7m.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpul8snx7m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) break;\n        ++count;\n\
    \        ++index;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_wne2bk5.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_wne2bk5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long string_length = string.length;\n    long substring_length\
    \ = substring.length;\n    for (long i = 0; i < string_length; i++)\n    {\n \
    \       if (string[i..i+substring_length] == substring)\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpdigzz2ak.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427ffe]

    ??:? long tmpdigzz2ak.how_many_times(immutable(char)[], immutable(char)[]) [0x427abc]

    ??:? void tmpdigzz2ak.__unittest_L21_C1() [0x427bc6]

    ??:? void tmpdigzz2ak.__modtest() [0x427cd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        ++count;\n        ++index;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8drqbbf8.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8drqbbf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) \n    {\n        ++count;\n        ++pos;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwj59fb2.d(11): Error: no property `find` for type `string`

    /tmp/tmpcwj59fb2.d(11): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwj59fb2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long string_length = string.length;\n    long substring_length\
    \ = substring.length;\n    long i = 0;\n    while (i < string_length) \n    {\n\
    \        if (string[i .. i + substring_length] == substring) \n        {\n   \
    \         count++;\n            i += substring_length;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzex6tbw2.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428016]

    ??:? long tmpzex6tbw2.how_many_times(immutable(char)[], immutable(char)[]) [0x427ac0]

    ??:? void tmpzex6tbw2.__unittest_L27_C1() [0x427bda]

    ??:? void tmpzex6tbw2.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long i = 0;\n    while (i < string.length) \n    {\n\
    \        auto pos = string.find(substring, i);\n        if (pos == string.npos)\
    \ \n        {\n            break;\n        }\n        count++;\n        i = pos\
    \ + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuba39yni.d(13): Error: no property `find` for type `string`

    /tmp/tmpuba39yni.d(14): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuba39yni.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != string.npos) \n    {\n        ++count;\n        ++index;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi_oniweg.d(11): Error: no property `find` for type `string`

    /tmp/tmpi_oniweg.d(11): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_oniweg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long string_length = string.length;\n    long substring_length\
    \ = substring.length;\n    long i = 0;\n    while (i < string_length - substring_length\
    \ + 1) {\n        if (string[i .. i + substring_length] == substring) {\n    \
    \        count++;\n            i += substring_length;\n        } else {\n    \
    \        i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj3p1zo4o.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f6d]

    ??:? void tmpj3p1zo4o.__unittest_L23_C1() [0x427bfc]

    ??:? void tmpj3p1zo4o.__modtest() [0x427cf0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab9a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430160]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab71]

    ??:? runModuleUnitTests [0x42ba61]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428430]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4c7c2_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4c7c2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (index != -1) \n    {\n \
    \       index = string.find(substring, index);\n        if (index != -1) \n  \
    \      {\n            count++;\n            index++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwmks5pu.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwmks5pu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        ++count;\n        ++pos;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpowq1pvfh.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowq1pvfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) \n    {\n        ++count;\n        ++index;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bb9w33d.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bb9w33d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) break;\n        ++count;\n\
    \        ++pos;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34rh4qpu.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34rh4qpu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) break;\n        ++count;\n\
    \        ++pos;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34rh4qpu.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34rh4qpu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxshh3s5p.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxshh3s5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while(true) \n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1) \n        {\n    \
    \        break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_p28xgy.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_p28xgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) {\n            break;\n        }\n        count++;\n\
    \        pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph87r8pqa.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph87r8pqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1) {\n            break;\n        }\n        count++;\n\
    \        pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph87r8pqa.d(12): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph87r8pqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while (true) \n    {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == -1) \n        {\n       \
    \     break;\n        }\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp75djvm_.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp75djvm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long result = 0;\n    long substring_length = substring.length;\n    long\
    \ string_length = string.length;\n    long i = 0;\n    while (i < string_length)\
    \ \n    {\n        if (string[i .. i + substring_length] == substring) \n    \
    \    {\n            result += 1;\n            i += substring_length;\n       \
    \ }\n        else \n        {\n            i += 1;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpdpbf3753.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428016]

    ??:? long tmpdpbf3753.how_many_times(immutable(char)[], immutable(char)[]) [0x427ac0]

    ??:? void tmpdpbf3753.__unittest_L27_C1() [0x427bda]

    ??:? void tmpdpbf3753.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while ((index = string.find(substring,\
    \ index)) != -1) {\n        count++;\n        index += substring.length;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7_99ygy0.d(11): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_99ygy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6f2r51.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6f2r51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_axpl8v.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_axpl8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string.npos) \n    {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_0e892n.d(11): Error: no property `find` for type `string`

    /tmp/tmp5_0e892n.d(11): Error: no property `npos` for type `string`

    /tmp/tmp5_0e892n.d(14): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_0e892n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    for (long i = 0; i < string.length - substring.length\
    \ + 1; i++) \n    {\n        if (string[i .. i + substring.length - 1] == substring)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe3r85s2k.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f4d]

    ??:? void tmpe3r85s2k.__unittest_L19_C1() [0x427b9b]

    ??:? void tmpe3r85s2k.__modtest() [0x427cd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428410]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163118
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long pos = 0;\n    while(true)\n    {\n        pos =\
    \ string.find(substring, pos);\n        if(pos == -1)\n            break;\n  \
    \      count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvioa5bka.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvioa5bka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \             \n*/\nlong how_many_times(string string, string substring) \n{\n\
    \    long count = 0;\n    long index = 0;\n    while (true)\n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6f2r51.d(13): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6f2r51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163117
