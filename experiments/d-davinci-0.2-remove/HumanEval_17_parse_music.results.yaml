language: d
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o':\n                result ~= 2;\n           \
    \     break;\n            case '.':\n                result ~= 1;\n          \
    \      break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3vnmm_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n\
    \    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int\
    \ t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n\
    \    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n\
    \    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n\
    \    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n\
    \    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n\
    \    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n\
    \    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int\
    \ jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n\
    \    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int\
    \ uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n\
    \    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n \
    \   int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n  \
    \  int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n   \
    \ int pppp;\n    int qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg0ixwxnh.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0ixwxnh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(c; music_string)\n    {\n        if(c == 'o')\n\
    \            result ~= 4;\n        else if(c == '|')\n            result[$-1]\
    \ /= 2;\n        else if(c == '.')\n            result[$-1] /= 4;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_zyp3wr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long note_length = 0;\n    foreach(c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                note_length\
    \ += 4;\n                break;\n            case '|':\n                if(note_length\
    \ != 0)\n                {\n                    result ~= note_length;\n     \
    \               note_length = 0;\n                }\n                break;\n\
    \            case '.':\n                note_length += 1;\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6j0zbs0x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        if(c\
    \ == 'o')\n            result ~= 4;\n        else if(c == 'o' || c == '|')\n \
    \           result ~= 2;\n        else if(c == '.' || c == '|')\n            result\
    \ ~= 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_85wqhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzw02i57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] note_lengths = [4, 2, 1];\n    long[] note_symbols\
    \ = ['o', 'o|', '.'];\n    long[] note_lengths_in_string = [0, 0, 0];\n    long[]\
    \ note_lengths_in_string_index = [0, 0, 0];\n    long[] note_lengths_in_string_index_max\
    \ = [0, 0, 0];\n    long[] note_lengths_in_string_index_max_index = [0, 0, 0];\n\
    \    long[] note_lengths_in_string_index_max_index_max = [0, 0, 0];\n    long[]\
    \ note_lengths_in_string_index_max_index_max_index = [0, 0, 0];\n    long[] note_lengths_in_string_index_max_index_max_index_max\
    \ = [0, 0, 0];\n    long[] note_lengths_in_string_index_max_index_max_index_max_index\
    \ = [0, 0, 0];\n    long[] note_lengths_in_string_index_max_index_max_index_max_index_max\
    \ = [0, 0, 0];\n    long[] note_lengths_in_string_index_max_index_max_index_max_index_max_index\
    \ = [0, 0, 0];\n    long[] note_lengths_in_string_index_max_index_max_index_max_index_max_index_max\
    \ = [0, 0, 0];\n    long[] note_lengths_in_string_index_max_index_max_index_max_index_max_index_max_index\
    \ = [0, 0, 0];\n    long[] note_lengths_in_string_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = [0, 0, 0];\n    long[] note_lengths_in_string_index_max_index_max_index_max_index_max_index_max_index_max_index\
    \ = [0, 0, 0];\n    long[] note_\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi9irzqt0.d(19): Error: unterminated character constant\n/tmp/tmpi9irzqt0.d(19):
    Error: unterminated character constant\n/tmp/tmpi9irzqt0.d(19): Error: comma expected
    separating array initializers, not 46U\n/tmp/tmpi9irzqt0.d(19): Error: semicolon
    expected, not \'']\''\n/tmp/tmpi9irzqt0.d(19): Error: found \'']\'' instead of
    statement\n/tmp/tmpi9irzqt0.d(35): Error: semicolon expected, not \''unittest\''\n/tmp/tmpi9irzqt0.d(35):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpi9irzqt0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwswg5rl1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n        else\n\
    \        {\n            assert(false);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8tj_9j7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n        else\n\
    \        {\n            assert(false);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8tj_9j7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] beats;\n    long[] notes;\n    long i;\n    long\
    \ j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long\
    \ p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long\
    \ v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long\
    \ bb;\n    long cc;\n    long dd;\n    long ee;\n    long ff;\n    long gg;\n\
    \    long hh;\n    long ii;\n    long jj;\n    long kk;\n    long ll;\n    long\
    \ mm;\n    long nn;\n    long oo;\n    long pp;\n    long qq;\n    long rr;\n\
    \    long ss;\n    long tt;\n    long uu;\n    long vv;\n    long ww;\n    long\
    \ xx;\n    long yy;\n    long zz;\n    long aaa;\n    long bbb;\n    long ccc;\n\
    \    long ddd;\n    long eee;\n    long fff;\n    long ggg;\n    long hhh;\n \
    \   long iii;\n    long jjj;\n    long kkk;\n    long lll;\n    long mmm;\n  \
    \  long nnn;\n    long ooo;\n    long ppp;\n    long qqq;\n    long rrr;\n   \
    \ long sss;\n    long ttt;\n    long uuu;\n    long vvv;\n    long www;\n    long\
    \ xxx;\n    long yyy;\n    long zzz;\n    long aaaa;\n    long bbbb;\n    long\
    \ cccc;\n    long dddd;\n    long eeee;\n    long ffff;\n    long gggg;\n    long\
    \ hhhh;\n    long iiii;\n    long jjjj;\n    long kkkk;\n    long llll;\n    long\
    \ mmmm;\n    long nnnn;\n    long oooo;\n    long\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgec2io_g.d(106): Error: no identifier for declarator long\n/tmp/tmpgec2io_g.d(106):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpgec2io_g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavt_10y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzw02i57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] notes = music_string.split(\" \");\n    foreach(note;\
    \ notes)\n    {\n        if(note == \"o\")\n        {\n            result ~= 4;\n\
    \        }\n        else if(note == \"o|\")\n        {\n            result ~=\
    \ 2;\n        }\n        else if(note == \".|\")\n        {\n            result\
    \ ~= 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugs_g8up.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr8c392a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n\
    \    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int\
    \ t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n\
    \    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n\
    \    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n\
    \    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n\
    \    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n\
    \    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n\
    \    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int\
    \ jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n\
    \    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int\
    \ uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n\
    \    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n \
    \   int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n  \
    \  int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n   \
    \ int pppp;\n    int qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg0ixwxnh.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0ixwxnh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result = new long[];\n    int i = 0;\n    while(i < music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            result ~= 4;\n\
    \            i++;\n        }\n        else if(music_string[i] == '.')\n      \
    \  {\n            result ~= 1;\n            i += 2;\n        }\n        else if(music_string[i]\
    \ == 'o')\n        {\n            result ~= 2;\n            i += 2;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghu5ph_u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzw02i57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] beats;\n    int i = 0;\n    foreach(c; music_string)\n    {\n    \
    \    if(c == 'o')\n        {\n            beats ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            beats ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            beats[$-1] /= 2;\n        }\n    }\n    return\
    \ beats;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbpsaxsah.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        if(c\
    \ == 'o')\n            result ~= 4;\n        else if(c == '|')\n            result\
    \ ~= 2;\n        else if(c == '.')\n            result ~= 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoejtxgcf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwswg5rl1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result = [];\n    foreach(immutable char c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case 'o|':\n                result ~=\
    \ 2;\n                break;\n            case '.|':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8rg7tes4.d(25): Error: unterminated character constant\n/tmp/tmp8rg7tes4.d(25):
    Error: unterminated character constant\n/tmp/tmp8rg7tes4.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmp8rg7tes4.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmp8rg7tes4.d(28): Error: unterminated character constant\n/tmp/tmp8rg7tes4.d(28):
    Error: unterminated character constant\n/tmp/tmp8rg7tes4.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmp8rg7tes4.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rg7tes4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        if(c\
    \ == 'o')\n            result ~= 4;\n        else if(c == '.')\n            result\
    \ ~= 1;\n        else if(c == '|')\n            continue;\n        else\n    \
    \        assert(false);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7yt8sec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprz3q_7aa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i;\n    long j;\n    long k;\n    long l;\n    long\
    \ m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long\
    \ s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long\
    \ y;\n    long z;\n    long aa;\n    long bb;\n    long cc;\n    long dd;\n  \
    \  long ee;\n    long ff;\n    long gg;\n    long hh;\n    long ii;\n    long\
    \ jj;\n    long kk;\n    long ll;\n    long mm;\n    long nn;\n    long oo;\n\
    \    long pp;\n    long qq;\n    long rr;\n    long ss;\n    long tt;\n    long\
    \ uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n    long zz;\n\
    \    long aaa;\n    long bbb;\n    long ccc;\n    long ddd;\n    long eee;\n \
    \   long fff;\n    long ggg;\n    long hhh;\n    long iii;\n    long jjj;\n  \
    \  long kkk;\n    long lll;\n    long mmm;\n    long nnn;\n    long ooo;\n   \
    \ long ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n    long\
    \ uuu;\n    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n    long zzz;\n\
    \    long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n    long eeee;\n\
    \    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n    long jjjj;\n\
    \    long kkkk;\n    long llll;\n    long mmmm;\n    long nnnn;\n    long oooo;\n\
    \    long pppp;\n    long qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_u26zrzj.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_u26zrzj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i;\n    long j;\n    long k;\n    long l;\n    long\
    \ m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long\
    \ s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long\
    \ y;\n    long z;\n    long aa;\n    long bb;\n    long cc;\n    long dd;\n  \
    \  long ee;\n    long ff;\n    long gg;\n    long hh;\n    long ii;\n    long\
    \ jj;\n    long kk;\n    long ll;\n    long mm;\n    long nn;\n    long oo;\n\
    \    long pp;\n    long qq;\n    long rr;\n    long ss;\n    long tt;\n    long\
    \ uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n    long zz;\n\
    \    long aaa;\n    long bbb;\n    long ccc;\n    long ddd;\n    long eee;\n \
    \   long fff;\n    long ggg;\n    long hhh;\n    long iii;\n    long jjj;\n  \
    \  long kkk;\n    long lll;\n    long mmm;\n    long nnn;\n    long ooo;\n   \
    \ long ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n    long\
    \ uuu;\n    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n    long zzz;\n\
    \    long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n    long eeee;\n\
    \    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n    long jjjj;\n\
    \    long kkkk;\n    long llll;\n    long mmmm;\n    long nnnn;\n    long oooo;\n\
    \    long pppp;\n    long qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_u26zrzj.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_u26zrzj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l\
    \ = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int\
    \ q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n   \
    \ int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee\
    \ = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int ii = 0;\n \
    \   int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn\
    \ = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n \
    \   int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww\
    \ = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n\
    \    int bbb = 0;\n    int ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n    int\
    \ fff = 0;\n    int ggg = 0;\n    int hhh = 0;\n    int iii = 0;\n    int jjj\
    \ = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n\
    \    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int\
    \ sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq5laz83b.d(85): Error: semicolon expected, not \''unittest\''\n/tmp/tmpq5laz83b.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq5laz83b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwswg5rl1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long count = 0;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            count += 4;\n        }\n       \
    \ else if(c == '|')\n        {\n            result ~= count;\n            count\
    \ = 0;\n        }\n        else if(c == '.')\n        {\n            count +=\
    \ 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ep80y57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    immutable(char)[] music_chars = music_string.dup;\n \
    \   foreach(immutable(char) c; music_chars)\n    {\n        switch(c)\n      \
    \  {\n            case 'o':\n                result ~= 4;\n                break;\n\
    \            case 'o':\n                result ~= 2;\n                break;\n\
    \            case '.':\n                result ~= 1;\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0iji89pd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n\
    \    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int\
    \ t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n\
    \    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n\
    \    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n\
    \    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n\
    \    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n\
    \    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n\
    \    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int\
    \ jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n\
    \    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int\
    \ uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n\
    \    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n \
    \   int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n  \
    \  int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n   \
    \ int pppp;\n    int qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg0ixwxnh.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0ixwxnh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] beats = [];\n    foreach(c; music_string) \n    {\n        if(c ==\
    \ 'o') \n        {\n            beats ~= 4;\n        }\n        else if(c == 'o'\
    \ || c == '|') \n        {\n            beats ~= 2;\n        }\n        else if(c\
    \ == '.' || c == '|') \n        {\n            beats ~= 1;\n        }\n    }\n\
    \    return beats;\n}\n/*\n    This function takes a list of integers representing\
    \ how many beats does each note last and returns a string\n    representing musical\
    \ notes in a special ASCII format.\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmosyiaze.d(35): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmosyiaze.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long\
    \ d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n\
    \    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n\
    \    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n\
    \    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphvbp4ra5.d(86): Error: semicolon expected, not \''unittest\''\n/tmp/tmphvbp4ra5.d(86):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphvbp4ra5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \tlong[] result;\n\tlong[] beats;\n\tlong[] notes;\n\tlong i;\n\tlong j;\n\tlong\
    \ k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong o;\n\tlong p;\n\tlong q;\n\tlong\
    \ r;\n\tlong s;\n\tlong t;\n\tlong u;\n\tlong v;\n\tlong w;\n\tlong x;\n\tlong\
    \ y;\n\tlong z;\n\tlong aa;\n\tlong bb;\n\tlong cc;\n\tlong dd;\n\tlong ee;\n\t\
    long ff;\n\tlong gg;\n\tlong hh;\n\tlong ii;\n\tlong jj;\n\tlong kk;\n\tlong ll;\n\
    \tlong mm;\n\tlong nn;\n\tlong oo;\n\tlong pp;\n\tlong qq;\n\tlong rr;\n\tlong\
    \ ss;\n\tlong tt;\n\tlong uu;\n\tlong vv;\n\tlong ww;\n\tlong xx;\n\tlong yy;\n\
    \tlong zz;\n\tlong aaa;\n\tlong bbb;\n\tlong ccc;\n\tlong ddd;\n\tlong eee;\n\t\
    long fff;\n\tlong ggg;\n\tlong hhh;\n\tlong iii;\n\tlong jjj;\n\tlong kkk;\n\t\
    long lll;\n\tlong mmm;\n\tlong nnn;\n\tlong ooo;\n\tlong ppp;\n\tlong qqq;\n\t\
    long rrr;\n\tlong sss;\n\tlong ttt;\n\tlong uuu;\n\tlong vvv;\n\tlong www;\n\t\
    long xxx;\n\tlong yyy;\n\tlong zzz;\n\tlong aaaa;\n\tlong bbbb;\n\tlong cccc;\n\
    \tlong dddd;\n\tlong eeee;\n\tlong ffff;\n\tlong gggg;\n\tlong hhhh;\n\tlong iiii;\n\
    \tlong jjjj;\n\tlong kkkk;\n\tlong llll;\n\tlong mmmm;\n\tlong nnnn;\n\tlong oooo;\n\
    \tlong\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb41kus3x.d(106): Error: no identifier for declarator long\n/tmp/tmpb41kus3x.d(106):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpb41kus3x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavt_10y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    long j = 0;\n    long len = music_string.length;\n\
    \    while(i < len)\n    {\n        if(music_string[i] == 'o')\n        {\n  \
    \          result ~= 4;\n            i += 2;\n        }\n        else if(music_string[i]\
    \ == '.')\n        {\n            result ~= 1;\n            i += 3;\n        }\n\
    \        else if(music_string[i] == '|')\n        {\n            result ~= 2;\n\
    \            i += 2;\n        }\n        else\n        {\n            i++;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzr62pwff.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n   \
    \ int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int aa = 0;\n    int ab = 0;\n    int ac = 0;\n    int ad\
    \ = 0;\n    int ae = 0;\n    int af = 0;\n    int ag = 0;\n    int ah = 0;\n \
    \   int ai = 0;\n    int aj = 0;\n    int ak = 0;\n    int al = 0;\n    int am\
    \ = 0;\n    int an = 0;\n    int ao = 0;\n    int ap = 0;\n    int aq = 0;\n \
    \   int ar = 0;\n    int as = 0;\n    int at = 0;\n    int au = 0;\n    int av\
    \ = 0;\n    int aw = 0;\n    int ax = 0;\n    int ay = 0;\n    int az = 0;\n \
    \   int ba = 0;\n    int bb = 0;\n    int bc = 0;\n    int bd = 0;\n    int be\
    \ = 0;\n    int bf = 0;\n    int bg = 0;\n    int bh = 0;\n    int bi = 0;\n \
    \   int bj = 0;\n    int bk = 0;\n    int bl = 0;\n    int bm = 0;\n    int bn\
    \ = 0;\n    int bo = 0;\n    int bp = 0;\n    int bq = 0;\n    int br = 0;\n \
    \   int bs = 0;\n    int bt = 0;\n    int bu = 0;\n    int bv = 0;\n    int bw\
    \ = 0;\n    int bx = 0;\nunittest\n{\n    alias candidate = parse_music;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe_1t96mb.d(87): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_1t96mb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l\
    \ = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int\
    \ q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n   \
    \ int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj =\
    \ 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n   \
    \ int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss =\
    \ 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n   \
    \ int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb =\
    \ 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n   \
    \ int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk\
    \ = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n\
    \    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int\
    \ ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0k1s1x1.d(86): Error: semicolon expected, not \''unittest\''\n/tmp/tmpp0k1s1x1.d(86):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpp0k1s1x1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i;\n    foreach(c; music_string)\n    {\n      \
    \  if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphguecg54.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long count = 0;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            count += 4;\n        }\n       \
    \ else if(c == '|')\n        {\n            result ~= count;\n            count\
    \ = 0;\n        }\n        else if(c == '.')\n        {\n            count +=\
    \ 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ep80y57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case '|':\n                result[$-1] /=\
    \ 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3hd47bsi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i;\n    foreach(c; music_string)\n    {\n      \
    \  if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == 'o' || c == '|')\n        {\n            result[$-1] /= 2;\n       \
    \ }\n        else if(c == '.' || c == '|')\n        {\n            result[$-1]\
    \ /= 4;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5lr1xrx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        i++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2eahvo5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwswg5rl1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    long i;\n    long j;\n    long k;\n\
    \    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n\
    \    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long aa;\n    long bb;\n    long cc;\n\
    \    long dd;\n    long ee;\n    long ff;\n    long gg;\n    long hh;\n    long\
    \ ii;\n    long jj;\n    long kk;\n    long ll;\n    long mm;\n    long nn;\n\
    \    long oo;\n    long pp;\n    long qq;\n    long rr;\n    long ss;\n    long\
    \ tt;\n    long uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n\
    \    long zz;\n    long aaa;\n    long bbb;\n    long ccc;\n    long ddd;\n  \
    \  long eee;\n    long fff;\n    long ggg;\n    long hhh;\n    long iii;\n   \
    \ long jjj;\n    long kkk;\n    long lll;\n    long mmm;\n    long nnn;\n    long\
    \ ooo;\n    long ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n\
    \    long uuu;\n    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n \
    \   long zzz;\n    long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n\
    \    long eeee;\n    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n\
    \    long jjjj;\n    long kkkk;\n    long llll;\n    long mmmm;\n    long nnnn;\n\
    \    long oooo;\n    long pppp;\n   \nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpup8jqjrg.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpup8jqjrg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr8c392a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] beats;\n    long[] notes;\n    long i;\n    long\
    \ j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long\
    \ p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long\
    \ v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long\
    \ bb;\n    long cc;\n    long dd;\n    long ee;\n    long ff;\n    long gg;\n\
    \    long hh;\n    long ii;\n    long jj;\n    long kk;\n    long ll;\n    long\
    \ mm;\n    long nn;\n    long oo;\n    long pp;\n    long qq;\n    long rr;\n\
    \    long ss;\n    long tt;\n    long uu;\n    long vv;\n    long ww;\n    long\
    \ xx;\n    long yy;\n    long zz;\n    long aaa;\n    long bbb;\n    long ccc;\n\
    \    long ddd;\n    long eee;\n    long fff;\n    long ggg;\n    long hhh;\n \
    \   long iii;\n    long jjj;\n    long kkk;\n    long lll;\n    long mmm;\n  \
    \  long nnn;\n    long ooo;\n    long ppp;\n    long qqq;\n    long rrr;\n   \
    \ long sss;\n    long ttt;\n    long uuu;\n    long vvv;\n    long www;\n    long\
    \ xxx;\n    long yyy;\n    long zzz;\n    long aaaa;\n    long bbbb;\n    long\
    \ cccc;\n    long dddd;\n    long eeee;\n    long ffff;\n    long gggg;\n    long\
    \ hhhh;\n    long iiii;\n    long jjjj;\n    long kkkk;\n    long llll;\n    long\
    \ mmmm;\n    long nnnn;\n    long oooo;\n    long\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgec2io_g.d(106): Error: no identifier for declarator long\n/tmp/tmpgec2io_g.d(106):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpgec2io_g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i;\n    long j;\n    long k;\n    long l;\n    long\
    \ m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long\
    \ s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long\
    \ y;\n    long z;\n    long aa;\n    long bb;\n    long cc;\n    long dd;\n  \
    \  long ee;\n    long ff;\n    long gg;\n    long hh;\n    long ii;\n    long\
    \ jj;\n    long kk;\n    long ll;\n    long mm;\n    long nn;\n    long oo;\n\
    \    long pp;\n    long qq;\n    long rr;\n    long ss;\n    long tt;\n    long\
    \ uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n    long zz;\n\
    \    long aaa;\n    long bbb;\n    long ccc;\n    long ddd;\n    long eee;\n \
    \   long fff;\n    long ggg;\n    long hhh;\n    long iii;\n    long jjj;\n  \
    \  long kkk;\n    long lll;\n    long mmm;\n    long nnn;\n    long ooo;\n   \
    \ long ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n    long\
    \ uuu;\n    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n    long zzz;\n\
    \    long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n    long eeee;\n\
    \    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n    long jjjj;\n\
    \    long kkkk;\n    long llll;\n    long mmmm;\n    long nnnn;\n    long oooo;\n\
    \    long pppp;\n    long qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_u26zrzj.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_u26zrzj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    long j = 0;\n    long len = music_string.length;\n\
    \    while(i < len)\n    {\n        if(music_string[i] == 'o')\n        {\n  \
    \          result ~= 4;\n            i += 2;\n        }\n        else if(music_string[i]\
    \ == '.')\n        {\n            result ~= 1;\n            i += 3;\n        }\n\
    \        else\n        {\n            result ~= 2;\n            i += 3;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_2gl0re_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeelb9eoq.d(25): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(25):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpeelb9eoq.d(28): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(28):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeelb9eoq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzw02i57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(c; music_string)\n    {\n        if(c == 'o')\n\
    \            result ~= 4;\n        else if(c == '|')\n            result ~= 2;\n\
    \        else if(c == '.')\n            result ~= 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphgas1h9x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long count = 0;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            count += 4;\n        }\n       \
    \ else if(c == '|')\n        {\n            result ~= count;\n            count\
    \ = 0;\n        }\n        else if(c == '.')\n        {\n            count +=\
    \ 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ep80y57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeelb9eoq.d(25): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(25):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpeelb9eoq.d(28): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(28):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeelb9eoq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    foreach(c; music_string)\n    {\n       \
    \ if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3id9ns_0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeelb9eoq.d(25): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(25):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpeelb9eoq.d(28): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(28):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeelb9eoq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    foreach(c; music_string)\n    {\n       \
    \ switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpemhe6l2a.d(26): Error: unterminated character constant\n/tmp/tmpemhe6l2a.d(26):
    Error: unterminated character constant\n/tmp/tmpemhe6l2a.d(27): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpemhe6l2a.d(27): Error: found \''~=\'' instead
    of statement\n/tmp/tmpemhe6l2a.d(29): Error: unterminated character constant\n/tmp/tmpemhe6l2a.d(29):
    Error: unterminated character constant\n/tmp/tmpemhe6l2a.d(30): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpemhe6l2a.d(30): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemhe6l2a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    auto result = new long[];\n    foreach(c; music_string)\n    {\n        if(c\
    \ == 'o')\n            result ~= 4;\n        else if(c == '|')\n            result\
    \ ~= 2;\n        else if(c == '.')\n            result ~= 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm4dik0rv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzw02i57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result = new long[];\n    foreach(c; music_string)\n    {\n      \
    \  if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gnpida5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwswg5rl1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    int j = 0;\n    while(i < music_string.length)\n\
    \    {\n        if(music_string[i] == 'o')\n        {\n            result ~= 4;\n\
    \            i += 2;\n        }\n        else if(music_string[i] == '.')\n   \
    \     {\n            result ~= 1;\n            i += 2;\n        }\n        else\
    \ if(music_string[i] == 'o')\n        {\n            result ~= 2;\n          \
    \  i += 3;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8r_xj3r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr8c392a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzw02i57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o':\n                result ~= 2;\n           \
    \     break;\n            case '.':\n                result ~= 1;\n          \
    \      break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3vnmm_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(char c; music_string)\n    {\n        if(c ==\
    \ 'o')\n            result ~= 4;\n        else if(c == '|')\n            result\
    \ ~= 2;\n        else if(c == '.')\n            result ~= 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3lm0wy50.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string) \n    {\n        if(c\
    \ == 'o') \n        {\n            result ~= 4;\n        }\n        else if(c\
    \ == '.') \n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|') \n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphl48waoz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavt_10y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l\
    \ = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int\
    \ q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n   \
    \ int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee\
    \ = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int ii = 0;\n \
    \   int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn\
    \ = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n \
    \   int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww\
    \ = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n\
    \    int bbb = 0;\n    int ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n    int\
    \ fff = 0;\n    int ggg = 0;\n    int hhh = 0;\n    int iii = 0;\n    int jjj\
    \ = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n\
    \    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int\
    \ sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq5laz83b.d(85): Error: semicolon expected, not \''unittest\''\n/tmp/tmpq5laz83b.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq5laz83b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o':\n                result ~= 2;\n           \
    \     break;\n            case '.':\n                result ~= 1;\n          \
    \      break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3vnmm_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprz3q_7aa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    long i;\n    long j;\n    long k;\n\
    \    long count;\n    long length;\n    long[] beats;\n    long[] notes;\n   \
    \ long[] durations;\n    long[] durations_temp;\n    long[] durations_temp_2;\n\
    \    long[] durations_temp_3;\n    long[] durations_temp_4;\n    long[] durations_temp_5;\n\
    \    long[] durations_temp_6;\n    long[] durations_temp_7;\n    long[] durations_temp_8;\n\
    \    long[] durations_temp_9;\n    long[] durations_temp_10;\n    long[] durations_temp_11;\n\
    \    long[] durations_temp_12;\n    long[] durations_temp_13;\n    long[] durations_temp_14;\n\
    \    long[] durations_temp_15;\n    long[] durations_temp_16;\n    long[] durations_temp_17;\n\
    \    long[] durations_temp_18;\n    long[] durations_temp_19;\n    long[] durations_temp_20;\n\
    \    long[] durations_temp_21;\n    long[] durations_temp_22;\n    long[] durations_temp_23;\n\
    \    long[] durations_temp_24;\n    long[] durations_temp_25;\n    long[] durations_temp_26;\n\
    \    long[] durations_temp_27;\n    long[] durations_temp_28;\n    long[] durations_temp_29;\n\
    \    long[] durations_temp_30;\n    long[] durations_temp_31;\n    long[] durations_temp_32;\n\
    \    long[] durations_temp_33;\n    long[] durations_temp_34;\n    long[] durations_temp_35;\n\
    \    long[] durations_temp_36;\n    long[] durations_temp_37;\n    long[] durations_temp_38;\n\
    \    long[] durations_temp_39;\n    long[] durations_temp_40;\n    long[] durations_temp_41;\n\
    \    long[] d\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa8g4scx5.d(69): Error: semicolon expected, not \''unittest\''\n/tmp/tmpa8g4scx5.d(69):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpa8g4scx5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        if(c\
    \ == 'o')\n            result ~= 4;\n        else if(c == '|')\n            result[$-1]\
    \ /= 2;\n        else if(c == '.')\n            result[$-1] /= 4;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fuk0zsn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o':\n                result ~= 2;\n           \
    \     break;\n            case '.':\n                result ~= 1;\n          \
    \      break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3vnmm_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n\
    \    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n\
    \    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \    long[] temp72;\n\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3vkkxian.d(91): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vkkxian.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result = [];\n    foreach(char c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv8ofy80t.d(25): Error: unterminated character constant\n/tmp/tmpv8ofy80t.d(25):
    Error: unterminated character constant\n/tmp/tmpv8ofy80t.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpv8ofy80t.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpv8ofy80t.d(28): Error: unterminated character constant\n/tmp/tmpv8ofy80t.d(28):
    Error: unterminated character constant\n/tmp/tmpv8ofy80t.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpv8ofy80t.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8ofy80t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] beats;\n    long beat_count = 0;\n    foreach(immutable\
    \ c; music_string)\n    {\n        if(c == 'o')\n        {\n            beat_count\
    \ += 4;\n        }\n        else if(c == '|')\n        {\n            beats ~=\
    \ beat_count;\n            beat_count = 0;\n        }\n        else if(c == '.')\n\
    \        {\n            beat_count += 1;\n        }\n    }\n    beats ~= beat_count;\n\
    \    result = beats[0..$-1];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2tscrtx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] beats;\n    long i = 0;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            beats ~= 4;\n        }\n\
    \        else if(c == '.')\n        {\n            beats ~= 1;\n        }\n  \
    \      else if(c == '|')\n        {\n            beats[$-1] /= 2;\n        }\n\
    \    }\n    return beats;\n}\n/*\n    Given a list of integers representing how\
    \ many beats does each note last, return a string in the same format as the input.\n\
    \    The input is guaranteed to be valid.\n*/\nstring unparse_music(long[] beats)\
    \ \n{\n    string music_string;\n    foreach(immutable beat; beats)\n    {\n \
    \       if(beat == 4)\n        {\n            music_string ~= 'o';\n        }\n\
    \        else if(beat == 2)\n        {\n            music_string ~= 'o|';\n  \
    \      }\n        else if(beat == 1)\n        {\n            music_string ~= '.|';\n\
    \        }\n    }\n    return music_string;\n}\n/*\n    Given a list of integers\
    \ representing how many beats does each note last, return a string in the same\
    \ format as the input.\n    The input is guaranteed to be valid.\n*/\nstring unparse_music2(long[]\
    \ beats) \n{\n    string music_string;\n    foreach(immutable beat; beats)\n \
    \   {\n        if(beat == 4)\n        {\n            music_string ~= 'o';\n  \
    \      }\n        else if(beat == 2)\n        {\n            music_string ~= 'o|';\n\
    \        }\n        else if(beat == 1)\n        {\n            music_string ~=\
    \ '.|';\n        }\n    }\n    return music_string;\n}\n/*\n    Given a list of\
    \ integers representing how many beats does each note last, return a string in\
    \ the same format as the input.\n    The input is guaranteed to be valid.\n*/\n\
    string unparse_music3(long[] beats) \n{\n    string music_string;\n    foreach(immutable\
    \ beat\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpak84bpap.d(51): Error: unterminated character constant\n/tmp/tmpak84bpap.d(51):
    Error: unterminated character constant\n/tmp/tmpak84bpap.d(52): Error: found \''}\''
    when expecting \'';\'' following statement\n/tmp/tmpak84bpap.d(53): Error: found
    \''else\'' instead of statement\n/tmp/tmpak84bpap.d(55): Error: unterminated character
    constant\n/tmp/tmpak84bpap.d(55): Error: unterminated character constant\n/tmp/tmpak84bpap.d(75):
    Error: unterminated character constant\n/tmp/tmpak84bpap.d(75): Error: unterminated
    character constant\n/tmp/tmpak84bpap.d(76): Error: found \''}\'' when expecting
    \'';\'' following statement\n/tmp/tmpak84bpap.d(77): Error: found \''else\'' instead
    of statement\n/tmp/tmpak84bpap.d(79): Error: unterminated character constant\n/tmp/tmpak84bpap.d(79):
    Error: unterminated character constant\n/tmp/tmpak84bpap.d(92): Error: no identifier
    for declarator beat\n/tmp/tmpak84bpap.d(92): Error: found \''unittest\'' when
    expecting \'';\''\n/tmp/tmpak84bpap.d(102): Error: found \''void\'' when expecting
    \'')\''\n/tmp/tmpak84bpap.d(102): Error: found \''{\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpak84bpap.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        if(c\
    \ == 'o')\n            result ~= 4;\n        else if(c == '.')\n            result\
    \ ~= 1;\n        else if(c == '|')\n            continue;\n        else\n    \
    \        assert(false);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7yt8sec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n\
    \    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n\
    \    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \    long[] temp72;\n\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3vkkxian.d(91): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vkkxian.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n\
    \    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n\
    \    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \    long[] temp72;\n\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3vkkxian.d(91): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vkkxian.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l\
    \ = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int\
    \ q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n   \
    \ int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int aa = 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae\
    \ = 0;\n    int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n \
    \   int aj = 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an\
    \ = 0;\n    int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n \
    \   int as = 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw\
    \ = 0;\n    int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n \
    \   int bb = 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf\
    \ = 0;\n    int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n \
    \   int bk = 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo\
    \ = 0;\n    int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n \
    \   int bt = 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx\
    \ = 0;\n    int by = 0\nunittest\n{\n    alias candidate = parse_music;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1rbjh5la.d(87): Error: semicolon expected, not \''unittest\''\n/tmp/tmp1rbjh5la.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp1rbjh5la.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprz3q_7aa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr8c392a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n\
    \    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int\
    \ t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n\
    \    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n\
    \    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n\
    \    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n\
    \    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n\
    \    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n\
    \    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int\
    \ jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n\
    \    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int\
    \ uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n\
    \    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n \
    \   int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n  \
    \  int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n   \
    \ int pppp;\n    int qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg0ixwxnh.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0ixwxnh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(char c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[i] /= 2;\n        }\n    \
    \    else if(c == '.')\n        {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqap5od2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] beats;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                beats ~= 4;\n             \
    \   break;\n            case 'o|':\n                beats ~= 2;\n            \
    \    break;\n            case '.|':\n                beats ~= 1;\n           \
    \     break;\n        }\n    }\n    return beats;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5f50_06w.d(25): Error: unterminated character constant\n/tmp/tmp5f50_06w.d(25):
    Error: unterminated character constant\n/tmp/tmp5f50_06w.d(26): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp5f50_06w.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmp5f50_06w.d(28): Error: unterminated character constant\n/tmp/tmp5f50_06w.d(28):
    Error: unterminated character constant\n/tmp/tmp5f50_06w.d(29): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp5f50_06w.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f50_06w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n\
    \    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int\
    \ t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n\
    \    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n\
    \    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n\
    \    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n\
    \    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n\
    \    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n\
    \    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int\
    \ jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n\
    \    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int\
    \ uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n\
    \    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n \
    \   int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n  \
    \  int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n   \
    \ int pppp;\n    int qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg0ixwxnh.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0ixwxnh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case '.':\n                result ~= 1;\n\
    \                break;\n            case '|':\n                break;\n     \
    \       default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5lnhf3w5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    auto notes = music_string.split(\" \");\n    foreach(note;\
    \ notes)\n    {\n        switch(note)\n        {\n            case \"o\":\n  \
    \              result ~= 4;\n                break;\n            case \"o|\":\n\
    \                result ~= 2;\n                break;\n            case \".|\"\
    :\n                result ~= 1;\n                break;\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20giob9j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result = new long[];\n    foreach(c; music_string)\n    {\n      \
    \  if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == 'o' || c == '|')\n        {\n            result ~= 2;\n        }\n \
    \       else if(c == '.' || c == '|')\n        {\n            result ~= 1;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dymvvd8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    long i;\n    long j;\n    long k;\n\
    \    long count;\n    long len;\n    long temp_len;\n    long temp_count;\n  \
    \  long temp_j;\n    long temp_k;\n    bool flag;\n    bool temp_flag;\n    bool\
    \ temp_flag2;\n    bool temp_flag3;\n    bool temp_flag4;\n    bool temp_flag5;\n\
    \    bool temp_flag6;\n    bool temp_flag7;\n    bool temp_flag8;\n    bool temp_flag9;\n\
    \    bool temp_flag10;\n    bool temp_flag11;\n    bool temp_flag12;\n    bool\
    \ temp_flag13;\n    bool temp_flag14;\n    bool temp_flag15;\n    bool temp_flag16;\n\
    \    bool temp_flag17;\n    bool temp_flag18;\n    bool temp_flag19;\n    bool\
    \ temp_flag20;\n    bool temp_flag21;\n    bool temp_flag22;\n    bool temp_flag23;\n\
    \    bool temp_flag24;\n    bool temp_flag25;\n    bool temp_flag26;\n    bool\
    \ temp_flag27;\n    bool temp_flag28;\n    bool temp_flag29;\n    bool temp_flag30;\n\
    \    bool temp_flag31;\n    bool temp_flag32;\n    bool temp_flag33;\n    bool\
    \ temp_flag34;\n    bool temp_flag35;\n    bool temp_flag36;\n    bool temp_flag37;\n\
    \    bool temp_flag38;\n    bool temp_flag39;\n    bool temp_flag40;\n    bool\
    \ temp_flag41;\n    bool temp_flag42;\n    bool temp_flag43;\n    bool temp_flag44;\n\
    \    bool temp_flag45;\n    bool temp_flag46;\n    bool temp_flag47;\n    bool\
    \ temp_flag48;\n    bool temp_flag49;\n    bool temp_flag50;\n    bool temp_flag51;\n\
    \    bool temp_flag52;\n    bool temp_flag53;\n    bool temp_flag54;\n    bool\
    \ temp_flag55;\n\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp69xyxv5k.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69xyxv5k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    int count = 0;\n    int count1 = 0;\n    int count2 = 0;\n    int\
    \ count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n\
    \    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10\
    \ = 0;\n    int count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n   \
    \ int count14 = 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17\
    \ = 0;\n    int count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n   \
    \ int count21 = 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24\
    \ = 0;\n    int count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n   \
    \ int count28 = 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31\
    \ = 0;\n    int count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n   \
    \ int count35 = 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38\
    \ = 0;\n    int count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n   \
    \ int count42 = 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45\
    \ = 0;\n    int count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n   \
    \ int count49 = 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52\
    \ = 0;\n    int count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n   \
    \ int count56 = 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59\
    \ =\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx2yuzdpu.d(82): Error: expression expected, not \''unittest\''\n/tmp/tmpx2yuzdpu.d(83):
    Error: semicolon expected, not \''{\''\n/tmp/tmpx2yuzdpu.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpx2yuzdpu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    int len = music_string.length;\n    int count\
    \ = 0;\n    for (i = 0; i < len; i++)\n    {\n        if (music_string[i] == 'o')\n\
    \        {\n            count++;\n        }\n    }\n    result = new long[count];\n\
    \    int j = 0;\n    for (i = 0; i < len; i++)\n    {\n        if (music_string[i]\
    \ == 'o')\n        {\n            if (music_string[i + 1] == '|')\n          \
    \  {\n                result[j] = 2;\n                j++;\n            }\n  \
    \          else if (music_string[i + 1] == '.')\n            {\n             \
    \   result[j] = 1;\n                j++;\n            }\n            else\n  \
    \          {\n                result[j] = 4;\n                j++;\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwrciuj6u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        if(c\
    \ == 'o')\n            result ~= 4;\n        else if(c == '|')\n            result\
    \ ~= 2;\n        else if(c == '.')\n            result ~= 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoejtxgcf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu =\
    \ 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4p90l80e.d(87): Error: semicolon expected, not \''unittest\''\n/tmp/tmp4p90l80e.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4p90l80e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i;\n    long j;\n    long k;\n    long l;\n    long\
    \ m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long\
    \ s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long\
    \ y;\n    long z;\n    long aa;\n    long bb;\n    long cc;\n    long dd;\n  \
    \  long ee;\n    long ff;\n    long gg;\n    long hh;\n    long ii;\n    long\
    \ jj;\n    long kk;\n    long ll;\n    long mm;\n    long nn;\n    long oo;\n\
    \    long pp;\n    long qq;\n    long rr;\n    long ss;\n    long tt;\n    long\
    \ uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n    long zz;\n\
    \    long aaa;\n    long bbb;\n    long ccc;\n    long ddd;\n    long eee;\n \
    \   long fff;\n    long ggg;\n    long hhh;\n    long iii;\n    long jjj;\n  \
    \  long kkk;\n    long lll;\n    long mmm;\n    long nnn;\n    long ooo;\n   \
    \ long ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n    long\
    \ uuu;\n    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n    long zzz;\n\
    \    long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n    long eeee;\n\
    \    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n    long jjjj;\n\
    \    long kkkk;\n    long llll;\n    long mmmm;\n    long nnnn;\n    long oooo;\n\
    \    long pppp;\n    long qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_u26zrzj.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_u26zrzj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavt_10y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[i] /= 2;\n        }\n        else\n \
    \       {\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_f9l6blc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavt_10y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long count = 0;\n    foreach(char c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            count += 4;\n        }\n\
    \        else if(c == '|')\n        {\n            result ~= count;\n        \
    \    count = 0;\n        }\n        else if(c == '.')\n        {\n           \
    \ count += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9onekec3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] beats;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                beats ~= 4;\n             \
    \   break;\n            case 'o|':\n                beats ~= 2;\n            \
    \    break;\n            case '.|':\n                beats ~= 1;\n           \
    \     break;\n        }\n    }\n    return beats;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5f50_06w.d(25): Error: unterminated character constant\n/tmp/tmp5f50_06w.d(25):
    Error: unterminated character constant\n/tmp/tmp5f50_06w.d(26): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp5f50_06w.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmp5f50_06w.d(28): Error: unterminated character constant\n/tmp/tmp5f50_06w.d(28):
    Error: unterminated character constant\n/tmp/tmp5f50_06w.d(29): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp5f50_06w.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f50_06w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o':\n                result ~= 2;\n           \
    \     break;\n            case '.':\n                result ~= 1;\n          \
    \      break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3vnmm_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavt_10y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    int j = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            result ~= 4;\n          \
    \  i++;\n        }\n        else if(c == '|')\n        {\n            result[i-1]\
    \ /= 2;\n        }\n        else if(c == '.')\n        {\n            result[i-1]\
    \ /= 4;\n        }\n        else if(c == ' ')\n        {\n            j++;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tn5m1a6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeelb9eoq.d(25): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(25):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpeelb9eoq.d(28): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(28):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeelb9eoq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    long i = 0;\n    long j = 0;\n    foreach(immutable\
    \ c; music_string)\n    {\n        if(c == 'o')\n        {\n            temp ~=\
    \ 4;\n        }\n        else if(c == '.')\n        {\n            temp ~= 1;\n\
    \        }\n        else if(c == '|')\n        {\n            temp[$-1] /= 2;\n\
    \        }\n    }\n    foreach(immutable c; temp)\n    {\n        if(c == 1)\n\
    \        {\n            result ~= c;\n        }\n        else\n        {\n   \
    \         while(c > 0)\n            {\n                if(c >= 4)\n          \
    \      {\n                    result ~= 4;\n                    c -= 4;\n    \
    \            }\n                else if(c >= 2)\n                {\n         \
    \           result ~= 2;\n                    c -= 2;\n                }\n   \
    \             else if(c >= 1)\n                {\n                    result ~=\
    \ 1;\n                    c -= 1;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ye26oaw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(char c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '.')\n        {\n            result ~= 1;\n        }\n       \
    \ else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzztg4pax.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            if(music_string[i-1] == 'o')\n        \
    \    {\n                result[$-1] = 2;\n            }\n            else if(music_string[i-1]\
    \ == '.')\n            {\n                result[$-1] = 1;\n            }\n  \
    \      }\n        else if(c == '.')\n        {\n            result ~= 0;\n   \
    \     }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99i0d9cc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n   \
    \ long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[]\
    \ tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n\
    \    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n\
    \    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n\
    \    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n\
    \    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n\
    \    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n\
    \    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n\
    \    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n\
    \    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n\
    \    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n\
    \    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n\
    \    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n\
    \    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n\
    \    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n\
    \    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n\
    \    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8e8nqbl8.d(91): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8e8nqbl8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long count = 0;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            count += 4;\n        }\n       \
    \ else if(c == '|')\n        {\n            result ~= count;\n            count\
    \ = 0;\n        }\n        else if(c == '.')\n        {\n            count +=\
    \ 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ep80y57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] beats;\n    foreach(immutable char c; music_string)\n    {\n     \
    \   switch(c)\n        {\n            case 'o':\n                beats ~= 4;\n\
    \                break;\n            case 'o|':\n                beats ~= 2;\n\
    \                break;\n            case '.|':\n                beats ~= 1;\n\
    \                break;\n        }\n    }\n    return beats;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp30kevgwq.d(25): Error: unterminated character constant\n/tmp/tmp30kevgwq.d(25):
    Error: unterminated character constant\n/tmp/tmp30kevgwq.d(26): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp30kevgwq.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmp30kevgwq.d(28): Error: unterminated character constant\n/tmp/tmp30kevgwq.d(28):
    Error: unterminated character constant\n/tmp/tmp30kevgwq.d(29): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp30kevgwq.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30kevgwq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] ret;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                ret ~= 4;\n               \
    \ break;\n            case 'o|':\n                ret ~= 2;\n                break;\n\
    \            case '.|':\n                ret ~= 1;\n                break;\n \
    \       }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz5p_k11d.d(25): Error: unterminated character constant\n/tmp/tmpz5p_k11d.d(25):
    Error: unterminated character constant\n/tmp/tmpz5p_k11d.d(26): Error: found \''ret\''
    when expecting \'':\''\n/tmp/tmpz5p_k11d.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpz5p_k11d.d(28): Error: unterminated character constant\n/tmp/tmpz5p_k11d.d(28):
    Error: unterminated character constant\n/tmp/tmpz5p_k11d.d(29): Error: found \''ret\''
    when expecting \'':\''\n/tmp/tmpz5p_k11d.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5p_k11d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == 'o' && music_string[i+1] == '|')\n        {\n            result ~= 2;\n\
    \            i++;\n        }\n        else if(c == '.' && music_string[i+1] ==\
    \ '|')\n        {\n            result ~= 1;\n            i++;\n        }\n   \
    \     i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_b2bpai.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2cnt96ak.d(26): Error: unterminated character constant\n/tmp/tmp2cnt96ak.d(26):
    Error: unterminated character constant\n/tmp/tmp2cnt96ak.d(27): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmp2cnt96ak.d(27): Error: found \''~=\'' instead
    of statement\n/tmp/tmp2cnt96ak.d(29): Error: unterminated character constant\n/tmp/tmp2cnt96ak.d(29):
    Error: unterminated character constant\n/tmp/tmp2cnt96ak.d(30): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmp2cnt96ak.d(30): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2cnt96ak.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprz3q_7aa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    auto notes = split(music_string, \" \");\n    long[] result;\n    foreach(note;\
    \ notes)\n    {\n        if(note == \"o\")\n            result ~= 4;\n       \
    \ else if(note == \"o|\")\n            result ~= 2;\n        else if(note == \"\
    .|\")\n            result ~= 1;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnma04mmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n    {\n   \
    \     if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavt_10y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string)\n    {\n    \
    \    switch(c)\n        {\n            case 'o':\n                result ~= 4;\n\
    \                break;\n            case 'o|':\n                result ~= 2;\n\
    \                break;\n            case '.|':\n                result ~= 1;\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1tpqvmp.d(25): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(25):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpo1tpqvmp.d(28): Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(28):
    Error: unterminated character constant\n/tmp/tmpo1tpqvmp.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpo1tpqvmp.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1tpqvmp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o':\n                result ~= 2;\n           \
    \     break;\n            case '.':\n                result ~= 1;\n          \
    \      break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3vnmm_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n\
    \    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n\
    \    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \    long[] temp72;\n\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3vkkxian.d(91): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vkkxian.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            if(music_string[i-1] == 'o')\n        \
    \    {\n                result[$-1] = 2;\n            }\n            else if(music_string[i-1]\
    \ == '.')\n            {\n                result[$-1] = 1;\n            }\n  \
    \      }\n        else if(c == '.')\n        {\n            result ~= 0;\n   \
    \     }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99i0d9cc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        if(c\
    \ == 'o')\n            result ~= 4;\n        else if(c == '|')\n            result\
    \ ~= 2;\n        else if(c == '.')\n            result ~= 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoejtxgcf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] beats;\n    string[] notes;\n    string[] notes_split;\n    string[]\
    \ notes_split_2;\n    string[] notes_split_3;\n    string[] notes_split_4;\n \
    \   string[] notes_split_5;\n    string[] notes_split_6;\n    string[] notes_split_7;\n\
    \    string[] notes_split_8;\n    string[] notes_split_9;\n    string[] notes_split_10;\n\
    \    string[] notes_split_11;\n    string[] notes_split_12;\n    string[] notes_split_13;\n\
    \    string[] notes_split_14;\n    string[] notes_split_15;\n    string[] notes_split_16;\n\
    \    string[] notes_split_17;\n    string[] notes_split_18;\n    string[] notes_split_19;\n\
    \    string[] notes_split_20;\n    string[] notes_split_21;\n    string[] notes_split_22;\n\
    \    string[] notes_split_23;\n    string[] notes_split_24;\n    string[] notes_split_25;\n\
    \    string[] notes_split_26;\n    string[] notes_split_27;\n    string[] notes_split_28;\n\
    \    string[] notes_split_29;\n    string[] notes_split_30;\n    string[] notes_split_31;\n\
    \    string[] notes_split_32;\n    string[] notes_split_33;\n    string[] notes_split_34;\n\
    \    string[] notes_split_35;\n    string[] notes_split_36;\n    string[] notes_split_37;\n\
    \    string[] notes_split_38;\n    string[] notes_split_39;\n    string[] notes_split_40;\n\
    \    string[] notes_split_41;\n    string[] notes_split_42;\n    string[] notes_split_43;\n\
    \    string[] notes_split_44;\n    string[] notes_split_45;\n    string[] notes_split_46;\n\
    \    string[] notes_split_47;\n    string[] notes_split_48;\n    string[] notes_split_49;\n\
    \    string[] notes_split_50;\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0x49isf4.d(69): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0x49isf4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(c; music_string)\n    {\n        if(c == 'o')\n\
    \            result ~= 4;\n        else if(c == '|')\n            result[$-1]\
    \ /= 2;\n        else if(c == '.')\n            result[$-1] /= 4;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_zyp3wr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr8c392a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n        else\
    \ if(c == '.')\n        {\n            result[$-1] /= 4;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwswg5rl1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long count = 0;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            count += 4;\n        }\n       \
    \ else if(c == '|')\n        {\n            result ~= count;\n            count\
    \ = 0;\n        }\n        else if(c == '.')\n        {\n            count +=\
    \ 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ep80y57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] beats;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                beats ~= 4;\n             \
    \   break;\n            case 'o|':\n                beats ~= 2;\n            \
    \    break;\n            case '.|':\n                beats ~= 1;\n           \
    \     break;\n        }\n    }\n    return beats;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5f50_06w.d(25): Error: unterminated character constant\n/tmp/tmp5f50_06w.d(25):
    Error: unterminated character constant\n/tmp/tmp5f50_06w.d(26): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp5f50_06w.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmp5f50_06w.d(28): Error: unterminated character constant\n/tmp/tmp5f50_06w.d(28):
    Error: unterminated character constant\n/tmp/tmp5f50_06w.d(29): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp5f50_06w.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f50_06w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable char c; music_string) \n    {\n   \
    \     switch(c) \n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case 'o|':\n                result ~=\
    \ 2;\n                break;\n            case '.|':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi_z68ihg.d(25): Error: unterminated character constant\n/tmp/tmpi_z68ihg.d(25):
    Error: unterminated character constant\n/tmp/tmpi_z68ihg.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpi_z68ihg.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpi_z68ihg.d(28): Error: unterminated character constant\n/tmp/tmpi_z68ihg.d(28):
    Error: unterminated character constant\n/tmp/tmpi_z68ihg.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpi_z68ihg.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_z68ihg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i = 0;\n    foreach(c; music_string)\n    {\n  \
    \      if(c == 'o')\n        {\n            result ~= 4;\n        }\n        else\
    \ if(c == '.')\n        {\n            result ~= 1;\n        }\n        else if(c\
    \ == '|')\n        {\n            result[$-1] /= 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr8c392a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] beats;\n    foreach(immutable char c; music_string)\n    {\n     \
    \   switch(c)\n        {\n            case 'o':\n                beats ~= 4;\n\
    \                break;\n            case 'o|':\n                beats ~= 2;\n\
    \                break;\n            case '.|':\n                beats ~= 1;\n\
    \                break;\n        }\n    }\n    return beats;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp30kevgwq.d(25): Error: unterminated character constant\n/tmp/tmp30kevgwq.d(25):
    Error: unterminated character constant\n/tmp/tmp30kevgwq.d(26): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp30kevgwq.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmp30kevgwq.d(28): Error: unterminated character constant\n/tmp/tmp30kevgwq.d(28):
    Error: unterminated character constant\n/tmp/tmp30kevgwq.d(29): Error: found \''beats\''
    when expecting \'':\''\n/tmp/tmp30kevgwq.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30kevgwq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l\
    \ = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int\
    \ q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n   \
    \ int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int aa = 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae\
    \ = 0;\n    int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n \
    \   int aj = 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an\
    \ = 0;\n    int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n \
    \   int as = 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw\
    \ = 0;\n    int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n \
    \   int bb = 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf\
    \ = 0;\n    int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n \
    \   int bk = 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo\
    \ = 0;\n    int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n \
    \   int bt = 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx\
    \ = 0;\n    int by = 0\nunittest\n{\n    alias candidate = parse_music;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1rbjh5la.d(87): Error: semicolon expected, not \''unittest\''\n/tmp/tmp1rbjh5la.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp1rbjh5la.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeelb9eoq.d(25): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(25):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpeelb9eoq.d(28): Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(28):
    Error: unterminated character constant\n/tmp/tmpeelb9eoq.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpeelb9eoq.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeelb9eoq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n\
    \    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int\
    \ t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n\
    \    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n\
    \    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n\
    \    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n\
    \    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n\
    \    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n\
    \    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int\
    \ jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n\
    \    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int\
    \ uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n\
    \    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n \
    \   int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n  \
    \  int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n   \
    \ int pppp;\n    int qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg0ixwxnh.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0ixwxnh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i;\n    long j;\n    char[] current_note;\n    long\
    \ note_length;\n    long[] note_lengths;\n    char[] note_characters;\n    char[]\
    \ note_character;\n    long note_character_length;\n    long[] note_character_lengths;\n\
    \    char[] note_character_characters;\n    char[] note_character_character;\n\
    \    long note_character_character_length;\n    long[] note_character_character_lengths;\n\
    \    char[] note_character_character_characters;\n    char[] note_character_character_character;\n\
    \    long note_character_character_character_length;\n    long[] note_character_character_character_lengths;\n\
    \    char[] note_character_character_character_characters;\n    char[] note_character_character_character_character;\n\
    \    long note_character_character_character_character_length;\n    long[] note_character_character_character_character_lengths;\n\
    \    char[] note_character_character_character_character_characters;\n    char[]\
    \ note_character_character_character_character_character;\n    long note_character_character_character_character_character_length;\n\
    \    long[] note_character_character_character_character_character_lengths;\n\
    \    char[] note_character_character_character_character_character_characters;\n\
    \    char[] note_character_character_character_character_character_character;\n\
    \    long note_character_character_character_character_character_character_length;\n\
    \    long[] note_character_character_character_character_character_character_lengths;\n\
    \    char[] note_character_character_character_character_character_character_characters;\n\
    \    char[] note_character_character_character_character_character_character_character;\n\
    \    long note_character_character_character_character_character_character_character_length;\n\
    \    long[] note_character_character_character_character_character_character_character_lengths;\n\
    \    char[] note_character_character_character_character_character_character_character_characters;\n\
    \    char[] note_character_character_character_character_character_character_character_\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2xo_750f.d(53): Error: semicolon expected, not \''unittest\''\n/tmp/tmp2xo_750f.d(53):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2xo_750f.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i;\n    int length = music_string.length;\n    int\
    \ count = 0;\n    foreach(c; music_string)\n    {\n        if(c == 'o' || c ==\
    \ '.')\n            count++;\n    }\n    result = new long[count];\n    int index\
    \ = 0;\n    for(i = 0; i < length; i++)\n    {\n        if(music_string[i] ==\
    \ 'o')\n        {\n            result[index] = 4;\n            index++;\n    \
    \    }\n        else if(music_string[i] == '.')\n        {\n            result[index]\
    \ = 1;\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sqxz8iw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        switch(c)\n\
    \        {\n            case 'o':\n                result ~= 4;\n            \
    \    break;\n            case 'o|':\n                result ~= 2;\n          \
    \      break;\n            case '.|':\n                result ~= 1;\n        \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbd_ggchj.d(25): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(25):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(26): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(26): Error: found \''~=\'' instead
    of statement\n/tmp/tmpbd_ggchj.d(28): Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(28):
    Error: unterminated character constant\n/tmp/tmpbd_ggchj.d(29): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpbd_ggchj.d(29): Error: found \''~=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd_ggchj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015200
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l\
    \ = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int\
    \ q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n   \
    \ int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj =\
    \ 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n   \
    \ int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss =\
    \ 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n   \
    \ int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb =\
    \ 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n   \
    \ int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk\
    \ = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n\
    \    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int\
    \ ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0k1s1x1.d(86): Error: semicolon expected, not \''unittest\''\n/tmp/tmpp0k1s1x1.d(86):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpp0k1s1x1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    long i;\n    long j;\n    long k;\n    long l;\n    long\
    \ m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long\
    \ s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long\
    \ y;\n    long z;\n    long aa;\n    long bb;\n    long cc;\n    long dd;\n  \
    \  long ee;\n    long ff;\n    long gg;\n    long hh;\n    long ii;\n    long\
    \ jj;\n    long kk;\n    long ll;\n    long mm;\n    long nn;\n    long oo;\n\
    \    long pp;\n    long qq;\n    long rr;\n    long ss;\n    long tt;\n    long\
    \ uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n    long zz;\n\
    \    long aaa;\n    long bbb;\n    long ccc;\n    long ddd;\n    long eee;\n \
    \   long fff;\n    long ggg;\n    long hhh;\n    long iii;\n    long jjj;\n  \
    \  long kkk;\n    long lll;\n    long mmm;\n    long nnn;\n    long ooo;\n   \
    \ long ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n    long\
    \ uuu;\n    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n    long zzz;\n\
    \    long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n    long eeee;\n\
    \    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n    long jjjj;\n\
    \    long kkkk;\n    long llll;\n    long mmmm;\n    long nnnn;\n    long oooo;\n\
    \    long pppp;\n    long qqqq;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_u26zrzj.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_u26zrzj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n        \n*/\nlong[] parse_music(string music_string) \n{\n\
    \    long[] result;\n    foreach(immutable c; music_string)\n    {\n        if(c\
    \ == 'o')\n            result ~= 4;\n        else if(c == '.')\n            result\
    \ ~= 1;\n        else if(c == '|')\n            continue;\n        else\n    \
    \        assert(false);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7yt8sec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015201
