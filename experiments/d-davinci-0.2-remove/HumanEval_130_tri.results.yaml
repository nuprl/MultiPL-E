language: d
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (int i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \     {\n            result[i] = 1 + i / 2;\n        }\n        else\n       \
    \ {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpy381spks.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428916]

    ??:? long[] tmpy381spks.tri(long) [0x427f59]

    ??:? void tmpy381spks.__unittest_L38_C1() [0x427f97]

    ??:? void tmpy381spks.__modtest() [0x4285e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]

    ??:? runModuleUnitTests [0x42c6f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl133x47b.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpl133x47b.tri(long) [0x427fc9]

    ??:? void tmpl133x47b.__unittest_L41_C1() [0x428007]

    ??:? void tmpl133x47b.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpu1_kmi6q.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpu1_kmi6q.tri(long) [0x427f82]

    ??:? void tmpu1_kmi6q.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpu1_kmi6q.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    for(int i = 2; i < n+1; i++)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            result[i] = 1 + i / 2;\n        }\n        else\n        {\n\
    \            result[i] = result[i-1] + result[i-2] + result[i+1];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpep6s6nwd.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428916]

    ??:? long[] tmpep6s6nwd.tri(long) [0x427f5f]

    ??:? void tmpep6s6nwd.__unittest_L38_C1() [0x427f9b]

    ??:? void tmpep6s6nwd.__modtest() [0x4285e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]

    ??:? runModuleUnitTests [0x42c6f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (long i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \      {\n            result[i] = 1 + i / 2;\n        }\n        else\n      \
    \  {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmptj53678q.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42891e]

    ??:? long[] tmptj53678q.tri(long) [0x427f5f]

    ??:? void tmptj53678q.__unittest_L38_C1() [0x427f9f]

    ??:? void tmptj53678q.__modtest() [0x4285ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c927]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ef4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b791]

    ??:? runModuleUnitTests [0x42c6fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i]\
    \ = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpasxazqin.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428835]

    ??:? void tmpasxazqin.__unittest_L32_C1() [0x427fe5]

    ??:? void tmpasxazqin.__modtest() [0x4285b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b782]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ebc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430999]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b759]

    ??:? runModuleUnitTests [0x42c6c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428cf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    if (n ==\
    \ 3)\n        return result;\n    for (long i = 3; i <= n; i++)\n    {\n     \
    \   if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n      \
    \      result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78r30_m1.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmp78r30_m1.__unittest_L43_C1() [0x42809d]

    ??:? void tmp78r30_m1.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    if (n ==\
    \ 3)\n        return result;\n    for (long i = 3; i <= n; i++)\n    {\n     \
    \   if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n      \
    \      result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78r30_m1.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmp78r30_m1.__unittest_L43_C1() [0x42809d]

    ??:? void tmp78r30_m1.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] res = new long[n + 1];\n    res[0] = 1;\n    res[1] = 1;\n \
    \   res[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n        {\n            res[i] = 1 + i / 2;\n        }\n        else\n  \
    \      {\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1];\n       \
    \ }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = tri;\n\n  \
    \  assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpflaxm3ld.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpflaxm3ld.tri(long) [0x427f82]

    ??:? void tmpflaxm3ld.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpflaxm3ld.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 + i /\
    \ 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmphsx9_o_0.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmphsx9_o_0.tri(long) [0x427fc9]

    ??:? void tmphsx9_o_0.__unittest_L41_C1() [0x428007]

    ??:? void tmphsx9_o_0.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnv2n9xnm.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpnv2n9xnm.tri(long) [0x427f7f]

    ??:? void tmpnv2n9xnm.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpnv2n9xnm.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    for(int i = 2; i < n+1; i++)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            result[i] = 1 + i / 2;\n        }\n        else\n        {\n\
    \            result[i] = result[i-1] + result[i-2] + result[i+1];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpep6s6nwd.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428916]

    ??:? long[] tmpep6s6nwd.tri(long) [0x427f5f]

    ??:? void tmpep6s6nwd.__unittest_L38_C1() [0x427f9b]

    ??:? void tmpep6s6nwd.__modtest() [0x4285e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]

    ??:? runModuleUnitTests [0x42c6f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp8tu45sgg.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp8tu45sgg.tri(long) [0x427f7c]

    ??:? void tmp8tu45sgg.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp8tu45sgg.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    if (n == 0)\n        return\
    \ result;\n    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1]\
    \ = 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsnmuwjmy.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnmuwjmy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl133x47b.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpl133x47b.tri(long) [0x427fc9]

    ??:? void tmpl133x47b.__unittest_L41_C1() [0x428007]

    ??:? void tmpl133x47b.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    if (n == 1)\n        return result;\n    result[2] = 1;\n    if (n\
    \ == 2)\n        return result;\n    result[3] = 8;\n    if (n == 3)\n       \
    \ return result;\n    for (long i = 4; i <= n; i++)\n    {\n        if (i % 2\
    \ == 0)\n            result[i] = 1 + i / 2;\n        else\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph2e32fph.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288fd]

    ??:? void tmph2e32fph.__unittest_L42_C1() [0x4280a9]

    ??:? void tmph2e32fph.__modtest() [0x42867c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b84a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ad5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a61]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b821]

    ??:? runModuleUnitTests [0x42c78d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n+1];\n    result[0] = 3;\n    if(n ==\
    \ 0)\n        return result;\n    result[1] = 1;\n    if(n == 1)\n        return\
    \ result;\n    result[2] = 2;\n    if(n == 2)\n        return result;\n    for(int\
    \ i = 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0g8lnyca.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0g8lnyca.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp8tu45sgg.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp8tu45sgg.tri(long) [0x427f7c]

    ??:? void tmp8tu45sgg.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp8tu45sgg.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpyzstej9u.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpyzstej9u.tri(long) [0x427f82]

    ??:? void tmpyzstej9u.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpyzstej9u.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n+1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx42ph1ns.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx42ph1ns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd593kmju.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd593kmju.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5bfp9i_i.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp5bfp9i_i.tri(long) [0x427f7c]

    ??:? void tmp5bfp9i_i.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp5bfp9i_i.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for(int i = 3; i < n+1; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzev9z_7q.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpzev9z_7q.tri(long) [0x427f82]

    ??:? void tmpzev9z_7q.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpzev9z_7q.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp9vcwjo29.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmp9vcwjo29.tri(long) [0x427f7f]

    ??:? void tmp9vcwjo29.__unittest_L39_C1() [0x427fbf]

    ??:? void tmp9vcwjo29.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl133x47b.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpl133x47b.tri(long) [0x427fc9]

    ??:? void tmpl133x47b.__unittest_L41_C1() [0x428007]

    ??:? void tmpl133x47b.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    for (long\
    \ i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n           \
    \ result[i] = 1 + i / 2;\n        }\n        else\n        {\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5713tjov.d(32): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4288ee]

    ??:? long[] tmp5713tjov.tri(long) [0x427f13]

    ??:? void tmp5713tjov.__unittest_L37_C1() [0x427f73]

    ??:? void tmp5713tjov.__modtest() [0x4285c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b78a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ec4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b761]

    ??:? runModuleUnitTests [0x42c6cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int i = 3;\
    \ i < n; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 + i /\
    \ 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuzi_29xh.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288d5]

    ??:? void tmpuzi_29xh.__unittest_L41_C1() [0x428081]

    ??:? void tmpuzi_29xh.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp37u1tln0.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp37u1tln0.tri(long) [0x427f7c]

    ??:? void tmp37u1tln0.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp37u1tln0.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    if (n == 0)\n        return\
    \ result;\n    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1]\
    \ = 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[(int)i]\
    \ = 1 + i / 2;\n        else\n            result[(int)i] = result[(int)i - 1]\
    \ + result[(int)i - 2] + result[(int)i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr3dw8fe4.d(22): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpr3dw8fe4.d(35): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpr3dw8fe4.d(37): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpr3dw8fe4.d(37): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpr3dw8fe4.d(37): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpr3dw8fe4.d(37): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3dw8fe4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i]\
    \ = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpasxazqin.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428835]

    ??:? void tmpasxazqin.__unittest_L32_C1() [0x427fe5]

    ??:? void tmpasxazqin.__modtest() [0x4285b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b782]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ebc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430999]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b759]

    ??:? runModuleUnitTests [0x42c6c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428cf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    if (n == 0)\n        return\
    \ result;\n    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1]\
    \ = 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsnmuwjmy.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnmuwjmy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (int i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \     {\n            result[i] = 1 + i / 2;\n        }\n        else\n       \
    \ {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpy381spks.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428916]

    ??:? long[] tmpy381spks.tri(long) [0x427f59]

    ??:? void tmpy381spks.__unittest_L38_C1() [0x427f97]

    ??:? void tmpy381spks.__modtest() [0x4285e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]

    ??:? runModuleUnitTests [0x42c6f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnv2n9xnm.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpnv2n9xnm.tri(long) [0x427f7f]

    ??:? void tmpnv2n9xnm.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpnv2n9xnm.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 1;\n    result[2] = 1;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpu1p1h5o9.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpu1p1h5o9.tri(long) [0x427f7c]

    ??:? void tmpu1p1h5o9.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpu1p1h5o9.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n        }\n \
    \       else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpeolzq9mo.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpeolzq9mo.tri(long) [0x427f7c]

    ??:? void tmpeolzq9mo.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpeolzq9mo.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl133x47b.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpl133x47b.tri(long) [0x427fc9]

    ??:? void tmpl133x47b.__unittest_L41_C1() [0x428007]

    ??:? void tmpl133x47b.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n       \
    \ return new long[]{3};\n    if (n == 2)\n        return new long[]{3, 2};\n \
    \   if (n == 3)\n        return new long[]{3, 2, 8};\n    auto result = new long[n\
    \ + 1];\n    result[0] = 3;\n    result[1] = 2;\n    result[2] = 8;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4i_mpcej.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp4i_mpcej.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmp4i_mpcej.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp4i_mpcej.d(27): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp4i_mpcej.d(27): Error: found `}` when expecting `;` following statement

    /tmp/tmp4i_mpcej.d(27): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp4i_mpcej.d(29): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp4i_mpcej.d(29): Error: found `}` when expecting `;` following statement

    /tmp/tmp4i_mpcej.d(29): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4i_mpcej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (long i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \      {\n            result[i] = 1 + i / 2;\n        }\n        else\n      \
    \  {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmptj53678q.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42891e]

    ??:? long[] tmptj53678q.tri(long) [0x427f5f]

    ??:? void tmptj53678q.__unittest_L38_C1() [0x427f9f]

    ??:? void tmptj53678q.__modtest() [0x4285ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c927]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ef4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b791]

    ??:? runModuleUnitTests [0x42c6fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp7a3npvls.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp7a3npvls.tri(long) [0x427f7c]

    ??:? void tmp7a3npvls.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp7a3npvls.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpovd67und.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpovd67und.tri(long) [0x427f7f]

    ??:? void tmpovd67und.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpovd67und.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n+1];\n    if(n == 0)\n        return\
    \ result;\n    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1]\
    \ = 1;\n    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int\
    \ i = 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsqzpf2g8.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqzpf2g8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    if (n ==\
    \ 3)\n        return result;\n    for (long i = 3; i <= n; i++)\n    {\n     \
    \   if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n      \
    \      result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78r30_m1.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmp78r30_m1.__unittest_L43_C1() [0x42809d]

    ??:? void tmp78r30_m1.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    if(n == 1)\n    {\n        result[0] = 3;\n        return result;\n    }\n\
    \    if(n == 2)\n    {\n        result[0] = 3;\n        result[1] = 2;\n     \
    \   return result;\n    }\n    if(n == 3)\n    {\n        result[0] = 3;\n   \
    \     result[1] = 2;\n        result[2] = 8;\n        return result;\n    }\n\
    \    result[0] = 3;\n    result[1] = 2;\n    result[2] = 8;\n    for(long i =\
    \ 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 +\
    \ i / 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx4dq99_o.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289d5]

    ??:? void tmpx4dq99_o.__unittest_L55_C1() [0x428185]

    ??:? void tmpx4dq99_o.__modtest() [0x428758]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca8f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b922]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430bad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43105c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8f9]

    ??:? runModuleUnitTests [0x42c865]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    auto result = new long[n+1];\n    result[0] = 3;\n    result[1] = 2;\n\
    \    result[2] = 8;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i % 2\
    \ == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n        else\n\
    \        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpjr5n4bl1.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpjr5n4bl1.tri(long) [0x427f7c]

    ??:? void tmpjr5n4bl1.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpjr5n4bl1.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int i = 3;\
    \ i < n; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 + i /\
    \ 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuzi_29xh.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288d5]

    ??:? void tmpuzi_29xh.__unittest_L41_C1() [0x428081]

    ??:? void tmpuzi_29xh.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    if (n ==\
    \ 3)\n        return result;\n    for (int i = 3; i < n + 1; i++)\n    {\n   \
    \     if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n    \
    \        result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqa8ini1q.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmpqa8ini1q.__unittest_L43_C1() [0x42809d]

    ??:? void tmpqa8ini1q.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp9vcwjo29.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmp9vcwjo29.tri(long) [0x427f7f]

    ??:? void tmp9vcwjo29.__unittest_L39_C1() [0x427fbf]

    ??:? void tmp9vcwjo29.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmptk2ni81e.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmptk2ni81e.tri(long) [0x427f7c]

    ??:? void tmptk2ni81e.__unittest_L39_C1() [0x427fbb]

    ??:? void tmptk2ni81e.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (long i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \      {\n            result[i] = 1 + i / 2;\n        }\n        else\n      \
    \  {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmptj53678q.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42891e]

    ??:? long[] tmptj53678q.tri(long) [0x427f5f]

    ??:? void tmptj53678q.__unittest_L38_C1() [0x427f9f]

    ??:? void tmptj53678q.__modtest() [0x4285ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c927]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ef4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b791]

    ??:? runModuleUnitTests [0x42c6fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    if (n ==\
    \ 3)\n        return result;\n    for (long i = 3; i <= n; i++)\n    {\n     \
    \   if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n      \
    \      result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78r30_m1.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmp78r30_m1.__unittest_L43_C1() [0x42809d]

    ??:? void tmp78r30_m1.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n       \
    \ }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuoi3c9wh.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpuoi3c9wh.tri(long) [0x427f7f]

    ??:? void tmpuoi3c9wh.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpuoi3c9wh.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] res = new long[n + 1];\n    res[0] = 0;\n    res[1] = 3;\n \
    \   res[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n            res[i] = 1 + i / 2;\n        else\n            res[i] = res[i\
    \ - 1] + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpi73u01ey.d(31): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpi73u01ey.tri(long) [0x427f7f]

    ??:? void tmpi73u01ey.__unittest_L35_C1() [0x427fbf]

    ??:? void tmpi73u01ey.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 3;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpf4r1kua4.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42892e]

    ??:? long[] tmpf4r1kua4.tri(long) [0x427f77]

    ??:? void tmpf4r1kua4.__unittest_L39_C1() [0x427fb3]

    ??:? void tmpf4r1kua4.__modtest() [0x428600]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c937]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f04]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a1]

    ??:? runModuleUnitTests [0x42c70d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n        }\n    \
    \    else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpo0w8i7bq.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpo0w8i7bq.tri(long) [0x427f7c]

    ??:? void tmpo0w8i7bq.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpo0w8i7bq.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnv2n9xnm.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpnv2n9xnm.tri(long) [0x427f7f]

    ??:? void tmpnv2n9xnm.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpnv2n9xnm.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    if (n > 0)\n\
    \    {\n        result[1] = 3;\n        for (long i = 2; i <= n; i++)\n      \
    \  {\n            if (i % 2 == 0)\n            {\n                result[i] =\
    \ 1 + i / 2;\n            }\n            else\n            {\n               \
    \ result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpxsgtpodn.d(35): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42891e]

    ??:? long[] tmpxsgtpodn.tri(long) [0x427f65]

    ??:? void tmpxsgtpodn.__unittest_L41_C1() [0x427fa3]

    ??:? void tmpxsgtpodn.__modtest() [0x4285f0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c927]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ef4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b791]

    ??:? runModuleUnitTests [0x42c6fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    if (n == 0)\n        return\
    \ result;\n    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1]\
    \ = 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsnmuwjmy.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnmuwjmy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 1;\n    result[2] = 1;\n    for(int i = 3; i <= n; i++)\n    {\n        result[i]\
    \ = result[i-1] + result[i-2] + result[i-3];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6nbn46vh.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428835]

    ??:? void tmp6nbn46vh.__unittest_L32_C1() [0x427fe5]

    ??:? void tmp6nbn46vh.__modtest() [0x4285b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b782]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ebc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430999]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b759]

    ??:? runModuleUnitTests [0x42c6c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428cf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (long i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \      {\n            result[i] = 1 + i / 2;\n        }\n        else\n      \
    \  {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmptj53678q.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42891e]

    ??:? long[] tmptj53678q.tri(long) [0x427f5f]

    ??:? void tmptj53678q.__unittest_L38_C1() [0x427f9f]

    ??:? void tmptj53678q.__modtest() [0x4285ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c927]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ef4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b791]

    ??:? runModuleUnitTests [0x42c6fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcj7yui8t.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcj7yui8t.tri(long) [0x427f7c]

    ??:? void tmpcj7yui8t.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcj7yui8t.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcbq_8d77.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcbq_8d77.tri(long) [0x427f7c]

    ??:? void tmpcbq_8d77.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcbq_8d77.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    if (n == 0)\n        return\
    \ result;\n    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1]\
    \ = 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsnmuwjmy.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnmuwjmy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    if (n ==\
    \ 3)\n        return result;\n    for (long i = 3; i <= n; i++)\n    {\n     \
    \   if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n      \
    \      result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78r30_m1.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmp78r30_m1.__unittest_L43_C1() [0x42809d]

    ??:? void tmp78r30_m1.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl133x47b.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpl133x47b.tri(long) [0x427fc9]

    ??:? void tmpl133x47b.__unittest_L41_C1() [0x428007]

    ??:? void tmpl133x47b.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcbq_8d77.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcbq_8d77.tri(long) [0x427f7c]

    ??:? void tmpcbq_8d77.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcbq_8d77.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpyzstej9u.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpyzstej9u.tri(long) [0x427f82]

    ??:? void tmpyzstej9u.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpyzstej9u.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ result[i] = (i % 2 == 0) ? (1 + i / 2) : (result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpkvlbz0zo.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42890e]

    ??:? long[] tmpkvlbz0zo.tri(long) [0x427f41]

    ??:? void tmpkvlbz0zo.__unittest_L32_C1() [0x427f93]

    ??:? void tmpkvlbz0zo.__modtest() [0x4285e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c917]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ee4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b781]

    ??:? runModuleUnitTests [0x42c6ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    auto result = new long[n + 1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpx7i1l3fw.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpx7i1l3fw.tri(long) [0x427f7c]

    ??:? void tmpx7i1l3fw.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpx7i1l3fw.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpb3s61j_7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpb3s61j_7.tri(long) [0x427f7b]

    ??:? void tmpb3s61j_7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpb3s61j_7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpovd67und.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpovd67und.tri(long) [0x427f7f]

    ??:? void tmpovd67und.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpovd67und.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n+1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for(int i = 3; i < n+1; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpimqpepzk.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpimqpepzk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcj7yui8t.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcj7yui8t.tri(long) [0x427f7c]

    ??:? void tmpcj7yui8t.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcj7yui8t.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpyzstej9u.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpyzstej9u.tri(long) [0x427f82]

    ??:? void tmpyzstej9u.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpyzstej9u.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (int i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \     {\n            result[i] = 1 + i / 2;\n        }\n        else\n       \
    \ {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpy381spks.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428916]

    ??:? long[] tmpy381spks.tri(long) [0x427f59]

    ??:? void tmpy381spks.__unittest_L38_C1() [0x427f97]

    ??:? void tmpy381spks.__modtest() [0x4285e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]

    ??:? runModuleUnitTests [0x42c6f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n+1];\n    if(n == 0)\n        return\
    \ result;\n    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1]\
    \ = 1;\n    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int\
    \ i = 3; i < n+1; i++)\n    {\n        if(i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5w2q0_al.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5w2q0_al.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int i = 3;\
    \ i < n+1; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 + i\
    \ / 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpa5knpvtw.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpa5knpvtw.tri(long) [0x427fcf]

    ??:? void tmpa5knpvtw.__unittest_L41_C1() [0x42800b]

    ??:? void tmpa5knpvtw.__modtest() [0x428658]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (int i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \     {\n            result[i] = 1 + i / 2;\n        }\n        else\n       \
    \ {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpy381spks.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428916]

    ??:? long[] tmpy381spks.tri(long) [0x427f59]

    ??:? void tmpy381spks.__unittest_L38_C1() [0x427f97]

    ??:? void tmpy381spks.__modtest() [0x4285e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]

    ??:? runModuleUnitTests [0x42c6f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcbq_8d77.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcbq_8d77.tri(long) [0x427f7c]

    ??:? void tmpcbq_8d77.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcbq_8d77.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpovd67und.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpovd67und.tri(long) [0x427f7f]

    ??:? void tmpovd67und.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpovd67und.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i < n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkao_qzzc.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkao_qzzc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (int i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \     {\n            result[i] = 1 + i / 2;\n        }\n        else\n       \
    \ {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpy381spks.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428916]

    ??:? long[] tmpy381spks.tri(long) [0x427f59]

    ??:? void tmpy381spks.__unittest_L38_C1() [0x427f97]

    ??:? void tmpy381spks.__modtest() [0x4285e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]

    ??:? runModuleUnitTests [0x42c6f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n+1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx42ph1ns.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx42ph1ns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpk4rzwunk.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpk4rzwunk.tri(long) [0x427f7f]

    ??:? void tmpk4rzwunk.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpk4rzwunk.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl133x47b.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpl133x47b.tri(long) [0x427fc9]

    ??:? void tmpl133x47b.__unittest_L41_C1() [0x428007]

    ??:? void tmpl133x47b.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n+1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 3;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zn_z176.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zn_z176.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpk4rzwunk.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpk4rzwunk.tri(long) [0x427f7f]

    ??:? void tmpk4rzwunk.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpk4rzwunk.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 1;\n    result[2] = 1;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpu1p1h5o9.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpu1p1h5o9.tri(long) [0x427f7c]

    ??:? void tmpu1p1h5o9.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpu1p1h5o9.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    result[0] = 3;\n    for\
    \ (int i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = 1 + i / 2;\n        }\n        else\n        {\n          \
    \  result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2wrbvmfe.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2wrbvmfe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    for (long\
    \ i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n           \
    \ result[i] = 1 + i / 2;\n        }\n        else\n        {\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5713tjov.d(32): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4288ee]

    ??:? long[] tmp5713tjov.tri(long) [0x427f13]

    ??:? void tmp5713tjov.__unittest_L37_C1() [0x427f73]

    ??:? void tmp5713tjov.__modtest() [0x4285c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b78a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ec4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b761]

    ??:? runModuleUnitTests [0x42c6cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 1;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(long i =\
    \ 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 +\
    \ i / 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp6l7v4qbz.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmp6l7v4qbz.tri(long) [0x427fcb]

    ??:? void tmp6l7v4qbz.__unittest_L41_C1() [0x42800b]

    ??:? void tmp6l7v4qbz.__modtest() [0x428658]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpovd67und.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpovd67und.tri(long) [0x427f7f]

    ??:? void tmpovd67und.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpovd67und.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n        }\n \
    \       else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp2w4v37_1.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp2w4v37_1.tri(long) [0x427f7c]

    ??:? void tmp2w4v37_1.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp2w4v37_1.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    if (n > 1)\n    {\n        result[2] = 1;\n        for (long i = 3;\
    \ i <= n; i++)\n        {\n            if (i % 2 == 0)\n            {\n      \
    \          result[i] = 1 + i / 2;\n            }\n            else\n         \
    \   {\n                result[i] = result[i - 1] + result[i - 2] + result[i +\
    \ 1];\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmptvx7aomz.d(36): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42894e]

    ??:? long[] tmptvx7aomz.tri(long) [0x427f93]

    ??:? void tmptvx7aomz.__unittest_L42_C1() [0x427fd3]

    ??:? void tmptvx7aomz.__modtest() [0x428620]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c957]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f24]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c1]

    ??:? runModuleUnitTests [0x42c72d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n        }\n \
    \       else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp2w4v37_1.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp2w4v37_1.tri(long) [0x427f7c]

    ??:? void tmp2w4v37_1.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp2w4v37_1.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    if (n ==\
    \ 3)\n        return result;\n    for (long i = 3; i <= n; i++)\n    {\n     \
    \   if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n      \
    \      result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78r30_m1.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmp78r30_m1.__unittest_L43_C1() [0x42809d]

    ??:? void tmp78r30_m1.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0) return result;\n\
    \    result[0] = 3;\n    if (n == 1) return result;\n    result[1] = 1;\n    if\
    \ (n == 2) return result;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpolm72hbx.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpolm72hbx.tri(long) [0x427fcf]

    ??:? void tmpolm72hbx.__unittest_L42_C1() [0x42800f]

    ??:? void tmpolm72hbx.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppudsx169.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppudsx169.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpovd67und.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpovd67und.tri(long) [0x427f7f]

    ??:? void tmpovd67und.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpovd67und.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcbq_8d77.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcbq_8d77.tri(long) [0x427f7c]

    ??:? void tmpcbq_8d77.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcbq_8d77.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int i = 3;\
    \ i < n+1; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 + (i\
    \ / 2);\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp6255y4t2.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmp6255y4t2.tri(long) [0x427fcf]

    ??:? void tmp6255y4t2.__unittest_L41_C1() [0x42800b]

    ??:? void tmp6255y4t2.__modtest() [0x428658]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpyzstej9u.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpyzstej9u.tri(long) [0x427f82]

    ??:? void tmpyzstej9u.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpyzstej9u.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpk4rzwunk.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpk4rzwunk.tri(long) [0x427f7f]

    ??:? void tmpk4rzwunk.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpk4rzwunk.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] arr = new long[n + 1];\n    arr[0] = 0;\n    arr[1] = 3;\n \
    \   arr[2] = 8;\n    for (int i = 3; i < n + 1; i++)\n    {\n        if (i % 2\
    \ == 0)\n        {\n            arr[i] = 1 + i / 2;\n        }\n        else\n\
    \        {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1];\n     \
    \   }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp581_goka.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmp581_goka.tri(long) [0x427f82]

    ??:? void tmp581_goka.__unittest_L39_C1() [0x427fbf]

    ??:? void tmp581_goka.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 3;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpf4r1kua4.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42892e]

    ??:? long[] tmpf4r1kua4.tri(long) [0x427f77]

    ??:? void tmpf4r1kua4.__unittest_L39_C1() [0x427fb3]

    ??:? void tmpf4r1kua4.__modtest() [0x428600]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c937]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f04]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a1]

    ??:? runModuleUnitTests [0x42c70d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    for (int i = 0; i <= n; i++)\n\
    \    {\n        if (i == 0)\n            result[i] = 0;\n        else if (i ==\
    \ 1)\n            result[i] = 3;\n        else if (i == 2)\n            result[i]\
    \ = 1;\n        else if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n   \
    \     else\n            result[i] = result[i - 1] + result[i - 2] + result[i +\
    \ 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp68jtvs3b.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428976]

    ??:? long[] tmp68jtvs3b.tri(long) [0x427fba]

    ??:? void tmp68jtvs3b.__unittest_L38_C1() [0x427ff7]

    ??:? void tmp68jtvs3b.__modtest() [0x428644]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c97f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b812]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7e9]

    ??:? runModuleUnitTests [0x42c755]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcj7yui8t.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcj7yui8t.tri(long) [0x427f7c]

    ??:? void tmpcj7yui8t.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcj7yui8t.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpyzstej9u.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpyzstej9u.tri(long) [0x427f82]

    ??:? void tmpyzstej9u.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpyzstej9u.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int i = 3;\
    \ i < n+1; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 + i\
    \ / 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpa5knpvtw.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpa5knpvtw.tri(long) [0x427fcf]

    ??:? void tmpa5knpvtw.__unittest_L41_C1() [0x42800b]

    ??:? void tmpa5knpvtw.__modtest() [0x428658]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp8tu45sgg.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp8tu45sgg.tri(long) [0x427f7c]

    ??:? void tmp8tu45sgg.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp8tu45sgg.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl133x47b.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpl133x47b.tri(long) [0x427fc9]

    ??:? void tmpl133x47b.__unittest_L41_C1() [0x428007]

    ??:? void tmpl133x47b.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n    result[1] =\
    \ 3;\n    for(int i = 2; i < n+1; i++)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            result[i] = 1 + i / 2;\n        }\n        else\n        {\n\
    \            result[i] = result[i-1] + result[i-2] + result[i+1];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp7onymjid.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428916]

    ??:? long[] tmp7onymjid.tri(long) [0x427f5f]

    ??:? void tmp7onymjid.__unittest_L38_C1() [0x427f9b]

    ??:? void tmp7onymjid.__modtest() [0x4285e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]

    ??:? runModuleUnitTests [0x42c6f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp51kf63qg.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmp51kf63qg.tri(long) [0x427f7f]

    ??:? void tmp51kf63qg.__unittest_L39_C1() [0x427fbf]

    ??:? void tmp51kf63qg.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for(int i = 3; i < n+1; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n        }\n    \
    \    else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp0lzaghqw.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmp0lzaghqw.tri(long) [0x427f82]

    ??:? void tmp0lzaghqw.__unittest_L39_C1() [0x427fbf]

    ??:? void tmp0lzaghqw.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 1;\n    result[2] = 1;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpu1p1h5o9.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpu1p1h5o9.tri(long) [0x427f7c]

    ??:? void tmpu1p1h5o9.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpu1p1h5o9.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    auto result = new long[n + 1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpx7i1l3fw.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpx7i1l3fw.tri(long) [0x427f7c]

    ??:? void tmpx7i1l3fw.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpx7i1l3fw.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl133x47b.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpl133x47b.tri(long) [0x427fc9]

    ??:? void tmpl133x47b.__unittest_L41_C1() [0x428007]

    ??:? void tmpl133x47b.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcbq_8d77.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcbq_8d77.tri(long) [0x427f7c]

    ??:? void tmpcbq_8d77.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcbq_8d77.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcbq_8d77.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcbq_8d77.tri(long) [0x427f7c]

    ??:? void tmpcbq_8d77.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcbq_8d77.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    if(n == 3)\n\
    \        return result;\n    for(int i = 3; i < n+1; i++)\n    {\n        if(i\
    \ % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n            result[i]\
    \ = result[i-1] + result[i-2] + result[i+1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgutdzz5o.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmpgutdzz5o.__unittest_L43_C1() [0x42809d]

    ??:? void tmpgutdzz5o.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for(int i = 3; i < n+1; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpx_qmov__.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpx_qmov__.tri(long) [0x427f82]

    ??:? void tmpx_qmov__.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpx_qmov__.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    for (long\
    \ i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n           \
    \ result[i] = 1 + i / 2;\n        }\n        else\n        {\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5713tjov.d(32): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4288ee]

    ??:? long[] tmp5713tjov.tri(long) [0x427f13]

    ??:? void tmp5713tjov.__unittest_L37_C1() [0x427f73]

    ??:? void tmp5713tjov.__modtest() [0x4285c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b78a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ec4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b761]

    ??:? runModuleUnitTests [0x42c6cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpovd67und.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpovd67und.tri(long) [0x427f7f]

    ??:? void tmpovd67und.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpovd67und.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0) return result;\n\
    \    result[0] = 3;\n    if (n == 1) return result;\n    result[1] = 1;\n    if\
    \ (n == 2) return result;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n\
    \            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuxc4e35r.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpuxc4e35r.tri(long) [0x427fcf]

    ??:? void tmpuxc4e35r.__unittest_L38_C1() [0x42800f]

    ??:? void tmpuxc4e35r.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    if (n == 0) return new long[0];\n    if (n == 1) return new long[]{3};\n\
    \    if (n == 2) return new long[]{3, 2};\n    if (n == 3) return new long[]{3,\
    \ 2, 8};\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 2;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fmuksm4.d(23): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp0fmuksm4.d(23): Error: found `}` when expecting `;` following statement

    /tmp/tmp0fmuksm4.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0fmuksm4.d(24): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp0fmuksm4.d(24): Error: found `}` when expecting `;` following statement

    /tmp/tmp0fmuksm4.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0fmuksm4.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp0fmuksm4.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmp0fmuksm4.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fmuksm4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpk4rzwunk.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpk4rzwunk.tri(long) [0x427f7f]

    ??:? void tmpk4rzwunk.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpk4rzwunk.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    for (long i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \      {\n            result[i] = 1 + i / 2;\n        }\n        else\n      \
    \  {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmptj53678q.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42891e]

    ??:? long[] tmptj53678q.tri(long) [0x427f5f]

    ??:? void tmptj53678q.__unittest_L38_C1() [0x427f9f]

    ??:? void tmptj53678q.__modtest() [0x4285ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c927]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ef4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b791]

    ??:? runModuleUnitTests [0x42c6fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] res = new long[n + 1];\n    res[0] = 3;\n    res[1] = 3;\n \
    \   res[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n            res[i] = 1 + i / 2;\n        else\n            res[i] = res[i\
    \ - 1] + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp13v179oz.d(31): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp13v179oz.tri(long) [0x427f7b]

    ??:? void tmp13v179oz.__unittest_L35_C1() [0x427fbb]

    ??:? void tmp13v179oz.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 1;\n    result[2] = 1;\n    for(int i = 3; i < n+1; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp7guduyzg.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmp7guduyzg.tri(long) [0x427f82]

    ??:? void tmp7guduyzg.__unittest_L39_C1() [0x427fbf]

    ??:? void tmp7guduyzg.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 + i /\
    \ 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmphsx9_o_0.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmphsx9_o_0.tri(long) [0x427fc9]

    ??:? void tmphsx9_o_0.__unittest_L41_C1() [0x428007]

    ??:? void tmphsx9_o_0.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int i = 3;\
    \ i < n+1; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 + i\
    \ / 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpa5knpvtw.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpa5knpvtw.tri(long) [0x427fcf]

    ??:? void tmpa5knpvtw.__unittest_L41_C1() [0x42800b]

    ??:? void tmpa5knpvtw.__modtest() [0x428658]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] ret = new long[(int)n+1];\n    ret[0] = 3;\n    ret[1] = 1;\n\
    \    ret[2] = 2;\n    for(int i = 3; i < n+1; i++)\n    {\n        if(i % 2 ==\
    \ 0)\n        {\n            ret[i] = 1 + i / 2;\n        }\n        else\n  \
    \      {\n            ret[i] = ret[i-1] + ret[i-2] + ret[i+1];\n        }\n  \
    \  }\n    return ret;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsrnv7s13.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsrnv7s13.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpk4rzwunk.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpk4rzwunk.tri(long) [0x427f7f]

    ??:? void tmpk4rzwunk.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpk4rzwunk.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp51kf63qg.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmp51kf63qg.tri(long) [0x427f7f]

    ??:? void tmp51kf63qg.__unittest_L39_C1() [0x427fbf]

    ??:? void tmp51kf63qg.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp7a3npvls.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp7a3npvls.tri(long) [0x427f7c]

    ??:? void tmp7a3npvls.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp7a3npvls.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnv2n9xnm.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpnv2n9xnm.tri(long) [0x427f7f]

    ??:? void tmpnv2n9xnm.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpnv2n9xnm.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    if (n ==\
    \ 3)\n        return result;\n    for (long i = 3; i <= n; i++)\n    {\n     \
    \   if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n      \
    \      result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78r30_m1.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmp78r30_m1.__unittest_L43_C1() [0x42809d]

    ??:? void tmp78r30_m1.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 3;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1_n3lc70.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42883d]

    ??:? void tmp1_n3lc70.__unittest_L32_C1() [0x427fe9]

    ??:? void tmp1_n3lc70.__modtest() [0x4285bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b78a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ec4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b761]

    ??:? runModuleUnitTests [0x42c6cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d00]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcbq_8d77.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcbq_8d77.tri(long) [0x427f7c]

    ??:? void tmpcbq_8d77.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcbq_8d77.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n        }\n \
    \       else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpeolzq9mo.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpeolzq9mo.tri(long) [0x427f7c]

    ??:? void tmpeolzq9mo.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpeolzq9mo.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp8tu45sgg.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp8tu45sgg.tri(long) [0x427f7c]

    ??:? void tmp8tu45sgg.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp8tu45sgg.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    result[0] = 3;\n    for\
    \ (int i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = 1 + i / 2;\n        }\n        else\n        {\n          \
    \  result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2wrbvmfe.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2wrbvmfe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpyzstej9u.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpyzstej9u.tri(long) [0x427f82]

    ??:? void tmpyzstej9u.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpyzstej9u.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if(n == 1)\n        return result;\n    result[1] = 1;\n\
    \    if(n == 2)\n        return result;\n    result[2] = 2;\n    for(int i = 3;\
    \ i < n+1; i++)\n    {\n        if(i % 2 == 0)\n            result[i] = 1 + i\
    \ / 2;\n        else\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpa5knpvtw.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpa5knpvtw.tri(long) [0x427fcf]

    ??:? void tmpa5knpvtw.__unittest_L41_C1() [0x42800b]

    ??:? void tmpa5knpvtw.__modtest() [0x428658]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 3;\n    for (int i = 3; i < n + 1; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbul4n1fd.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbul4n1fd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i < n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbm37k1i.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbm37k1i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n+1];\n    result[0] = 3;\n    if(n ==\
    \ 0)\n        return result;\n    result[1] = 1;\n    if(n == 1)\n        return\
    \ result;\n    result[2] = 2;\n    if(n == 2)\n        return result;\n    for(int\
    \ i = 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0g8lnyca.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0g8lnyca.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl133x47b.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmpl133x47b.tri(long) [0x427fc9]

    ??:? void tmpl133x47b.__unittest_L41_C1() [0x428007]

    ??:? void tmpl133x47b.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpovd67und.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpovd67und.tri(long) [0x427f7f]

    ??:? void tmpovd67und.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpovd67und.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n        return result;\n\
    \    else if(n == 1)\n    {\n        result[0] = 3;\n        return result;\n\
    \    }\n    else if(n == 2)\n    {\n        result[0] = 3;\n        result[1]\
    \ = 2;\n        return result;\n    }\n    else\n    {\n        result[0] = 3;\n\
    \        result[1] = 2;\n        result[2] = 8;\n        for(int i = 3; i < n;\
    \ i++)\n        {\n            if(i % 2 == 0)\n                result[i] = 1 +\
    \ i / 2;\n            else\n                result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n        return result;\n    }\n}\nunittest\n{\n \
    \   alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaebg200p.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x428945]

    ??:? void tmpaebg200p.__unittest_L51_C1() [0x4280f1]

    ??:? void tmpaebg200p.__modtest() [0x4286c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b892]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430fcc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430aa9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b869]

    ??:? runModuleUnitTests [0x42c7d5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    for (long i = 2; i <= n; i++)\n    {\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpk99o2zq_.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4288c6]

    ??:? long[] tmpk99o2zq_.tri(long) [0x427f0a]

    ??:? void tmpk99o2zq_.__unittest_L31_C1() [0x427f47]

    ??:? void tmpk99o2zq_.__modtest() [0x428594]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b762]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4309ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430e9c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430979]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b739]

    ??:? runModuleUnitTests [0x42c6a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp8tu45sgg.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp8tu45sgg.tri(long) [0x427f7c]

    ??:? void tmp8tu45sgg.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp8tu45sgg.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 0;\n    result[1] =\
    \ 3;\n    result[2] = 8;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcj7yui8t.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcj7yui8t.tri(long) [0x427f7c]

    ??:? void tmpcj7yui8t.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcj7yui8t.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i]\
    \ = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpam9b71bt.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428835]

    ??:? void tmpam9b71bt.__unittest_L32_C1() [0x427fe5]

    ??:? void tmpam9b71bt.__modtest() [0x4285b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b782]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ebc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430999]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b759]

    ??:? runModuleUnitTests [0x42c6c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428cf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    if (n == 0)\n        return\
    \ result;\n    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1]\
    \ = 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsnmuwjmy.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnmuwjmy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161329
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcbq_8d77.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcbq_8d77.tri(long) [0x427f7c]

    ??:? void tmpcbq_8d77.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcbq_8d77.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] arr = new long[n + 1];\n    arr[0] = 0;\n    arr[1] = 3;\n \
    \   arr[2] = 8;\n    for (int i = 3; i < n + 1; i++)\n    {\n        if (i % 2\
    \ == 0)\n        {\n            arr[i] = 1 + i / 2;\n        }\n        else\n\
    \        {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1];\n     \
    \   }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp581_goka.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmp581_goka.tri(long) [0x427f82]

    ??:? void tmp581_goka.__unittest_L39_C1() [0x427fbf]

    ??:? void tmp581_goka.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (long i = 3; i <= n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnv2n9xnm.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpnv2n9xnm.tri(long) [0x427f7f]

    ??:? void tmpnv2n9xnm.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpnv2n9xnm.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 8;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpgut41xl7.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpgut41xl7.tri(long) [0x427f7c]

    ??:? void tmpgut41xl7.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpgut41xl7.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    if (n == 0) return [0];\n    if (n == 1) return [0, 3];\n    if (n\
    \ == 2) return [0, 3, 2];\n    auto res = [0, 3, 2];\n    for (int i = 3; i <=\
    \ n; i++)\n    {\n        if (i % 2 == 0)\n            res ~= 1 + i / 2;\n   \
    \     else\n            res ~= res[$ - 1] + res[$ - 2] + res[$ - 3];\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn71z44we.d(33): Error: cannot implicitly convert expression `res`
    of type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn71z44we.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0) \n    {\n       \
    \ return result;\n    }\n    result[0] = 3;\n    if (n == 1) \n    {\n       \
    \ return result;\n    }\n    result[1] = 1;\n    if (n == 2) \n    {\n       \
    \ return result;\n    }\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\
    \ \n    {\n        if (i % 2 == 0) \n        {\n            result[i] = 1 + i\
    \ / 2;\n        }\n        else \n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpv1pc9ba6.d(46): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpv1pc9ba6.tri(long) [0x427fcf]

    ??:? void tmpv1pc9ba6.__unittest_L51_C1() [0x42800f]

    ??:? void tmpv1pc9ba6.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcbq_8d77.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpcbq_8d77.tri(long) [0x427f7c]

    ??:? void tmpcbq_8d77.__unittest_L39_C1() [0x427fbb]

    ??:? void tmpcbq_8d77.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    if (n ==\
    \ 3)\n        return result;\n    for (int i = 3; i < n + 1; i++)\n    {\n   \
    \     if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n    \
    \        result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqa8ini1q.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288ed]

    ??:? void tmpqa8ini1q.__unittest_L43_C1() [0x42809d]

    ??:? void tmpqa8ini1q.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp8tu45sgg.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp8tu45sgg.tri(long) [0x427f7c]

    ??:? void tmp8tu45sgg.__unittest_L39_C1() [0x427fbb]

    ??:? void tmp8tu45sgg.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n    result[1] =\
    \ 3;\n    result[2] = 1;\n    for(int i = 3; i < n+1; i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n      \
    \  else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzucwg873.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpzucwg873.tri(long) [0x427f82]

    ??:? void tmpzucwg873.__unittest_L39_C1() [0x427fbf]

    ??:? void tmpzucwg873.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[(int)n + 1];\n    result[0] = 0;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppudsx169.d(22): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppudsx169.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161330
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n        \n*/\nlong[] tri(long n)\
    \ \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n        return result;\n\
    \    result[0] = 3;\n    if (n == 1)\n        return result;\n    result[1] =\
    \ 1;\n    if (n == 2)\n        return result;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] =\
    \ 1 + i / 2;\n        else\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpidyz5ehq.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpidyz5ehq.tri(long) [0x427fcf]

    ??:? void tmpidyz5ehq.__unittest_L41_C1() [0x42800f]

    ??:? void tmpidyz5ehq.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161330
