language: d
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0,0];\n    long min = 0;\n    long\
    \ index = 0;\n    long minIndex = 0;\n    long count = 0;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0)\n        {\n            if(count == 0)\n      \
    \      {\n                min = v;\n                minIndex = i;\n          \
    \      count++;\n            }\n            else\n            {\n            \
    \    if(v < min)\n                {\n                    min = v;\n          \
    \          minIndex = i;\n                }\n            }\n        }\n    }\n\
    \    if(count == 0)\n    {\n        return result;\n    }\n    else\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm61q0syd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nl4m4l3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9x6tvv63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61aub84l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u4nzk_1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikgfp0t4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp50vjm5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if (arr.length ==\
    \ 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestEvenIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n\
    \                smallestEven = arr[i];\n                smallestEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n    \
    \    result[0] = smallestEven;\n        result[1] = smallestEvenIndex;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7dpio_e6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69cpmgb2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgw9lj72x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long[]\
    \ result = [arr[0], 0];\n    foreach (i, v; arr)\n    {\n        if (v % 2 ==\
    \ 0 && v < result[0])\n        {\n            result[0] = v;\n            result[1]\
    \ = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n        return [];\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_kiuwcj8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long[]\
    \ result = new long[2];\n    long min = arr[0];\n    long minIndex = 0;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvtci_9d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66xcx6n_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u4nzk_1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            index = i;\n     \
    \   }\n    }\n    if (index == -1) return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01m_pcit.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69cpmgb2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = long.max;\n    long index = 0;\n    for (long i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n    \
    \    {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    \n    if (min == long.max)\n        return new long[0];\n    \n    return\
    \ new long[] { min, index };\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0qv5j1yq.d(49): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmp0qv5j1yq.d(49): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0qv5j1yq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u4nzk_1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52jsffx7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min &&\
    \ v % 2 == 0)\n        {\n            min = v;\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        return [min, minIndex];\n\
    \    }\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpudv089ki.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo7pqevz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcrzbywh6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpms3253_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    \n    if (min == long.max)\n  \
    \      return new long[0];\n    \n    return [min, index];\n}\nunittest\n{\n \
    \   alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5an9xi8g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return [];\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzp1z6i3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo7pqevz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkxxpzdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n    {\n     \
    \   return result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxawdp1i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0\
    \ && e < min)\n        {\n            min = e;\n            index = i;\n     \
    \   }\n    }\n    if (index == -1) return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojej8_5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0\
    \ && e < min)\n        {\n            min = e;\n            index = i;\n     \
    \   }\n    }\n    if (index == -1) return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojej8_5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ffls4dl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return [];\n    return [min, index];\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdcf9ns_h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkxxpzdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmproc4xl42.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0, 0];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    long index = 0;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            index = i;\n     \
    \   }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n       \
    \ result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1ysnhxl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n     \
    \   if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return\
    \ [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplcfxsqwh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkxxpzdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min == long.max)\n    {\n \
    \       return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_134j_4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return [];\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpim1_w73n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61aub84l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < minEven)\n        {\n            minEven\
    \ = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1h79shzv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunporfck.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9x6tvv63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u4nzk_1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach (i, e; arr)\n    {\n     \
    \   if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return\
    \ [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkf4s3dlo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min == long.max)\n    {\n \
    \       return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_134j_4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ smallestEven = arr[0];\n    long smallestEvenIndex = 0;\n    foreach (i, val;\
    \ arr)\n    {\n        if (val % 2 == 0 && val < smallestEven)\n        {\n  \
    \          smallestEven = val;\n            smallestEvenIndex = i;\n        }\n\
    \    }\n    if (smallestEven % 2 == 0)\n        return [smallestEven, smallestEvenIndex];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21isy9n6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vzxtoq7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv6nwx6l1.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpv6nwx6l1.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv6nwx6l1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    long min = long.max;\n    for (int i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            result[0] = min;\n        \
    \    result[1] = i;\n        }\n    }\n    if (min == long.max)\n        return\
    \ new long[0];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22gagwxh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfn0kc_6a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyk4nql7x.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpyk4nql7x.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyk4nql7x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61aub84l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) \n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\
    \ \n    {\n        if (arr[i] < min && arr[i] % 2 == 0) \n        {\n        \
    \    min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2\
    \ == 0) \n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wps1zs9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp253mjuv2.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmp253mjuv2.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp253mjuv2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < minEven)\n        {\n            minEven\
    \ = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1h79shzv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdcoukel9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmproc4xl42.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxuxn6pc_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = long.max;\n    long minEvenIndex = long.max;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < minEven)\n\
    \        {\n            minEven = arr[i];\n            minEvenIndex = i;\n   \
    \     }\n    }\n    if (minEven == long.max)\n        return [];\n    return [minEven,\
    \ minEvenIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0s5lv8h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdincsfzn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = long.max;\n    long minIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    \n    if (min == long.max)\n\
    \        return new long[0];\n    \n    return [min, minIndex];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oibt5sj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9x6tvv63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wgwklu1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    int index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66m0v3i5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    result[0] = long.max;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < result[0])\n        {\n      \
    \      result[0] = v;\n            result[1] = i;\n        }\n    }\n    if (result[0]\
    \ == long.max)\n        return new long[0];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79uhpu3j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = arr[0];\n    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < minEven)\n            {\n                minEven = arr[i];\n             \
    \   minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven % 2 ==\
    \ 0)\n        return [minEven, minEvenIndex];\n    return [];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb9j_31yi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp50vjm5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] res = new long[2];\n    if (arr.length ==\
    \ 0) return res;\n    long min = arr[0];\n    long idx = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            idx = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n\
    \        res[0] = min;\n        res[1] = idx;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgyvx4et8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long minIndex = long.max;\n    foreach(i, v; arr)\n    {\n        if(v %\
    \ 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex =\
    \ i;\n        }\n    }\n    if(min == long.max)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxi6cj8aq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = long.max;\n    long minIndex = -1;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    \n    if (minIndex == -1)\n        return new long[0];\n    \n   \
    \ return [min, minIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4hjjhtb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ffls4dl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            result[0] = min;\n            result[1] = i;\n\
    \        }\n    }\n    if (min == long.max) return new long[0];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydk50ftu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr) \n    {\n        if (v % 2 == 0\
    \ && v < min) \n        {\n            min = v;\n            index = i;\n    \
    \    }\n    }\n    if (min % 2 == 0) return [min, index];\n    return [];\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhtmd0ws.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61aub84l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3559u86.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpey6p0m3c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long minIndex = -1;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (minIndex == -1)\n      \
    \  return new long[0];\n    return [min, minIndex];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuv386o9e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    long count = 0;\n    foreach (i, e;\
    \ arr)\n    {\n        if (e % 2 == 0)\n        {\n            if (e < min)\n\
    \            {\n                min = e;\n                index = i;\n       \
    \         count = 1;\n            }\n            else if (e == min)\n        \
    \    {\n                count++;\n            }\n        }\n    }\n    if (count\
    \ == 0)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1fvgjw_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [0L, 0L];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [0L, 0L];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpti6xgily.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    \n\
    \    long[] result = [arr[0], 0];\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < result[0])\n        {\n            result[0] = v;\n     \
    \       result[1] = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n      \
    \  return [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa7mwarn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61aub84l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsouanzs3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo7pqevz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, value; arr)\n    {\n\
    \        if (value % 2 == 0 && value < min)\n        {\n            min = value;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfygv92qp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkxxpzdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n     \
    \   if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min == long.max) return new long[0];\n    return\
    \ [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpndyvrkxr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    auto\
    \ min = arr[0];\n    auto minIndex = 0;\n    foreach (index, value; arr)\n   \
    \ {\n        if (value % 2 == 0 && value < min)\n        {\n            min =\
    \ value;\n            minIndex = index;\n        }\n    }\n    if (min % 2 ==\
    \ 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxaem4pzj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n\
    \                smallestEven = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n    \
    \    result[0] = smallestEven;\n        result[1] = smallestIndex;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpblxm4ui7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 ==\
    \ 0 && v < min)\n        {\n            min = v;\n            index = i;\n   \
    \     }\n    }\n    if(min == long.max)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmla6gpi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo7pqevz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v < min && v % 2 == 0)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        return\
    \ [min, minIndex];\n    }\n    return new long[0];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbgrmwiv5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9x6tvv63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] res = new long[2];\n    long min = long.max;\n    long minIndex\
    \ = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    \n    if (min == long.max)\n        return new long[0];\n    \n    res[0]\
    \ = min;\n    res[1] = minIndex;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj92mrczz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long minEven = long.max;\n    long minEvenIndex = -1;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    \n    if (minEvenIndex == -1)\n        return new\
    \ long[0];\n    \n    return [minEven, minEvenIndex];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt6fq4j2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    long index = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzysfrs5a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return new long[0];\n    result[0] =\
    \ min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgw3jvf84.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61aub84l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61aub84l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long minIndex = long.max;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (min == long.max)\n     \
    \   return new long[0];\n    return [min, minIndex];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcj9xmv7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyk4nql7x.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpyk4nql7x.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyk4nql7x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long minEven = -1;\n    long minIndex = -1;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n\
    \        {\n            if (minEven == -1)\n            {\n                minEven\
    \ = arr[i];\n                minIndex = i;\n            }\n            else\n\
    \            {\n                if (arr[i] < minEven)\n                {\n   \
    \                 minEven = arr[i];\n                    minIndex = i;\n     \
    \           }\n            }\n        }\n    }\n    if (minEven != -1)\n    {\n\
    \        result[0] = minEven;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzerxwd_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8j1a8z8e.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmp8j1a8z8e.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8j1a8z8e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[2];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return new long[2];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptr5p9lrq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp50vjm5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = long.max;\n    long minEvenIndex = 0;\n    foreach (i, e; arr)\n \
    \   {\n        if (e % 2 == 0 && e < minEven)\n        {\n            minEven\
    \ = e;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7mk0axor.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo7pqevz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long smallestEven\
    \ = long.max;\n    long smallestEvenIndex = long.max;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven)\n\
    \        {\n            smallestEven = arr[i];\n            smallestEvenIndex\
    \ = i;\n        }\n    }\n    if (smallestEven == long.max)\n    {\n        return\
    \ result;\n    }\n    result[0] = smallestEven;\n    result[1] = smallestEvenIndex;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwarwea5t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    bool hasEven = false;\n \
    \   foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n         \
    \   hasEven = true;\n            if (v < min)\n            {\n               \
    \ min = v;\n                minIndex = i;\n            }\n        }\n    }\n \
    \   if (hasEven)\n        return [min, minIndex];\n    return new long[0];\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv1konq_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkxxpzdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ smallestEven = arr[0];\n    long smallestEvenIndex = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < smallestEven)\n        {\n      \
    \      smallestEven = v;\n            smallestEvenIndex = i;\n        }\n    }\n\
    \    if (smallestEven % 2 == 0)\n        return [smallestEven, smallestEvenIndex];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6tnvo6ny.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirm8ke_3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66xcx6n_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u4nzk_1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3559u86.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdcoukel9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ffls4dl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    foreach (i, v; arr)\n \
    \   {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           result[0] = v;\n            result[1] = i;\n        }\n    }\n   \
    \ if (min == long.max) return new long[0];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvgfcz_w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyh2b3av2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    \n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    \n    if (index == -1)\n        return\
    \ [];\n    \n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2szkt1bd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    else\n        return\
    \ new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa4r30f57.d(46): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpa4r30f57.d(46): Error: found \''}\'' when
    expecting \'';\'' following statement\n/tmp/tmpa4r30f57.d(47): Error: found \''else\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4r30f57.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxuxn6pc_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8j1a8z8e.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmp8j1a8z8e.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8j1a8z8e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] res = new long[2];\n    long min = long.max;\n    long minIndex\
    \ = long.max;\n    long index = 0;\n    foreach (e; arr)\n    {\n        if (e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            minIndex\
    \ = index;\n        }\n        index++;\n    }\n    if (min == long.max)\n   \
    \     return new long[0];\n    res[0] = min;\n    res[1] = minIndex;\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsr2r3qcs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u4nzk_1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    \n\
    \    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    \n    if (min == long.max)\n        return\
    \ [];\n    \n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_vuzyel.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u4nzk_1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return ret;\n    ret[0] = min;\n    ret[1]\
    \ = index;\n    return ret;\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwfjelgg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9x6tvv63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcrzbywh6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9x6tvv63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcrzbywh6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    int index = 0;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu029axnx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    bool found = false;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0)\n        {\n            if (!found)\n\
    \            {\n                min = v;\n                index = i;\n       \
    \         found = true;\n            }\n            else\n            {\n    \
    \            if (v < min)\n                {\n                    min = v;\n \
    \                   index = i;\n                }\n            }\n        }\n\
    \    }\n    if (found)\n        return [min, index];\n    return [];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwvlk8zu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb5m5tm3l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = long.max;\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min == long.max)\
    \ return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjb7vlbj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long smallest = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < smallest && arr[i] % 2 == 0)\n        {\n\
    \            smallest = arr[i];\n            index = i;\n        }\n    }\n  \
    \  if (smallest % 2 == 0)\n        return new long[] { smallest, index };\n  \
    \  return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoy7dtv5t.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpoy7dtv5t.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpoy7dtv5t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7bq70q8d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n       \
    \     if (arr[i] < min)\n            {\n                min = arr[i];\n      \
    \          result[0] = min;\n                result[1] = i;\n            }\n \
    \       }\n    }\n    if (min % 2 != 0)\n        return result;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpezemgwv9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long minIndex = long.max;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min == long.max)\n        return new long[0];\n    return [min,\
    \ minIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcfqssffa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkxxpzdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    result[0] = long.max;\n    result[1] =\
    \ long.max;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < result[0])\n\
    \        {\n            result[0] = e;\n            result[1] = i;\n        }\n\
    \    }\n    if (result[0] == long.max)\n        return new long[0];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2mncnbjx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo7pqevz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcrzbywh6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] res = new long[2];\n    res[0] = long.max;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < res[0])\n        {\n            res[0] =\
    \ v;\n            res[1] = i;\n        }\n    }\n    if (res[0] == long.max)\n\
    \        return new long[0];\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiumw1avx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyk4nql7x.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpyk4nql7x.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyk4nql7x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9x6tvv63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxuxn6pc_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsipy8b31.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52jsffx7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61aub84l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] res = new long[2];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n         \
    \       min = arr[i];\n                minIndex = i;\n            }\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] =\
    \ minIndex;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wo2i5n3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpey6p0m3c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wgwklu1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0, 0];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min != long.max)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsc25440.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoijq5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n     \
    \   if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return\
    \ [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplcfxsqwh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u4nzk_1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv6nwx6l1.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpv6nwx6l1.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv6nwx6l1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpms3253_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsipy8b31.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunporfck.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        return\
    \ [min, minIndex];\n    }\n    return new long[0];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0z35av5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfn0kc_6a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1) return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpanw34ae3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        ret[0] = min;\n        ret[1] = index;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp85lfka88.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61aub84l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdincsfzn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqoz7dqy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkxxpzdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9x6tvv63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, value; arr)\n    {\n\
    \        if (value % 2 == 0 && value < min)\n        {\n            min = value;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfygv92qp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7bq70q8d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66xcx6n_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wgwklu1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long minIndex = long.max;\n    for (int i = 0; i < arr.length; i++)\n   \
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min == long.max)\n\
    \    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = minIndex;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2uz_3t8l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] result = new long[2];\n    long minEven = long.max;\n    long\
    \ minEvenIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n            minEven\
    \ = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    \n    if (minEven\
    \ == long.max)\n        return new long[0];\n    \n    result[0] = minEven;\n\
    \    result[1] = minEvenIndex;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgao3oxs4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0rgrrbl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestEvenIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n\
    \                smallestEven = arr[i];\n                smallestEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n    \
    \    result[0] = smallestEven;\n        result[1] = smallestEvenIndex;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5hf19fl8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0, 0];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return [];\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1axp_sv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyk4nql7x.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpyk4nql7x.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyk4nql7x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        return new long[] { min, minIndex };\n    }\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpclk0bv0i.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpclk0bv0i.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpclk0bv0i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9x6tvv63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5tcw90bk.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmp5tcw90bk.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5tcw90bk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8j1a8z8e.d(45): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmp8j1a8z8e.d(45): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8j1a8z8e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n  \
    \      {\n            min = arr[i];\n            minIndex = i;\n        }\n  \
    \  }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n  \
    \  else\n        return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj0vuvcyb.d(46): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpj0vuvcyb.d(46): Error: found \''}\'' when
    expecting \'';\'' following statement\n/tmp/tmpj0vuvcyb.d(47): Error: found \''else\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0vuvcyb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkxxpzdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v < min && v % 2 == 0)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bujalqu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkxxpzdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014589
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwr7ob0yl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsipy8b31.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014590
