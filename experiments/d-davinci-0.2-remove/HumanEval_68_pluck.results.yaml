language: d
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0,0];\n    long min = 0;\n    long\
    \ index = 0;\n    long minIndex = 0;\n    long count = 0;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0)\n        {\n            if(count == 0)\n      \
    \      {\n                min = v;\n                minIndex = i;\n          \
    \      count++;\n            }\n            else\n            {\n            \
    \    if(v < min)\n                {\n                    min = v;\n          \
    \          minIndex = i;\n                }\n            }\n        }\n    }\n\
    \    if(count == 0)\n    {\n        return result;\n    }\n    else\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4vwf1pun.d(74): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp4vwf1pun.__unittest_L68_C1() [0x4280ce]

    ??:? void tmp4vwf1pun.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c75b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430781]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c30]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43070d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c5]

    ??:? runModuleUnitTests [0x42c531]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy5xwdmsu.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmpy5xwdmsu.__unittest_L48_C1() [0x42808d]

    ??:? void tmpy5xwdmsu.__modtest() [0x4284a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]

    ??:? void tmpm7_qirry.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp3v3zfcq6.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnhgt44e7.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpnhgt44e7.__unittest_L52_C1() [0x42806d]

    ??:? void tmpnhgt44e7.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcco96zr9.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpcco96zr9.__unittest_L52_C1() [0x4280b9]

    ??:? void tmpcco96zr9.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if (arr.length ==\
    \ 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestEvenIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n\
    \                smallestEven = arr[i];\n                smallestEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n    \
    \    result[0] = smallestEven;\n        result[1] = smallestEvenIndex;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3vh04_zw.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x428765]

    ??:? void tmp3vh04_zw.__unittest_L55_C1() [0x4280d1]

    ??:? void tmp3vh04_zw.__modtest() [0x4284e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b656]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430775]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]

    ??:? runModuleUnitTests [0x42c599]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c28]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgwgqngpi.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpgwgqngpi.__unittest_L49_C1() [0x4280aa]

    ??:? void tmpgwgqngpi.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw1tirie3.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmpw1tirie3.__unittest_L48_C1() [0x428089]

    ??:? void tmpw1tirie3.__modtest() [0x42849c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long[]\
    \ result = [arr[0], 0];\n    foreach (i, v; arr)\n    {\n        if (v % 2 ==\
    \ 0 && v < result[0])\n        {\n            result[0] = v;\n            result[1]\
    \ = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n        return [];\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxghbtdyt.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x428765]

    ??:? void tmpxghbtdyt.__unittest_L47_C1() [0x4280d5]

    ??:? void tmpxghbtdyt.__modtest() [0x4284e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b656]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430775]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]

    ??:? runModuleUnitTests [0x42c599]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c28]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long[]\
    \ result = new long[2];\n    long min = arr[0];\n    long minIndex = 0;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp93qmy3uz.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x428755]

    ??:? void tmp93qmy3uz.__unittest_L51_C1() [0x4280c5]

    ??:? void tmp93qmy3uz.__modtest() [0x4284d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c80f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43092d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ddc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b679]

    ??:? runModuleUnitTests [0x42c5e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c18]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg0_ic3rp.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpg0_ic3rp.__unittest_L48_C1() [0x428049]

    ??:? void tmpg0_ic3rp.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            index = i;\n     \
    \   }\n    }\n    if (index == -1) return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgwgqngpi.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpgwgqngpi.__unittest_L49_C1() [0x4280aa]

    ??:? void tmpgwgqngpi.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = long.max;\n    long index = 0;\n    for (long i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n    \
    \    {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    \n    if (min == long.max)\n        return new long[0];\n    \n    return\
    \ new long[] { min, index };\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnegtym5z.d(49): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpnegtym5z.d(49): Error: found `}` when expecting `;` following statement

    /tmp/tmpnegtym5z.d(49): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnegtym5z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164226
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp32stsui0.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp32stsui0.__unittest_L52_C1() [0x4280b9]

    ??:? void tmp32stsui0.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min &&\
    \ v % 2 == 0)\n        {\n            min = v;\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        return [min, minIndex];\n\
    \    }\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6yjw5q2f.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp6yjw5q2f.__unittest_L49_C1() [0x428049]

    ??:? void tmp6yjw5q2f.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]

    ??:? void tmp3czr_d4d.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    \n    if (min == long.max)\n  \
    \      return new long[0];\n    \n    return [min, index];\n}\nunittest\n{\n \
    \   alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return [];\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]

    ??:? void tmp3czr_d4d.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]

    ??:? void tmp73pvjwmw.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n    {\n     \
    \   return result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp19cp22ko.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmp19cp22ko.__unittest_L51_C1() [0x4280f2]

    ??:? void tmp19cp22ko.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430889]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c5b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0\
    \ && e < min)\n        {\n            min = e;\n            index = i;\n     \
    \   }\n    }\n    if (index == -1) return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0\
    \ && e < min)\n        {\n            min = e;\n            index = i;\n     \
    \   }\n    }\n    if (index == -1) return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaauy_sym.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmpaauy_sym.__unittest_L50_C1() [0x42809e]

    ??:? void tmpaauy_sym.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return [];\n    return [min, index];\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]

    ??:? void tmp73pvjwmw.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvaij9upc.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpvaij9upc.__unittest_L49_C1() [0x4280aa]

    ??:? void tmpvaij9upc.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0, 0];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    long index = 0;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            index = i;\n     \
    \   }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n       \
    \ result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp29pvyub3.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x428765]

    ??:? void tmp29pvyub3.__unittest_L52_C1() [0x4280d1]

    ??:? void tmp29pvyub3.__modtest() [0x4284e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b656]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430775]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]

    ??:? runModuleUnitTests [0x42c599]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c28]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n     \
    \   if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return\
    \ [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]

    ??:? void tmp73pvjwmw.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min == long.max)\n    {\n \
    \       return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp8cyw8il.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpp8cyw8il.__unittest_L51_C1() [0x428102]

    ??:? void tmpp8cyw8il.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b682]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b659]

    ??:? runModuleUnitTests [0x42c5c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return [];\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp3v3zfcq6.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < minEven)\n        {\n            minEven\
    \ = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl6xxixe9.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpl6xxixe9.__unittest_L49_C1() [0x4280b2]

    ??:? void tmpl6xxixe9.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]

    ??:? void tmpm7_qirry.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach (i, e; arr)\n    {\n     \
    \   if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return\
    \ [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min == long.max)\n    {\n \
    \       return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp8cyw8il.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpp8cyw8il.__unittest_L51_C1() [0x428102]

    ??:? void tmpp8cyw8il.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b682]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b659]

    ??:? runModuleUnitTests [0x42c5c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ smallestEven = arr[0];\n    long smallestEvenIndex = 0;\n    foreach (i, val;\
    \ arr)\n    {\n        if (val % 2 == 0 && val < smallestEven)\n        {\n  \
    \          smallestEven = val;\n            smallestEvenIndex = i;\n        }\n\
    \    }\n    if (smallestEven % 2 == 0)\n        return [smallestEven, smallestEvenIndex];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp8rnbx9k.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpp8rnbx9k.__unittest_L48_C1() [0x428049]

    ??:? void tmpp8rnbx9k.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9hqrb40t.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp9hqrb40t.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp9hqrb40t.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv7cakj4w.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpv7cakj4w.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpv7cakj4w.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7cakj4w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    long min = long.max;\n    for (int i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            result[0] = min;\n        \
    \    result[1] = i;\n        }\n    }\n    if (min == long.max)\n        return\
    \ new long[0];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfe471ve_.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpfe471ve_.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpfe471ve_.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe471ve_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp3v3zfcq6.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) \n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\
    \ \n    {\n        if (arr[i] < min && arr[i] % 2 == 0) \n        {\n        \
    \    min = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2\
    \ == 0) \n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpds9j4ye6.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmpds9j4ye6.__unittest_L48_C1() [0x428091]

    ??:? void tmpds9j4ye6.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsddkr7ep.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpsddkr7ep.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpsddkr7ep.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsddkr7ep.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < minEven)\n        {\n            minEven\
    \ = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1iaf5mcy.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmp1iaf5mcy.__unittest_L49_C1() [0x4280f2]

    ??:? void tmp1iaf5mcy.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430889]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c5b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvaij9upc.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpvaij9upc.__unittest_L49_C1() [0x4280aa]

    ??:? void tmpvaij9upc.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd5pft7nq.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpd5pft7nq.__unittest_L52_C1() [0x4280bd]

    ??:? void tmpd5pft7nq.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = long.max;\n    long minEvenIndex = long.max;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < minEven)\n\
    \        {\n            minEven = arr[i];\n            minEvenIndex = i;\n   \
    \     }\n    }\n    if (minEven == long.max)\n        return [];\n    return [minEven,\
    \ minEvenIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy0vllkwh.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpy0vllkwh.__unittest_L48_C1() [0x428049]

    ??:? void tmpy0vllkwh.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = long.max;\n    long minIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    \n    if (min == long.max)\n\
    \        return new long[0];\n    \n    return [min, minIndex];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]

    ??:? void tmpm7_qirry.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptd0j4p0u.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmptd0j4p0u.__unittest_L52_C1() [0x42806d]

    ??:? void tmptd0j4p0u.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    int index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprm1s41dr.d(40): Error: cannot implicitly convert expression `i`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprm1s41dr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    result[0] = long.max;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < result[0])\n        {\n      \
    \      result[0] = v;\n            result[1] = i;\n        }\n    }\n    if (result[0]\
    \ == long.max)\n        return new long[0];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = arr[0];\n    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < minEven)\n            {\n                minEven = arr[i];\n             \
    \   minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven % 2 ==\
    \ 0)\n        return [minEven, minEvenIndex];\n    return [];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0kgq4sv5.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmp0kgq4sv5.__unittest_L51_C1() [0x428099]

    ??:? void tmp0kgq4sv5.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcco96zr9.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpcco96zr9.__unittest_L52_C1() [0x4280b9]

    ??:? void tmpcco96zr9.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] res = new long[2];\n    if (arr.length ==\
    \ 0) return res;\n    long min = arr[0];\n    long idx = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            idx = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n\
    \        res[0] = min;\n        res[1] = idx;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6g58zaq4.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp6g58zaq4.__unittest_L51_C1() [0x42806d]

    ??:? void tmp6g58zaq4.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long minIndex = long.max;\n    foreach(i, v; arr)\n    {\n        if(v %\
    \ 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex =\
    \ i;\n        }\n    }\n    if(min == long.max)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk07qmarz.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpk07qmarz.__unittest_L49_C1() [0x4280ae]

    ??:? void tmpk07qmarz.__modtest() [0x428460]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = long.max;\n    long minIndex = -1;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    \n    if (minIndex == -1)\n        return new long[0];\n    \n   \
    \ return [min, minIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaauy_sym.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmpaauy_sym.__unittest_L50_C1() [0x42809e]

    ??:? void tmpaauy_sym.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            result[0] = min;\n            result[1] = i;\n\
    \        }\n    }\n    if (min == long.max) return new long[0];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr) \n    {\n        if (v % 2 == 0\
    \ && v < min) \n        {\n            min = v;\n            index = i;\n    \
    \    }\n    }\n    if (min % 2 == 0) return [min, index];\n    return [];\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_rljc0j5.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp_rljc0j5.__unittest_L46_C1() [0x428049]

    ??:? void tmp_rljc0j5.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp3v3zfcq6.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9litcs45.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmp9litcs45.__unittest_L48_C1() [0x428091]

    ??:? void tmp9litcs45.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjtx4316r.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpjtx4316r.__unittest_L48_C1() [0x428099]

    ??:? void tmpjtx4316r.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long minIndex = -1;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (minIndex == -1)\n      \
    \  return new long[0];\n    return [min, minIndex];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    long count = 0;\n    foreach (i, e;\
    \ arr)\n    {\n        if (e % 2 == 0)\n        {\n            if (e < min)\n\
    \            {\n                min = e;\n                index = i;\n       \
    \         count = 1;\n            }\n            else if (e == min)\n        \
    \    {\n                count++;\n            }\n        }\n    }\n    if (count\
    \ == 0)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqqicmy_j.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpqqicmy_j.__unittest_L57_C1() [0x428051]

    ??:? void tmpqqicmy_j.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c743]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430769]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c18]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]

    ??:? runModuleUnitTests [0x42c519]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [0L, 0L];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [0L, 0L];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwn1ijgqg.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x428745]

    ??:? void tmpwn1ijgqg.__unittest_L48_C1() [0x4280b5]

    ??:? void tmpwn1ijgqg.__modtest() [0x4284c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b636]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430755]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b60d]

    ??:? runModuleUnitTests [0x42c579]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    \n\
    \    long[] result = [arr[0], 0];\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < result[0])\n        {\n            result[0] = v;\n     \
    \       result[1] = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n      \
    \  return [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0lsx5ak5.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x428765]

    ??:? void tmp0lsx5ak5.__unittest_L48_C1() [0x4280d5]

    ??:? void tmp0lsx5ak5.__modtest() [0x4284e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b656]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430775]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]

    ??:? runModuleUnitTests [0x42c599]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c28]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp3v3zfcq6.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsmnm1jj5.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpsmnm1jj5.__unittest_L52_C1() [0x4280b9]

    ??:? void tmpsmnm1jj5.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]

    ??:? void tmp3czr_d4d.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, value; arr)\n    {\n\
    \        if (value % 2 == 0 && value < min)\n        {\n            min = value;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp00lnum2g.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp00lnum2g.__unittest_L48_C1() [0x428049]

    ??:? void tmp00lnum2g.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]

    ??:? void tmp73pvjwmw.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n     \
    \   if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min == long.max) return new long[0];\n    return\
    \ [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    auto\
    \ min = arr[0];\n    auto minIndex = 0;\n    foreach (index, value; arr)\n   \
    \ {\n        if (value % 2 == 0 && value < min)\n        {\n            min =\
    \ value;\n            minIndex = index;\n        }\n    }\n    if (min % 2 ==\
    \ 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlvvje0b.d(41): Error: cannot implicitly convert expression `index`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlvvje0b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n\
    \                smallestEven = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n    \
    \    result[0] = smallestEven;\n        result[1] = smallestIndex;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw71h4uz8.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpw71h4uz8.__unittest_L55_C1() [0x4280bd]

    ??:? void tmpw71h4uz8.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 ==\
    \ 0 && v < min)\n        {\n            min = v;\n            index = i;\n   \
    \     }\n    }\n    if(min == long.max)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk76_uibg.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpk76_uibg.__unittest_L49_C1() [0x4280ae]

    ??:? void tmpk76_uibg.__modtest() [0x428460]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]

    ??:? void tmp3czr_d4d.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v < min && v % 2 == 0)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        return\
    \ [min, minIndex];\n    }\n    return new long[0];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjyq3ie7n.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmpjyq3ie7n.__unittest_L49_C1() [0x42803d]

    ??:? void tmpjyq3ie7n.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]

    ??:? void tmpm7_qirry.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] res = new long[2];\n    long min = long.max;\n    long minIndex\
    \ = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    \n    if (min == long.max)\n        return new long[0];\n    \n    res[0]\
    \ = min;\n    res[1] = minIndex;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long minEven = long.max;\n    long minEvenIndex = -1;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    \n    if (minEvenIndex == -1)\n        return new\
    \ long[0];\n    \n    return [minEven, minEvenIndex];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    long index = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkt931_2d.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpkt931_2d.__unittest_L51_C1() [0x4280bd]

    ??:? void tmpkt931_2d.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return new long[0];\n    result[0] =\
    \ min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp3v3zfcq6.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp3v3zfcq6.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long minIndex = long.max;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (min == long.max)\n     \
    \   return new long[0];\n    return [min, minIndex];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfe471ve_.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpfe471ve_.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpfe471ve_.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe471ve_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long minEven = -1;\n    long minIndex = -1;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n\
    \        {\n            if (minEven == -1)\n            {\n                minEven\
    \ = arr[i];\n                minIndex = i;\n            }\n            else\n\
    \            {\n                if (arr[i] < minEven)\n                {\n   \
    \                 minEven = arr[i];\n                    minIndex = i;\n     \
    \           }\n            }\n        }\n    }\n    if (minEven != -1)\n    {\n\
    \        result[0] = minEven;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwa20p9xv.d(69): unittest failure

    ----------------

    ??:? _d_unittestp [0x428765]

    ??:? void tmpwa20p9xv.__unittest_L63_C1() [0x428136]

    ??:? void tmpwa20p9xv.__modtest() [0x4284e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c81f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43093d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b689]

    ??:? runModuleUnitTests [0x42c5f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c28]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92anql3p.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp92anql3p.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmp92anql3p.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92anql3p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[2];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return new long[2];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiw31h7lq.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286d5]

    ??:? void tmpiw31h7lq.__unittest_L48_C1() [0x428045]

    ??:? void tmpiw31h7lq.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b622]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430839]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]

    ??:? runModuleUnitTests [0x42c565]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcco96zr9.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpcco96zr9.__unittest_L52_C1() [0x4280b9]

    ??:? void tmpcco96zr9.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = long.max;\n    long minEvenIndex = 0;\n    foreach (i, e; arr)\n \
    \   {\n        if (e % 2 == 0 && e < minEven)\n        {\n            minEven\
    \ = e;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]

    ??:? void tmp3czr_d4d.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long smallestEven\
    \ = long.max;\n    long smallestEvenIndex = long.max;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven)\n\
    \        {\n            smallestEven = arr[i];\n            smallestEvenIndex\
    \ = i;\n        }\n    }\n    if (smallestEven == long.max)\n    {\n        return\
    \ result;\n    }\n    result[0] = smallestEven;\n    result[1] = smallestEvenIndex;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmmqx3gw6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpmmqx3gw6.__unittest_L51_C1() [0x428102]

    ??:? void tmpmmqx3gw6.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b682]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b659]

    ??:? runModuleUnitTests [0x42c5c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    bool hasEven = false;\n \
    \   foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n         \
    \   hasEven = true;\n            if (v < min)\n            {\n               \
    \ min = v;\n                minIndex = i;\n            }\n        }\n    }\n \
    \   if (hasEven)\n        return [min, minIndex];\n    return new long[0];\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp19cprvb5.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp19cprvb5.__unittest_L53_C1() [0x428039]

    ??:? void tmp19cprvb5.__modtest() [0x42844c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]

    ??:? void tmp73pvjwmw.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ smallestEven = arr[0];\n    long smallestEvenIndex = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < smallestEven)\n        {\n      \
    \      smallestEven = v;\n            smallestEvenIndex = i;\n        }\n    }\n\
    \    if (smallestEven % 2 == 0)\n        return [smallestEven, smallestEvenIndex];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvp9ullv7.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpvp9ullv7.__unittest_L48_C1() [0x428049]

    ??:? void tmpvp9ullv7.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmvtz7s3l.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpmvtz7s3l.__unittest_L52_C1() [0x4280bd]

    ??:? void tmpmvtz7s3l.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg0_ic3rp.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpg0_ic3rp.__unittest_L48_C1() [0x428049]

    ??:? void tmpg0_ic3rp.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9litcs45.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmp9litcs45.__unittest_L48_C1() [0x428091]

    ??:? void tmp9litcs45.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1iaf5mcy.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmp1iaf5mcy.__unittest_L49_C1() [0x4280f2]

    ??:? void tmp1iaf5mcy.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430889]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c5b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaauy_sym.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmpaauy_sym.__unittest_L50_C1() [0x42809e]

    ??:? void tmpaauy_sym.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    foreach (i, v; arr)\n \
    \   {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           result[0] = v;\n            result[1] = i;\n        }\n    }\n   \
    \ if (min == long.max) return new long[0];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpscl69hm0.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmpscl69hm0.__unittest_L48_C1() [0x428091]

    ??:? void tmpscl69hm0.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    \n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    \n    if (index == -1)\n        return\
    \ [];\n    \n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    else\n        return\
    \ new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4p6f_zm_.d(46): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp4p6f_zm_.d(46): Error: found `}` when expecting `;` following statement

    /tmp/tmp4p6f_zm_.d(46): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp4p6f_zm_.d(47): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4p6f_zm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd5pft7nq.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpd5pft7nq.__unittest_L52_C1() [0x4280bd]

    ??:? void tmpd5pft7nq.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92anql3p.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp92anql3p.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmp92anql3p.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92anql3p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] res = new long[2];\n    long min = long.max;\n    long minIndex\
    \ = long.max;\n    long index = 0;\n    foreach (e; arr)\n    {\n        if (e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            minIndex\
    \ = index;\n        }\n        index++;\n    }\n    if (min == long.max)\n   \
    \     return new long[0];\n    res[0] = min;\n    res[1] = minIndex;\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    \n\
    \    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    \n    if (min == long.max)\n        return\
    \ [];\n    \n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return ret;\n    ret[0] = min;\n    ret[1]\
    \ = index;\n    return ret;\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp765wozc.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpp765wozc.__unittest_L49_C1() [0x4280aa]

    ??:? void tmpp765wozc.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]

    ??:? void tmpm7_qirry.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]

    ??:? void tmpm7_qirry.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    int index = 0;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0xrw6x2k.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp0xrw6x2k.__unittest_L51_C1() [0x4280b9]

    ??:? void tmp0xrw6x2k.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    bool found = false;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0)\n        {\n            if (!found)\n\
    \            {\n                min = v;\n                index = i;\n       \
    \         found = true;\n            }\n            else\n            {\n    \
    \            if (v < min)\n                {\n                    min = v;\n \
    \                   index = i;\n                }\n            }\n        }\n\
    \    }\n    if (found)\n        return [min, index];\n    return [];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp63mdyjxo.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x428705]

    ??:? void tmp63mdyjxo.__unittest_L52_C1() [0x428075]

    ??:? void tmp63mdyjxo.__modtest() [0x428488]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b652]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d8c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430869]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b629]

    ??:? runModuleUnitTests [0x42c595]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = long.max;\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min == long.max)\
    \ return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long smallest = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < smallest && arr[i] % 2 == 0)\n        {\n\
    \            smallest = arr[i];\n            index = i;\n        }\n    }\n  \
    \  if (smallest % 2 == 0)\n        return new long[] { smallest, index };\n  \
    \  return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1zq2p2u.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpa1zq2p2u.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpa1zq2p2u.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1zq2p2u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1nf7dg9j.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp1nf7dg9j.__unittest_L50_C1() [0x42809e]

    ??:? void tmp1nf7dg9j.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n       \
    \     if (arr[i] < min)\n            {\n                min = arr[i];\n      \
    \          result[0] = min;\n                result[1] = i;\n            }\n \
    \       }\n    }\n    if (min % 2 != 0)\n        return result;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1yhozc4u.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x428755]

    ??:? void tmp1yhozc4u.__unittest_L52_C1() [0x4280c1]

    ??:? void tmp1yhozc4u.__modtest() [0x4284d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c80f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43092d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ddc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b679]

    ??:? runModuleUnitTests [0x42c5e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c18]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long minIndex = long.max;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min == long.max)\n        return new long[0];\n    return [min,\
    \ minIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]

    ??:? void tmp73pvjwmw.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    result[0] = long.max;\n    result[1] =\
    \ long.max;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < result[0])\n\
    \        {\n            result[0] = e;\n            result[1] = i;\n        }\n\
    \    }\n    if (result[0] == long.max)\n        return new long[0];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3czr_d4d.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp3czr_d4d.__unittest_L48_C1() [0x42803d]

    ??:? void tmp3czr_d4d.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] res = new long[2];\n    res[0] = long.max;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < res[0])\n        {\n            res[0] =\
    \ v;\n            res[1] = i;\n        }\n    }\n    if (res[0] == long.max)\n\
    \        return new long[0];\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfe471ve_.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpfe471ve_.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpfe471ve_.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe471ve_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]

    ??:? void tmpm7_qirry.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd5pft7nq.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpd5pft7nq.__unittest_L52_C1() [0x4280bd]

    ??:? void tmpd5pft7nq.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1f67mchb.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp1f67mchb.__unittest_L52_C1() [0x4280b9]

    ??:? void tmp1f67mchb.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp32stsui0.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp32stsui0.__unittest_L52_C1() [0x4280b9]

    ??:? void tmp32stsui0.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp3v3zfcq6.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] res = new long[2];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n         \
    \       min = arr[i];\n                minIndex = i;\n            }\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] =\
    \ minIndex;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppw6e9la1.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x428755]

    ??:? void tmppw6e9la1.__unittest_L56_C1() [0x4280c5]

    ??:? void tmppw6e9la1.__modtest() [0x4284d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c80f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43092d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ddc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b679]

    ??:? runModuleUnitTests [0x42c5e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c18]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjtx4316r.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpjtx4316r.__unittest_L48_C1() [0x428099]

    ??:? void tmpjtx4316r.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptd0j4p0u.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmptd0j4p0u.__unittest_L52_C1() [0x42806d]

    ??:? void tmptd0j4p0u.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0, 0];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min != long.max)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp2bdk061.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpp2bdk061.__unittest_L50_C1() [0x4280ae]

    ??:? void tmpp2bdk061.__modtest() [0x428460]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn8mlqv33.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpn8mlqv33.__unittest_L48_C1() [0x428099]

    ??:? void tmpn8mlqv33.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n     \
    \   if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return\
    \ [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv7cakj4w.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpv7cakj4w.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpv7cakj4w.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7cakj4w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1f67mchb.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp1f67mchb.__unittest_L52_C1() [0x4280b9]

    ??:? void tmp1f67mchb.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl6xxixe9.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpl6xxixe9.__unittest_L49_C1() [0x4280b2]

    ??:? void tmpl6xxixe9.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        return\
    \ [min, minIndex];\n    }\n    return new long[0];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7ckruh6t.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp7ckruh6t.__unittest_L49_C1() [0x42803d]

    ??:? void tmp7ckruh6t.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max)\n        return new\
    \ long[0];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1) return new long[0];\n    return [min, index];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        ret[0] = min;\n        ret[1] = index;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpad06sm9z.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmpad06sm9z.__unittest_L50_C1() [0x42809e]

    ??:? void tmpad06sm9z.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3v3zfcq6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3v3zfcq6.__unittest_L52_C1() [0x4280bd]

    ??:? void tmp3v3zfcq6.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy0vllkwh.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpy0vllkwh.__unittest_L48_C1() [0x428049]

    ??:? void tmpy0vllkwh.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return [];\n    return [min, index];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]

    ??:? void tmp73pvjwmw.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]

    ??:? void tmpm7_qirry.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, value; arr)\n    {\n\
    \        if (value % 2 == 0 && value < min)\n        {\n            min = value;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp00lnum2g.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp00lnum2g.__unittest_L48_C1() [0x428049]

    ??:? void tmp00lnum2g.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1nf7dg9j.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp1nf7dg9j.__unittest_L50_C1() [0x42809e]

    ??:? void tmp1nf7dg9j.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg0_ic3rp.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpg0_ic3rp.__unittest_L48_C1() [0x428049]

    ??:? void tmpg0_ic3rp.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptd0j4p0u.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmptd0j4p0u.__unittest_L52_C1() [0x42806d]

    ??:? void tmptd0j4p0u.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long minIndex = long.max;\n    for (int i = 0; i < arr.length; i++)\n   \
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min == long.max)\n\
    \    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = minIndex;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqyjfsptr.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpqyjfsptr.__unittest_L51_C1() [0x4280fe]

    ??:? void tmpqyjfsptr.__modtest() [0x4284b0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b67a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430905]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430db4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430891]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]

    ??:? runModuleUnitTests [0x42c5bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] result = new long[2];\n    long minEven = long.max;\n    long\
    \ minEvenIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n            minEven\
    \ = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    \n    if (minEven\
    \ == long.max)\n        return new long[0];\n    \n    result[0] = minEven;\n\
    \    result[1] = minEvenIndex;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqaeyz7aj.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmpqaeyz7aj.__unittest_L48_C1() [0x42803d]

    ??:? void tmpqaeyz7aj.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestEvenIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n\
    \                smallestEven = arr[i];\n                smallestEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n    \
    \    result[0] = smallestEven;\n        result[1] = smallestEvenIndex;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc_8s6j3b.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpc_8s6j3b.__unittest_L55_C1() [0x4280bd]

    ??:? void tmpc_8s6j3b.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = [0, 0];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return [];\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfe471ve_.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpfe471ve_.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpfe471ve_.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe471ve_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        return new long[] { min, minIndex };\n    }\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnpuh9abz.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpnpuh9abz.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpnpuh9abz.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnpuh9abz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7_qirry.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpm7_qirry.__unittest_L48_C1() [0x428049]

    ??:? void tmpm7_qirry.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9to4_he1.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp9to4_he1.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmp9to4_he1.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9to4_he1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92anql3p.d(45): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp92anql3p.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmp92anql3p.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92anql3p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n  \
    \      {\n            min = arr[i];\n            minIndex = i;\n        }\n  \
    \  }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n  \
    \  else\n        return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx6fyt3i1.d(46): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpx6fyt3i1.d(46): Error: found `}` when expecting `;` following statement

    /tmp/tmpx6fyt3i1.d(46): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpx6fyt3i1.d(47): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6fyt3i1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]

    ??:? void tmp73pvjwmw.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v < min && v % 2 == 0)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiaf92n6r.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpiaf92n6r.__unittest_L48_C1() [0x428049]

    ??:? void tmpiaf92n6r.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73pvjwmw.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp73pvjwmw.__unittest_L48_C1() [0x428049]

    ??:? void tmp73pvjwmw.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkax58xan.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpkax58xan.__unittest_L49_C1() [0x4280b2]

    ??:? void tmpkax58xan.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n        Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 3:\n        \n    Example 4:\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                 so we will\
    \ choose the first zero, which has the smallest index.\n\n    Constraints:\n \
    \       * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
    \ pluck(long[] arr) \n{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1f67mchb.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp1f67mchb.__unittest_L52_C1() [0x4280b9]

    ??:? void tmp1f67mchb.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
